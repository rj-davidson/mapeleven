// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/ent/birth"
	"mapeleven/ent/country"
	"mapeleven/ent/player"
	"mapeleven/ent/predicate"
	"mapeleven/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlayerUpdate) SetName(s string) *PlayerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetFirstname sets the "firstname" field.
func (pu *PlayerUpdate) SetFirstname(s string) *PlayerUpdate {
	pu.mutation.SetFirstname(s)
	return pu
}

// SetLastname sets the "lastname" field.
func (pu *PlayerUpdate) SetLastname(s string) *PlayerUpdate {
	pu.mutation.SetLastname(s)
	return pu
}

// SetAge sets the "age" field.
func (pu *PlayerUpdate) SetAge(i int) *PlayerUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// AddAge adds i to the "age" field.
func (pu *PlayerUpdate) AddAge(i int) *PlayerUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetHeight sets the "height" field.
func (pu *PlayerUpdate) SetHeight(f float64) *PlayerUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(f)
	return pu
}

// AddHeight adds f to the "height" field.
func (pu *PlayerUpdate) AddHeight(f float64) *PlayerUpdate {
	pu.mutation.AddHeight(f)
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PlayerUpdate) SetWeight(f float64) *PlayerUpdate {
	pu.mutation.ResetWeight()
	pu.mutation.SetWeight(f)
	return pu
}

// AddWeight adds f to the "weight" field.
func (pu *PlayerUpdate) AddWeight(f float64) *PlayerUpdate {
	pu.mutation.AddWeight(f)
	return pu
}

// SetInjured sets the "injured" field.
func (pu *PlayerUpdate) SetInjured(b bool) *PlayerUpdate {
	pu.mutation.SetInjured(b)
	return pu
}

// SetPhoto sets the "photo" field.
func (pu *PlayerUpdate) SetPhoto(s string) *PlayerUpdate {
	pu.mutation.SetPhoto(s)
	return pu
}

// SetBirthID sets the "birth" edge to the Birth entity by ID.
func (pu *PlayerUpdate) SetBirthID(id int) *PlayerUpdate {
	pu.mutation.SetBirthID(id)
	return pu
}

// SetNillableBirthID sets the "birth" edge to the Birth entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableBirthID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetBirthID(*id)
	}
	return pu
}

// SetBirth sets the "birth" edge to the Birth entity.
func (pu *PlayerUpdate) SetBirth(b *Birth) *PlayerUpdate {
	return pu.SetBirthID(b.ID)
}

// AddNationalityIDs adds the "nationality" edge to the Country entity by IDs.
func (pu *PlayerUpdate) AddNationalityIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddNationalityIDs(ids...)
	return pu
}

// AddNationality adds the "nationality" edges to the Country entity.
func (pu *PlayerUpdate) AddNationality(c ...*Country) *PlayerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddNationalityIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (pu *PlayerUpdate) AddTeamIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddTeamIDs(ids...)
	return pu
}

// AddTeams adds the "teams" edges to the Team entity.
func (pu *PlayerUpdate) AddTeams(t ...*Team) *PlayerUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTeamIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// ClearBirth clears the "birth" edge to the Birth entity.
func (pu *PlayerUpdate) ClearBirth() *PlayerUpdate {
	pu.mutation.ClearBirth()
	return pu
}

// ClearNationality clears all "nationality" edges to the Country entity.
func (pu *PlayerUpdate) ClearNationality() *PlayerUpdate {
	pu.mutation.ClearNationality()
	return pu
}

// RemoveNationalityIDs removes the "nationality" edge to Country entities by IDs.
func (pu *PlayerUpdate) RemoveNationalityIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveNationalityIDs(ids...)
	return pu
}

// RemoveNationality removes "nationality" edges to Country entities.
func (pu *PlayerUpdate) RemoveNationality(c ...*Country) *PlayerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveNationalityIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (pu *PlayerUpdate) ClearTeams() *PlayerUpdate {
	pu.mutation.ClearTeams()
	return pu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (pu *PlayerUpdate) RemoveTeamIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveTeamIDs(ids...)
	return pu
}

// RemoveTeams removes "teams" edges to Team entities.
func (pu *PlayerUpdate) RemoveTeams(t ...*Team) *PlayerUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PlayerMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Firstname(); ok {
		_spec.SetField(player.FieldFirstname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Lastname(); ok {
		_spec.SetField(player.FieldLastname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.SetField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.AddField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.SetField(player.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.AddField(player.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.SetField(player.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedWeight(); ok {
		_spec.AddField(player.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Injured(); ok {
		_spec.SetField(player.FieldInjured, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Photo(); ok {
		_spec.SetField(player.FieldPhoto, field.TypeString, value)
	}
	if pu.mutation.BirthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BirthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNationalityIDs(); len(nodes) > 0 && !pu.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NationalityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   player.TeamsTable,
			Columns: player.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !pu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   player.TeamsTable,
			Columns: player.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   player.TeamsTable,
			Columns: player.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMutation
}

// SetName sets the "name" field.
func (puo *PlayerUpdateOne) SetName(s string) *PlayerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetFirstname sets the "firstname" field.
func (puo *PlayerUpdateOne) SetFirstname(s string) *PlayerUpdateOne {
	puo.mutation.SetFirstname(s)
	return puo
}

// SetLastname sets the "lastname" field.
func (puo *PlayerUpdateOne) SetLastname(s string) *PlayerUpdateOne {
	puo.mutation.SetLastname(s)
	return puo
}

// SetAge sets the "age" field.
func (puo *PlayerUpdateOne) SetAge(i int) *PlayerUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// AddAge adds i to the "age" field.
func (puo *PlayerUpdateOne) AddAge(i int) *PlayerUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetHeight sets the "height" field.
func (puo *PlayerUpdateOne) SetHeight(f float64) *PlayerUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(f)
	return puo
}

// AddHeight adds f to the "height" field.
func (puo *PlayerUpdateOne) AddHeight(f float64) *PlayerUpdateOne {
	puo.mutation.AddHeight(f)
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PlayerUpdateOne) SetWeight(f float64) *PlayerUpdateOne {
	puo.mutation.ResetWeight()
	puo.mutation.SetWeight(f)
	return puo
}

// AddWeight adds f to the "weight" field.
func (puo *PlayerUpdateOne) AddWeight(f float64) *PlayerUpdateOne {
	puo.mutation.AddWeight(f)
	return puo
}

// SetInjured sets the "injured" field.
func (puo *PlayerUpdateOne) SetInjured(b bool) *PlayerUpdateOne {
	puo.mutation.SetInjured(b)
	return puo
}

// SetPhoto sets the "photo" field.
func (puo *PlayerUpdateOne) SetPhoto(s string) *PlayerUpdateOne {
	puo.mutation.SetPhoto(s)
	return puo
}

// SetBirthID sets the "birth" edge to the Birth entity by ID.
func (puo *PlayerUpdateOne) SetBirthID(id int) *PlayerUpdateOne {
	puo.mutation.SetBirthID(id)
	return puo
}

// SetNillableBirthID sets the "birth" edge to the Birth entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableBirthID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetBirthID(*id)
	}
	return puo
}

// SetBirth sets the "birth" edge to the Birth entity.
func (puo *PlayerUpdateOne) SetBirth(b *Birth) *PlayerUpdateOne {
	return puo.SetBirthID(b.ID)
}

// AddNationalityIDs adds the "nationality" edge to the Country entity by IDs.
func (puo *PlayerUpdateOne) AddNationalityIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddNationalityIDs(ids...)
	return puo
}

// AddNationality adds the "nationality" edges to the Country entity.
func (puo *PlayerUpdateOne) AddNationality(c ...*Country) *PlayerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddNationalityIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (puo *PlayerUpdateOne) AddTeamIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddTeamIDs(ids...)
	return puo
}

// AddTeams adds the "teams" edges to the Team entity.
func (puo *PlayerUpdateOne) AddTeams(t ...*Team) *PlayerUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTeamIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// ClearBirth clears the "birth" edge to the Birth entity.
func (puo *PlayerUpdateOne) ClearBirth() *PlayerUpdateOne {
	puo.mutation.ClearBirth()
	return puo
}

// ClearNationality clears all "nationality" edges to the Country entity.
func (puo *PlayerUpdateOne) ClearNationality() *PlayerUpdateOne {
	puo.mutation.ClearNationality()
	return puo
}

// RemoveNationalityIDs removes the "nationality" edge to Country entities by IDs.
func (puo *PlayerUpdateOne) RemoveNationalityIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveNationalityIDs(ids...)
	return puo
}

// RemoveNationality removes "nationality" edges to Country entities.
func (puo *PlayerUpdateOne) RemoveNationality(c ...*Country) *PlayerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveNationalityIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (puo *PlayerUpdateOne) ClearTeams() *PlayerUpdateOne {
	puo.mutation.ClearTeams()
	return puo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (puo *PlayerUpdateOne) RemoveTeamIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveTeamIDs(ids...)
	return puo
}

// RemoveTeams removes "teams" edges to Team entities.
func (puo *PlayerUpdateOne) RemoveTeams(t ...*Team) *PlayerUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	return withHooks[*Player, PlayerMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Firstname(); ok {
		_spec.SetField(player.FieldFirstname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Lastname(); ok {
		_spec.SetField(player.FieldLastname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.SetField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.AddField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.SetField(player.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.AddField(player.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.SetField(player.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedWeight(); ok {
		_spec.AddField(player.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Injured(); ok {
		_spec.SetField(player.FieldInjured, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Photo(); ok {
		_spec.SetField(player.FieldPhoto, field.TypeString, value)
	}
	if puo.mutation.BirthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BirthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNationalityIDs(); len(nodes) > 0 && !puo.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NationalityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   player.TeamsTable,
			Columns: player.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !puo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   player.TeamsTable,
			Columns: player.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   player.TeamsTable,
			Columns: player.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
