// Code generated by ent, DO NOT EDIT.

package standings

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the standings type in the database.
	Label = "standings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeLeague holds the string denoting the league edge name in mutations.
	EdgeLeague = "league"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the standings in the database.
	Table = "standings"
	// LeagueTable is the table that holds the league relation/edge.
	LeagueTable = "standings"
	// LeagueInverseTable is the table name for the League entity.
	// It exists in this package in order to avoid circular dependency with the "league" package.
	LeagueInverseTable = "leagues"
	// LeagueColumn is the table column denoting the league relation/edge.
	LeagueColumn = "league_standings"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "standings"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_standings"
)

// Columns holds all SQL columns for standings fields.
var Columns = []string{
	FieldID,
	FieldRank,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "standings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"league_standings",
	"team_standings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Standings queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLeagueField orders the results by league field.
func ByLeagueField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeagueStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}
func newLeagueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeagueInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LeagueTable, LeagueColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
