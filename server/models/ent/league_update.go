// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/models/ent/country"
	"mapeleven/models/ent/league"
	"mapeleven/models/ent/predicate"
	"mapeleven/models/ent/season"
	"mapeleven/models/ent/standings"
	"mapeleven/models/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeagueUpdate is the builder for updating League entities.
type LeagueUpdate struct {
	config
	hooks    []Hook
	mutation *LeagueMutation
}

// Where appends a list predicates to the LeagueUpdate builder.
func (lu *LeagueUpdate) Where(ps ...predicate.League) *LeagueUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LeagueUpdate) SetName(s string) *LeagueUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetType sets the "type" field.
func (lu *LeagueUpdate) SetType(l league.Type) *LeagueUpdate {
	lu.mutation.SetType(l)
	return lu
}

// SetLogo sets the "logo" field.
func (lu *LeagueUpdate) SetLogo(s string) *LeagueUpdate {
	lu.mutation.SetLogo(s)
	return lu
}

// AddSeasonIDs adds the "seasons" edge to the Season entity by IDs.
func (lu *LeagueUpdate) AddSeasonIDs(ids ...int) *LeagueUpdate {
	lu.mutation.AddSeasonIDs(ids...)
	return lu
}

// AddSeasons adds the "seasons" edges to the Season entity.
func (lu *LeagueUpdate) AddSeasons(s ...*Season) *LeagueUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.AddSeasonIDs(ids...)
}

// AddStandingIDs adds the "standings" edge to the Standings entity by IDs.
func (lu *LeagueUpdate) AddStandingIDs(ids ...int) *LeagueUpdate {
	lu.mutation.AddStandingIDs(ids...)
	return lu
}

// AddStandings adds the "standings" edges to the Standings entity.
func (lu *LeagueUpdate) AddStandings(s ...*Standings) *LeagueUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.AddStandingIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (lu *LeagueUpdate) AddTeamIDs(ids ...int) *LeagueUpdate {
	lu.mutation.AddTeamIDs(ids...)
	return lu
}

// AddTeams adds the "teams" edges to the Team entity.
func (lu *LeagueUpdate) AddTeams(t ...*Team) *LeagueUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.AddTeamIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (lu *LeagueUpdate) SetCountryID(id int) *LeagueUpdate {
	lu.mutation.SetCountryID(id)
	return lu
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (lu *LeagueUpdate) SetNillableCountryID(id *int) *LeagueUpdate {
	if id != nil {
		lu = lu.SetCountryID(*id)
	}
	return lu
}

// SetCountry sets the "country" edge to the Country entity.
func (lu *LeagueUpdate) SetCountry(c *Country) *LeagueUpdate {
	return lu.SetCountryID(c.ID)
}

// Mutation returns the LeagueMutation object of the builder.
func (lu *LeagueUpdate) Mutation() *LeagueMutation {
	return lu.mutation
}

// ClearSeasons clears all "seasons" edges to the Season entity.
func (lu *LeagueUpdate) ClearSeasons() *LeagueUpdate {
	lu.mutation.ClearSeasons()
	return lu
}

// RemoveSeasonIDs removes the "seasons" edge to Season entities by IDs.
func (lu *LeagueUpdate) RemoveSeasonIDs(ids ...int) *LeagueUpdate {
	lu.mutation.RemoveSeasonIDs(ids...)
	return lu
}

// RemoveSeasons removes "seasons" edges to Season entities.
func (lu *LeagueUpdate) RemoveSeasons(s ...*Season) *LeagueUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.RemoveSeasonIDs(ids...)
}

// ClearStandings clears all "standings" edges to the Standings entity.
func (lu *LeagueUpdate) ClearStandings() *LeagueUpdate {
	lu.mutation.ClearStandings()
	return lu
}

// RemoveStandingIDs removes the "standings" edge to Standings entities by IDs.
func (lu *LeagueUpdate) RemoveStandingIDs(ids ...int) *LeagueUpdate {
	lu.mutation.RemoveStandingIDs(ids...)
	return lu
}

// RemoveStandings removes "standings" edges to Standings entities.
func (lu *LeagueUpdate) RemoveStandings(s ...*Standings) *LeagueUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.RemoveStandingIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (lu *LeagueUpdate) ClearTeams() *LeagueUpdate {
	lu.mutation.ClearTeams()
	return lu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (lu *LeagueUpdate) RemoveTeamIDs(ids ...int) *LeagueUpdate {
	lu.mutation.RemoveTeamIDs(ids...)
	return lu
}

// RemoveTeams removes "teams" edges to Team entities.
func (lu *LeagueUpdate) RemoveTeams(t ...*Team) *LeagueUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.RemoveTeamIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (lu *LeagueUpdate) ClearCountry() *LeagueUpdate {
	lu.mutation.ClearCountry()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LeagueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LeagueMutation](ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LeagueUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LeagueUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LeagueUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LeagueUpdate) check() error {
	if v, ok := lu.mutation.GetType(); ok {
		if err := league.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "League.type": %w`, err)}
		}
	}
	return nil
}

func (lu *LeagueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(league.Table, league.Columns, sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(league.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.GetType(); ok {
		_spec.SetField(league.FieldType, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.Logo(); ok {
		_spec.SetField(league.FieldLogo, field.TypeString, value)
	}
	if lu.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.SeasonsTable,
			Columns: []string{league.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedSeasonsIDs(); len(nodes) > 0 && !lu.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.SeasonsTable,
			Columns: []string{league.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.SeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.SeasonsTable,
			Columns: []string{league.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.StandingsTable,
			Columns: []string{league.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedStandingsIDs(); len(nodes) > 0 && !lu.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.StandingsTable,
			Columns: []string{league.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.StandingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.StandingsTable,
			Columns: []string{league.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   league.TeamsTable,
			Columns: league.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !lu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   league.TeamsTable,
			Columns: league.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   league.TeamsTable,
			Columns: league.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   league.CountryTable,
			Columns: []string{league.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   league.CountryTable,
			Columns: []string{league.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{league.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LeagueUpdateOne is the builder for updating a single League entity.
type LeagueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LeagueMutation
}

// SetName sets the "name" field.
func (luo *LeagueUpdateOne) SetName(s string) *LeagueUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetType sets the "type" field.
func (luo *LeagueUpdateOne) SetType(l league.Type) *LeagueUpdateOne {
	luo.mutation.SetType(l)
	return luo
}

// SetLogo sets the "logo" field.
func (luo *LeagueUpdateOne) SetLogo(s string) *LeagueUpdateOne {
	luo.mutation.SetLogo(s)
	return luo
}

// AddSeasonIDs adds the "seasons" edge to the Season entity by IDs.
func (luo *LeagueUpdateOne) AddSeasonIDs(ids ...int) *LeagueUpdateOne {
	luo.mutation.AddSeasonIDs(ids...)
	return luo
}

// AddSeasons adds the "seasons" edges to the Season entity.
func (luo *LeagueUpdateOne) AddSeasons(s ...*Season) *LeagueUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.AddSeasonIDs(ids...)
}

// AddStandingIDs adds the "standings" edge to the Standings entity by IDs.
func (luo *LeagueUpdateOne) AddStandingIDs(ids ...int) *LeagueUpdateOne {
	luo.mutation.AddStandingIDs(ids...)
	return luo
}

// AddStandings adds the "standings" edges to the Standings entity.
func (luo *LeagueUpdateOne) AddStandings(s ...*Standings) *LeagueUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.AddStandingIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (luo *LeagueUpdateOne) AddTeamIDs(ids ...int) *LeagueUpdateOne {
	luo.mutation.AddTeamIDs(ids...)
	return luo
}

// AddTeams adds the "teams" edges to the Team entity.
func (luo *LeagueUpdateOne) AddTeams(t ...*Team) *LeagueUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.AddTeamIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (luo *LeagueUpdateOne) SetCountryID(id int) *LeagueUpdateOne {
	luo.mutation.SetCountryID(id)
	return luo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (luo *LeagueUpdateOne) SetNillableCountryID(id *int) *LeagueUpdateOne {
	if id != nil {
		luo = luo.SetCountryID(*id)
	}
	return luo
}

// SetCountry sets the "country" edge to the Country entity.
func (luo *LeagueUpdateOne) SetCountry(c *Country) *LeagueUpdateOne {
	return luo.SetCountryID(c.ID)
}

// Mutation returns the LeagueMutation object of the builder.
func (luo *LeagueUpdateOne) Mutation() *LeagueMutation {
	return luo.mutation
}

// ClearSeasons clears all "seasons" edges to the Season entity.
func (luo *LeagueUpdateOne) ClearSeasons() *LeagueUpdateOne {
	luo.mutation.ClearSeasons()
	return luo
}

// RemoveSeasonIDs removes the "seasons" edge to Season entities by IDs.
func (luo *LeagueUpdateOne) RemoveSeasonIDs(ids ...int) *LeagueUpdateOne {
	luo.mutation.RemoveSeasonIDs(ids...)
	return luo
}

// RemoveSeasons removes "seasons" edges to Season entities.
func (luo *LeagueUpdateOne) RemoveSeasons(s ...*Season) *LeagueUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.RemoveSeasonIDs(ids...)
}

// ClearStandings clears all "standings" edges to the Standings entity.
func (luo *LeagueUpdateOne) ClearStandings() *LeagueUpdateOne {
	luo.mutation.ClearStandings()
	return luo
}

// RemoveStandingIDs removes the "standings" edge to Standings entities by IDs.
func (luo *LeagueUpdateOne) RemoveStandingIDs(ids ...int) *LeagueUpdateOne {
	luo.mutation.RemoveStandingIDs(ids...)
	return luo
}

// RemoveStandings removes "standings" edges to Standings entities.
func (luo *LeagueUpdateOne) RemoveStandings(s ...*Standings) *LeagueUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.RemoveStandingIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (luo *LeagueUpdateOne) ClearTeams() *LeagueUpdateOne {
	luo.mutation.ClearTeams()
	return luo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (luo *LeagueUpdateOne) RemoveTeamIDs(ids ...int) *LeagueUpdateOne {
	luo.mutation.RemoveTeamIDs(ids...)
	return luo
}

// RemoveTeams removes "teams" edges to Team entities.
func (luo *LeagueUpdateOne) RemoveTeams(t ...*Team) *LeagueUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.RemoveTeamIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (luo *LeagueUpdateOne) ClearCountry() *LeagueUpdateOne {
	luo.mutation.ClearCountry()
	return luo
}

// Where appends a list predicates to the LeagueUpdate builder.
func (luo *LeagueUpdateOne) Where(ps ...predicate.League) *LeagueUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LeagueUpdateOne) Select(field string, fields ...string) *LeagueUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated League entity.
func (luo *LeagueUpdateOne) Save(ctx context.Context) (*League, error) {
	return withHooks[*League, LeagueMutation](ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LeagueUpdateOne) SaveX(ctx context.Context) *League {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LeagueUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LeagueUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LeagueUpdateOne) check() error {
	if v, ok := luo.mutation.GetType(); ok {
		if err := league.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "League.type": %w`, err)}
		}
	}
	return nil
}

func (luo *LeagueUpdateOne) sqlSave(ctx context.Context) (_node *League, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(league.Table, league.Columns, sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "League.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, league.FieldID)
		for _, f := range fields {
			if !league.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != league.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(league.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.GetType(); ok {
		_spec.SetField(league.FieldType, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.Logo(); ok {
		_spec.SetField(league.FieldLogo, field.TypeString, value)
	}
	if luo.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.SeasonsTable,
			Columns: []string{league.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedSeasonsIDs(); len(nodes) > 0 && !luo.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.SeasonsTable,
			Columns: []string{league.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.SeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.SeasonsTable,
			Columns: []string{league.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.StandingsTable,
			Columns: []string{league.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedStandingsIDs(); len(nodes) > 0 && !luo.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.StandingsTable,
			Columns: []string{league.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.StandingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.StandingsTable,
			Columns: []string{league.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   league.TeamsTable,
			Columns: league.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !luo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   league.TeamsTable,
			Columns: league.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   league.TeamsTable,
			Columns: league.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   league.CountryTable,
			Columns: []string{league.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   league.CountryTable,
			Columns: []string{league.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &League{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{league.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
