// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/models/ent/league"
	"mapeleven/models/ent/standings"
	"mapeleven/models/ent/team"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Standings is the model entity for the Standings schema.
type Standings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StandingsQuery when eager-loading is set.
	Edges            StandingsEdges `json:"edges"`
	league_standings *int
	team_standings   *int
	selectValues     sql.SelectValues
}

// StandingsEdges holds the relations/edges for other nodes in the graph.
type StandingsEdges struct {
	// League holds the value of the league edge.
	League *League `json:"league,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LeagueOrErr returns the League value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StandingsEdges) LeagueOrErr() (*League, error) {
	if e.loadedTypes[0] {
		if e.League == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: league.Label}
		}
		return e.League, nil
	}
	return nil, &NotLoadedError{edge: "league"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StandingsEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Standings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case standings.FieldID, standings.FieldRank:
			values[i] = new(sql.NullInt64)
		case standings.FieldDescription:
			values[i] = new(sql.NullString)
		case standings.ForeignKeys[0]: // league_standings
			values[i] = new(sql.NullInt64)
		case standings.ForeignKeys[1]: // team_standings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Standings fields.
func (s *Standings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case standings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case standings.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				s.Rank = int(value.Int64)
			}
		case standings.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case standings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field league_standings", value)
			} else if value.Valid {
				s.league_standings = new(int)
				*s.league_standings = int(value.Int64)
			}
		case standings.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_standings", value)
			} else if value.Valid {
				s.team_standings = new(int)
				*s.team_standings = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Standings.
// This includes values selected through modifiers, order, etc.
func (s *Standings) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryLeague queries the "league" edge of the Standings entity.
func (s *Standings) QueryLeague() *LeagueQuery {
	return NewStandingsClient(s.config).QueryLeague(s)
}

// QueryTeam queries the "team" edge of the Standings entity.
func (s *Standings) QueryTeam() *TeamQuery {
	return NewStandingsClient(s.config).QueryTeam(s)
}

// Update returns a builder for updating this Standings.
// Note that you need to call Standings.Unwrap() before calling this method if this Standings
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Standings) Update() *StandingsUpdateOne {
	return NewStandingsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Standings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Standings) Unwrap() *Standings {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Standings is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Standings) String() string {
	var builder strings.Builder
	builder.WriteString("Standings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", s.Rank))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteByte(')')
	return builder.String()
}

// StandingsSlice is a parsable slice of Standings.
type StandingsSlice []*Standings
