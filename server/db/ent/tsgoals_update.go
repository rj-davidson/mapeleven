// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tsgoals"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSGoalsUpdate is the builder for updating TSGoals entities.
type TSGoalsUpdate struct {
	config
	hooks    []Hook
	mutation *TSGoalsMutation
}

// Where appends a list predicates to the TSGoalsUpdate builder.
func (tgu *TSGoalsUpdate) Where(ps ...predicate.TSGoals) *TSGoalsUpdate {
	tgu.mutation.Where(ps...)
	return tgu
}

// SetGoalsForTotalHome sets the "goalsForTotalHome" field.
func (tgu *TSGoalsUpdate) SetGoalsForTotalHome(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForTotalHome()
	tgu.mutation.SetGoalsForTotalHome(i)
	return tgu
}

// SetNillableGoalsForTotalHome sets the "goalsForTotalHome" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForTotalHome(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForTotalHome(*i)
	}
	return tgu
}

// AddGoalsForTotalHome adds i to the "goalsForTotalHome" field.
func (tgu *TSGoalsUpdate) AddGoalsForTotalHome(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForTotalHome(i)
	return tgu
}

// ClearGoalsForTotalHome clears the value of the "goalsForTotalHome" field.
func (tgu *TSGoalsUpdate) ClearGoalsForTotalHome() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForTotalHome()
	return tgu
}

// SetGoalsForTotalAway sets the "goalsForTotalAway" field.
func (tgu *TSGoalsUpdate) SetGoalsForTotalAway(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForTotalAway()
	tgu.mutation.SetGoalsForTotalAway(i)
	return tgu
}

// SetNillableGoalsForTotalAway sets the "goalsForTotalAway" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForTotalAway(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForTotalAway(*i)
	}
	return tgu
}

// AddGoalsForTotalAway adds i to the "goalsForTotalAway" field.
func (tgu *TSGoalsUpdate) AddGoalsForTotalAway(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForTotalAway(i)
	return tgu
}

// ClearGoalsForTotalAway clears the value of the "goalsForTotalAway" field.
func (tgu *TSGoalsUpdate) ClearGoalsForTotalAway() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForTotalAway()
	return tgu
}

// SetGoalsForTotal sets the "goalsForTotal" field.
func (tgu *TSGoalsUpdate) SetGoalsForTotal(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForTotal()
	tgu.mutation.SetGoalsForTotal(i)
	return tgu
}

// SetNillableGoalsForTotal sets the "goalsForTotal" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForTotal(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForTotal(*i)
	}
	return tgu
}

// AddGoalsForTotal adds i to the "goalsForTotal" field.
func (tgu *TSGoalsUpdate) AddGoalsForTotal(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForTotal(i)
	return tgu
}

// ClearGoalsForTotal clears the value of the "goalsForTotal" field.
func (tgu *TSGoalsUpdate) ClearGoalsForTotal() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForTotal()
	return tgu
}

// SetGoalsForAverageHome sets the "goalsForAverageHome" field.
func (tgu *TSGoalsUpdate) SetGoalsForAverageHome(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForAverageHome(s)
	return tgu
}

// SetNillableGoalsForAverageHome sets the "goalsForAverageHome" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForAverageHome(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForAverageHome(*s)
	}
	return tgu
}

// ClearGoalsForAverageHome clears the value of the "goalsForAverageHome" field.
func (tgu *TSGoalsUpdate) ClearGoalsForAverageHome() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForAverageHome()
	return tgu
}

// SetGoalsForAverageAway sets the "goalsForAverageAway" field.
func (tgu *TSGoalsUpdate) SetGoalsForAverageAway(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForAverageAway(s)
	return tgu
}

// SetNillableGoalsForAverageAway sets the "goalsForAverageAway" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForAverageAway(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForAverageAway(*s)
	}
	return tgu
}

// ClearGoalsForAverageAway clears the value of the "goalsForAverageAway" field.
func (tgu *TSGoalsUpdate) ClearGoalsForAverageAway() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForAverageAway()
	return tgu
}

// SetGoalsForAverageTotal sets the "goalsForAverageTotal" field.
func (tgu *TSGoalsUpdate) SetGoalsForAverageTotal(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForAverageTotal(s)
	return tgu
}

// SetNillableGoalsForAverageTotal sets the "goalsForAverageTotal" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForAverageTotal(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForAverageTotal(*s)
	}
	return tgu
}

// ClearGoalsForAverageTotal clears the value of the "goalsForAverageTotal" field.
func (tgu *TSGoalsUpdate) ClearGoalsForAverageTotal() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForAverageTotal()
	return tgu
}

// SetGoalsForMinute0To15Total sets the "goalsForMinute0To15Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute0To15Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute0To15Total()
	tgu.mutation.SetGoalsForMinute0To15Total(i)
	return tgu
}

// SetNillableGoalsForMinute0To15Total sets the "goalsForMinute0To15Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute0To15Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute0To15Total(*i)
	}
	return tgu
}

// AddGoalsForMinute0To15Total adds i to the "goalsForMinute0To15Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute0To15Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute0To15Total(i)
	return tgu
}

// ClearGoalsForMinute0To15Total clears the value of the "goalsForMinute0To15Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute0To15Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute0To15Total()
	return tgu
}

// SetGoalsForMinute0To15Percentage sets the "goalsForMinute0To15Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute0To15Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute0To15Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute0To15Percentage sets the "goalsForMinute0To15Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute0To15Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute0To15Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute0To15Percentage clears the value of the "goalsForMinute0To15Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute0To15Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute0To15Percentage()
	return tgu
}

// SetGoalsForMinute16To30Total sets the "goalsForMinute16To30Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute16To30Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute16To30Total()
	tgu.mutation.SetGoalsForMinute16To30Total(i)
	return tgu
}

// SetNillableGoalsForMinute16To30Total sets the "goalsForMinute16To30Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute16To30Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute16To30Total(*i)
	}
	return tgu
}

// AddGoalsForMinute16To30Total adds i to the "goalsForMinute16To30Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute16To30Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute16To30Total(i)
	return tgu
}

// ClearGoalsForMinute16To30Total clears the value of the "goalsForMinute16To30Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute16To30Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute16To30Total()
	return tgu
}

// SetGoalsForMinute16To30Percentage sets the "goalsForMinute16To30Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute16To30Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute16To30Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute16To30Percentage sets the "goalsForMinute16To30Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute16To30Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute16To30Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute16To30Percentage clears the value of the "goalsForMinute16To30Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute16To30Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute16To30Percentage()
	return tgu
}

// SetGoalsForMinute31To45Total sets the "goalsForMinute31To45Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute31To45Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute31To45Total()
	tgu.mutation.SetGoalsForMinute31To45Total(i)
	return tgu
}

// SetNillableGoalsForMinute31To45Total sets the "goalsForMinute31To45Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute31To45Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute31To45Total(*i)
	}
	return tgu
}

// AddGoalsForMinute31To45Total adds i to the "goalsForMinute31To45Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute31To45Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute31To45Total(i)
	return tgu
}

// ClearGoalsForMinute31To45Total clears the value of the "goalsForMinute31To45Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute31To45Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute31To45Total()
	return tgu
}

// SetGoalsForMinute31To45Percentage sets the "goalsForMinute31To45Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute31To45Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute31To45Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute31To45Percentage sets the "goalsForMinute31To45Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute31To45Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute31To45Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute31To45Percentage clears the value of the "goalsForMinute31To45Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute31To45Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute31To45Percentage()
	return tgu
}

// SetGoalsForMinute46To60Total sets the "goalsForMinute46To60Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute46To60Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute46To60Total()
	tgu.mutation.SetGoalsForMinute46To60Total(i)
	return tgu
}

// SetNillableGoalsForMinute46To60Total sets the "goalsForMinute46To60Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute46To60Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute46To60Total(*i)
	}
	return tgu
}

// AddGoalsForMinute46To60Total adds i to the "goalsForMinute46To60Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute46To60Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute46To60Total(i)
	return tgu
}

// ClearGoalsForMinute46To60Total clears the value of the "goalsForMinute46To60Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute46To60Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute46To60Total()
	return tgu
}

// SetGoalsForMinute46To60Percentage sets the "goalsForMinute46To60Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute46To60Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute46To60Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute46To60Percentage sets the "goalsForMinute46To60Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute46To60Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute46To60Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute46To60Percentage clears the value of the "goalsForMinute46To60Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute46To60Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute46To60Percentage()
	return tgu
}

// SetGoalsForMinute61To75Total sets the "goalsForMinute61To75Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute61To75Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute61To75Total()
	tgu.mutation.SetGoalsForMinute61To75Total(i)
	return tgu
}

// SetNillableGoalsForMinute61To75Total sets the "goalsForMinute61To75Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute61To75Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute61To75Total(*i)
	}
	return tgu
}

// AddGoalsForMinute61To75Total adds i to the "goalsForMinute61To75Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute61To75Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute61To75Total(i)
	return tgu
}

// ClearGoalsForMinute61To75Total clears the value of the "goalsForMinute61To75Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute61To75Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute61To75Total()
	return tgu
}

// SetGoalsForMinute61To75Percentage sets the "goalsForMinute61To75Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute61To75Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute61To75Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute61To75Percentage sets the "goalsForMinute61To75Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute61To75Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute61To75Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute61To75Percentage clears the value of the "goalsForMinute61To75Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute61To75Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute61To75Percentage()
	return tgu
}

// SetGoalsForMinute76To90Total sets the "goalsForMinute76To90Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute76To90Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute76To90Total()
	tgu.mutation.SetGoalsForMinute76To90Total(i)
	return tgu
}

// SetNillableGoalsForMinute76To90Total sets the "goalsForMinute76To90Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute76To90Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute76To90Total(*i)
	}
	return tgu
}

// AddGoalsForMinute76To90Total adds i to the "goalsForMinute76To90Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute76To90Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute76To90Total(i)
	return tgu
}

// ClearGoalsForMinute76To90Total clears the value of the "goalsForMinute76To90Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute76To90Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute76To90Total()
	return tgu
}

// SetGoalsForMinute76To90Percentage sets the "goalsForMinute76To90Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute76To90Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute76To90Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute76To90Percentage sets the "goalsForMinute76To90Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute76To90Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute76To90Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute76To90Percentage clears the value of the "goalsForMinute76To90Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute76To90Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute76To90Percentage()
	return tgu
}

// SetGoalsForMinute91To105Total sets the "goalsForMinute91To105Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute91To105Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute91To105Total()
	tgu.mutation.SetGoalsForMinute91To105Total(i)
	return tgu
}

// SetNillableGoalsForMinute91To105Total sets the "goalsForMinute91To105Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute91To105Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute91To105Total(*i)
	}
	return tgu
}

// AddGoalsForMinute91To105Total adds i to the "goalsForMinute91To105Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute91To105Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute91To105Total(i)
	return tgu
}

// ClearGoalsForMinute91To105Total clears the value of the "goalsForMinute91To105Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute91To105Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute91To105Total()
	return tgu
}

// SetGoalsForMinute91To105Percentage sets the "goalsForMinute91To105Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute91To105Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute91To105Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute91To105Percentage sets the "goalsForMinute91To105Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute91To105Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute91To105Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute91To105Percentage clears the value of the "goalsForMinute91To105Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute91To105Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute91To105Percentage()
	return tgu
}

// SetGoalsForMinute106To120Total sets the "goalsForMinute106To120Total" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute106To120Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsForMinute106To120Total()
	tgu.mutation.SetGoalsForMinute106To120Total(i)
	return tgu
}

// SetNillableGoalsForMinute106To120Total sets the "goalsForMinute106To120Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute106To120Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsForMinute106To120Total(*i)
	}
	return tgu
}

// AddGoalsForMinute106To120Total adds i to the "goalsForMinute106To120Total" field.
func (tgu *TSGoalsUpdate) AddGoalsForMinute106To120Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsForMinute106To120Total(i)
	return tgu
}

// ClearGoalsForMinute106To120Total clears the value of the "goalsForMinute106To120Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute106To120Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute106To120Total()
	return tgu
}

// SetGoalsForMinute106To120Percentage sets the "goalsForMinute106To120Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsForMinute106To120Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsForMinute106To120Percentage(s)
	return tgu
}

// SetNillableGoalsForMinute106To120Percentage sets the "goalsForMinute106To120Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsForMinute106To120Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsForMinute106To120Percentage(*s)
	}
	return tgu
}

// ClearGoalsForMinute106To120Percentage clears the value of the "goalsForMinute106To120Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsForMinute106To120Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsForMinute106To120Percentage()
	return tgu
}

// SetGoalsAgainstTotalHome sets the "goalsAgainstTotalHome" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstTotalHome(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstTotalHome()
	tgu.mutation.SetGoalsAgainstTotalHome(i)
	return tgu
}

// SetNillableGoalsAgainstTotalHome sets the "goalsAgainstTotalHome" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstTotalHome(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstTotalHome(*i)
	}
	return tgu
}

// AddGoalsAgainstTotalHome adds i to the "goalsAgainstTotalHome" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstTotalHome(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstTotalHome(i)
	return tgu
}

// ClearGoalsAgainstTotalHome clears the value of the "goalsAgainstTotalHome" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstTotalHome() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstTotalHome()
	return tgu
}

// SetGoalsAgainstTotalAway sets the "goalsAgainstTotalAway" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstTotalAway(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstTotalAway()
	tgu.mutation.SetGoalsAgainstTotalAway(i)
	return tgu
}

// SetNillableGoalsAgainstTotalAway sets the "goalsAgainstTotalAway" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstTotalAway(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstTotalAway(*i)
	}
	return tgu
}

// AddGoalsAgainstTotalAway adds i to the "goalsAgainstTotalAway" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstTotalAway(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstTotalAway(i)
	return tgu
}

// ClearGoalsAgainstTotalAway clears the value of the "goalsAgainstTotalAway" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstTotalAway() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstTotalAway()
	return tgu
}

// SetGoalsAgainstTotal sets the "goalsAgainstTotal" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstTotal(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstTotal()
	tgu.mutation.SetGoalsAgainstTotal(i)
	return tgu
}

// SetNillableGoalsAgainstTotal sets the "goalsAgainstTotal" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstTotal(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstTotal(*i)
	}
	return tgu
}

// AddGoalsAgainstTotal adds i to the "goalsAgainstTotal" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstTotal(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstTotal(i)
	return tgu
}

// ClearGoalsAgainstTotal clears the value of the "goalsAgainstTotal" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstTotal() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstTotal()
	return tgu
}

// SetGoalsAgainstAverageHome sets the "goalsAgainstAverageHome" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstAverageHome(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstAverageHome(s)
	return tgu
}

// SetNillableGoalsAgainstAverageHome sets the "goalsAgainstAverageHome" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstAverageHome(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstAverageHome(*s)
	}
	return tgu
}

// ClearGoalsAgainstAverageHome clears the value of the "goalsAgainstAverageHome" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstAverageHome() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstAverageHome()
	return tgu
}

// SetGoalsAgainstAverageAway sets the "goalsAgainstAverageAway" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstAverageAway(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstAverageAway(s)
	return tgu
}

// SetNillableGoalsAgainstAverageAway sets the "goalsAgainstAverageAway" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstAverageAway(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstAverageAway(*s)
	}
	return tgu
}

// ClearGoalsAgainstAverageAway clears the value of the "goalsAgainstAverageAway" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstAverageAway() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstAverageAway()
	return tgu
}

// SetGoalsAgainstAverageTotal sets the "goalsAgainstAverageTotal" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstAverageTotal(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstAverageTotal(s)
	return tgu
}

// SetNillableGoalsAgainstAverageTotal sets the "goalsAgainstAverageTotal" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstAverageTotal(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstAverageTotal(*s)
	}
	return tgu
}

// ClearGoalsAgainstAverageTotal clears the value of the "goalsAgainstAverageTotal" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstAverageTotal() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstAverageTotal()
	return tgu
}

// SetGoalsAgainstMinute0To15Total sets the "goalsAgainstMinute0To15Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute0To15Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute0To15Total()
	tgu.mutation.SetGoalsAgainstMinute0To15Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute0To15Total sets the "goalsAgainstMinute0To15Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute0To15Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute0To15Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute0To15Total adds i to the "goalsAgainstMinute0To15Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute0To15Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute0To15Total(i)
	return tgu
}

// ClearGoalsAgainstMinute0To15Total clears the value of the "goalsAgainstMinute0To15Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute0To15Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute0To15Total()
	return tgu
}

// SetGoalsAgainstMinute0To15Percentage sets the "goalsAgainstMinute0To15Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute0To15Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute0To15Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute0To15Percentage sets the "goalsAgainstMinute0To15Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute0To15Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute0To15Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute0To15Percentage clears the value of the "goalsAgainstMinute0To15Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute0To15Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute0To15Percentage()
	return tgu
}

// SetGoalsAgainstMinute16To30Total sets the "goalsAgainstMinute16To30Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute16To30Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute16To30Total()
	tgu.mutation.SetGoalsAgainstMinute16To30Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute16To30Total sets the "goalsAgainstMinute16To30Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute16To30Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute16To30Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute16To30Total adds i to the "goalsAgainstMinute16To30Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute16To30Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute16To30Total(i)
	return tgu
}

// ClearGoalsAgainstMinute16To30Total clears the value of the "goalsAgainstMinute16To30Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute16To30Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute16To30Total()
	return tgu
}

// SetGoalsAgainstMinute16To30Percentage sets the "goalsAgainstMinute16To30Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute16To30Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute16To30Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute16To30Percentage sets the "goalsAgainstMinute16To30Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute16To30Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute16To30Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute16To30Percentage clears the value of the "goalsAgainstMinute16To30Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute16To30Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute16To30Percentage()
	return tgu
}

// SetGoalsAgainstMinute31To45Total sets the "goalsAgainstMinute31To45Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute31To45Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute31To45Total()
	tgu.mutation.SetGoalsAgainstMinute31To45Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute31To45Total sets the "goalsAgainstMinute31To45Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute31To45Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute31To45Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute31To45Total adds i to the "goalsAgainstMinute31To45Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute31To45Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute31To45Total(i)
	return tgu
}

// ClearGoalsAgainstMinute31To45Total clears the value of the "goalsAgainstMinute31To45Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute31To45Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute31To45Total()
	return tgu
}

// SetGoalsAgainstMinute31To45Percentage sets the "goalsAgainstMinute31To45Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute31To45Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute31To45Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute31To45Percentage sets the "goalsAgainstMinute31To45Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute31To45Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute31To45Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute31To45Percentage clears the value of the "goalsAgainstMinute31To45Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute31To45Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute31To45Percentage()
	return tgu
}

// SetGoalsAgainstMinute46To60Total sets the "goalsAgainstMinute46To60Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute46To60Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute46To60Total()
	tgu.mutation.SetGoalsAgainstMinute46To60Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute46To60Total sets the "goalsAgainstMinute46To60Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute46To60Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute46To60Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute46To60Total adds i to the "goalsAgainstMinute46To60Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute46To60Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute46To60Total(i)
	return tgu
}

// ClearGoalsAgainstMinute46To60Total clears the value of the "goalsAgainstMinute46To60Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute46To60Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute46To60Total()
	return tgu
}

// SetGoalsAgainstMinute46To60Percentage sets the "goalsAgainstMinute46To60Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute46To60Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute46To60Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute46To60Percentage sets the "goalsAgainstMinute46To60Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute46To60Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute46To60Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute46To60Percentage clears the value of the "goalsAgainstMinute46To60Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute46To60Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute46To60Percentage()
	return tgu
}

// SetGoalsAgainstMinute61To75Total sets the "goalsAgainstMinute61To75Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute61To75Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute61To75Total()
	tgu.mutation.SetGoalsAgainstMinute61To75Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute61To75Total sets the "goalsAgainstMinute61To75Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute61To75Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute61To75Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute61To75Total adds i to the "goalsAgainstMinute61To75Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute61To75Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute61To75Total(i)
	return tgu
}

// ClearGoalsAgainstMinute61To75Total clears the value of the "goalsAgainstMinute61To75Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute61To75Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute61To75Total()
	return tgu
}

// SetGoalsAgainstMinute61To75Percentage sets the "goalsAgainstMinute61To75Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute61To75Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute61To75Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute61To75Percentage sets the "goalsAgainstMinute61To75Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute61To75Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute61To75Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute61To75Percentage clears the value of the "goalsAgainstMinute61To75Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute61To75Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute61To75Percentage()
	return tgu
}

// SetGoalsAgainstMinute76To90Total sets the "goalsAgainstMinute76To90Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute76To90Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute76To90Total()
	tgu.mutation.SetGoalsAgainstMinute76To90Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute76To90Total sets the "goalsAgainstMinute76To90Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute76To90Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute76To90Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute76To90Total adds i to the "goalsAgainstMinute76To90Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute76To90Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute76To90Total(i)
	return tgu
}

// ClearGoalsAgainstMinute76To90Total clears the value of the "goalsAgainstMinute76To90Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute76To90Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute76To90Total()
	return tgu
}

// SetGoalsAgainstMinute76To90Percentage sets the "goalsAgainstMinute76To90Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute76To90Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute76To90Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute76To90Percentage sets the "goalsAgainstMinute76To90Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute76To90Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute76To90Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute76To90Percentage clears the value of the "goalsAgainstMinute76To90Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute76To90Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute76To90Percentage()
	return tgu
}

// SetGoalsAgainstMinute91To105Total sets the "goalsAgainstMinute91To105Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute91To105Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute91To105Total()
	tgu.mutation.SetGoalsAgainstMinute91To105Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute91To105Total sets the "goalsAgainstMinute91To105Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute91To105Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute91To105Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute91To105Total adds i to the "goalsAgainstMinute91To105Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute91To105Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute91To105Total(i)
	return tgu
}

// ClearGoalsAgainstMinute91To105Total clears the value of the "goalsAgainstMinute91To105Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute91To105Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute91To105Total()
	return tgu
}

// SetGoalsAgainstMinute91To105Percentage sets the "goalsAgainstMinute91To105Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute91To105Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute91To105Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute91To105Percentage sets the "goalsAgainstMinute91To105Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute91To105Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute91To105Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute91To105Percentage clears the value of the "goalsAgainstMinute91To105Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute91To105Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute91To105Percentage()
	return tgu
}

// SetGoalsAgainstMinute106To120Total sets the "goalsAgainstMinute106To120Total" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute106To120Total(i int) *TSGoalsUpdate {
	tgu.mutation.ResetGoalsAgainstMinute106To120Total()
	tgu.mutation.SetGoalsAgainstMinute106To120Total(i)
	return tgu
}

// SetNillableGoalsAgainstMinute106To120Total sets the "goalsAgainstMinute106To120Total" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute106To120Total(i *int) *TSGoalsUpdate {
	if i != nil {
		tgu.SetGoalsAgainstMinute106To120Total(*i)
	}
	return tgu
}

// AddGoalsAgainstMinute106To120Total adds i to the "goalsAgainstMinute106To120Total" field.
func (tgu *TSGoalsUpdate) AddGoalsAgainstMinute106To120Total(i int) *TSGoalsUpdate {
	tgu.mutation.AddGoalsAgainstMinute106To120Total(i)
	return tgu
}

// ClearGoalsAgainstMinute106To120Total clears the value of the "goalsAgainstMinute106To120Total" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute106To120Total() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute106To120Total()
	return tgu
}

// SetGoalsAgainstMinute106To120Percentage sets the "goalsAgainstMinute106To120Percentage" field.
func (tgu *TSGoalsUpdate) SetGoalsAgainstMinute106To120Percentage(s string) *TSGoalsUpdate {
	tgu.mutation.SetGoalsAgainstMinute106To120Percentage(s)
	return tgu
}

// SetNillableGoalsAgainstMinute106To120Percentage sets the "goalsAgainstMinute106To120Percentage" field if the given value is not nil.
func (tgu *TSGoalsUpdate) SetNillableGoalsAgainstMinute106To120Percentage(s *string) *TSGoalsUpdate {
	if s != nil {
		tgu.SetGoalsAgainstMinute106To120Percentage(*s)
	}
	return tgu
}

// ClearGoalsAgainstMinute106To120Percentage clears the value of the "goalsAgainstMinute106To120Percentage" field.
func (tgu *TSGoalsUpdate) ClearGoalsAgainstMinute106To120Percentage() *TSGoalsUpdate {
	tgu.mutation.ClearGoalsAgainstMinute106To120Percentage()
	return tgu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tgu *TSGoalsUpdate) SetLastUpdated(t time.Time) *TSGoalsUpdate {
	tgu.mutation.SetLastUpdated(t)
	return tgu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tgu *TSGoalsUpdate) ClearLastUpdated() *TSGoalsUpdate {
	tgu.mutation.ClearLastUpdated()
	return tgu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tgu *TSGoalsUpdate) SetTeamID(id int) *TSGoalsUpdate {
	tgu.mutation.SetTeamID(id)
	return tgu
}

// SetTeam sets the "team" edge to the Team entity.
func (tgu *TSGoalsUpdate) SetTeam(t *Team) *TSGoalsUpdate {
	return tgu.SetTeamID(t.ID)
}

// Mutation returns the TSGoalsMutation object of the builder.
func (tgu *TSGoalsUpdate) Mutation() *TSGoalsMutation {
	return tgu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tgu *TSGoalsUpdate) ClearTeam() *TSGoalsUpdate {
	tgu.mutation.ClearTeam()
	return tgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tgu *TSGoalsUpdate) Save(ctx context.Context) (int, error) {
	tgu.defaults()
	return withHooks[int, TSGoalsMutation](ctx, tgu.sqlSave, tgu.mutation, tgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tgu *TSGoalsUpdate) SaveX(ctx context.Context) int {
	affected, err := tgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tgu *TSGoalsUpdate) Exec(ctx context.Context) error {
	_, err := tgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgu *TSGoalsUpdate) ExecX(ctx context.Context) {
	if err := tgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgu *TSGoalsUpdate) defaults() {
	if _, ok := tgu.mutation.LastUpdated(); !ok && !tgu.mutation.LastUpdatedCleared() {
		v := tsgoals.UpdateDefaultLastUpdated()
		tgu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgu *TSGoalsUpdate) check() error {
	if _, ok := tgu.mutation.TeamID(); tgu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSGoals.team"`)
	}
	return nil
}

func (tgu *TSGoalsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsgoals.Table, tsgoals.Columns, sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt))
	if ps := tgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tgu.mutation.GoalsForTotalHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotalHome, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForTotalHome(); ok {
		_spec.AddField(tsgoals.FieldGoalsForTotalHome, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForTotalHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForTotalHome, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForTotalAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotalAway, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForTotalAway(); ok {
		_spec.AddField(tsgoals.FieldGoalsForTotalAway, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForTotalAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForTotalAway, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotal, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForTotal(); ok {
		_spec.AddField(tsgoals.FieldGoalsForTotal, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForTotal, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForAverageHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageHome, field.TypeString, value)
	}
	if tgu.mutation.GoalsForAverageHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForAverageHome, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForAverageAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageAway, field.TypeString, value)
	}
	if tgu.mutation.GoalsForAverageAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForAverageAway, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForAverageTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageTotal, field.TypeString, value)
	}
	if tgu.mutation.GoalsForAverageTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForAverageTotal, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute0To15Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute0To15Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute0To15Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute0To15Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute0To15TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute0To15Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute0To15Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute0To15Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute0To15PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute0To15Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute16To30Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute16To30Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute16To30Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute16To30Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute16To30TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute16To30Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute16To30Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute16To30Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute16To30PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute16To30Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute31To45Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute31To45Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute31To45Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute31To45Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute31To45TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute31To45Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute31To45Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute31To45Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute31To45PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute31To45Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute46To60Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute46To60Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute46To60Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute46To60Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute46To60TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute46To60Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute46To60Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute46To60Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute46To60PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute46To60Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute61To75Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute61To75Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute61To75Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute61To75Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute61To75TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute61To75Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute61To75Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute61To75Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute61To75PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute61To75Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute76To90Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute76To90Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute76To90Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute76To90Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute76To90TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute76To90Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute76To90Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute76To90Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute76To90PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute76To90Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute91To105Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute91To105Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute91To105Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute91To105Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute91To105TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute91To105Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute91To105Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute91To105Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute91To105PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute91To105Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsForMinute106To120Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute106To120Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsForMinute106To120Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute106To120Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsForMinute106To120TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute106To120Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsForMinute106To120Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute106To120Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsForMinute106To120PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute106To120Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstTotalHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotalHome, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstTotalHome(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstTotalHome, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstTotalHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstTotalHome, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstTotalAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotalAway, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstTotalAway(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstTotalAway, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstTotalAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstTotalAway, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotal, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstTotal(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstTotal, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstTotal, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstAverageHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageHome, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstAverageHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstAverageHome, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstAverageAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageAway, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstAverageAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstAverageAway, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstAverageTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageTotal, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstAverageTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstAverageTotal, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute0To15Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute0To15Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute0To15Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute0To15Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute0To15TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute0To15Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute0To15Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute0To15Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute0To15PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute0To15Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute16To30Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute16To30Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute16To30Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute16To30Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute16To30TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute16To30Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute16To30Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute16To30Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute16To30PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute16To30Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute31To45Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute31To45Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute31To45Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute31To45Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute31To45TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute31To45Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute31To45Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute31To45Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute31To45PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute31To45Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute46To60Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute46To60Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute46To60Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute46To60Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute46To60TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute46To60Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute46To60Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute46To60Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute46To60PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute46To60Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute61To75Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute61To75Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute61To75Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute61To75Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute61To75TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute61To75Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute61To75Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute61To75Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute61To75PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute61To75Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute76To90Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute76To90Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute76To90Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute76To90Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute76To90TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute76To90Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute76To90Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute76To90Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute76To90PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute76To90Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute91To105Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute91To105Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute91To105Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute91To105Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute91To105TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute91To105Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute91To105Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute91To105Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute91To105PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute91To105Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute106To120Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute106To120Total, field.TypeInt, value)
	}
	if value, ok := tgu.mutation.AddedGoalsAgainstMinute106To120Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute106To120Total, field.TypeInt, value)
	}
	if tgu.mutation.GoalsAgainstMinute106To120TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute106To120Total, field.TypeInt)
	}
	if value, ok := tgu.mutation.GoalsAgainstMinute106To120Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute106To120Percentage, field.TypeString, value)
	}
	if tgu.mutation.GoalsAgainstMinute106To120PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute106To120Percentage, field.TypeString)
	}
	if value, ok := tgu.mutation.LastUpdated(); ok {
		_spec.SetField(tsgoals.FieldLastUpdated, field.TypeTime, value)
	}
	if tgu.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsgoals.FieldLastUpdated, field.TypeTime)
	}
	if tgu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsgoals.TeamTable,
			Columns: []string{tsgoals.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsgoals.TeamTable,
			Columns: []string{tsgoals.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsgoals.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tgu.mutation.done = true
	return n, nil
}

// TSGoalsUpdateOne is the builder for updating a single TSGoals entity.
type TSGoalsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSGoalsMutation
}

// SetGoalsForTotalHome sets the "goalsForTotalHome" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForTotalHome(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForTotalHome()
	tguo.mutation.SetGoalsForTotalHome(i)
	return tguo
}

// SetNillableGoalsForTotalHome sets the "goalsForTotalHome" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForTotalHome(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForTotalHome(*i)
	}
	return tguo
}

// AddGoalsForTotalHome adds i to the "goalsForTotalHome" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForTotalHome(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForTotalHome(i)
	return tguo
}

// ClearGoalsForTotalHome clears the value of the "goalsForTotalHome" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForTotalHome() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForTotalHome()
	return tguo
}

// SetGoalsForTotalAway sets the "goalsForTotalAway" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForTotalAway(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForTotalAway()
	tguo.mutation.SetGoalsForTotalAway(i)
	return tguo
}

// SetNillableGoalsForTotalAway sets the "goalsForTotalAway" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForTotalAway(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForTotalAway(*i)
	}
	return tguo
}

// AddGoalsForTotalAway adds i to the "goalsForTotalAway" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForTotalAway(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForTotalAway(i)
	return tguo
}

// ClearGoalsForTotalAway clears the value of the "goalsForTotalAway" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForTotalAway() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForTotalAway()
	return tguo
}

// SetGoalsForTotal sets the "goalsForTotal" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForTotal(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForTotal()
	tguo.mutation.SetGoalsForTotal(i)
	return tguo
}

// SetNillableGoalsForTotal sets the "goalsForTotal" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForTotal(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForTotal(*i)
	}
	return tguo
}

// AddGoalsForTotal adds i to the "goalsForTotal" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForTotal(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForTotal(i)
	return tguo
}

// ClearGoalsForTotal clears the value of the "goalsForTotal" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForTotal() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForTotal()
	return tguo
}

// SetGoalsForAverageHome sets the "goalsForAverageHome" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForAverageHome(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForAverageHome(s)
	return tguo
}

// SetNillableGoalsForAverageHome sets the "goalsForAverageHome" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForAverageHome(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForAverageHome(*s)
	}
	return tguo
}

// ClearGoalsForAverageHome clears the value of the "goalsForAverageHome" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForAverageHome() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForAverageHome()
	return tguo
}

// SetGoalsForAverageAway sets the "goalsForAverageAway" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForAverageAway(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForAverageAway(s)
	return tguo
}

// SetNillableGoalsForAverageAway sets the "goalsForAverageAway" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForAverageAway(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForAverageAway(*s)
	}
	return tguo
}

// ClearGoalsForAverageAway clears the value of the "goalsForAverageAway" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForAverageAway() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForAverageAway()
	return tguo
}

// SetGoalsForAverageTotal sets the "goalsForAverageTotal" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForAverageTotal(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForAverageTotal(s)
	return tguo
}

// SetNillableGoalsForAverageTotal sets the "goalsForAverageTotal" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForAverageTotal(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForAverageTotal(*s)
	}
	return tguo
}

// ClearGoalsForAverageTotal clears the value of the "goalsForAverageTotal" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForAverageTotal() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForAverageTotal()
	return tguo
}

// SetGoalsForMinute0To15Total sets the "goalsForMinute0To15Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute0To15Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute0To15Total()
	tguo.mutation.SetGoalsForMinute0To15Total(i)
	return tguo
}

// SetNillableGoalsForMinute0To15Total sets the "goalsForMinute0To15Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute0To15Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute0To15Total(*i)
	}
	return tguo
}

// AddGoalsForMinute0To15Total adds i to the "goalsForMinute0To15Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute0To15Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute0To15Total(i)
	return tguo
}

// ClearGoalsForMinute0To15Total clears the value of the "goalsForMinute0To15Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute0To15Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute0To15Total()
	return tguo
}

// SetGoalsForMinute0To15Percentage sets the "goalsForMinute0To15Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute0To15Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute0To15Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute0To15Percentage sets the "goalsForMinute0To15Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute0To15Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute0To15Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute0To15Percentage clears the value of the "goalsForMinute0To15Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute0To15Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute0To15Percentage()
	return tguo
}

// SetGoalsForMinute16To30Total sets the "goalsForMinute16To30Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute16To30Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute16To30Total()
	tguo.mutation.SetGoalsForMinute16To30Total(i)
	return tguo
}

// SetNillableGoalsForMinute16To30Total sets the "goalsForMinute16To30Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute16To30Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute16To30Total(*i)
	}
	return tguo
}

// AddGoalsForMinute16To30Total adds i to the "goalsForMinute16To30Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute16To30Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute16To30Total(i)
	return tguo
}

// ClearGoalsForMinute16To30Total clears the value of the "goalsForMinute16To30Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute16To30Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute16To30Total()
	return tguo
}

// SetGoalsForMinute16To30Percentage sets the "goalsForMinute16To30Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute16To30Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute16To30Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute16To30Percentage sets the "goalsForMinute16To30Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute16To30Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute16To30Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute16To30Percentage clears the value of the "goalsForMinute16To30Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute16To30Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute16To30Percentage()
	return tguo
}

// SetGoalsForMinute31To45Total sets the "goalsForMinute31To45Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute31To45Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute31To45Total()
	tguo.mutation.SetGoalsForMinute31To45Total(i)
	return tguo
}

// SetNillableGoalsForMinute31To45Total sets the "goalsForMinute31To45Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute31To45Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute31To45Total(*i)
	}
	return tguo
}

// AddGoalsForMinute31To45Total adds i to the "goalsForMinute31To45Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute31To45Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute31To45Total(i)
	return tguo
}

// ClearGoalsForMinute31To45Total clears the value of the "goalsForMinute31To45Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute31To45Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute31To45Total()
	return tguo
}

// SetGoalsForMinute31To45Percentage sets the "goalsForMinute31To45Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute31To45Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute31To45Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute31To45Percentage sets the "goalsForMinute31To45Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute31To45Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute31To45Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute31To45Percentage clears the value of the "goalsForMinute31To45Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute31To45Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute31To45Percentage()
	return tguo
}

// SetGoalsForMinute46To60Total sets the "goalsForMinute46To60Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute46To60Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute46To60Total()
	tguo.mutation.SetGoalsForMinute46To60Total(i)
	return tguo
}

// SetNillableGoalsForMinute46To60Total sets the "goalsForMinute46To60Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute46To60Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute46To60Total(*i)
	}
	return tguo
}

// AddGoalsForMinute46To60Total adds i to the "goalsForMinute46To60Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute46To60Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute46To60Total(i)
	return tguo
}

// ClearGoalsForMinute46To60Total clears the value of the "goalsForMinute46To60Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute46To60Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute46To60Total()
	return tguo
}

// SetGoalsForMinute46To60Percentage sets the "goalsForMinute46To60Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute46To60Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute46To60Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute46To60Percentage sets the "goalsForMinute46To60Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute46To60Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute46To60Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute46To60Percentage clears the value of the "goalsForMinute46To60Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute46To60Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute46To60Percentage()
	return tguo
}

// SetGoalsForMinute61To75Total sets the "goalsForMinute61To75Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute61To75Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute61To75Total()
	tguo.mutation.SetGoalsForMinute61To75Total(i)
	return tguo
}

// SetNillableGoalsForMinute61To75Total sets the "goalsForMinute61To75Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute61To75Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute61To75Total(*i)
	}
	return tguo
}

// AddGoalsForMinute61To75Total adds i to the "goalsForMinute61To75Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute61To75Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute61To75Total(i)
	return tguo
}

// ClearGoalsForMinute61To75Total clears the value of the "goalsForMinute61To75Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute61To75Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute61To75Total()
	return tguo
}

// SetGoalsForMinute61To75Percentage sets the "goalsForMinute61To75Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute61To75Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute61To75Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute61To75Percentage sets the "goalsForMinute61To75Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute61To75Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute61To75Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute61To75Percentage clears the value of the "goalsForMinute61To75Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute61To75Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute61To75Percentage()
	return tguo
}

// SetGoalsForMinute76To90Total sets the "goalsForMinute76To90Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute76To90Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute76To90Total()
	tguo.mutation.SetGoalsForMinute76To90Total(i)
	return tguo
}

// SetNillableGoalsForMinute76To90Total sets the "goalsForMinute76To90Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute76To90Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute76To90Total(*i)
	}
	return tguo
}

// AddGoalsForMinute76To90Total adds i to the "goalsForMinute76To90Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute76To90Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute76To90Total(i)
	return tguo
}

// ClearGoalsForMinute76To90Total clears the value of the "goalsForMinute76To90Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute76To90Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute76To90Total()
	return tguo
}

// SetGoalsForMinute76To90Percentage sets the "goalsForMinute76To90Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute76To90Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute76To90Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute76To90Percentage sets the "goalsForMinute76To90Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute76To90Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute76To90Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute76To90Percentage clears the value of the "goalsForMinute76To90Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute76To90Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute76To90Percentage()
	return tguo
}

// SetGoalsForMinute91To105Total sets the "goalsForMinute91To105Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute91To105Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute91To105Total()
	tguo.mutation.SetGoalsForMinute91To105Total(i)
	return tguo
}

// SetNillableGoalsForMinute91To105Total sets the "goalsForMinute91To105Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute91To105Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute91To105Total(*i)
	}
	return tguo
}

// AddGoalsForMinute91To105Total adds i to the "goalsForMinute91To105Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute91To105Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute91To105Total(i)
	return tguo
}

// ClearGoalsForMinute91To105Total clears the value of the "goalsForMinute91To105Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute91To105Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute91To105Total()
	return tguo
}

// SetGoalsForMinute91To105Percentage sets the "goalsForMinute91To105Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute91To105Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute91To105Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute91To105Percentage sets the "goalsForMinute91To105Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute91To105Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute91To105Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute91To105Percentage clears the value of the "goalsForMinute91To105Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute91To105Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute91To105Percentage()
	return tguo
}

// SetGoalsForMinute106To120Total sets the "goalsForMinute106To120Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute106To120Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsForMinute106To120Total()
	tguo.mutation.SetGoalsForMinute106To120Total(i)
	return tguo
}

// SetNillableGoalsForMinute106To120Total sets the "goalsForMinute106To120Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute106To120Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsForMinute106To120Total(*i)
	}
	return tguo
}

// AddGoalsForMinute106To120Total adds i to the "goalsForMinute106To120Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsForMinute106To120Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsForMinute106To120Total(i)
	return tguo
}

// ClearGoalsForMinute106To120Total clears the value of the "goalsForMinute106To120Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute106To120Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute106To120Total()
	return tguo
}

// SetGoalsForMinute106To120Percentage sets the "goalsForMinute106To120Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsForMinute106To120Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsForMinute106To120Percentage(s)
	return tguo
}

// SetNillableGoalsForMinute106To120Percentage sets the "goalsForMinute106To120Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsForMinute106To120Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsForMinute106To120Percentage(*s)
	}
	return tguo
}

// ClearGoalsForMinute106To120Percentage clears the value of the "goalsForMinute106To120Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsForMinute106To120Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsForMinute106To120Percentage()
	return tguo
}

// SetGoalsAgainstTotalHome sets the "goalsAgainstTotalHome" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstTotalHome(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstTotalHome()
	tguo.mutation.SetGoalsAgainstTotalHome(i)
	return tguo
}

// SetNillableGoalsAgainstTotalHome sets the "goalsAgainstTotalHome" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstTotalHome(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstTotalHome(*i)
	}
	return tguo
}

// AddGoalsAgainstTotalHome adds i to the "goalsAgainstTotalHome" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstTotalHome(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstTotalHome(i)
	return tguo
}

// ClearGoalsAgainstTotalHome clears the value of the "goalsAgainstTotalHome" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstTotalHome() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstTotalHome()
	return tguo
}

// SetGoalsAgainstTotalAway sets the "goalsAgainstTotalAway" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstTotalAway(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstTotalAway()
	tguo.mutation.SetGoalsAgainstTotalAway(i)
	return tguo
}

// SetNillableGoalsAgainstTotalAway sets the "goalsAgainstTotalAway" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstTotalAway(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstTotalAway(*i)
	}
	return tguo
}

// AddGoalsAgainstTotalAway adds i to the "goalsAgainstTotalAway" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstTotalAway(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstTotalAway(i)
	return tguo
}

// ClearGoalsAgainstTotalAway clears the value of the "goalsAgainstTotalAway" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstTotalAway() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstTotalAway()
	return tguo
}

// SetGoalsAgainstTotal sets the "goalsAgainstTotal" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstTotal(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstTotal()
	tguo.mutation.SetGoalsAgainstTotal(i)
	return tguo
}

// SetNillableGoalsAgainstTotal sets the "goalsAgainstTotal" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstTotal(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstTotal(*i)
	}
	return tguo
}

// AddGoalsAgainstTotal adds i to the "goalsAgainstTotal" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstTotal(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstTotal(i)
	return tguo
}

// ClearGoalsAgainstTotal clears the value of the "goalsAgainstTotal" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstTotal() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstTotal()
	return tguo
}

// SetGoalsAgainstAverageHome sets the "goalsAgainstAverageHome" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstAverageHome(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstAverageHome(s)
	return tguo
}

// SetNillableGoalsAgainstAverageHome sets the "goalsAgainstAverageHome" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstAverageHome(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstAverageHome(*s)
	}
	return tguo
}

// ClearGoalsAgainstAverageHome clears the value of the "goalsAgainstAverageHome" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstAverageHome() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstAverageHome()
	return tguo
}

// SetGoalsAgainstAverageAway sets the "goalsAgainstAverageAway" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstAverageAway(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstAverageAway(s)
	return tguo
}

// SetNillableGoalsAgainstAverageAway sets the "goalsAgainstAverageAway" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstAverageAway(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstAverageAway(*s)
	}
	return tguo
}

// ClearGoalsAgainstAverageAway clears the value of the "goalsAgainstAverageAway" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstAverageAway() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstAverageAway()
	return tguo
}

// SetGoalsAgainstAverageTotal sets the "goalsAgainstAverageTotal" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstAverageTotal(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstAverageTotal(s)
	return tguo
}

// SetNillableGoalsAgainstAverageTotal sets the "goalsAgainstAverageTotal" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstAverageTotal(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstAverageTotal(*s)
	}
	return tguo
}

// ClearGoalsAgainstAverageTotal clears the value of the "goalsAgainstAverageTotal" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstAverageTotal() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstAverageTotal()
	return tguo
}

// SetGoalsAgainstMinute0To15Total sets the "goalsAgainstMinute0To15Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute0To15Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute0To15Total()
	tguo.mutation.SetGoalsAgainstMinute0To15Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute0To15Total sets the "goalsAgainstMinute0To15Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute0To15Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute0To15Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute0To15Total adds i to the "goalsAgainstMinute0To15Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute0To15Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute0To15Total(i)
	return tguo
}

// ClearGoalsAgainstMinute0To15Total clears the value of the "goalsAgainstMinute0To15Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute0To15Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute0To15Total()
	return tguo
}

// SetGoalsAgainstMinute0To15Percentage sets the "goalsAgainstMinute0To15Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute0To15Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute0To15Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute0To15Percentage sets the "goalsAgainstMinute0To15Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute0To15Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute0To15Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute0To15Percentage clears the value of the "goalsAgainstMinute0To15Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute0To15Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute0To15Percentage()
	return tguo
}

// SetGoalsAgainstMinute16To30Total sets the "goalsAgainstMinute16To30Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute16To30Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute16To30Total()
	tguo.mutation.SetGoalsAgainstMinute16To30Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute16To30Total sets the "goalsAgainstMinute16To30Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute16To30Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute16To30Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute16To30Total adds i to the "goalsAgainstMinute16To30Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute16To30Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute16To30Total(i)
	return tguo
}

// ClearGoalsAgainstMinute16To30Total clears the value of the "goalsAgainstMinute16To30Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute16To30Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute16To30Total()
	return tguo
}

// SetGoalsAgainstMinute16To30Percentage sets the "goalsAgainstMinute16To30Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute16To30Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute16To30Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute16To30Percentage sets the "goalsAgainstMinute16To30Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute16To30Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute16To30Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute16To30Percentage clears the value of the "goalsAgainstMinute16To30Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute16To30Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute16To30Percentage()
	return tguo
}

// SetGoalsAgainstMinute31To45Total sets the "goalsAgainstMinute31To45Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute31To45Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute31To45Total()
	tguo.mutation.SetGoalsAgainstMinute31To45Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute31To45Total sets the "goalsAgainstMinute31To45Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute31To45Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute31To45Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute31To45Total adds i to the "goalsAgainstMinute31To45Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute31To45Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute31To45Total(i)
	return tguo
}

// ClearGoalsAgainstMinute31To45Total clears the value of the "goalsAgainstMinute31To45Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute31To45Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute31To45Total()
	return tguo
}

// SetGoalsAgainstMinute31To45Percentage sets the "goalsAgainstMinute31To45Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute31To45Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute31To45Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute31To45Percentage sets the "goalsAgainstMinute31To45Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute31To45Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute31To45Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute31To45Percentage clears the value of the "goalsAgainstMinute31To45Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute31To45Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute31To45Percentage()
	return tguo
}

// SetGoalsAgainstMinute46To60Total sets the "goalsAgainstMinute46To60Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute46To60Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute46To60Total()
	tguo.mutation.SetGoalsAgainstMinute46To60Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute46To60Total sets the "goalsAgainstMinute46To60Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute46To60Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute46To60Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute46To60Total adds i to the "goalsAgainstMinute46To60Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute46To60Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute46To60Total(i)
	return tguo
}

// ClearGoalsAgainstMinute46To60Total clears the value of the "goalsAgainstMinute46To60Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute46To60Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute46To60Total()
	return tguo
}

// SetGoalsAgainstMinute46To60Percentage sets the "goalsAgainstMinute46To60Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute46To60Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute46To60Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute46To60Percentage sets the "goalsAgainstMinute46To60Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute46To60Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute46To60Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute46To60Percentage clears the value of the "goalsAgainstMinute46To60Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute46To60Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute46To60Percentage()
	return tguo
}

// SetGoalsAgainstMinute61To75Total sets the "goalsAgainstMinute61To75Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute61To75Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute61To75Total()
	tguo.mutation.SetGoalsAgainstMinute61To75Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute61To75Total sets the "goalsAgainstMinute61To75Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute61To75Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute61To75Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute61To75Total adds i to the "goalsAgainstMinute61To75Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute61To75Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute61To75Total(i)
	return tguo
}

// ClearGoalsAgainstMinute61To75Total clears the value of the "goalsAgainstMinute61To75Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute61To75Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute61To75Total()
	return tguo
}

// SetGoalsAgainstMinute61To75Percentage sets the "goalsAgainstMinute61To75Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute61To75Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute61To75Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute61To75Percentage sets the "goalsAgainstMinute61To75Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute61To75Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute61To75Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute61To75Percentage clears the value of the "goalsAgainstMinute61To75Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute61To75Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute61To75Percentage()
	return tguo
}

// SetGoalsAgainstMinute76To90Total sets the "goalsAgainstMinute76To90Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute76To90Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute76To90Total()
	tguo.mutation.SetGoalsAgainstMinute76To90Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute76To90Total sets the "goalsAgainstMinute76To90Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute76To90Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute76To90Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute76To90Total adds i to the "goalsAgainstMinute76To90Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute76To90Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute76To90Total(i)
	return tguo
}

// ClearGoalsAgainstMinute76To90Total clears the value of the "goalsAgainstMinute76To90Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute76To90Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute76To90Total()
	return tguo
}

// SetGoalsAgainstMinute76To90Percentage sets the "goalsAgainstMinute76To90Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute76To90Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute76To90Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute76To90Percentage sets the "goalsAgainstMinute76To90Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute76To90Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute76To90Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute76To90Percentage clears the value of the "goalsAgainstMinute76To90Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute76To90Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute76To90Percentage()
	return tguo
}

// SetGoalsAgainstMinute91To105Total sets the "goalsAgainstMinute91To105Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute91To105Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute91To105Total()
	tguo.mutation.SetGoalsAgainstMinute91To105Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute91To105Total sets the "goalsAgainstMinute91To105Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute91To105Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute91To105Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute91To105Total adds i to the "goalsAgainstMinute91To105Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute91To105Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute91To105Total(i)
	return tguo
}

// ClearGoalsAgainstMinute91To105Total clears the value of the "goalsAgainstMinute91To105Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute91To105Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute91To105Total()
	return tguo
}

// SetGoalsAgainstMinute91To105Percentage sets the "goalsAgainstMinute91To105Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute91To105Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute91To105Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute91To105Percentage sets the "goalsAgainstMinute91To105Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute91To105Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute91To105Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute91To105Percentage clears the value of the "goalsAgainstMinute91To105Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute91To105Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute91To105Percentage()
	return tguo
}

// SetGoalsAgainstMinute106To120Total sets the "goalsAgainstMinute106To120Total" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute106To120Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.ResetGoalsAgainstMinute106To120Total()
	tguo.mutation.SetGoalsAgainstMinute106To120Total(i)
	return tguo
}

// SetNillableGoalsAgainstMinute106To120Total sets the "goalsAgainstMinute106To120Total" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute106To120Total(i *int) *TSGoalsUpdateOne {
	if i != nil {
		tguo.SetGoalsAgainstMinute106To120Total(*i)
	}
	return tguo
}

// AddGoalsAgainstMinute106To120Total adds i to the "goalsAgainstMinute106To120Total" field.
func (tguo *TSGoalsUpdateOne) AddGoalsAgainstMinute106To120Total(i int) *TSGoalsUpdateOne {
	tguo.mutation.AddGoalsAgainstMinute106To120Total(i)
	return tguo
}

// ClearGoalsAgainstMinute106To120Total clears the value of the "goalsAgainstMinute106To120Total" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute106To120Total() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute106To120Total()
	return tguo
}

// SetGoalsAgainstMinute106To120Percentage sets the "goalsAgainstMinute106To120Percentage" field.
func (tguo *TSGoalsUpdateOne) SetGoalsAgainstMinute106To120Percentage(s string) *TSGoalsUpdateOne {
	tguo.mutation.SetGoalsAgainstMinute106To120Percentage(s)
	return tguo
}

// SetNillableGoalsAgainstMinute106To120Percentage sets the "goalsAgainstMinute106To120Percentage" field if the given value is not nil.
func (tguo *TSGoalsUpdateOne) SetNillableGoalsAgainstMinute106To120Percentage(s *string) *TSGoalsUpdateOne {
	if s != nil {
		tguo.SetGoalsAgainstMinute106To120Percentage(*s)
	}
	return tguo
}

// ClearGoalsAgainstMinute106To120Percentage clears the value of the "goalsAgainstMinute106To120Percentage" field.
func (tguo *TSGoalsUpdateOne) ClearGoalsAgainstMinute106To120Percentage() *TSGoalsUpdateOne {
	tguo.mutation.ClearGoalsAgainstMinute106To120Percentage()
	return tguo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tguo *TSGoalsUpdateOne) SetLastUpdated(t time.Time) *TSGoalsUpdateOne {
	tguo.mutation.SetLastUpdated(t)
	return tguo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tguo *TSGoalsUpdateOne) ClearLastUpdated() *TSGoalsUpdateOne {
	tguo.mutation.ClearLastUpdated()
	return tguo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tguo *TSGoalsUpdateOne) SetTeamID(id int) *TSGoalsUpdateOne {
	tguo.mutation.SetTeamID(id)
	return tguo
}

// SetTeam sets the "team" edge to the Team entity.
func (tguo *TSGoalsUpdateOne) SetTeam(t *Team) *TSGoalsUpdateOne {
	return tguo.SetTeamID(t.ID)
}

// Mutation returns the TSGoalsMutation object of the builder.
func (tguo *TSGoalsUpdateOne) Mutation() *TSGoalsMutation {
	return tguo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tguo *TSGoalsUpdateOne) ClearTeam() *TSGoalsUpdateOne {
	tguo.mutation.ClearTeam()
	return tguo
}

// Where appends a list predicates to the TSGoalsUpdate builder.
func (tguo *TSGoalsUpdateOne) Where(ps ...predicate.TSGoals) *TSGoalsUpdateOne {
	tguo.mutation.Where(ps...)
	return tguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tguo *TSGoalsUpdateOne) Select(field string, fields ...string) *TSGoalsUpdateOne {
	tguo.fields = append([]string{field}, fields...)
	return tguo
}

// Save executes the query and returns the updated TSGoals entity.
func (tguo *TSGoalsUpdateOne) Save(ctx context.Context) (*TSGoals, error) {
	tguo.defaults()
	return withHooks[*TSGoals, TSGoalsMutation](ctx, tguo.sqlSave, tguo.mutation, tguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tguo *TSGoalsUpdateOne) SaveX(ctx context.Context) *TSGoals {
	node, err := tguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tguo *TSGoalsUpdateOne) Exec(ctx context.Context) error {
	_, err := tguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tguo *TSGoalsUpdateOne) ExecX(ctx context.Context) {
	if err := tguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tguo *TSGoalsUpdateOne) defaults() {
	if _, ok := tguo.mutation.LastUpdated(); !ok && !tguo.mutation.LastUpdatedCleared() {
		v := tsgoals.UpdateDefaultLastUpdated()
		tguo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tguo *TSGoalsUpdateOne) check() error {
	if _, ok := tguo.mutation.TeamID(); tguo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSGoals.team"`)
	}
	return nil
}

func (tguo *TSGoalsUpdateOne) sqlSave(ctx context.Context) (_node *TSGoals, err error) {
	if err := tguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsgoals.Table, tsgoals.Columns, sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt))
	id, ok := tguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSGoals.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tsgoals.FieldID)
		for _, f := range fields {
			if !tsgoals.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tsgoals.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tguo.mutation.GoalsForTotalHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotalHome, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForTotalHome(); ok {
		_spec.AddField(tsgoals.FieldGoalsForTotalHome, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForTotalHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForTotalHome, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForTotalAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotalAway, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForTotalAway(); ok {
		_spec.AddField(tsgoals.FieldGoalsForTotalAway, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForTotalAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForTotalAway, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotal, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForTotal(); ok {
		_spec.AddField(tsgoals.FieldGoalsForTotal, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForTotal, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForAverageHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageHome, field.TypeString, value)
	}
	if tguo.mutation.GoalsForAverageHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForAverageHome, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForAverageAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageAway, field.TypeString, value)
	}
	if tguo.mutation.GoalsForAverageAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForAverageAway, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForAverageTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageTotal, field.TypeString, value)
	}
	if tguo.mutation.GoalsForAverageTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForAverageTotal, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute0To15Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute0To15Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute0To15Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute0To15Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute0To15TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute0To15Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute0To15Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute0To15Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute0To15PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute0To15Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute16To30Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute16To30Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute16To30Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute16To30Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute16To30TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute16To30Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute16To30Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute16To30Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute16To30PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute16To30Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute31To45Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute31To45Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute31To45Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute31To45Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute31To45TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute31To45Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute31To45Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute31To45Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute31To45PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute31To45Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute46To60Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute46To60Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute46To60Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute46To60Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute46To60TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute46To60Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute46To60Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute46To60Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute46To60PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute46To60Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute61To75Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute61To75Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute61To75Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute61To75Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute61To75TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute61To75Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute61To75Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute61To75Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute61To75PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute61To75Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute76To90Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute76To90Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute76To90Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute76To90Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute76To90TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute76To90Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute76To90Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute76To90Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute76To90PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute76To90Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute91To105Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute91To105Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute91To105Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute91To105Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute91To105TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute91To105Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute91To105Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute91To105Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute91To105PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute91To105Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsForMinute106To120Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute106To120Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsForMinute106To120Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsForMinute106To120Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsForMinute106To120TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute106To120Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsForMinute106To120Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute106To120Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsForMinute106To120PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsForMinute106To120Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstTotalHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotalHome, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstTotalHome(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstTotalHome, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstTotalHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstTotalHome, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstTotalAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotalAway, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstTotalAway(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstTotalAway, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstTotalAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstTotalAway, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotal, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstTotal(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstTotal, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstTotal, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstAverageHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageHome, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstAverageHomeCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstAverageHome, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstAverageAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageAway, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstAverageAwayCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstAverageAway, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstAverageTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageTotal, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstAverageTotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstAverageTotal, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute0To15Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute0To15Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute0To15Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute0To15Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute0To15TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute0To15Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute0To15Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute0To15Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute0To15PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute0To15Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute16To30Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute16To30Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute16To30Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute16To30Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute16To30TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute16To30Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute16To30Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute16To30Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute16To30PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute16To30Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute31To45Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute31To45Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute31To45Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute31To45Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute31To45TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute31To45Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute31To45Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute31To45Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute31To45PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute31To45Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute46To60Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute46To60Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute46To60Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute46To60Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute46To60TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute46To60Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute46To60Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute46To60Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute46To60PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute46To60Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute61To75Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute61To75Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute61To75Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute61To75Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute61To75TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute61To75Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute61To75Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute61To75Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute61To75PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute61To75Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute76To90Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute76To90Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute76To90Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute76To90Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute76To90TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute76To90Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute76To90Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute76To90Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute76To90PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute76To90Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute91To105Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute91To105Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute91To105Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute91To105Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute91To105TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute91To105Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute91To105Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute91To105Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute91To105PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute91To105Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute106To120Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute106To120Total, field.TypeInt, value)
	}
	if value, ok := tguo.mutation.AddedGoalsAgainstMinute106To120Total(); ok {
		_spec.AddField(tsgoals.FieldGoalsAgainstMinute106To120Total, field.TypeInt, value)
	}
	if tguo.mutation.GoalsAgainstMinute106To120TotalCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute106To120Total, field.TypeInt)
	}
	if value, ok := tguo.mutation.GoalsAgainstMinute106To120Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute106To120Percentage, field.TypeString, value)
	}
	if tguo.mutation.GoalsAgainstMinute106To120PercentageCleared() {
		_spec.ClearField(tsgoals.FieldGoalsAgainstMinute106To120Percentage, field.TypeString)
	}
	if value, ok := tguo.mutation.LastUpdated(); ok {
		_spec.SetField(tsgoals.FieldLastUpdated, field.TypeTime, value)
	}
	if tguo.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsgoals.FieldLastUpdated, field.TypeTime)
	}
	if tguo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsgoals.TeamTable,
			Columns: []string{tsgoals.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tguo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsgoals.TeamTable,
			Columns: []string{tsgoals.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TSGoals{config: tguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsgoals.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tguo.mutation.done = true
	return _node, nil
}
