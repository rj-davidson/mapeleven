// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/playerteamseason"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/teamseason"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamSeasonUpdate is the builder for updating TeamSeason entities.
type TeamSeasonUpdate struct {
	config
	hooks    []Hook
	mutation *TeamSeasonMutation
}

// Where appends a list predicates to the TeamSeasonUpdate builder.
func (tsu *TeamSeasonUpdate) Where(ps ...predicate.TeamSeason) *TeamSeasonUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetTeamSeasonID sets the "team_season_id" field.
func (tsu *TeamSeasonUpdate) SetTeamSeasonID(i int) *TeamSeasonUpdate {
	tsu.mutation.ResetTeamSeasonID()
	tsu.mutation.SetTeamSeasonID(i)
	return tsu
}

// AddTeamSeasonID adds i to the "team_season_id" field.
func (tsu *TeamSeasonUpdate) AddTeamSeasonID(i int) *TeamSeasonUpdate {
	tsu.mutation.AddTeamSeasonID(i)
	return tsu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tsu *TeamSeasonUpdate) SetTeamID(id int) *TeamSeasonUpdate {
	tsu.mutation.SetTeamID(id)
	return tsu
}

// SetTeam sets the "team" edge to the Team entity.
func (tsu *TeamSeasonUpdate) SetTeam(t *Team) *TeamSeasonUpdate {
	return tsu.SetTeamID(t.ID)
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (tsu *TeamSeasonUpdate) SetSeasonID(id int) *TeamSeasonUpdate {
	tsu.mutation.SetSeasonID(id)
	return tsu
}

// SetSeason sets the "season" edge to the Season entity.
func (tsu *TeamSeasonUpdate) SetSeason(s *Season) *TeamSeasonUpdate {
	return tsu.SetSeasonID(s.ID)
}

// AddPlayerTeamSeasonIDs adds the "playerTeamSeasons" edge to the PlayerTeamSeason entity by IDs.
func (tsu *TeamSeasonUpdate) AddPlayerTeamSeasonIDs(ids ...int) *TeamSeasonUpdate {
	tsu.mutation.AddPlayerTeamSeasonIDs(ids...)
	return tsu
}

// AddPlayerTeamSeasons adds the "playerTeamSeasons" edges to the PlayerTeamSeason entity.
func (tsu *TeamSeasonUpdate) AddPlayerTeamSeasons(p ...*PlayerTeamSeason) *TeamSeasonUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tsu.AddPlayerTeamSeasonIDs(ids...)
}

// Mutation returns the TeamSeasonMutation object of the builder.
func (tsu *TeamSeasonUpdate) Mutation() *TeamSeasonMutation {
	return tsu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tsu *TeamSeasonUpdate) ClearTeam() *TeamSeasonUpdate {
	tsu.mutation.ClearTeam()
	return tsu
}

// ClearSeason clears the "season" edge to the Season entity.
func (tsu *TeamSeasonUpdate) ClearSeason() *TeamSeasonUpdate {
	tsu.mutation.ClearSeason()
	return tsu
}

// ClearPlayerTeamSeasons clears all "playerTeamSeasons" edges to the PlayerTeamSeason entity.
func (tsu *TeamSeasonUpdate) ClearPlayerTeamSeasons() *TeamSeasonUpdate {
	tsu.mutation.ClearPlayerTeamSeasons()
	return tsu
}

// RemovePlayerTeamSeasonIDs removes the "playerTeamSeasons" edge to PlayerTeamSeason entities by IDs.
func (tsu *TeamSeasonUpdate) RemovePlayerTeamSeasonIDs(ids ...int) *TeamSeasonUpdate {
	tsu.mutation.RemovePlayerTeamSeasonIDs(ids...)
	return tsu
}

// RemovePlayerTeamSeasons removes "playerTeamSeasons" edges to PlayerTeamSeason entities.
func (tsu *TeamSeasonUpdate) RemovePlayerTeamSeasons(p ...*PlayerTeamSeason) *TeamSeasonUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tsu.RemovePlayerTeamSeasonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TeamSeasonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TeamSeasonMutation](ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TeamSeasonUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TeamSeasonUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TeamSeasonUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TeamSeasonUpdate) check() error {
	if _, ok := tsu.mutation.TeamID(); tsu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamSeason.team"`)
	}
	if _, ok := tsu.mutation.SeasonID(); tsu.mutation.SeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamSeason.season"`)
	}
	return nil
}

func (tsu *TeamSeasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(teamseason.Table, teamseason.Columns, sqlgraph.NewFieldSpec(teamseason.FieldID, field.TypeInt))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.TeamSeasonID(); ok {
		_spec.SetField(teamseason.FieldTeamSeasonID, field.TypeInt, value)
	}
	if value, ok := tsu.mutation.AddedTeamSeasonID(); ok {
		_spec.AddField(teamseason.FieldTeamSeasonID, field.TypeInt, value)
	}
	if tsu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.TeamTable,
			Columns: []string{teamseason.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.TeamTable,
			Columns: []string{teamseason.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.SeasonTable,
			Columns: []string{teamseason.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.SeasonTable,
			Columns: []string{teamseason.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.PlayerTeamSeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamseason.PlayerTeamSeasonsTable,
			Columns: []string{teamseason.PlayerTeamSeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedPlayerTeamSeasonsIDs(); len(nodes) > 0 && !tsu.mutation.PlayerTeamSeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamseason.PlayerTeamSeasonsTable,
			Columns: []string{teamseason.PlayerTeamSeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.PlayerTeamSeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamseason.PlayerTeamSeasonsTable,
			Columns: []string{teamseason.PlayerTeamSeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamseason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TeamSeasonUpdateOne is the builder for updating a single TeamSeason entity.
type TeamSeasonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamSeasonMutation
}

// SetTeamSeasonID sets the "team_season_id" field.
func (tsuo *TeamSeasonUpdateOne) SetTeamSeasonID(i int) *TeamSeasonUpdateOne {
	tsuo.mutation.ResetTeamSeasonID()
	tsuo.mutation.SetTeamSeasonID(i)
	return tsuo
}

// AddTeamSeasonID adds i to the "team_season_id" field.
func (tsuo *TeamSeasonUpdateOne) AddTeamSeasonID(i int) *TeamSeasonUpdateOne {
	tsuo.mutation.AddTeamSeasonID(i)
	return tsuo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tsuo *TeamSeasonUpdateOne) SetTeamID(id int) *TeamSeasonUpdateOne {
	tsuo.mutation.SetTeamID(id)
	return tsuo
}

// SetTeam sets the "team" edge to the Team entity.
func (tsuo *TeamSeasonUpdateOne) SetTeam(t *Team) *TeamSeasonUpdateOne {
	return tsuo.SetTeamID(t.ID)
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (tsuo *TeamSeasonUpdateOne) SetSeasonID(id int) *TeamSeasonUpdateOne {
	tsuo.mutation.SetSeasonID(id)
	return tsuo
}

// SetSeason sets the "season" edge to the Season entity.
func (tsuo *TeamSeasonUpdateOne) SetSeason(s *Season) *TeamSeasonUpdateOne {
	return tsuo.SetSeasonID(s.ID)
}

// AddPlayerTeamSeasonIDs adds the "playerTeamSeasons" edge to the PlayerTeamSeason entity by IDs.
func (tsuo *TeamSeasonUpdateOne) AddPlayerTeamSeasonIDs(ids ...int) *TeamSeasonUpdateOne {
	tsuo.mutation.AddPlayerTeamSeasonIDs(ids...)
	return tsuo
}

// AddPlayerTeamSeasons adds the "playerTeamSeasons" edges to the PlayerTeamSeason entity.
func (tsuo *TeamSeasonUpdateOne) AddPlayerTeamSeasons(p ...*PlayerTeamSeason) *TeamSeasonUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tsuo.AddPlayerTeamSeasonIDs(ids...)
}

// Mutation returns the TeamSeasonMutation object of the builder.
func (tsuo *TeamSeasonUpdateOne) Mutation() *TeamSeasonMutation {
	return tsuo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tsuo *TeamSeasonUpdateOne) ClearTeam() *TeamSeasonUpdateOne {
	tsuo.mutation.ClearTeam()
	return tsuo
}

// ClearSeason clears the "season" edge to the Season entity.
func (tsuo *TeamSeasonUpdateOne) ClearSeason() *TeamSeasonUpdateOne {
	tsuo.mutation.ClearSeason()
	return tsuo
}

// ClearPlayerTeamSeasons clears all "playerTeamSeasons" edges to the PlayerTeamSeason entity.
func (tsuo *TeamSeasonUpdateOne) ClearPlayerTeamSeasons() *TeamSeasonUpdateOne {
	tsuo.mutation.ClearPlayerTeamSeasons()
	return tsuo
}

// RemovePlayerTeamSeasonIDs removes the "playerTeamSeasons" edge to PlayerTeamSeason entities by IDs.
func (tsuo *TeamSeasonUpdateOne) RemovePlayerTeamSeasonIDs(ids ...int) *TeamSeasonUpdateOne {
	tsuo.mutation.RemovePlayerTeamSeasonIDs(ids...)
	return tsuo
}

// RemovePlayerTeamSeasons removes "playerTeamSeasons" edges to PlayerTeamSeason entities.
func (tsuo *TeamSeasonUpdateOne) RemovePlayerTeamSeasons(p ...*PlayerTeamSeason) *TeamSeasonUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tsuo.RemovePlayerTeamSeasonIDs(ids...)
}

// Where appends a list predicates to the TeamSeasonUpdate builder.
func (tsuo *TeamSeasonUpdateOne) Where(ps ...predicate.TeamSeason) *TeamSeasonUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TeamSeasonUpdateOne) Select(field string, fields ...string) *TeamSeasonUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TeamSeason entity.
func (tsuo *TeamSeasonUpdateOne) Save(ctx context.Context) (*TeamSeason, error) {
	return withHooks[*TeamSeason, TeamSeasonMutation](ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TeamSeasonUpdateOne) SaveX(ctx context.Context) *TeamSeason {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TeamSeasonUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TeamSeasonUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TeamSeasonUpdateOne) check() error {
	if _, ok := tsuo.mutation.TeamID(); tsuo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamSeason.team"`)
	}
	if _, ok := tsuo.mutation.SeasonID(); tsuo.mutation.SeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamSeason.season"`)
	}
	return nil
}

func (tsuo *TeamSeasonUpdateOne) sqlSave(ctx context.Context) (_node *TeamSeason, err error) {
	if err := tsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teamseason.Table, teamseason.Columns, sqlgraph.NewFieldSpec(teamseason.FieldID, field.TypeInt))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeamSeason.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamseason.FieldID)
		for _, f := range fields {
			if !teamseason.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teamseason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.TeamSeasonID(); ok {
		_spec.SetField(teamseason.FieldTeamSeasonID, field.TypeInt, value)
	}
	if value, ok := tsuo.mutation.AddedTeamSeasonID(); ok {
		_spec.AddField(teamseason.FieldTeamSeasonID, field.TypeInt, value)
	}
	if tsuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.TeamTable,
			Columns: []string{teamseason.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.TeamTable,
			Columns: []string{teamseason.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.SeasonTable,
			Columns: []string{teamseason.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.SeasonTable,
			Columns: []string{teamseason.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.PlayerTeamSeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamseason.PlayerTeamSeasonsTable,
			Columns: []string{teamseason.PlayerTeamSeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedPlayerTeamSeasonsIDs(); len(nodes) > 0 && !tsuo.mutation.PlayerTeamSeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamseason.PlayerTeamSeasonsTable,
			Columns: []string{teamseason.PlayerTeamSeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.PlayerTeamSeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamseason.PlayerTeamSeasonsTable,
			Columns: []string{teamseason.PlayerTeamSeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeamSeason{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamseason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
