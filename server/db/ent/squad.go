// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/squad"
	"mapeleven/db/ent/team"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Squad is the model entity for the Squad schema.
type Squad struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SquadQuery when eager-loading is set.
	Edges        SquadEdges `json:"edges"`
	player_squad *int
	team_squad   *int
	selectValues sql.SelectValues
}

// SquadEdges holds the relations/edges for other nodes in the graph.
type SquadEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SquadEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[0] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SquadEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Squad) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case squad.FieldID, squad.FieldNumber:
			values[i] = new(sql.NullInt64)
		case squad.FieldPosition:
			values[i] = new(sql.NullString)
		case squad.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case squad.ForeignKeys[0]: // player_squad
			values[i] = new(sql.NullInt64)
		case squad.ForeignKeys[1]: // team_squad
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Squad fields.
func (s *Squad) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case squad.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case squad.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				s.Position = value.String
			}
		case squad.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				s.Number = int(value.Int64)
			}
		case squad.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				s.LastUpdated = value.Time
			}
		case squad.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_squad", value)
			} else if value.Valid {
				s.player_squad = new(int)
				*s.player_squad = int(value.Int64)
			}
		case squad.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_squad", value)
			} else if value.Valid {
				s.team_squad = new(int)
				*s.team_squad = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Squad.
// This includes values selected through modifiers, order, etc.
func (s *Squad) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the Squad entity.
func (s *Squad) QueryPlayer() *PlayerQuery {
	return NewSquadClient(s.config).QueryPlayer(s)
}

// QueryTeam queries the "team" edge of the Squad entity.
func (s *Squad) QueryTeam() *TeamQuery {
	return NewSquadClient(s.config).QueryTeam(s)
}

// Update returns a builder for updating this Squad.
// Note that you need to call Squad.Unwrap() before calling this method if this Squad
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Squad) Update() *SquadUpdateOne {
	return NewSquadClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Squad entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Squad) Unwrap() *Squad {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Squad is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Squad) String() string {
	var builder strings.Builder
	builder.WriteString("Squad(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("position=")
	builder.WriteString(s.Position)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", s.Number))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(s.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Squads is a parsable slice of Squad.
type Squads []*Squad
