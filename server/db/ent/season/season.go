// Code generated by ent, DO NOT EDIT.

package season

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the season type in the database.
	Label = "season"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldCurrent holds the string denoting the current field in the database.
	FieldCurrent = "current"
	// EdgeLeague holds the string denoting the league edge name in mutations.
	EdgeLeague = "league"
	// EdgeTeamSeasons holds the string denoting the teamseasons edge name in mutations.
	EdgeTeamSeasons = "teamSeasons"
	// Table holds the table name of the season in the database.
	Table = "seasons"
	// LeagueTable is the table that holds the league relation/edge.
	LeagueTable = "leagues"
	// LeagueInverseTable is the table name for the League entity.
	// It exists in this package in order to avoid circular dependency with the "league" package.
	LeagueInverseTable = "leagues"
	// LeagueColumn is the table column denoting the league relation/edge.
	LeagueColumn = "season_league"
	// TeamSeasonsTable is the table that holds the teamSeasons relation/edge.
	TeamSeasonsTable = "team_seasons"
	// TeamSeasonsInverseTable is the table name for the TeamSeason entity.
	// It exists in this package in order to avoid circular dependency with the "teamseason" package.
	TeamSeasonsInverseTable = "team_seasons"
	// TeamSeasonsColumn is the table column denoting the teamSeasons relation/edge.
	TeamSeasonsColumn = "season_team_seasons"
)

// Columns holds all SQL columns for season fields.
var Columns = []string{
	FieldID,
	FieldYear,
	FieldStart,
	FieldEnd,
	FieldCurrent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCurrent holds the default value on creation for the "current" field.
	DefaultCurrent bool
)

// Order defines the ordering method for the Season queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByEnd orders the results by the end field.
func ByEnd(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEnd, opts...).ToFunc()
}

// ByCurrent orders the results by the current field.
func ByCurrent(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCurrent, opts...).ToFunc()
}

// ByLeagueField orders the results by league field.
func ByLeagueField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeagueStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamSeasonsCount orders the results by teamSeasons count.
func ByTeamSeasonsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeamSeasonsStep(), opts...)
	}
}

// ByTeamSeasons orders the results by teamSeasons terms.
func ByTeamSeasons(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamSeasonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLeagueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeagueInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, LeagueTable, LeagueColumn),
	)
}
func newTeamSeasonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamSeasonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TeamSeasonsTable, TeamSeasonsColumn),
	)
}
