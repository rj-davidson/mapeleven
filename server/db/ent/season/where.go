// Code generated by ent, DO NOT EDIT.

package season

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSlug, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldYear, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldEndDate, v))
}

// Current applies equality check predicate on the "current" field. It's identical to CurrentEQ.
func Current(v bool) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldCurrent, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Season {
	return predicate.Season(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Season {
	return predicate.Season(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Season {
	return predicate.Season(sql.FieldContainsFold(FieldSlug, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldYear, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldEndDate, v))
}

// CurrentEQ applies the EQ predicate on the "current" field.
func CurrentEQ(v bool) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldCurrent, v))
}

// CurrentNEQ applies the NEQ predicate on the "current" field.
func CurrentNEQ(v bool) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldCurrent, v))
}

// HasLeague applies the HasEdge predicate on the "league" edge.
func HasLeague() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeagueTable, LeagueColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeagueWith applies the HasEdge predicate on the "league" edge with a given conditions (other predicates).
func HasLeagueWith(preds ...predicate.League) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newLeagueStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixtures applies the HasEdge predicate on the "fixtures" edge.
func HasFixtures() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixturesTable, FixturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixturesWith applies the HasEdge predicate on the "fixtures" edge with a given conditions (other predicates).
func HasFixturesWith(preds ...predicate.Fixture) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newFixturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStandings applies the HasEdge predicate on the "standings" edge.
func HasStandings() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StandingsTable, StandingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStandingsWith applies the HasEdge predicate on the "standings" edge with a given conditions (other predicates).
func HasStandingsWith(preds ...predicate.Standings) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newStandingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeams applies the HasEdge predicate on the "teams" edge.
func HasTeams() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeamsTable, TeamsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamsWith applies the HasEdge predicate on the "teams" edge with a given conditions (other predicates).
func HasTeamsWith(preds ...predicate.Team) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newTeamsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerSeasons applies the HasEdge predicate on the "playerSeasons" edge.
func HasPlayerSeasons() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayerSeasonsTable, PlayerSeasonsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerSeasonsWith applies the HasEdge predicate on the "playerSeasons" edge with a given conditions (other predicates).
func HasPlayerSeasonsWith(preds ...predicate.PlayerSeason) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newPlayerSeasonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Season) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Season) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Season) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		p(s.Not())
	})
}
