// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/playerteamseason"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/teamseason"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamSeasonCreate is the builder for creating a TeamSeason entity.
type TeamSeasonCreate struct {
	config
	mutation *TeamSeasonMutation
	hooks    []Hook
}

// SetTeamSeasonID sets the "team_season_id" field.
func (tsc *TeamSeasonCreate) SetTeamSeasonID(i int) *TeamSeasonCreate {
	tsc.mutation.SetTeamSeasonID(i)
	return tsc
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tsc *TeamSeasonCreate) SetTeamID(id int) *TeamSeasonCreate {
	tsc.mutation.SetTeamID(id)
	return tsc
}

// SetTeam sets the "team" edge to the Team entity.
func (tsc *TeamSeasonCreate) SetTeam(t *Team) *TeamSeasonCreate {
	return tsc.SetTeamID(t.ID)
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (tsc *TeamSeasonCreate) SetSeasonID(id int) *TeamSeasonCreate {
	tsc.mutation.SetSeasonID(id)
	return tsc
}

// SetSeason sets the "season" edge to the Season entity.
func (tsc *TeamSeasonCreate) SetSeason(s *Season) *TeamSeasonCreate {
	return tsc.SetSeasonID(s.ID)
}

// AddPlayerTeamSeasonIDs adds the "playerTeamSeasons" edge to the PlayerTeamSeason entity by IDs.
func (tsc *TeamSeasonCreate) AddPlayerTeamSeasonIDs(ids ...int) *TeamSeasonCreate {
	tsc.mutation.AddPlayerTeamSeasonIDs(ids...)
	return tsc
}

// AddPlayerTeamSeasons adds the "playerTeamSeasons" edges to the PlayerTeamSeason entity.
func (tsc *TeamSeasonCreate) AddPlayerTeamSeasons(p ...*PlayerTeamSeason) *TeamSeasonCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tsc.AddPlayerTeamSeasonIDs(ids...)
}

// Mutation returns the TeamSeasonMutation object of the builder.
func (tsc *TeamSeasonCreate) Mutation() *TeamSeasonMutation {
	return tsc.mutation
}

// Save creates the TeamSeason in the database.
func (tsc *TeamSeasonCreate) Save(ctx context.Context) (*TeamSeason, error) {
	return withHooks[*TeamSeason, TeamSeasonMutation](ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TeamSeasonCreate) SaveX(ctx context.Context) *TeamSeason {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TeamSeasonCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TeamSeasonCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TeamSeasonCreate) check() error {
	if _, ok := tsc.mutation.TeamSeasonID(); !ok {
		return &ValidationError{Name: "team_season_id", err: errors.New(`ent: missing required field "TeamSeason.team_season_id"`)}
	}
	if _, ok := tsc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "TeamSeason.team"`)}
	}
	if _, ok := tsc.mutation.SeasonID(); !ok {
		return &ValidationError{Name: "season", err: errors.New(`ent: missing required edge "TeamSeason.season"`)}
	}
	return nil
}

func (tsc *TeamSeasonCreate) sqlSave(ctx context.Context) (*TeamSeason, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TeamSeasonCreate) createSpec() (*TeamSeason, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamSeason{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(teamseason.Table, sqlgraph.NewFieldSpec(teamseason.FieldID, field.TypeInt))
	)
	if value, ok := tsc.mutation.TeamSeasonID(); ok {
		_spec.SetField(teamseason.FieldTeamSeasonID, field.TypeInt, value)
		_node.TeamSeasonID = value
	}
	if nodes := tsc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.TeamTable,
			Columns: []string{teamseason.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_team_seasons = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamseason.SeasonTable,
			Columns: []string{teamseason.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.season_team_seasons = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.PlayerTeamSeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamseason.PlayerTeamSeasonsTable,
			Columns: []string{teamseason.PlayerTeamSeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeamSeasonCreateBulk is the builder for creating many TeamSeason entities in bulk.
type TeamSeasonCreateBulk struct {
	config
	builders []*TeamSeasonCreate
}

// Save creates the TeamSeason entities in the database.
func (tscb *TeamSeasonCreateBulk) Save(ctx context.Context) ([]*TeamSeason, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TeamSeason, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamSeasonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TeamSeasonCreateBulk) SaveX(ctx context.Context) []*TeamSeason {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TeamSeasonCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TeamSeasonCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
