// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"mapeleven/db/ent/fixture"
	"mapeleven/db/ent/fixturelineups"
	"mapeleven/db/ent/matchplayer"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/team"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureLineupsQuery is the builder for querying FixtureLineups entities.
type FixtureLineupsQuery struct {
	config
	ctx              *QueryContext
	order            []fixturelineups.Order
	inters           []Interceptor
	predicates       []predicate.FixtureLineups
	withTeam         *TeamQuery
	withFixture      *FixtureQuery
	withLineupPlayer *MatchPlayerQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FixtureLineupsQuery builder.
func (flq *FixtureLineupsQuery) Where(ps ...predicate.FixtureLineups) *FixtureLineupsQuery {
	flq.predicates = append(flq.predicates, ps...)
	return flq
}

// Limit the number of records to be returned by this query.
func (flq *FixtureLineupsQuery) Limit(limit int) *FixtureLineupsQuery {
	flq.ctx.Limit = &limit
	return flq
}

// Offset to start from.
func (flq *FixtureLineupsQuery) Offset(offset int) *FixtureLineupsQuery {
	flq.ctx.Offset = &offset
	return flq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (flq *FixtureLineupsQuery) Unique(unique bool) *FixtureLineupsQuery {
	flq.ctx.Unique = &unique
	return flq
}

// Order specifies how the records should be ordered.
func (flq *FixtureLineupsQuery) Order(o ...fixturelineups.Order) *FixtureLineupsQuery {
	flq.order = append(flq.order, o...)
	return flq
}

// QueryTeam chains the current query on the "team" edge.
func (flq *FixtureLineupsQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: flq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := flq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := flq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixturelineups.Table, fixturelineups.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixturelineups.TeamTable, fixturelineups.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(flq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixture chains the current query on the "fixture" edge.
func (flq *FixtureLineupsQuery) QueryFixture() *FixtureQuery {
	query := (&FixtureClient{config: flq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := flq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := flq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixturelineups.Table, fixturelineups.FieldID, selector),
			sqlgraph.To(fixture.Table, fixture.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixturelineups.FixtureTable, fixturelineups.FixtureColumn),
		)
		fromU = sqlgraph.SetNeighbors(flq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLineupPlayer chains the current query on the "lineupPlayer" edge.
func (flq *FixtureLineupsQuery) QueryLineupPlayer() *MatchPlayerQuery {
	query := (&MatchPlayerClient{config: flq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := flq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := flq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixturelineups.Table, fixturelineups.FieldID, selector),
			sqlgraph.To(matchplayer.Table, matchplayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fixturelineups.LineupPlayerTable, fixturelineups.LineupPlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(flq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FixtureLineups entity from the query.
// Returns a *NotFoundError when no FixtureLineups was found.
func (flq *FixtureLineupsQuery) First(ctx context.Context) (*FixtureLineups, error) {
	nodes, err := flq.Limit(1).All(setContextOp(ctx, flq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{fixturelineups.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (flq *FixtureLineupsQuery) FirstX(ctx context.Context) *FixtureLineups {
	node, err := flq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FixtureLineups ID from the query.
// Returns a *NotFoundError when no FixtureLineups ID was found.
func (flq *FixtureLineupsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = flq.Limit(1).IDs(setContextOp(ctx, flq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fixturelineups.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (flq *FixtureLineupsQuery) FirstIDX(ctx context.Context) int {
	id, err := flq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FixtureLineups entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FixtureLineups entity is found.
// Returns a *NotFoundError when no FixtureLineups entities are found.
func (flq *FixtureLineupsQuery) Only(ctx context.Context) (*FixtureLineups, error) {
	nodes, err := flq.Limit(2).All(setContextOp(ctx, flq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{fixturelineups.Label}
	default:
		return nil, &NotSingularError{fixturelineups.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (flq *FixtureLineupsQuery) OnlyX(ctx context.Context) *FixtureLineups {
	node, err := flq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FixtureLineups ID in the query.
// Returns a *NotSingularError when more than one FixtureLineups ID is found.
// Returns a *NotFoundError when no entities are found.
func (flq *FixtureLineupsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = flq.Limit(2).IDs(setContextOp(ctx, flq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fixturelineups.Label}
	default:
		err = &NotSingularError{fixturelineups.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (flq *FixtureLineupsQuery) OnlyIDX(ctx context.Context) int {
	id, err := flq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FixtureLineupsSlice.
func (flq *FixtureLineupsQuery) All(ctx context.Context) ([]*FixtureLineups, error) {
	ctx = setContextOp(ctx, flq.ctx, "All")
	if err := flq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FixtureLineups, *FixtureLineupsQuery]()
	return withInterceptors[[]*FixtureLineups](ctx, flq, qr, flq.inters)
}

// AllX is like All, but panics if an error occurs.
func (flq *FixtureLineupsQuery) AllX(ctx context.Context) []*FixtureLineups {
	nodes, err := flq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FixtureLineups IDs.
func (flq *FixtureLineupsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if flq.ctx.Unique == nil && flq.path != nil {
		flq.Unique(true)
	}
	ctx = setContextOp(ctx, flq.ctx, "IDs")
	if err = flq.Select(fixturelineups.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (flq *FixtureLineupsQuery) IDsX(ctx context.Context) []int {
	ids, err := flq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (flq *FixtureLineupsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, flq.ctx, "Count")
	if err := flq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, flq, querierCount[*FixtureLineupsQuery](), flq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (flq *FixtureLineupsQuery) CountX(ctx context.Context) int {
	count, err := flq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (flq *FixtureLineupsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, flq.ctx, "Exist")
	switch _, err := flq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (flq *FixtureLineupsQuery) ExistX(ctx context.Context) bool {
	exist, err := flq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FixtureLineupsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (flq *FixtureLineupsQuery) Clone() *FixtureLineupsQuery {
	if flq == nil {
		return nil
	}
	return &FixtureLineupsQuery{
		config:           flq.config,
		ctx:              flq.ctx.Clone(),
		order:            append([]fixturelineups.Order{}, flq.order...),
		inters:           append([]Interceptor{}, flq.inters...),
		predicates:       append([]predicate.FixtureLineups{}, flq.predicates...),
		withTeam:         flq.withTeam.Clone(),
		withFixture:      flq.withFixture.Clone(),
		withLineupPlayer: flq.withLineupPlayer.Clone(),
		// clone intermediate query.
		sql:  flq.sql.Clone(),
		path: flq.path,
	}
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (flq *FixtureLineupsQuery) WithTeam(opts ...func(*TeamQuery)) *FixtureLineupsQuery {
	query := (&TeamClient{config: flq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	flq.withTeam = query
	return flq
}

// WithFixture tells the query-builder to eager-load the nodes that are connected to
// the "fixture" edge. The optional arguments are used to configure the query builder of the edge.
func (flq *FixtureLineupsQuery) WithFixture(opts ...func(*FixtureQuery)) *FixtureLineupsQuery {
	query := (&FixtureClient{config: flq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	flq.withFixture = query
	return flq
}

// WithLineupPlayer tells the query-builder to eager-load the nodes that are connected to
// the "lineupPlayer" edge. The optional arguments are used to configure the query builder of the edge.
func (flq *FixtureLineupsQuery) WithLineupPlayer(opts ...func(*MatchPlayerQuery)) *FixtureLineupsQuery {
	query := (&MatchPlayerClient{config: flq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	flq.withLineupPlayer = query
	return flq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Formation string `json:"formation,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FixtureLineups.Query().
//		GroupBy(fixturelineups.FieldFormation).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (flq *FixtureLineupsQuery) GroupBy(field string, fields ...string) *FixtureLineupsGroupBy {
	flq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FixtureLineupsGroupBy{build: flq}
	grbuild.flds = &flq.ctx.Fields
	grbuild.label = fixturelineups.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Formation string `json:"formation,omitempty"`
//	}
//
//	client.FixtureLineups.Query().
//		Select(fixturelineups.FieldFormation).
//		Scan(ctx, &v)
func (flq *FixtureLineupsQuery) Select(fields ...string) *FixtureLineupsSelect {
	flq.ctx.Fields = append(flq.ctx.Fields, fields...)
	sbuild := &FixtureLineupsSelect{FixtureLineupsQuery: flq}
	sbuild.label = fixturelineups.Label
	sbuild.flds, sbuild.scan = &flq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FixtureLineupsSelect configured with the given aggregations.
func (flq *FixtureLineupsQuery) Aggregate(fns ...AggregateFunc) *FixtureLineupsSelect {
	return flq.Select().Aggregate(fns...)
}

func (flq *FixtureLineupsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range flq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, flq); err != nil {
				return err
			}
		}
	}
	for _, f := range flq.ctx.Fields {
		if !fixturelineups.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if flq.path != nil {
		prev, err := flq.path(ctx)
		if err != nil {
			return err
		}
		flq.sql = prev
	}
	return nil
}

func (flq *FixtureLineupsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FixtureLineups, error) {
	var (
		nodes       = []*FixtureLineups{}
		withFKs     = flq.withFKs
		_spec       = flq.querySpec()
		loadedTypes = [3]bool{
			flq.withTeam != nil,
			flq.withFixture != nil,
			flq.withLineupPlayer != nil,
		}
	)
	if flq.withTeam != nil || flq.withFixture != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, fixturelineups.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FixtureLineups).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FixtureLineups{config: flq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, flq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := flq.withTeam; query != nil {
		if err := flq.loadTeam(ctx, query, nodes, nil,
			func(n *FixtureLineups, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	if query := flq.withFixture; query != nil {
		if err := flq.loadFixture(ctx, query, nodes, nil,
			func(n *FixtureLineups, e *Fixture) { n.Edges.Fixture = e }); err != nil {
			return nil, err
		}
	}
	if query := flq.withLineupPlayer; query != nil {
		if err := flq.loadLineupPlayer(ctx, query, nodes,
			func(n *FixtureLineups) { n.Edges.LineupPlayer = []*MatchPlayer{} },
			func(n *FixtureLineups, e *MatchPlayer) { n.Edges.LineupPlayer = append(n.Edges.LineupPlayer, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (flq *FixtureLineupsQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*FixtureLineups, init func(*FixtureLineups), assign func(*FixtureLineups, *Team)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FixtureLineups)
	for i := range nodes {
		if nodes[i].team_fixture_lineups == nil {
			continue
		}
		fk := *nodes[i].team_fixture_lineups
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_fixture_lineups" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (flq *FixtureLineupsQuery) loadFixture(ctx context.Context, query *FixtureQuery, nodes []*FixtureLineups, init func(*FixtureLineups), assign func(*FixtureLineups, *Fixture)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FixtureLineups)
	for i := range nodes {
		if nodes[i].fixture_lineups == nil {
			continue
		}
		fk := *nodes[i].fixture_lineups
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(fixture.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "fixture_lineups" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (flq *FixtureLineupsQuery) loadLineupPlayer(ctx context.Context, query *MatchPlayerQuery, nodes []*FixtureLineups, init func(*FixtureLineups), assign func(*FixtureLineups, *MatchPlayer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*FixtureLineups)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MatchPlayer(func(s *sql.Selector) {
		s.Where(sql.InValues(fixturelineups.LineupPlayerColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.fixture_lineups_lineup_player
		if fk == nil {
			return fmt.Errorf(`foreign-key "fixture_lineups_lineup_player" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "fixture_lineups_lineup_player" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (flq *FixtureLineupsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := flq.querySpec()
	_spec.Node.Columns = flq.ctx.Fields
	if len(flq.ctx.Fields) > 0 {
		_spec.Unique = flq.ctx.Unique != nil && *flq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, flq.driver, _spec)
}

func (flq *FixtureLineupsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(fixturelineups.Table, fixturelineups.Columns, sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt))
	_spec.From = flq.sql
	if unique := flq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if flq.path != nil {
		_spec.Unique = true
	}
	if fields := flq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixturelineups.FieldID)
		for i := range fields {
			if fields[i] != fixturelineups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := flq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := flq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := flq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := flq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (flq *FixtureLineupsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(flq.driver.Dialect())
	t1 := builder.Table(fixturelineups.Table)
	columns := flq.ctx.Fields
	if len(columns) == 0 {
		columns = fixturelineups.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if flq.sql != nil {
		selector = flq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if flq.ctx.Unique != nil && *flq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range flq.predicates {
		p(selector)
	}
	for _, p := range flq.order {
		p(selector)
	}
	if offset := flq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := flq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FixtureLineupsGroupBy is the group-by builder for FixtureLineups entities.
type FixtureLineupsGroupBy struct {
	selector
	build *FixtureLineupsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (flgb *FixtureLineupsGroupBy) Aggregate(fns ...AggregateFunc) *FixtureLineupsGroupBy {
	flgb.fns = append(flgb.fns, fns...)
	return flgb
}

// Scan applies the selector query and scans the result into the given value.
func (flgb *FixtureLineupsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, flgb.build.ctx, "GroupBy")
	if err := flgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FixtureLineupsQuery, *FixtureLineupsGroupBy](ctx, flgb.build, flgb, flgb.build.inters, v)
}

func (flgb *FixtureLineupsGroupBy) sqlScan(ctx context.Context, root *FixtureLineupsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(flgb.fns))
	for _, fn := range flgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*flgb.flds)+len(flgb.fns))
		for _, f := range *flgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*flgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := flgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FixtureLineupsSelect is the builder for selecting fields of FixtureLineups entities.
type FixtureLineupsSelect struct {
	*FixtureLineupsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fls *FixtureLineupsSelect) Aggregate(fns ...AggregateFunc) *FixtureLineupsSelect {
	fls.fns = append(fls.fns, fns...)
	return fls
}

// Scan applies the selector query and scans the result into the given value.
func (fls *FixtureLineupsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fls.ctx, "Select")
	if err := fls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FixtureLineupsQuery, *FixtureLineupsSelect](ctx, fls.FixtureLineupsQuery, fls, fls.inters, v)
}

func (fls *FixtureLineupsSelect) sqlScan(ctx context.Context, root *FixtureLineupsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fls.fns))
	for _, fn := range fls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
