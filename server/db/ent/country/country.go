// Code generated by ent, DO NOT EDIT.

package country

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the country type in the database.
	Label = "country"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFlag holds the string denoting the flag field in the database.
	FieldFlag = "flag"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// EdgeLeagues holds the string denoting the leagues edge name in mutations.
	EdgeLeagues = "leagues"
	// EdgeClubs holds the string denoting the clubs edge name in mutations.
	EdgeClubs = "clubs"
	// Table holds the table name of the country in the database.
	Table = "countries"
	// PlayersTable is the table that holds the players relation/edge.
	PlayersTable = "players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
	// PlayersColumn is the table column denoting the players relation/edge.
	PlayersColumn = "country_players"
	// LeaguesTable is the table that holds the leagues relation/edge.
	LeaguesTable = "leagues"
	// LeaguesInverseTable is the table name for the League entity.
	// It exists in this package in order to avoid circular dependency with the "league" package.
	LeaguesInverseTable = "leagues"
	// LeaguesColumn is the table column denoting the leagues relation/edge.
	LeaguesColumn = "country_leagues"
	// ClubsTable is the table that holds the clubs relation/edge.
	ClubsTable = "clubs"
	// ClubsInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	ClubsInverseTable = "clubs"
	// ClubsColumn is the table column denoting the clubs relation/edge.
	ClubsColumn = "country_clubs"
)

// Columns holds all SQL columns for country fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldName,
	FieldFlag,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// Order defines the ordering method for the Country queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFlag orders the results by the flag field.
func ByFlag(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFlag, opts...).ToFunc()
}

// ByPlayersCount orders the results by players count.
func ByPlayersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayersStep(), opts...)
	}
}

// ByPlayers orders the results by players terms.
func ByPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLeaguesCount orders the results by leagues count.
func ByLeaguesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLeaguesStep(), opts...)
	}
}

// ByLeagues orders the results by leagues terms.
func ByLeagues(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeaguesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClubsCount orders the results by clubs count.
func ByClubsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClubsStep(), opts...)
	}
}

// ByClubs orders the results by clubs terms.
func ByClubs(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClubsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlayersTable, PlayersColumn),
	)
}
func newLeaguesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeaguesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LeaguesTable, LeaguesColumn),
	)
}
func newClubsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClubsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClubsTable, ClubsColumn),
	)
}
