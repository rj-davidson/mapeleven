// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/country"
	"mapeleven/db/ent/league"
	"mapeleven/db/ent/season"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeagueCreate is the builder for creating a League entity.
type LeagueCreate struct {
	config
	mutation *LeagueMutation
	hooks    []Hook
}

// SetFootballApiId sets the "footballApiId" field.
func (lc *LeagueCreate) SetFootballApiId(i int) *LeagueCreate {
	lc.mutation.SetFootballApiId(i)
	return lc
}

// SetSlug sets the "slug" field.
func (lc *LeagueCreate) SetSlug(s string) *LeagueCreate {
	lc.mutation.SetSlug(s)
	return lc
}

// SetName sets the "name" field.
func (lc *LeagueCreate) SetName(s string) *LeagueCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetType sets the "type" field.
func (lc *LeagueCreate) SetType(l league.Type) *LeagueCreate {
	lc.mutation.SetType(l)
	return lc
}

// SetLogo sets the "logo" field.
func (lc *LeagueCreate) SetLogo(s string) *LeagueCreate {
	lc.mutation.SetLogo(s)
	return lc
}

// SetLastUpdated sets the "lastUpdated" field.
func (lc *LeagueCreate) SetLastUpdated(t time.Time) *LeagueCreate {
	lc.mutation.SetLastUpdated(t)
	return lc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (lc *LeagueCreate) SetNillableLastUpdated(t *time.Time) *LeagueCreate {
	if t != nil {
		lc.SetLastUpdated(*t)
	}
	return lc
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (lc *LeagueCreate) SetCountryID(id int) *LeagueCreate {
	lc.mutation.SetCountryID(id)
	return lc
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (lc *LeagueCreate) SetNillableCountryID(id *int) *LeagueCreate {
	if id != nil {
		lc = lc.SetCountryID(*id)
	}
	return lc
}

// SetCountry sets the "country" edge to the Country entity.
func (lc *LeagueCreate) SetCountry(c *Country) *LeagueCreate {
	return lc.SetCountryID(c.ID)
}

// AddSeasonIDs adds the "season" edge to the Season entity by IDs.
func (lc *LeagueCreate) AddSeasonIDs(ids ...int) *LeagueCreate {
	lc.mutation.AddSeasonIDs(ids...)
	return lc
}

// AddSeason adds the "season" edges to the Season entity.
func (lc *LeagueCreate) AddSeason(s ...*Season) *LeagueCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lc.AddSeasonIDs(ids...)
}

// Mutation returns the LeagueMutation object of the builder.
func (lc *LeagueCreate) Mutation() *LeagueMutation {
	return lc.mutation
}

// Save creates the League in the database.
func (lc *LeagueCreate) Save(ctx context.Context) (*League, error) {
	lc.defaults()
	return withHooks[*League, LeagueMutation](ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LeagueCreate) SaveX(ctx context.Context) *League {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LeagueCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LeagueCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LeagueCreate) defaults() {
	if _, ok := lc.mutation.LastUpdated(); !ok {
		v := league.DefaultLastUpdated()
		lc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LeagueCreate) check() error {
	if _, ok := lc.mutation.FootballApiId(); !ok {
		return &ValidationError{Name: "footballApiId", err: errors.New(`ent: missing required field "League.footballApiId"`)}
	}
	if _, ok := lc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "League.slug"`)}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "League.name"`)}
	}
	if _, ok := lc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "League.type"`)}
	}
	if v, ok := lc.mutation.GetType(); ok {
		if err := league.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "League.type": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`ent: missing required field "League.logo"`)}
	}
	return nil
}

func (lc *LeagueCreate) sqlSave(ctx context.Context) (*League, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LeagueCreate) createSpec() (*League, *sqlgraph.CreateSpec) {
	var (
		_node = &League{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(league.Table, sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.FootballApiId(); ok {
		_spec.SetField(league.FieldFootballApiId, field.TypeInt, value)
		_node.FootballApiId = value
	}
	if value, ok := lc.mutation.Slug(); ok {
		_spec.SetField(league.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(league.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.GetType(); ok {
		_spec.SetField(league.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lc.mutation.Logo(); ok {
		_spec.SetField(league.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := lc.mutation.LastUpdated(); ok {
		_spec.SetField(league.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := lc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   league.CountryTable,
			Columns: []string{league.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_leagues = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.SeasonTable,
			Columns: []string{league.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LeagueCreateBulk is the builder for creating many League entities in bulk.
type LeagueCreateBulk struct {
	config
	builders []*LeagueCreate
}

// Save creates the League entities in the database.
func (lcb *LeagueCreateBulk) Save(ctx context.Context) ([]*League, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*League, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeagueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LeagueCreateBulk) SaveX(ctx context.Context) []*League {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LeagueCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LeagueCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
