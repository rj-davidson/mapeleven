// Code generated by ent, DO NOT EDIT.

package playerteamseason

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the playerteamseason type in the database.
	Label = "player_team_season"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlayerTeamSeasonID holds the string denoting the player_team_season_id field in the database.
	FieldPlayerTeamSeasonID = "player_team_season_id"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// EdgeTeamSeason holds the string denoting the teamseason edge name in mutations.
	EdgeTeamSeason = "teamSeason"
	// Table holds the table name of the playerteamseason in the database.
	Table = "player_team_seasons"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "player_team_seasons"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_player_team_seasons"
	// TeamSeasonTable is the table that holds the teamSeason relation/edge.
	TeamSeasonTable = "player_team_seasons"
	// TeamSeasonInverseTable is the table name for the TeamSeason entity.
	// It exists in this package in order to avoid circular dependency with the "teamseason" package.
	TeamSeasonInverseTable = "team_seasons"
	// TeamSeasonColumn is the table column denoting the teamSeason relation/edge.
	TeamSeasonColumn = "team_season_player_team_seasons"
)

// Columns holds all SQL columns for playerteamseason fields.
var Columns = []string{
	FieldID,
	FieldPlayerTeamSeasonID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "player_team_seasons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_player_team_seasons",
	"team_season_player_team_seasons",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the PlayerTeamSeason queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlayerTeamSeasonID orders the results by the player_team_season_id field.
func ByPlayerTeamSeasonID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPlayerTeamSeasonID, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamSeasonField orders the results by teamSeason field.
func ByTeamSeasonField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamSeasonStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
	)
}
func newTeamSeasonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamSeasonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamSeasonTable, TeamSeasonColumn),
	)
}
