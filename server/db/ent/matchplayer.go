// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/fixturelineups"
	"mapeleven/db/ent/matchplayer"
	"mapeleven/db/ent/player"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MatchPlayer is the model entity for the MatchPlayer schema.
type MatchPlayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// X holds the value of the "x" field.
	X string `json:"x,omitempty"`
	// Y holds the value of the "y" field.
	Y string `json:"y,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchPlayerQuery when eager-loading is set.
	Edges                         MatchPlayerEdges `json:"edges"`
	fixture_lineups_lineup_player *int
	player_match_player           *int
	selectValues                  sql.SelectValues
}

// MatchPlayerEdges holds the relations/edges for other nodes in the graph.
type MatchPlayerEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// Lineup holds the value of the lineup edge.
	Lineup *FixtureLineups `json:"lineup,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchPlayerEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[0] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// LineupOrErr returns the Lineup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchPlayerEdges) LineupOrErr() (*FixtureLineups, error) {
	if e.loadedTypes[1] {
		if e.Lineup == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fixturelineups.Label}
		}
		return e.Lineup, nil
	}
	return nil, &NotLoadedError{edge: "lineup"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MatchPlayer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case matchplayer.FieldID, matchplayer.FieldNumber:
			values[i] = new(sql.NullInt64)
		case matchplayer.FieldPosition, matchplayer.FieldX, matchplayer.FieldY:
			values[i] = new(sql.NullString)
		case matchplayer.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case matchplayer.ForeignKeys[0]: // fixture_lineups_lineup_player
			values[i] = new(sql.NullInt64)
		case matchplayer.ForeignKeys[1]: // player_match_player
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MatchPlayer fields.
func (mp *MatchPlayer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matchplayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int(value.Int64)
		case matchplayer.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				mp.Number = int(value.Int64)
			}
		case matchplayer.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				mp.Position = value.String
			}
		case matchplayer.FieldX:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field x", values[i])
			} else if value.Valid {
				mp.X = value.String
			}
		case matchplayer.FieldY:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				mp.Y = value.String
			}
		case matchplayer.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				mp.LastUpdated = value.Time
			}
		case matchplayer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fixture_lineups_lineup_player", value)
			} else if value.Valid {
				mp.fixture_lineups_lineup_player = new(int)
				*mp.fixture_lineups_lineup_player = int(value.Int64)
			}
		case matchplayer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_match_player", value)
			} else if value.Valid {
				mp.player_match_player = new(int)
				*mp.player_match_player = int(value.Int64)
			}
		default:
			mp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MatchPlayer.
// This includes values selected through modifiers, order, etc.
func (mp *MatchPlayer) Value(name string) (ent.Value, error) {
	return mp.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the MatchPlayer entity.
func (mp *MatchPlayer) QueryPlayer() *PlayerQuery {
	return NewMatchPlayerClient(mp.config).QueryPlayer(mp)
}

// QueryLineup queries the "lineup" edge of the MatchPlayer entity.
func (mp *MatchPlayer) QueryLineup() *FixtureLineupsQuery {
	return NewMatchPlayerClient(mp.config).QueryLineup(mp)
}

// Update returns a builder for updating this MatchPlayer.
// Note that you need to call MatchPlayer.Unwrap() before calling this method if this MatchPlayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MatchPlayer) Update() *MatchPlayerUpdateOne {
	return NewMatchPlayerClient(mp.config).UpdateOne(mp)
}

// Unwrap unwraps the MatchPlayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MatchPlayer) Unwrap() *MatchPlayer {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MatchPlayer is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MatchPlayer) String() string {
	var builder strings.Builder
	builder.WriteString("MatchPlayer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", mp.Number))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(mp.Position)
	builder.WriteString(", ")
	builder.WriteString("x=")
	builder.WriteString(mp.X)
	builder.WriteString(", ")
	builder.WriteString("y=")
	builder.WriteString(mp.Y)
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(mp.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MatchPlayers is a parsable slice of MatchPlayer.
type MatchPlayers []*MatchPlayer
