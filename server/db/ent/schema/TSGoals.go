package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	"time"
)

// TSGoals holds the schema definition for the TSGoals entity.
type TSGoals struct {
	ent.Schema
}

// Fields of the TSGoals.
func (TSGoals) Fields() []ent.Field {
	return []ent.Field{
		field.Int("goalsForTotalHome").
			Optional().
			Default(0),
		field.Int("goalsForTotalAway").
			Optional().
			Default(0),
		field.Int("goalsForTotal").
			Optional().
			Default(0),
		field.String("goalsForAverageHome").
			Default("0.00").
			Optional(),
		field.String("goalsForAverageAway").
			Default("0.00").
			Optional(),
		field.String("goalsForAverageTotal").
			Default("0.00").
			Optional(),
		field.Int("goalsForMinute0To15Total").
			Optional().
			Default(0),
		field.String("goalsForMinute0To15Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsForMinute16To30Total").
			Optional().
			Default(0),
		field.String("goalsForMinute16To30Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsForMinute31To45Total").
			Optional().
			Default(0),
		field.String("goalsForMinute31To45Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsForMinute46To60Total").
			Optional().
			Default(0),
		field.String("goalsForMinute46To60Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsForMinute61To75Total").
			Optional().
			Default(0),
		field.String("goalsForMinute61To75Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsForMinute76To90Total").
			Optional().
			Default(0),
		field.String("goalsForMinute76To90Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsForMinute91To105Total").
			Optional().
			Default(0),
		field.String("goalsForMinute91To105Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsForMinute106To120Total").
			Optional().
			Default(0),
		field.String("goalsForMinute106To120Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstTotalHome").
			Optional().
			Default(0),
		field.Int("goalsAgainstTotalAway").
			Optional().
			Default(0),
		field.Int("goalsAgainstTotal").
			Optional().
			Default(0),
		field.String("goalsAgainstAverageHome").
			Default("0.00").
			Optional(),
		field.String("goalsAgainstAverageAway").
			Default("0.00").
			Optional(),
		field.String("goalsAgainstAverageTotal").
			Default("0.00").
			Optional(),
		field.Int("goalsAgainstMinute0To15Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute0To15Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstMinute16To30Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute16To30Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstMinute31To45Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute31To45Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstMinute46To60Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute46To60Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstMinute61To75Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute61To75Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstMinute76To90Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute76To90Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstMinute91To105Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute91To105Percentage").
			Default("0%").
			Optional(),
		field.Int("goalsAgainstMinute106To120Total").
			Optional().
			Default(0),
		field.String("goalsAgainstMinute106To120Percentage").
			Default("0%").
			Optional(),
		field.Time("lastUpdated").
			Default(time.Now).
			Optional().
			UpdateDefault(time.Now),
	}
}

// Edges of the TSGoals.
func (TSGoals) Edges() []ent.Edge {
	return []ent.Edge{
		edge.From("team", Team.Type).
			Ref("goals_stats").
			Unique().
			Required(),
	}
}
