// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tsgoals"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSGoalsCreate is the builder for creating a TSGoals entity.
type TSGoalsCreate struct {
	config
	mutation *TSGoalsMutation
	hooks    []Hook
}

// SetGoalsForTotalHome sets the "goalsForTotalHome" field.
func (tgc *TSGoalsCreate) SetGoalsForTotalHome(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForTotalHome(i)
	return tgc
}

// SetNillableGoalsForTotalHome sets the "goalsForTotalHome" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForTotalHome(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForTotalHome(*i)
	}
	return tgc
}

// SetGoalsForTotalAway sets the "goalsForTotalAway" field.
func (tgc *TSGoalsCreate) SetGoalsForTotalAway(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForTotalAway(i)
	return tgc
}

// SetNillableGoalsForTotalAway sets the "goalsForTotalAway" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForTotalAway(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForTotalAway(*i)
	}
	return tgc
}

// SetGoalsForTotal sets the "goalsForTotal" field.
func (tgc *TSGoalsCreate) SetGoalsForTotal(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForTotal(i)
	return tgc
}

// SetNillableGoalsForTotal sets the "goalsForTotal" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForTotal(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForTotal(*i)
	}
	return tgc
}

// SetGoalsForAverageHome sets the "goalsForAverageHome" field.
func (tgc *TSGoalsCreate) SetGoalsForAverageHome(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForAverageHome(s)
	return tgc
}

// SetNillableGoalsForAverageHome sets the "goalsForAverageHome" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForAverageHome(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForAverageHome(*s)
	}
	return tgc
}

// SetGoalsForAverageAway sets the "goalsForAverageAway" field.
func (tgc *TSGoalsCreate) SetGoalsForAverageAway(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForAverageAway(s)
	return tgc
}

// SetNillableGoalsForAverageAway sets the "goalsForAverageAway" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForAverageAway(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForAverageAway(*s)
	}
	return tgc
}

// SetGoalsForAverageTotal sets the "goalsForAverageTotal" field.
func (tgc *TSGoalsCreate) SetGoalsForAverageTotal(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForAverageTotal(s)
	return tgc
}

// SetNillableGoalsForAverageTotal sets the "goalsForAverageTotal" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForAverageTotal(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForAverageTotal(*s)
	}
	return tgc
}

// SetGoalsForMinute0To15Total sets the "goalsForMinute0To15Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute0To15Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute0To15Total(i)
	return tgc
}

// SetNillableGoalsForMinute0To15Total sets the "goalsForMinute0To15Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute0To15Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute0To15Total(*i)
	}
	return tgc
}

// SetGoalsForMinute0To15Percentage sets the "goalsForMinute0To15Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute0To15Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute0To15Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute0To15Percentage sets the "goalsForMinute0To15Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute0To15Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute0To15Percentage(*s)
	}
	return tgc
}

// SetGoalsForMinute16To30Total sets the "goalsForMinute16To30Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute16To30Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute16To30Total(i)
	return tgc
}

// SetNillableGoalsForMinute16To30Total sets the "goalsForMinute16To30Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute16To30Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute16To30Total(*i)
	}
	return tgc
}

// SetGoalsForMinute16To30Percentage sets the "goalsForMinute16To30Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute16To30Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute16To30Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute16To30Percentage sets the "goalsForMinute16To30Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute16To30Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute16To30Percentage(*s)
	}
	return tgc
}

// SetGoalsForMinute31To45Total sets the "goalsForMinute31To45Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute31To45Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute31To45Total(i)
	return tgc
}

// SetNillableGoalsForMinute31To45Total sets the "goalsForMinute31To45Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute31To45Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute31To45Total(*i)
	}
	return tgc
}

// SetGoalsForMinute31To45Percentage sets the "goalsForMinute31To45Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute31To45Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute31To45Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute31To45Percentage sets the "goalsForMinute31To45Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute31To45Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute31To45Percentage(*s)
	}
	return tgc
}

// SetGoalsForMinute46To60Total sets the "goalsForMinute46To60Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute46To60Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute46To60Total(i)
	return tgc
}

// SetNillableGoalsForMinute46To60Total sets the "goalsForMinute46To60Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute46To60Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute46To60Total(*i)
	}
	return tgc
}

// SetGoalsForMinute46To60Percentage sets the "goalsForMinute46To60Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute46To60Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute46To60Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute46To60Percentage sets the "goalsForMinute46To60Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute46To60Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute46To60Percentage(*s)
	}
	return tgc
}

// SetGoalsForMinute61To75Total sets the "goalsForMinute61To75Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute61To75Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute61To75Total(i)
	return tgc
}

// SetNillableGoalsForMinute61To75Total sets the "goalsForMinute61To75Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute61To75Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute61To75Total(*i)
	}
	return tgc
}

// SetGoalsForMinute61To75Percentage sets the "goalsForMinute61To75Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute61To75Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute61To75Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute61To75Percentage sets the "goalsForMinute61To75Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute61To75Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute61To75Percentage(*s)
	}
	return tgc
}

// SetGoalsForMinute76To90Total sets the "goalsForMinute76To90Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute76To90Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute76To90Total(i)
	return tgc
}

// SetNillableGoalsForMinute76To90Total sets the "goalsForMinute76To90Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute76To90Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute76To90Total(*i)
	}
	return tgc
}

// SetGoalsForMinute76To90Percentage sets the "goalsForMinute76To90Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute76To90Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute76To90Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute76To90Percentage sets the "goalsForMinute76To90Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute76To90Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute76To90Percentage(*s)
	}
	return tgc
}

// SetGoalsForMinute91To105Total sets the "goalsForMinute91To105Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute91To105Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute91To105Total(i)
	return tgc
}

// SetNillableGoalsForMinute91To105Total sets the "goalsForMinute91To105Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute91To105Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute91To105Total(*i)
	}
	return tgc
}

// SetGoalsForMinute91To105Percentage sets the "goalsForMinute91To105Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute91To105Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute91To105Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute91To105Percentage sets the "goalsForMinute91To105Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute91To105Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute91To105Percentage(*s)
	}
	return tgc
}

// SetGoalsForMinute106To120Total sets the "goalsForMinute106To120Total" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute106To120Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute106To120Total(i)
	return tgc
}

// SetNillableGoalsForMinute106To120Total sets the "goalsForMinute106To120Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute106To120Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsForMinute106To120Total(*i)
	}
	return tgc
}

// SetGoalsForMinute106To120Percentage sets the "goalsForMinute106To120Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsForMinute106To120Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsForMinute106To120Percentage(s)
	return tgc
}

// SetNillableGoalsForMinute106To120Percentage sets the "goalsForMinute106To120Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsForMinute106To120Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsForMinute106To120Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstTotalHome sets the "goalsAgainstTotalHome" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstTotalHome(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstTotalHome(i)
	return tgc
}

// SetNillableGoalsAgainstTotalHome sets the "goalsAgainstTotalHome" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstTotalHome(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstTotalHome(*i)
	}
	return tgc
}

// SetGoalsAgainstTotalAway sets the "goalsAgainstTotalAway" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstTotalAway(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstTotalAway(i)
	return tgc
}

// SetNillableGoalsAgainstTotalAway sets the "goalsAgainstTotalAway" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstTotalAway(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstTotalAway(*i)
	}
	return tgc
}

// SetGoalsAgainstTotal sets the "goalsAgainstTotal" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstTotal(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstTotal(i)
	return tgc
}

// SetNillableGoalsAgainstTotal sets the "goalsAgainstTotal" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstTotal(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstTotal(*i)
	}
	return tgc
}

// SetGoalsAgainstAverageHome sets the "goalsAgainstAverageHome" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstAverageHome(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstAverageHome(s)
	return tgc
}

// SetNillableGoalsAgainstAverageHome sets the "goalsAgainstAverageHome" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstAverageHome(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstAverageHome(*s)
	}
	return tgc
}

// SetGoalsAgainstAverageAway sets the "goalsAgainstAverageAway" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstAverageAway(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstAverageAway(s)
	return tgc
}

// SetNillableGoalsAgainstAverageAway sets the "goalsAgainstAverageAway" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstAverageAway(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstAverageAway(*s)
	}
	return tgc
}

// SetGoalsAgainstAverageTotal sets the "goalsAgainstAverageTotal" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstAverageTotal(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstAverageTotal(s)
	return tgc
}

// SetNillableGoalsAgainstAverageTotal sets the "goalsAgainstAverageTotal" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstAverageTotal(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstAverageTotal(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute0To15Total sets the "goalsAgainstMinute0To15Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute0To15Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute0To15Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute0To15Total sets the "goalsAgainstMinute0To15Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute0To15Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute0To15Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute0To15Percentage sets the "goalsAgainstMinute0To15Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute0To15Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute0To15Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute0To15Percentage sets the "goalsAgainstMinute0To15Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute0To15Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute0To15Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute16To30Total sets the "goalsAgainstMinute16To30Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute16To30Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute16To30Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute16To30Total sets the "goalsAgainstMinute16To30Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute16To30Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute16To30Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute16To30Percentage sets the "goalsAgainstMinute16To30Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute16To30Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute16To30Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute16To30Percentage sets the "goalsAgainstMinute16To30Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute16To30Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute16To30Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute31To45Total sets the "goalsAgainstMinute31To45Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute31To45Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute31To45Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute31To45Total sets the "goalsAgainstMinute31To45Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute31To45Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute31To45Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute31To45Percentage sets the "goalsAgainstMinute31To45Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute31To45Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute31To45Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute31To45Percentage sets the "goalsAgainstMinute31To45Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute31To45Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute31To45Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute46To60Total sets the "goalsAgainstMinute46To60Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute46To60Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute46To60Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute46To60Total sets the "goalsAgainstMinute46To60Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute46To60Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute46To60Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute46To60Percentage sets the "goalsAgainstMinute46To60Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute46To60Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute46To60Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute46To60Percentage sets the "goalsAgainstMinute46To60Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute46To60Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute46To60Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute61To75Total sets the "goalsAgainstMinute61To75Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute61To75Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute61To75Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute61To75Total sets the "goalsAgainstMinute61To75Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute61To75Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute61To75Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute61To75Percentage sets the "goalsAgainstMinute61To75Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute61To75Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute61To75Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute61To75Percentage sets the "goalsAgainstMinute61To75Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute61To75Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute61To75Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute76To90Total sets the "goalsAgainstMinute76To90Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute76To90Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute76To90Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute76To90Total sets the "goalsAgainstMinute76To90Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute76To90Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute76To90Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute76To90Percentage sets the "goalsAgainstMinute76To90Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute76To90Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute76To90Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute76To90Percentage sets the "goalsAgainstMinute76To90Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute76To90Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute76To90Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute91To105Total sets the "goalsAgainstMinute91To105Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute91To105Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute91To105Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute91To105Total sets the "goalsAgainstMinute91To105Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute91To105Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute91To105Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute91To105Percentage sets the "goalsAgainstMinute91To105Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute91To105Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute91To105Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute91To105Percentage sets the "goalsAgainstMinute91To105Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute91To105Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute91To105Percentage(*s)
	}
	return tgc
}

// SetGoalsAgainstMinute106To120Total sets the "goalsAgainstMinute106To120Total" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute106To120Total(i int) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute106To120Total(i)
	return tgc
}

// SetNillableGoalsAgainstMinute106To120Total sets the "goalsAgainstMinute106To120Total" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute106To120Total(i *int) *TSGoalsCreate {
	if i != nil {
		tgc.SetGoalsAgainstMinute106To120Total(*i)
	}
	return tgc
}

// SetGoalsAgainstMinute106To120Percentage sets the "goalsAgainstMinute106To120Percentage" field.
func (tgc *TSGoalsCreate) SetGoalsAgainstMinute106To120Percentage(s string) *TSGoalsCreate {
	tgc.mutation.SetGoalsAgainstMinute106To120Percentage(s)
	return tgc
}

// SetNillableGoalsAgainstMinute106To120Percentage sets the "goalsAgainstMinute106To120Percentage" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableGoalsAgainstMinute106To120Percentage(s *string) *TSGoalsCreate {
	if s != nil {
		tgc.SetGoalsAgainstMinute106To120Percentage(*s)
	}
	return tgc
}

// SetLastUpdated sets the "lastUpdated" field.
func (tgc *TSGoalsCreate) SetLastUpdated(t time.Time) *TSGoalsCreate {
	tgc.mutation.SetLastUpdated(t)
	return tgc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (tgc *TSGoalsCreate) SetNillableLastUpdated(t *time.Time) *TSGoalsCreate {
	if t != nil {
		tgc.SetLastUpdated(*t)
	}
	return tgc
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tgc *TSGoalsCreate) SetTeamID(id int) *TSGoalsCreate {
	tgc.mutation.SetTeamID(id)
	return tgc
}

// SetTeam sets the "team" edge to the Team entity.
func (tgc *TSGoalsCreate) SetTeam(t *Team) *TSGoalsCreate {
	return tgc.SetTeamID(t.ID)
}

// Mutation returns the TSGoalsMutation object of the builder.
func (tgc *TSGoalsCreate) Mutation() *TSGoalsMutation {
	return tgc.mutation
}

// Save creates the TSGoals in the database.
func (tgc *TSGoalsCreate) Save(ctx context.Context) (*TSGoals, error) {
	tgc.defaults()
	return withHooks[*TSGoals, TSGoalsMutation](ctx, tgc.sqlSave, tgc.mutation, tgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tgc *TSGoalsCreate) SaveX(ctx context.Context) *TSGoals {
	v, err := tgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgc *TSGoalsCreate) Exec(ctx context.Context) error {
	_, err := tgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgc *TSGoalsCreate) ExecX(ctx context.Context) {
	if err := tgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgc *TSGoalsCreate) defaults() {
	if _, ok := tgc.mutation.GoalsForTotalHome(); !ok {
		v := tsgoals.DefaultGoalsForTotalHome
		tgc.mutation.SetGoalsForTotalHome(v)
	}
	if _, ok := tgc.mutation.GoalsForTotalAway(); !ok {
		v := tsgoals.DefaultGoalsForTotalAway
		tgc.mutation.SetGoalsForTotalAway(v)
	}
	if _, ok := tgc.mutation.GoalsForTotal(); !ok {
		v := tsgoals.DefaultGoalsForTotal
		tgc.mutation.SetGoalsForTotal(v)
	}
	if _, ok := tgc.mutation.GoalsForAverageHome(); !ok {
		v := tsgoals.DefaultGoalsForAverageHome
		tgc.mutation.SetGoalsForAverageHome(v)
	}
	if _, ok := tgc.mutation.GoalsForAverageAway(); !ok {
		v := tsgoals.DefaultGoalsForAverageAway
		tgc.mutation.SetGoalsForAverageAway(v)
	}
	if _, ok := tgc.mutation.GoalsForAverageTotal(); !ok {
		v := tsgoals.DefaultGoalsForAverageTotal
		tgc.mutation.SetGoalsForAverageTotal(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute0To15Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute0To15Total
		tgc.mutation.SetGoalsForMinute0To15Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute0To15Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute0To15Percentage
		tgc.mutation.SetGoalsForMinute0To15Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute16To30Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute16To30Total
		tgc.mutation.SetGoalsForMinute16To30Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute16To30Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute16To30Percentage
		tgc.mutation.SetGoalsForMinute16To30Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute31To45Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute31To45Total
		tgc.mutation.SetGoalsForMinute31To45Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute31To45Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute31To45Percentage
		tgc.mutation.SetGoalsForMinute31To45Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute46To60Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute46To60Total
		tgc.mutation.SetGoalsForMinute46To60Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute46To60Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute46To60Percentage
		tgc.mutation.SetGoalsForMinute46To60Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute61To75Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute61To75Total
		tgc.mutation.SetGoalsForMinute61To75Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute61To75Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute61To75Percentage
		tgc.mutation.SetGoalsForMinute61To75Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute76To90Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute76To90Total
		tgc.mutation.SetGoalsForMinute76To90Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute76To90Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute76To90Percentage
		tgc.mutation.SetGoalsForMinute76To90Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute91To105Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute91To105Total
		tgc.mutation.SetGoalsForMinute91To105Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute91To105Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute91To105Percentage
		tgc.mutation.SetGoalsForMinute91To105Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute106To120Total(); !ok {
		v := tsgoals.DefaultGoalsForMinute106To120Total
		tgc.mutation.SetGoalsForMinute106To120Total(v)
	}
	if _, ok := tgc.mutation.GoalsForMinute106To120Percentage(); !ok {
		v := tsgoals.DefaultGoalsForMinute106To120Percentage
		tgc.mutation.SetGoalsForMinute106To120Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstTotalHome(); !ok {
		v := tsgoals.DefaultGoalsAgainstTotalHome
		tgc.mutation.SetGoalsAgainstTotalHome(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstTotalAway(); !ok {
		v := tsgoals.DefaultGoalsAgainstTotalAway
		tgc.mutation.SetGoalsAgainstTotalAway(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstTotal(); !ok {
		v := tsgoals.DefaultGoalsAgainstTotal
		tgc.mutation.SetGoalsAgainstTotal(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstAverageHome(); !ok {
		v := tsgoals.DefaultGoalsAgainstAverageHome
		tgc.mutation.SetGoalsAgainstAverageHome(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstAverageAway(); !ok {
		v := tsgoals.DefaultGoalsAgainstAverageAway
		tgc.mutation.SetGoalsAgainstAverageAway(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstAverageTotal(); !ok {
		v := tsgoals.DefaultGoalsAgainstAverageTotal
		tgc.mutation.SetGoalsAgainstAverageTotal(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute0To15Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute0To15Total
		tgc.mutation.SetGoalsAgainstMinute0To15Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute0To15Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute0To15Percentage
		tgc.mutation.SetGoalsAgainstMinute0To15Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute16To30Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute16To30Total
		tgc.mutation.SetGoalsAgainstMinute16To30Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute16To30Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute16To30Percentage
		tgc.mutation.SetGoalsAgainstMinute16To30Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute31To45Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute31To45Total
		tgc.mutation.SetGoalsAgainstMinute31To45Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute31To45Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute31To45Percentage
		tgc.mutation.SetGoalsAgainstMinute31To45Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute46To60Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute46To60Total
		tgc.mutation.SetGoalsAgainstMinute46To60Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute46To60Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute46To60Percentage
		tgc.mutation.SetGoalsAgainstMinute46To60Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute61To75Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute61To75Total
		tgc.mutation.SetGoalsAgainstMinute61To75Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute61To75Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute61To75Percentage
		tgc.mutation.SetGoalsAgainstMinute61To75Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute76To90Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute76To90Total
		tgc.mutation.SetGoalsAgainstMinute76To90Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute76To90Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute76To90Percentage
		tgc.mutation.SetGoalsAgainstMinute76To90Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute91To105Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute91To105Total
		tgc.mutation.SetGoalsAgainstMinute91To105Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute91To105Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute91To105Percentage
		tgc.mutation.SetGoalsAgainstMinute91To105Percentage(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute106To120Total(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute106To120Total
		tgc.mutation.SetGoalsAgainstMinute106To120Total(v)
	}
	if _, ok := tgc.mutation.GoalsAgainstMinute106To120Percentage(); !ok {
		v := tsgoals.DefaultGoalsAgainstMinute106To120Percentage
		tgc.mutation.SetGoalsAgainstMinute106To120Percentage(v)
	}
	if _, ok := tgc.mutation.LastUpdated(); !ok {
		v := tsgoals.DefaultLastUpdated()
		tgc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgc *TSGoalsCreate) check() error {
	if _, ok := tgc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "TSGoals.team"`)}
	}
	return nil
}

func (tgc *TSGoalsCreate) sqlSave(ctx context.Context) (*TSGoals, error) {
	if err := tgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tgc.mutation.id = &_node.ID
	tgc.mutation.done = true
	return _node, nil
}

func (tgc *TSGoalsCreate) createSpec() (*TSGoals, *sqlgraph.CreateSpec) {
	var (
		_node = &TSGoals{config: tgc.config}
		_spec = sqlgraph.NewCreateSpec(tsgoals.Table, sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt))
	)
	if value, ok := tgc.mutation.GoalsForTotalHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotalHome, field.TypeInt, value)
		_node.GoalsForTotalHome = value
	}
	if value, ok := tgc.mutation.GoalsForTotalAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotalAway, field.TypeInt, value)
		_node.GoalsForTotalAway = value
	}
	if value, ok := tgc.mutation.GoalsForTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsForTotal, field.TypeInt, value)
		_node.GoalsForTotal = value
	}
	if value, ok := tgc.mutation.GoalsForAverageHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageHome, field.TypeString, value)
		_node.GoalsForAverageHome = value
	}
	if value, ok := tgc.mutation.GoalsForAverageAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageAway, field.TypeString, value)
		_node.GoalsForAverageAway = value
	}
	if value, ok := tgc.mutation.GoalsForAverageTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsForAverageTotal, field.TypeString, value)
		_node.GoalsForAverageTotal = value
	}
	if value, ok := tgc.mutation.GoalsForMinute0To15Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute0To15Total, field.TypeInt, value)
		_node.GoalsForMinute0To15Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute0To15Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute0To15Percentage, field.TypeString, value)
		_node.GoalsForMinute0To15Percentage = value
	}
	if value, ok := tgc.mutation.GoalsForMinute16To30Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute16To30Total, field.TypeInt, value)
		_node.GoalsForMinute16To30Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute16To30Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute16To30Percentage, field.TypeString, value)
		_node.GoalsForMinute16To30Percentage = value
	}
	if value, ok := tgc.mutation.GoalsForMinute31To45Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute31To45Total, field.TypeInt, value)
		_node.GoalsForMinute31To45Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute31To45Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute31To45Percentage, field.TypeString, value)
		_node.GoalsForMinute31To45Percentage = value
	}
	if value, ok := tgc.mutation.GoalsForMinute46To60Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute46To60Total, field.TypeInt, value)
		_node.GoalsForMinute46To60Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute46To60Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute46To60Percentage, field.TypeString, value)
		_node.GoalsForMinute46To60Percentage = value
	}
	if value, ok := tgc.mutation.GoalsForMinute61To75Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute61To75Total, field.TypeInt, value)
		_node.GoalsForMinute61To75Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute61To75Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute61To75Percentage, field.TypeString, value)
		_node.GoalsForMinute61To75Percentage = value
	}
	if value, ok := tgc.mutation.GoalsForMinute76To90Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute76To90Total, field.TypeInt, value)
		_node.GoalsForMinute76To90Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute76To90Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute76To90Percentage, field.TypeString, value)
		_node.GoalsForMinute76To90Percentage = value
	}
	if value, ok := tgc.mutation.GoalsForMinute91To105Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute91To105Total, field.TypeInt, value)
		_node.GoalsForMinute91To105Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute91To105Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute91To105Percentage, field.TypeString, value)
		_node.GoalsForMinute91To105Percentage = value
	}
	if value, ok := tgc.mutation.GoalsForMinute106To120Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute106To120Total, field.TypeInt, value)
		_node.GoalsForMinute106To120Total = value
	}
	if value, ok := tgc.mutation.GoalsForMinute106To120Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsForMinute106To120Percentage, field.TypeString, value)
		_node.GoalsForMinute106To120Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstTotalHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotalHome, field.TypeInt, value)
		_node.GoalsAgainstTotalHome = value
	}
	if value, ok := tgc.mutation.GoalsAgainstTotalAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotalAway, field.TypeInt, value)
		_node.GoalsAgainstTotalAway = value
	}
	if value, ok := tgc.mutation.GoalsAgainstTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstTotal, field.TypeInt, value)
		_node.GoalsAgainstTotal = value
	}
	if value, ok := tgc.mutation.GoalsAgainstAverageHome(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageHome, field.TypeString, value)
		_node.GoalsAgainstAverageHome = value
	}
	if value, ok := tgc.mutation.GoalsAgainstAverageAway(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageAway, field.TypeString, value)
		_node.GoalsAgainstAverageAway = value
	}
	if value, ok := tgc.mutation.GoalsAgainstAverageTotal(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstAverageTotal, field.TypeString, value)
		_node.GoalsAgainstAverageTotal = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute0To15Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute0To15Total, field.TypeInt, value)
		_node.GoalsAgainstMinute0To15Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute0To15Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute0To15Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute0To15Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute16To30Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute16To30Total, field.TypeInt, value)
		_node.GoalsAgainstMinute16To30Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute16To30Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute16To30Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute16To30Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute31To45Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute31To45Total, field.TypeInt, value)
		_node.GoalsAgainstMinute31To45Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute31To45Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute31To45Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute31To45Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute46To60Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute46To60Total, field.TypeInt, value)
		_node.GoalsAgainstMinute46To60Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute46To60Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute46To60Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute46To60Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute61To75Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute61To75Total, field.TypeInt, value)
		_node.GoalsAgainstMinute61To75Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute61To75Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute61To75Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute61To75Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute76To90Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute76To90Total, field.TypeInt, value)
		_node.GoalsAgainstMinute76To90Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute76To90Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute76To90Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute76To90Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute91To105Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute91To105Total, field.TypeInt, value)
		_node.GoalsAgainstMinute91To105Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute91To105Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute91To105Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute91To105Percentage = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute106To120Total(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute106To120Total, field.TypeInt, value)
		_node.GoalsAgainstMinute106To120Total = value
	}
	if value, ok := tgc.mutation.GoalsAgainstMinute106To120Percentage(); ok {
		_spec.SetField(tsgoals.FieldGoalsAgainstMinute106To120Percentage, field.TypeString, value)
		_node.GoalsAgainstMinute106To120Percentage = value
	}
	if value, ok := tgc.mutation.LastUpdated(); ok {
		_spec.SetField(tsgoals.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := tgc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsgoals.TeamTable,
			Columns: []string{tsgoals.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_goals_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TSGoalsCreateBulk is the builder for creating many TSGoals entities in bulk.
type TSGoalsCreateBulk struct {
	config
	builders []*TSGoalsCreate
}

// Save creates the TSGoals entities in the database.
func (tgcb *TSGoalsCreateBulk) Save(ctx context.Context) ([]*TSGoals, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tgcb.builders))
	nodes := make([]*TSGoals, len(tgcb.builders))
	mutators := make([]Mutator, len(tgcb.builders))
	for i := range tgcb.builders {
		func(i int, root context.Context) {
			builder := tgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TSGoalsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tgcb *TSGoalsCreateBulk) SaveX(ctx context.Context) []*TSGoals {
	v, err := tgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgcb *TSGoalsCreateBulk) Exec(ctx context.Context) error {
	_, err := tgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgcb *TSGoalsCreateBulk) ExecX(ctx context.Context) {
	if err := tgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
