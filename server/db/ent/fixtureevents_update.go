// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/fixtureevents"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/team"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureEventsUpdate is the builder for updating FixtureEvents entities.
type FixtureEventsUpdate struct {
	config
	hooks    []Hook
	mutation *FixtureEventsMutation
}

// Where appends a list predicates to the FixtureEventsUpdate builder.
func (feu *FixtureEventsUpdate) Where(ps ...predicate.FixtureEvents) *FixtureEventsUpdate {
	feu.mutation.Where(ps...)
	return feu
}

// SetElapsedTime sets the "elapsedTime" field.
func (feu *FixtureEventsUpdate) SetElapsedTime(s string) *FixtureEventsUpdate {
	feu.mutation.SetElapsedTime(s)
	return feu
}

// SetExtraTime sets the "extraTime" field.
func (feu *FixtureEventsUpdate) SetExtraTime(s string) *FixtureEventsUpdate {
	feu.mutation.SetExtraTime(s)
	return feu
}

// SetType sets the "type" field.
func (feu *FixtureEventsUpdate) SetType(s string) *FixtureEventsUpdate {
	feu.mutation.SetType(s)
	return feu
}

// SetDetail sets the "detail" field.
func (feu *FixtureEventsUpdate) SetDetail(s string) *FixtureEventsUpdate {
	feu.mutation.SetDetail(s)
	return feu
}

// SetComments sets the "comments" field.
func (feu *FixtureEventsUpdate) SetComments(s string) *FixtureEventsUpdate {
	feu.mutation.SetComments(s)
	return feu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (feu *FixtureEventsUpdate) SetNillableComments(s *string) *FixtureEventsUpdate {
	if s != nil {
		feu.SetComments(*s)
	}
	return feu
}

// ClearComments clears the value of the "comments" field.
func (feu *FixtureEventsUpdate) ClearComments() *FixtureEventsUpdate {
	feu.mutation.ClearComments()
	return feu
}

// SetLastUpdated sets the "lastUpdated" field.
func (feu *FixtureEventsUpdate) SetLastUpdated(t time.Time) *FixtureEventsUpdate {
	feu.mutation.SetLastUpdated(t)
	return feu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (feu *FixtureEventsUpdate) ClearLastUpdated() *FixtureEventsUpdate {
	feu.mutation.ClearLastUpdated()
	return feu
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (feu *FixtureEventsUpdate) SetPlayerID(id int) *FixtureEventsUpdate {
	feu.mutation.SetPlayerID(id)
	return feu
}

// SetPlayer sets the "player" edge to the Player entity.
func (feu *FixtureEventsUpdate) SetPlayer(p *Player) *FixtureEventsUpdate {
	return feu.SetPlayerID(p.ID)
}

// SetAssistID sets the "assist" edge to the Player entity by ID.
func (feu *FixtureEventsUpdate) SetAssistID(id int) *FixtureEventsUpdate {
	feu.mutation.SetAssistID(id)
	return feu
}

// SetNillableAssistID sets the "assist" edge to the Player entity by ID if the given value is not nil.
func (feu *FixtureEventsUpdate) SetNillableAssistID(id *int) *FixtureEventsUpdate {
	if id != nil {
		feu = feu.SetAssistID(*id)
	}
	return feu
}

// SetAssist sets the "assist" edge to the Player entity.
func (feu *FixtureEventsUpdate) SetAssist(p *Player) *FixtureEventsUpdate {
	return feu.SetAssistID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (feu *FixtureEventsUpdate) SetTeamID(id int) *FixtureEventsUpdate {
	feu.mutation.SetTeamID(id)
	return feu
}

// SetTeam sets the "team" edge to the Team entity.
func (feu *FixtureEventsUpdate) SetTeam(t *Team) *FixtureEventsUpdate {
	return feu.SetTeamID(t.ID)
}

// Mutation returns the FixtureEventsMutation object of the builder.
func (feu *FixtureEventsUpdate) Mutation() *FixtureEventsMutation {
	return feu.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (feu *FixtureEventsUpdate) ClearPlayer() *FixtureEventsUpdate {
	feu.mutation.ClearPlayer()
	return feu
}

// ClearAssist clears the "assist" edge to the Player entity.
func (feu *FixtureEventsUpdate) ClearAssist() *FixtureEventsUpdate {
	feu.mutation.ClearAssist()
	return feu
}

// ClearTeam clears the "team" edge to the Team entity.
func (feu *FixtureEventsUpdate) ClearTeam() *FixtureEventsUpdate {
	feu.mutation.ClearTeam()
	return feu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (feu *FixtureEventsUpdate) Save(ctx context.Context) (int, error) {
	feu.defaults()
	return withHooks[int, FixtureEventsMutation](ctx, feu.sqlSave, feu.mutation, feu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feu *FixtureEventsUpdate) SaveX(ctx context.Context) int {
	affected, err := feu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (feu *FixtureEventsUpdate) Exec(ctx context.Context) error {
	_, err := feu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feu *FixtureEventsUpdate) ExecX(ctx context.Context) {
	if err := feu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (feu *FixtureEventsUpdate) defaults() {
	if _, ok := feu.mutation.LastUpdated(); !ok && !feu.mutation.LastUpdatedCleared() {
		v := fixtureevents.UpdateDefaultLastUpdated()
		feu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (feu *FixtureEventsUpdate) check() error {
	if _, ok := feu.mutation.PlayerID(); feu.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureEvents.player"`)
	}
	if _, ok := feu.mutation.TeamID(); feu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureEvents.team"`)
	}
	return nil
}

func (feu *FixtureEventsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := feu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixtureevents.Table, fixtureevents.Columns, sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt))
	if ps := feu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feu.mutation.ElapsedTime(); ok {
		_spec.SetField(fixtureevents.FieldElapsedTime, field.TypeString, value)
	}
	if value, ok := feu.mutation.ExtraTime(); ok {
		_spec.SetField(fixtureevents.FieldExtraTime, field.TypeString, value)
	}
	if value, ok := feu.mutation.GetType(); ok {
		_spec.SetField(fixtureevents.FieldType, field.TypeString, value)
	}
	if value, ok := feu.mutation.Detail(); ok {
		_spec.SetField(fixtureevents.FieldDetail, field.TypeString, value)
	}
	if value, ok := feu.mutation.Comments(); ok {
		_spec.SetField(fixtureevents.FieldComments, field.TypeString, value)
	}
	if feu.mutation.CommentsCleared() {
		_spec.ClearField(fixtureevents.FieldComments, field.TypeString)
	}
	if value, ok := feu.mutation.LastUpdated(); ok {
		_spec.SetField(fixtureevents.FieldLastUpdated, field.TypeTime, value)
	}
	if feu.mutation.LastUpdatedCleared() {
		_spec.ClearField(fixtureevents.FieldLastUpdated, field.TypeTime)
	}
	if feu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.PlayerTable,
			Columns: []string{fixtureevents.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.PlayerTable,
			Columns: []string{fixtureevents.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if feu.mutation.AssistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.AssistTable,
			Columns: []string{fixtureevents.AssistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feu.mutation.AssistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.AssistTable,
			Columns: []string{fixtureevents.AssistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if feu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.TeamTable,
			Columns: []string{fixtureevents.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.TeamTable,
			Columns: []string{fixtureevents.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, feu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixtureevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	feu.mutation.done = true
	return n, nil
}

// FixtureEventsUpdateOne is the builder for updating a single FixtureEvents entity.
type FixtureEventsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FixtureEventsMutation
}

// SetElapsedTime sets the "elapsedTime" field.
func (feuo *FixtureEventsUpdateOne) SetElapsedTime(s string) *FixtureEventsUpdateOne {
	feuo.mutation.SetElapsedTime(s)
	return feuo
}

// SetExtraTime sets the "extraTime" field.
func (feuo *FixtureEventsUpdateOne) SetExtraTime(s string) *FixtureEventsUpdateOne {
	feuo.mutation.SetExtraTime(s)
	return feuo
}

// SetType sets the "type" field.
func (feuo *FixtureEventsUpdateOne) SetType(s string) *FixtureEventsUpdateOne {
	feuo.mutation.SetType(s)
	return feuo
}

// SetDetail sets the "detail" field.
func (feuo *FixtureEventsUpdateOne) SetDetail(s string) *FixtureEventsUpdateOne {
	feuo.mutation.SetDetail(s)
	return feuo
}

// SetComments sets the "comments" field.
func (feuo *FixtureEventsUpdateOne) SetComments(s string) *FixtureEventsUpdateOne {
	feuo.mutation.SetComments(s)
	return feuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (feuo *FixtureEventsUpdateOne) SetNillableComments(s *string) *FixtureEventsUpdateOne {
	if s != nil {
		feuo.SetComments(*s)
	}
	return feuo
}

// ClearComments clears the value of the "comments" field.
func (feuo *FixtureEventsUpdateOne) ClearComments() *FixtureEventsUpdateOne {
	feuo.mutation.ClearComments()
	return feuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (feuo *FixtureEventsUpdateOne) SetLastUpdated(t time.Time) *FixtureEventsUpdateOne {
	feuo.mutation.SetLastUpdated(t)
	return feuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (feuo *FixtureEventsUpdateOne) ClearLastUpdated() *FixtureEventsUpdateOne {
	feuo.mutation.ClearLastUpdated()
	return feuo
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (feuo *FixtureEventsUpdateOne) SetPlayerID(id int) *FixtureEventsUpdateOne {
	feuo.mutation.SetPlayerID(id)
	return feuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (feuo *FixtureEventsUpdateOne) SetPlayer(p *Player) *FixtureEventsUpdateOne {
	return feuo.SetPlayerID(p.ID)
}

// SetAssistID sets the "assist" edge to the Player entity by ID.
func (feuo *FixtureEventsUpdateOne) SetAssistID(id int) *FixtureEventsUpdateOne {
	feuo.mutation.SetAssistID(id)
	return feuo
}

// SetNillableAssistID sets the "assist" edge to the Player entity by ID if the given value is not nil.
func (feuo *FixtureEventsUpdateOne) SetNillableAssistID(id *int) *FixtureEventsUpdateOne {
	if id != nil {
		feuo = feuo.SetAssistID(*id)
	}
	return feuo
}

// SetAssist sets the "assist" edge to the Player entity.
func (feuo *FixtureEventsUpdateOne) SetAssist(p *Player) *FixtureEventsUpdateOne {
	return feuo.SetAssistID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (feuo *FixtureEventsUpdateOne) SetTeamID(id int) *FixtureEventsUpdateOne {
	feuo.mutation.SetTeamID(id)
	return feuo
}

// SetTeam sets the "team" edge to the Team entity.
func (feuo *FixtureEventsUpdateOne) SetTeam(t *Team) *FixtureEventsUpdateOne {
	return feuo.SetTeamID(t.ID)
}

// Mutation returns the FixtureEventsMutation object of the builder.
func (feuo *FixtureEventsUpdateOne) Mutation() *FixtureEventsMutation {
	return feuo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (feuo *FixtureEventsUpdateOne) ClearPlayer() *FixtureEventsUpdateOne {
	feuo.mutation.ClearPlayer()
	return feuo
}

// ClearAssist clears the "assist" edge to the Player entity.
func (feuo *FixtureEventsUpdateOne) ClearAssist() *FixtureEventsUpdateOne {
	feuo.mutation.ClearAssist()
	return feuo
}

// ClearTeam clears the "team" edge to the Team entity.
func (feuo *FixtureEventsUpdateOne) ClearTeam() *FixtureEventsUpdateOne {
	feuo.mutation.ClearTeam()
	return feuo
}

// Where appends a list predicates to the FixtureEventsUpdate builder.
func (feuo *FixtureEventsUpdateOne) Where(ps ...predicate.FixtureEvents) *FixtureEventsUpdateOne {
	feuo.mutation.Where(ps...)
	return feuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (feuo *FixtureEventsUpdateOne) Select(field string, fields ...string) *FixtureEventsUpdateOne {
	feuo.fields = append([]string{field}, fields...)
	return feuo
}

// Save executes the query and returns the updated FixtureEvents entity.
func (feuo *FixtureEventsUpdateOne) Save(ctx context.Context) (*FixtureEvents, error) {
	feuo.defaults()
	return withHooks[*FixtureEvents, FixtureEventsMutation](ctx, feuo.sqlSave, feuo.mutation, feuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feuo *FixtureEventsUpdateOne) SaveX(ctx context.Context) *FixtureEvents {
	node, err := feuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (feuo *FixtureEventsUpdateOne) Exec(ctx context.Context) error {
	_, err := feuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feuo *FixtureEventsUpdateOne) ExecX(ctx context.Context) {
	if err := feuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (feuo *FixtureEventsUpdateOne) defaults() {
	if _, ok := feuo.mutation.LastUpdated(); !ok && !feuo.mutation.LastUpdatedCleared() {
		v := fixtureevents.UpdateDefaultLastUpdated()
		feuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (feuo *FixtureEventsUpdateOne) check() error {
	if _, ok := feuo.mutation.PlayerID(); feuo.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureEvents.player"`)
	}
	if _, ok := feuo.mutation.TeamID(); feuo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureEvents.team"`)
	}
	return nil
}

func (feuo *FixtureEventsUpdateOne) sqlSave(ctx context.Context) (_node *FixtureEvents, err error) {
	if err := feuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixtureevents.Table, fixtureevents.Columns, sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt))
	id, ok := feuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FixtureEvents.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := feuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixtureevents.FieldID)
		for _, f := range fields {
			if !fixtureevents.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fixtureevents.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := feuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feuo.mutation.ElapsedTime(); ok {
		_spec.SetField(fixtureevents.FieldElapsedTime, field.TypeString, value)
	}
	if value, ok := feuo.mutation.ExtraTime(); ok {
		_spec.SetField(fixtureevents.FieldExtraTime, field.TypeString, value)
	}
	if value, ok := feuo.mutation.GetType(); ok {
		_spec.SetField(fixtureevents.FieldType, field.TypeString, value)
	}
	if value, ok := feuo.mutation.Detail(); ok {
		_spec.SetField(fixtureevents.FieldDetail, field.TypeString, value)
	}
	if value, ok := feuo.mutation.Comments(); ok {
		_spec.SetField(fixtureevents.FieldComments, field.TypeString, value)
	}
	if feuo.mutation.CommentsCleared() {
		_spec.ClearField(fixtureevents.FieldComments, field.TypeString)
	}
	if value, ok := feuo.mutation.LastUpdated(); ok {
		_spec.SetField(fixtureevents.FieldLastUpdated, field.TypeTime, value)
	}
	if feuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(fixtureevents.FieldLastUpdated, field.TypeTime)
	}
	if feuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.PlayerTable,
			Columns: []string{fixtureevents.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.PlayerTable,
			Columns: []string{fixtureevents.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if feuo.mutation.AssistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.AssistTable,
			Columns: []string{fixtureevents.AssistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feuo.mutation.AssistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.AssistTable,
			Columns: []string{fixtureevents.AssistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if feuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.TeamTable,
			Columns: []string{fixtureevents.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.TeamTable,
			Columns: []string{fixtureevents.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FixtureEvents{config: feuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, feuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixtureevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	feuo.mutation.done = true
	return _node, nil
}
