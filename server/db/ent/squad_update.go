// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/squad"
	"mapeleven/db/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SquadUpdate is the builder for updating Squad entities.
type SquadUpdate struct {
	config
	hooks    []Hook
	mutation *SquadMutation
}

// Where appends a list predicates to the SquadUpdate builder.
func (su *SquadUpdate) Where(ps ...predicate.Squad) *SquadUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetPosition sets the "position" field.
func (su *SquadUpdate) SetPosition(s string) *SquadUpdate {
	su.mutation.SetPosition(s)
	return su
}

// SetNumber sets the "number" field.
func (su *SquadUpdate) SetNumber(i int) *SquadUpdate {
	su.mutation.ResetNumber()
	su.mutation.SetNumber(i)
	return su
}

// AddNumber adds i to the "number" field.
func (su *SquadUpdate) AddNumber(i int) *SquadUpdate {
	su.mutation.AddNumber(i)
	return su
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (su *SquadUpdate) SetPlayerID(id int) *SquadUpdate {
	su.mutation.SetPlayerID(id)
	return su
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (su *SquadUpdate) SetNillablePlayerID(id *int) *SquadUpdate {
	if id != nil {
		su = su.SetPlayerID(*id)
	}
	return su
}

// SetPlayer sets the "player" edge to the Player entity.
func (su *SquadUpdate) SetPlayer(p *Player) *SquadUpdate {
	return su.SetPlayerID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (su *SquadUpdate) SetTeamID(id int) *SquadUpdate {
	su.mutation.SetTeamID(id)
	return su
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (su *SquadUpdate) SetNillableTeamID(id *int) *SquadUpdate {
	if id != nil {
		su = su.SetTeamID(*id)
	}
	return su
}

// SetTeam sets the "team" edge to the Team entity.
func (su *SquadUpdate) SetTeam(t *Team) *SquadUpdate {
	return su.SetTeamID(t.ID)
}

// Mutation returns the SquadMutation object of the builder.
func (su *SquadUpdate) Mutation() *SquadMutation {
	return su.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (su *SquadUpdate) ClearPlayer() *SquadUpdate {
	su.mutation.ClearPlayer()
	return su
}

// ClearTeam clears the "team" edge to the Team entity.
func (su *SquadUpdate) ClearTeam() *SquadUpdate {
	su.mutation.ClearTeam()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SquadUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SquadMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SquadUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SquadUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SquadUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SquadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(squad.Table, squad.Columns, sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Position(); ok {
		_spec.SetField(squad.FieldPosition, field.TypeString, value)
	}
	if value, ok := su.mutation.Number(); ok {
		_spec.SetField(squad.FieldNumber, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedNumber(); ok {
		_spec.AddField(squad.FieldNumber, field.TypeInt, value)
	}
	if su.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.PlayerTable,
			Columns: []string{squad.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.PlayerTable,
			Columns: []string{squad.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.TeamTable,
			Columns: []string{squad.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.TeamTable,
			Columns: []string{squad.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{squad.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SquadUpdateOne is the builder for updating a single Squad entity.
type SquadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SquadMutation
}

// SetPosition sets the "position" field.
func (suo *SquadUpdateOne) SetPosition(s string) *SquadUpdateOne {
	suo.mutation.SetPosition(s)
	return suo
}

// SetNumber sets the "number" field.
func (suo *SquadUpdateOne) SetNumber(i int) *SquadUpdateOne {
	suo.mutation.ResetNumber()
	suo.mutation.SetNumber(i)
	return suo
}

// AddNumber adds i to the "number" field.
func (suo *SquadUpdateOne) AddNumber(i int) *SquadUpdateOne {
	suo.mutation.AddNumber(i)
	return suo
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (suo *SquadUpdateOne) SetPlayerID(id int) *SquadUpdateOne {
	suo.mutation.SetPlayerID(id)
	return suo
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (suo *SquadUpdateOne) SetNillablePlayerID(id *int) *SquadUpdateOne {
	if id != nil {
		suo = suo.SetPlayerID(*id)
	}
	return suo
}

// SetPlayer sets the "player" edge to the Player entity.
func (suo *SquadUpdateOne) SetPlayer(p *Player) *SquadUpdateOne {
	return suo.SetPlayerID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (suo *SquadUpdateOne) SetTeamID(id int) *SquadUpdateOne {
	suo.mutation.SetTeamID(id)
	return suo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (suo *SquadUpdateOne) SetNillableTeamID(id *int) *SquadUpdateOne {
	if id != nil {
		suo = suo.SetTeamID(*id)
	}
	return suo
}

// SetTeam sets the "team" edge to the Team entity.
func (suo *SquadUpdateOne) SetTeam(t *Team) *SquadUpdateOne {
	return suo.SetTeamID(t.ID)
}

// Mutation returns the SquadMutation object of the builder.
func (suo *SquadUpdateOne) Mutation() *SquadMutation {
	return suo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (suo *SquadUpdateOne) ClearPlayer() *SquadUpdateOne {
	suo.mutation.ClearPlayer()
	return suo
}

// ClearTeam clears the "team" edge to the Team entity.
func (suo *SquadUpdateOne) ClearTeam() *SquadUpdateOne {
	suo.mutation.ClearTeam()
	return suo
}

// Where appends a list predicates to the SquadUpdate builder.
func (suo *SquadUpdateOne) Where(ps ...predicate.Squad) *SquadUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SquadUpdateOne) Select(field string, fields ...string) *SquadUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Squad entity.
func (suo *SquadUpdateOne) Save(ctx context.Context) (*Squad, error) {
	return withHooks[*Squad, SquadMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SquadUpdateOne) SaveX(ctx context.Context) *Squad {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SquadUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SquadUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SquadUpdateOne) sqlSave(ctx context.Context) (_node *Squad, err error) {
	_spec := sqlgraph.NewUpdateSpec(squad.Table, squad.Columns, sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Squad.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, squad.FieldID)
		for _, f := range fields {
			if !squad.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != squad.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Position(); ok {
		_spec.SetField(squad.FieldPosition, field.TypeString, value)
	}
	if value, ok := suo.mutation.Number(); ok {
		_spec.SetField(squad.FieldNumber, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedNumber(); ok {
		_spec.AddField(squad.FieldNumber, field.TypeInt, value)
	}
	if suo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.PlayerTable,
			Columns: []string{squad.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.PlayerTable,
			Columns: []string{squad.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.TeamTable,
			Columns: []string{squad.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.TeamTable,
			Columns: []string{squad.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Squad{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{squad.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
