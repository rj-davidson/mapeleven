// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tscards"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TSCards is the model entity for the TSCards schema.
type TSCards struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Yellow0To15Total holds the value of the "yellow0To15Total" field.
	Yellow0To15Total int `json:"yellow0To15Total,omitempty"`
	// Yellow0To15Percentage holds the value of the "yellow0To15Percentage" field.
	Yellow0To15Percentage string `json:"yellow0To15Percentage,omitempty"`
	// Yellow16To30Total holds the value of the "yellow16To30Total" field.
	Yellow16To30Total int `json:"yellow16To30Total,omitempty"`
	// Yellow16To30Percentage holds the value of the "yellow16To30Percentage" field.
	Yellow16To30Percentage string `json:"yellow16To30Percentage,omitempty"`
	// Yellow31To45Total holds the value of the "yellow31To45Total" field.
	Yellow31To45Total int `json:"yellow31To45Total,omitempty"`
	// Yellow31To45Percentage holds the value of the "yellow31To45Percentage" field.
	Yellow31To45Percentage string `json:"yellow31To45Percentage,omitempty"`
	// Yellow46To60Total holds the value of the "yellow46To60Total" field.
	Yellow46To60Total int `json:"yellow46To60Total,omitempty"`
	// Yellow46To60Percentage holds the value of the "yellow46To60Percentage" field.
	Yellow46To60Percentage string `json:"yellow46To60Percentage,omitempty"`
	// Yellow61To75Total holds the value of the "yellow61To75Total" field.
	Yellow61To75Total int `json:"yellow61To75Total,omitempty"`
	// Yellow61To75Percentage holds the value of the "yellow61To75Percentage" field.
	Yellow61To75Percentage string `json:"yellow61To75Percentage,omitempty"`
	// Yellow76To90Total holds the value of the "yellow76To90Total" field.
	Yellow76To90Total int `json:"yellow76To90Total,omitempty"`
	// Yellow76To90Percentage holds the value of the "yellow76To90Percentage" field.
	Yellow76To90Percentage string `json:"yellow76To90Percentage,omitempty"`
	// Yellow91to105Total holds the value of the "yellow91to105Total" field.
	Yellow91to105Total int `json:"yellow91to105Total,omitempty"`
	// Yellow91to105Percentage holds the value of the "yellow91to105Percentage" field.
	Yellow91to105Percentage string `json:"yellow91to105Percentage,omitempty"`
	// Yellow106To120Total holds the value of the "yellow106To120Total" field.
	Yellow106To120Total int `json:"yellow106To120Total,omitempty"`
	// Yellow106To120Percentage holds the value of the "yellow106To120Percentage" field.
	Yellow106To120Percentage string `json:"yellow106To120Percentage,omitempty"`
	// Red0To15Total holds the value of the "red0To15Total" field.
	Red0To15Total int `json:"red0To15Total,omitempty"`
	// Red0To15Percentage holds the value of the "red0To15Percentage" field.
	Red0To15Percentage string `json:"red0To15Percentage,omitempty"`
	// Red16To30Total holds the value of the "red16To30Total" field.
	Red16To30Total int `json:"red16To30Total,omitempty"`
	// Red16To30Percentage holds the value of the "red16To30Percentage" field.
	Red16To30Percentage string `json:"red16To30Percentage,omitempty"`
	// Red31To45Total holds the value of the "red31To45Total" field.
	Red31To45Total int `json:"red31To45Total,omitempty"`
	// Red31To45Percentage holds the value of the "red31To45Percentage" field.
	Red31To45Percentage string `json:"red31To45Percentage,omitempty"`
	// Red46To60Total holds the value of the "red46To60Total" field.
	Red46To60Total int `json:"red46To60Total,omitempty"`
	// Red46To60Percentage holds the value of the "red46To60Percentage" field.
	Red46To60Percentage string `json:"red46To60Percentage,omitempty"`
	// Red61To75Total holds the value of the "red61To75Total" field.
	Red61To75Total int `json:"red61To75Total,omitempty"`
	// Red61To75Percentage holds the value of the "red61To75Percentage" field.
	Red61To75Percentage string `json:"red61To75Percentage,omitempty"`
	// Red76To90Total holds the value of the "red76To90Total" field.
	Red76To90Total int `json:"red76To90Total,omitempty"`
	// Red76To90Percentage holds the value of the "red76To90Percentage" field.
	Red76To90Percentage string `json:"red76To90Percentage,omitempty"`
	// Red91to105Total holds the value of the "red91to105Total" field.
	Red91to105Total int `json:"red91to105Total,omitempty"`
	// Red91to105Percentage holds the value of the "red91to105Percentage" field.
	Red91to105Percentage string `json:"red91to105Percentage,omitempty"`
	// Red106To120Total holds the value of the "red106To120Total" field.
	Red106To120Total int `json:"red106To120Total,omitempty"`
	// Red106To120Percentage holds the value of the "red106To120Percentage" field.
	Red106To120Percentage string `json:"red106To120Percentage,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TSCardsQuery when eager-loading is set.
	Edges            TSCardsEdges `json:"edges"`
	team_cards_stats *int
	selectValues     sql.SelectValues
}

// TSCardsEdges holds the relations/edges for other nodes in the graph.
type TSCardsEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TSCardsEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TSCards) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tscards.FieldID, tscards.FieldYellow0To15Total, tscards.FieldYellow16To30Total, tscards.FieldYellow31To45Total, tscards.FieldYellow46To60Total, tscards.FieldYellow61To75Total, tscards.FieldYellow76To90Total, tscards.FieldYellow91to105Total, tscards.FieldYellow106To120Total, tscards.FieldRed0To15Total, tscards.FieldRed16To30Total, tscards.FieldRed31To45Total, tscards.FieldRed46To60Total, tscards.FieldRed61To75Total, tscards.FieldRed76To90Total, tscards.FieldRed91to105Total, tscards.FieldRed106To120Total:
			values[i] = new(sql.NullInt64)
		case tscards.FieldYellow0To15Percentage, tscards.FieldYellow16To30Percentage, tscards.FieldYellow31To45Percentage, tscards.FieldYellow46To60Percentage, tscards.FieldYellow61To75Percentage, tscards.FieldYellow76To90Percentage, tscards.FieldYellow91to105Percentage, tscards.FieldYellow106To120Percentage, tscards.FieldRed0To15Percentage, tscards.FieldRed16To30Percentage, tscards.FieldRed31To45Percentage, tscards.FieldRed46To60Percentage, tscards.FieldRed61To75Percentage, tscards.FieldRed76To90Percentage, tscards.FieldRed91to105Percentage, tscards.FieldRed106To120Percentage:
			values[i] = new(sql.NullString)
		case tscards.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case tscards.ForeignKeys[0]: // team_cards_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TSCards fields.
func (tc *TSCards) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tscards.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case tscards.FieldYellow0To15Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow0To15Total", values[i])
			} else if value.Valid {
				tc.Yellow0To15Total = int(value.Int64)
			}
		case tscards.FieldYellow0To15Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow0To15Percentage", values[i])
			} else if value.Valid {
				tc.Yellow0To15Percentage = value.String
			}
		case tscards.FieldYellow16To30Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow16To30Total", values[i])
			} else if value.Valid {
				tc.Yellow16To30Total = int(value.Int64)
			}
		case tscards.FieldYellow16To30Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow16To30Percentage", values[i])
			} else if value.Valid {
				tc.Yellow16To30Percentage = value.String
			}
		case tscards.FieldYellow31To45Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow31To45Total", values[i])
			} else if value.Valid {
				tc.Yellow31To45Total = int(value.Int64)
			}
		case tscards.FieldYellow31To45Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow31To45Percentage", values[i])
			} else if value.Valid {
				tc.Yellow31To45Percentage = value.String
			}
		case tscards.FieldYellow46To60Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow46To60Total", values[i])
			} else if value.Valid {
				tc.Yellow46To60Total = int(value.Int64)
			}
		case tscards.FieldYellow46To60Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow46To60Percentage", values[i])
			} else if value.Valid {
				tc.Yellow46To60Percentage = value.String
			}
		case tscards.FieldYellow61To75Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow61To75Total", values[i])
			} else if value.Valid {
				tc.Yellow61To75Total = int(value.Int64)
			}
		case tscards.FieldYellow61To75Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow61To75Percentage", values[i])
			} else if value.Valid {
				tc.Yellow61To75Percentage = value.String
			}
		case tscards.FieldYellow76To90Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow76To90Total", values[i])
			} else if value.Valid {
				tc.Yellow76To90Total = int(value.Int64)
			}
		case tscards.FieldYellow76To90Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow76To90Percentage", values[i])
			} else if value.Valid {
				tc.Yellow76To90Percentage = value.String
			}
		case tscards.FieldYellow91to105Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow91to105Total", values[i])
			} else if value.Valid {
				tc.Yellow91to105Total = int(value.Int64)
			}
		case tscards.FieldYellow91to105Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow91to105Percentage", values[i])
			} else if value.Valid {
				tc.Yellow91to105Percentage = value.String
			}
		case tscards.FieldYellow106To120Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow106To120Total", values[i])
			} else if value.Valid {
				tc.Yellow106To120Total = int(value.Int64)
			}
		case tscards.FieldYellow106To120Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yellow106To120Percentage", values[i])
			} else if value.Valid {
				tc.Yellow106To120Percentage = value.String
			}
		case tscards.FieldRed0To15Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red0To15Total", values[i])
			} else if value.Valid {
				tc.Red0To15Total = int(value.Int64)
			}
		case tscards.FieldRed0To15Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red0To15Percentage", values[i])
			} else if value.Valid {
				tc.Red0To15Percentage = value.String
			}
		case tscards.FieldRed16To30Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red16To30Total", values[i])
			} else if value.Valid {
				tc.Red16To30Total = int(value.Int64)
			}
		case tscards.FieldRed16To30Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red16To30Percentage", values[i])
			} else if value.Valid {
				tc.Red16To30Percentage = value.String
			}
		case tscards.FieldRed31To45Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red31To45Total", values[i])
			} else if value.Valid {
				tc.Red31To45Total = int(value.Int64)
			}
		case tscards.FieldRed31To45Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red31To45Percentage", values[i])
			} else if value.Valid {
				tc.Red31To45Percentage = value.String
			}
		case tscards.FieldRed46To60Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red46To60Total", values[i])
			} else if value.Valid {
				tc.Red46To60Total = int(value.Int64)
			}
		case tscards.FieldRed46To60Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red46To60Percentage", values[i])
			} else if value.Valid {
				tc.Red46To60Percentage = value.String
			}
		case tscards.FieldRed61To75Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red61To75Total", values[i])
			} else if value.Valid {
				tc.Red61To75Total = int(value.Int64)
			}
		case tscards.FieldRed61To75Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red61To75Percentage", values[i])
			} else if value.Valid {
				tc.Red61To75Percentage = value.String
			}
		case tscards.FieldRed76To90Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red76To90Total", values[i])
			} else if value.Valid {
				tc.Red76To90Total = int(value.Int64)
			}
		case tscards.FieldRed76To90Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red76To90Percentage", values[i])
			} else if value.Valid {
				tc.Red76To90Percentage = value.String
			}
		case tscards.FieldRed91to105Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red91to105Total", values[i])
			} else if value.Valid {
				tc.Red91to105Total = int(value.Int64)
			}
		case tscards.FieldRed91to105Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red91to105Percentage", values[i])
			} else if value.Valid {
				tc.Red91to105Percentage = value.String
			}
		case tscards.FieldRed106To120Total:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field red106To120Total", values[i])
			} else if value.Valid {
				tc.Red106To120Total = int(value.Int64)
			}
		case tscards.FieldRed106To120Percentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field red106To120Percentage", values[i])
			} else if value.Valid {
				tc.Red106To120Percentage = value.String
			}
		case tscards.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				tc.LastUpdated = value.Time
			}
		case tscards.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_cards_stats", value)
			} else if value.Valid {
				tc.team_cards_stats = new(int)
				*tc.team_cards_stats = int(value.Int64)
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TSCards.
// This includes values selected through modifiers, order, etc.
func (tc *TSCards) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the TSCards entity.
func (tc *TSCards) QueryTeam() *TeamQuery {
	return NewTSCardsClient(tc.config).QueryTeam(tc)
}

// Update returns a builder for updating this TSCards.
// Note that you need to call TSCards.Unwrap() before calling this method if this TSCards
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TSCards) Update() *TSCardsUpdateOne {
	return NewTSCardsClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TSCards entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TSCards) Unwrap() *TSCards {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TSCards is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TSCards) String() string {
	var builder strings.Builder
	builder.WriteString("TSCards(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("yellow0To15Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow0To15Total))
	builder.WriteString(", ")
	builder.WriteString("yellow0To15Percentage=")
	builder.WriteString(tc.Yellow0To15Percentage)
	builder.WriteString(", ")
	builder.WriteString("yellow16To30Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow16To30Total))
	builder.WriteString(", ")
	builder.WriteString("yellow16To30Percentage=")
	builder.WriteString(tc.Yellow16To30Percentage)
	builder.WriteString(", ")
	builder.WriteString("yellow31To45Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow31To45Total))
	builder.WriteString(", ")
	builder.WriteString("yellow31To45Percentage=")
	builder.WriteString(tc.Yellow31To45Percentage)
	builder.WriteString(", ")
	builder.WriteString("yellow46To60Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow46To60Total))
	builder.WriteString(", ")
	builder.WriteString("yellow46To60Percentage=")
	builder.WriteString(tc.Yellow46To60Percentage)
	builder.WriteString(", ")
	builder.WriteString("yellow61To75Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow61To75Total))
	builder.WriteString(", ")
	builder.WriteString("yellow61To75Percentage=")
	builder.WriteString(tc.Yellow61To75Percentage)
	builder.WriteString(", ")
	builder.WriteString("yellow76To90Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow76To90Total))
	builder.WriteString(", ")
	builder.WriteString("yellow76To90Percentage=")
	builder.WriteString(tc.Yellow76To90Percentage)
	builder.WriteString(", ")
	builder.WriteString("yellow91to105Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow91to105Total))
	builder.WriteString(", ")
	builder.WriteString("yellow91to105Percentage=")
	builder.WriteString(tc.Yellow91to105Percentage)
	builder.WriteString(", ")
	builder.WriteString("yellow106To120Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Yellow106To120Total))
	builder.WriteString(", ")
	builder.WriteString("yellow106To120Percentage=")
	builder.WriteString(tc.Yellow106To120Percentage)
	builder.WriteString(", ")
	builder.WriteString("red0To15Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red0To15Total))
	builder.WriteString(", ")
	builder.WriteString("red0To15Percentage=")
	builder.WriteString(tc.Red0To15Percentage)
	builder.WriteString(", ")
	builder.WriteString("red16To30Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red16To30Total))
	builder.WriteString(", ")
	builder.WriteString("red16To30Percentage=")
	builder.WriteString(tc.Red16To30Percentage)
	builder.WriteString(", ")
	builder.WriteString("red31To45Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red31To45Total))
	builder.WriteString(", ")
	builder.WriteString("red31To45Percentage=")
	builder.WriteString(tc.Red31To45Percentage)
	builder.WriteString(", ")
	builder.WriteString("red46To60Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red46To60Total))
	builder.WriteString(", ")
	builder.WriteString("red46To60Percentage=")
	builder.WriteString(tc.Red46To60Percentage)
	builder.WriteString(", ")
	builder.WriteString("red61To75Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red61To75Total))
	builder.WriteString(", ")
	builder.WriteString("red61To75Percentage=")
	builder.WriteString(tc.Red61To75Percentage)
	builder.WriteString(", ")
	builder.WriteString("red76To90Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red76To90Total))
	builder.WriteString(", ")
	builder.WriteString("red76To90Percentage=")
	builder.WriteString(tc.Red76To90Percentage)
	builder.WriteString(", ")
	builder.WriteString("red91to105Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red91to105Total))
	builder.WriteString(", ")
	builder.WriteString("red91to105Percentage=")
	builder.WriteString(tc.Red91to105Percentage)
	builder.WriteString(", ")
	builder.WriteString("red106To120Total=")
	builder.WriteString(fmt.Sprintf("%v", tc.Red106To120Total))
	builder.WriteString(", ")
	builder.WriteString("red106To120Percentage=")
	builder.WriteString(tc.Red106To120Percentage)
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(tc.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TSCardsSlice is a parsable slice of TSCards.
type TSCardsSlice []*TSCards
