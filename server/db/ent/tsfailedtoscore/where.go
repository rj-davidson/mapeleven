// Code generated by ent, DO NOT EDIT.

package tsfailedtoscore

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLTE(FieldID, id))
}

// Home applies equality check predicate on the "home" field. It's identical to HomeEQ.
func Home(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldHome, v))
}

// Away applies equality check predicate on the "away" field. It's identical to AwayEQ.
func Away(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldAway, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldTotal, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldLastUpdated, v))
}

// HomeEQ applies the EQ predicate on the "home" field.
func HomeEQ(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldHome, v))
}

// HomeNEQ applies the NEQ predicate on the "home" field.
func HomeNEQ(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNEQ(FieldHome, v))
}

// HomeIn applies the In predicate on the "home" field.
func HomeIn(vs ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIn(FieldHome, vs...))
}

// HomeNotIn applies the NotIn predicate on the "home" field.
func HomeNotIn(vs ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotIn(FieldHome, vs...))
}

// HomeGT applies the GT predicate on the "home" field.
func HomeGT(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGT(FieldHome, v))
}

// HomeGTE applies the GTE predicate on the "home" field.
func HomeGTE(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGTE(FieldHome, v))
}

// HomeLT applies the LT predicate on the "home" field.
func HomeLT(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLT(FieldHome, v))
}

// HomeLTE applies the LTE predicate on the "home" field.
func HomeLTE(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLTE(FieldHome, v))
}

// HomeIsNil applies the IsNil predicate on the "home" field.
func HomeIsNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIsNull(FieldHome))
}

// HomeNotNil applies the NotNil predicate on the "home" field.
func HomeNotNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotNull(FieldHome))
}

// AwayEQ applies the EQ predicate on the "away" field.
func AwayEQ(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldAway, v))
}

// AwayNEQ applies the NEQ predicate on the "away" field.
func AwayNEQ(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNEQ(FieldAway, v))
}

// AwayIn applies the In predicate on the "away" field.
func AwayIn(vs ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIn(FieldAway, vs...))
}

// AwayNotIn applies the NotIn predicate on the "away" field.
func AwayNotIn(vs ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotIn(FieldAway, vs...))
}

// AwayGT applies the GT predicate on the "away" field.
func AwayGT(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGT(FieldAway, v))
}

// AwayGTE applies the GTE predicate on the "away" field.
func AwayGTE(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGTE(FieldAway, v))
}

// AwayLT applies the LT predicate on the "away" field.
func AwayLT(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLT(FieldAway, v))
}

// AwayLTE applies the LTE predicate on the "away" field.
func AwayLTE(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLTE(FieldAway, v))
}

// AwayIsNil applies the IsNil predicate on the "away" field.
func AwayIsNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIsNull(FieldAway))
}

// AwayNotNil applies the NotNil predicate on the "away" field.
func AwayNotNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotNull(FieldAway))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v int) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLTE(FieldTotal, v))
}

// TotalIsNil applies the IsNil predicate on the "total" field.
func TotalIsNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIsNull(FieldTotal))
}

// TotalNotNil applies the NotNil predicate on the "total" field.
func TotalNotNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotNull(FieldTotal))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(sql.FieldNotNull(FieldLastUpdated))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.TSFailedToScore {
	return predicate.TSFailedToScore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TSFailedToScore) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TSFailedToScore) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TSFailedToScore) predicate.TSFailedToScore {
	return predicate.TSFailedToScore(func(s *sql.Selector) {
		p(s.Not())
	})
}
