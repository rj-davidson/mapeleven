// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tsfixtures"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSFixturesUpdate is the builder for updating TSFixtures entities.
type TSFixturesUpdate struct {
	config
	hooks    []Hook
	mutation *TSFixturesMutation
}

// Where appends a list predicates to the TSFixturesUpdate builder.
func (tfu *TSFixturesUpdate) Where(ps ...predicate.TSFixtures) *TSFixturesUpdate {
	tfu.mutation.Where(ps...)
	return tfu
}

// SetPlayedHome sets the "playedHome" field.
func (tfu *TSFixturesUpdate) SetPlayedHome(i int) *TSFixturesUpdate {
	tfu.mutation.ResetPlayedHome()
	tfu.mutation.SetPlayedHome(i)
	return tfu
}

// SetNillablePlayedHome sets the "playedHome" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillablePlayedHome(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetPlayedHome(*i)
	}
	return tfu
}

// AddPlayedHome adds i to the "playedHome" field.
func (tfu *TSFixturesUpdate) AddPlayedHome(i int) *TSFixturesUpdate {
	tfu.mutation.AddPlayedHome(i)
	return tfu
}

// ClearPlayedHome clears the value of the "playedHome" field.
func (tfu *TSFixturesUpdate) ClearPlayedHome() *TSFixturesUpdate {
	tfu.mutation.ClearPlayedHome()
	return tfu
}

// SetPlayedAway sets the "playedAway" field.
func (tfu *TSFixturesUpdate) SetPlayedAway(i int) *TSFixturesUpdate {
	tfu.mutation.ResetPlayedAway()
	tfu.mutation.SetPlayedAway(i)
	return tfu
}

// SetNillablePlayedAway sets the "playedAway" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillablePlayedAway(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetPlayedAway(*i)
	}
	return tfu
}

// AddPlayedAway adds i to the "playedAway" field.
func (tfu *TSFixturesUpdate) AddPlayedAway(i int) *TSFixturesUpdate {
	tfu.mutation.AddPlayedAway(i)
	return tfu
}

// ClearPlayedAway clears the value of the "playedAway" field.
func (tfu *TSFixturesUpdate) ClearPlayedAway() *TSFixturesUpdate {
	tfu.mutation.ClearPlayedAway()
	return tfu
}

// SetPlayedTotal sets the "playedTotal" field.
func (tfu *TSFixturesUpdate) SetPlayedTotal(i int) *TSFixturesUpdate {
	tfu.mutation.ResetPlayedTotal()
	tfu.mutation.SetPlayedTotal(i)
	return tfu
}

// SetNillablePlayedTotal sets the "playedTotal" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillablePlayedTotal(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetPlayedTotal(*i)
	}
	return tfu
}

// AddPlayedTotal adds i to the "playedTotal" field.
func (tfu *TSFixturesUpdate) AddPlayedTotal(i int) *TSFixturesUpdate {
	tfu.mutation.AddPlayedTotal(i)
	return tfu
}

// ClearPlayedTotal clears the value of the "playedTotal" field.
func (tfu *TSFixturesUpdate) ClearPlayedTotal() *TSFixturesUpdate {
	tfu.mutation.ClearPlayedTotal()
	return tfu
}

// SetWinsHome sets the "winsHome" field.
func (tfu *TSFixturesUpdate) SetWinsHome(i int) *TSFixturesUpdate {
	tfu.mutation.ResetWinsHome()
	tfu.mutation.SetWinsHome(i)
	return tfu
}

// SetNillableWinsHome sets the "winsHome" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableWinsHome(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetWinsHome(*i)
	}
	return tfu
}

// AddWinsHome adds i to the "winsHome" field.
func (tfu *TSFixturesUpdate) AddWinsHome(i int) *TSFixturesUpdate {
	tfu.mutation.AddWinsHome(i)
	return tfu
}

// ClearWinsHome clears the value of the "winsHome" field.
func (tfu *TSFixturesUpdate) ClearWinsHome() *TSFixturesUpdate {
	tfu.mutation.ClearWinsHome()
	return tfu
}

// SetWinsAway sets the "winsAway" field.
func (tfu *TSFixturesUpdate) SetWinsAway(i int) *TSFixturesUpdate {
	tfu.mutation.ResetWinsAway()
	tfu.mutation.SetWinsAway(i)
	return tfu
}

// SetNillableWinsAway sets the "winsAway" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableWinsAway(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetWinsAway(*i)
	}
	return tfu
}

// AddWinsAway adds i to the "winsAway" field.
func (tfu *TSFixturesUpdate) AddWinsAway(i int) *TSFixturesUpdate {
	tfu.mutation.AddWinsAway(i)
	return tfu
}

// ClearWinsAway clears the value of the "winsAway" field.
func (tfu *TSFixturesUpdate) ClearWinsAway() *TSFixturesUpdate {
	tfu.mutation.ClearWinsAway()
	return tfu
}

// SetWinsTotal sets the "winsTotal" field.
func (tfu *TSFixturesUpdate) SetWinsTotal(i int) *TSFixturesUpdate {
	tfu.mutation.ResetWinsTotal()
	tfu.mutation.SetWinsTotal(i)
	return tfu
}

// SetNillableWinsTotal sets the "winsTotal" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableWinsTotal(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetWinsTotal(*i)
	}
	return tfu
}

// AddWinsTotal adds i to the "winsTotal" field.
func (tfu *TSFixturesUpdate) AddWinsTotal(i int) *TSFixturesUpdate {
	tfu.mutation.AddWinsTotal(i)
	return tfu
}

// ClearWinsTotal clears the value of the "winsTotal" field.
func (tfu *TSFixturesUpdate) ClearWinsTotal() *TSFixturesUpdate {
	tfu.mutation.ClearWinsTotal()
	return tfu
}

// SetDrawsHome sets the "drawsHome" field.
func (tfu *TSFixturesUpdate) SetDrawsHome(i int) *TSFixturesUpdate {
	tfu.mutation.ResetDrawsHome()
	tfu.mutation.SetDrawsHome(i)
	return tfu
}

// SetNillableDrawsHome sets the "drawsHome" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableDrawsHome(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetDrawsHome(*i)
	}
	return tfu
}

// AddDrawsHome adds i to the "drawsHome" field.
func (tfu *TSFixturesUpdate) AddDrawsHome(i int) *TSFixturesUpdate {
	tfu.mutation.AddDrawsHome(i)
	return tfu
}

// ClearDrawsHome clears the value of the "drawsHome" field.
func (tfu *TSFixturesUpdate) ClearDrawsHome() *TSFixturesUpdate {
	tfu.mutation.ClearDrawsHome()
	return tfu
}

// SetDrawsAway sets the "drawsAway" field.
func (tfu *TSFixturesUpdate) SetDrawsAway(i int) *TSFixturesUpdate {
	tfu.mutation.ResetDrawsAway()
	tfu.mutation.SetDrawsAway(i)
	return tfu
}

// SetNillableDrawsAway sets the "drawsAway" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableDrawsAway(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetDrawsAway(*i)
	}
	return tfu
}

// AddDrawsAway adds i to the "drawsAway" field.
func (tfu *TSFixturesUpdate) AddDrawsAway(i int) *TSFixturesUpdate {
	tfu.mutation.AddDrawsAway(i)
	return tfu
}

// ClearDrawsAway clears the value of the "drawsAway" field.
func (tfu *TSFixturesUpdate) ClearDrawsAway() *TSFixturesUpdate {
	tfu.mutation.ClearDrawsAway()
	return tfu
}

// SetDrawsTotal sets the "drawsTotal" field.
func (tfu *TSFixturesUpdate) SetDrawsTotal(i int) *TSFixturesUpdate {
	tfu.mutation.ResetDrawsTotal()
	tfu.mutation.SetDrawsTotal(i)
	return tfu
}

// SetNillableDrawsTotal sets the "drawsTotal" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableDrawsTotal(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetDrawsTotal(*i)
	}
	return tfu
}

// AddDrawsTotal adds i to the "drawsTotal" field.
func (tfu *TSFixturesUpdate) AddDrawsTotal(i int) *TSFixturesUpdate {
	tfu.mutation.AddDrawsTotal(i)
	return tfu
}

// ClearDrawsTotal clears the value of the "drawsTotal" field.
func (tfu *TSFixturesUpdate) ClearDrawsTotal() *TSFixturesUpdate {
	tfu.mutation.ClearDrawsTotal()
	return tfu
}

// SetLossesHome sets the "lossesHome" field.
func (tfu *TSFixturesUpdate) SetLossesHome(i int) *TSFixturesUpdate {
	tfu.mutation.ResetLossesHome()
	tfu.mutation.SetLossesHome(i)
	return tfu
}

// SetNillableLossesHome sets the "lossesHome" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableLossesHome(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetLossesHome(*i)
	}
	return tfu
}

// AddLossesHome adds i to the "lossesHome" field.
func (tfu *TSFixturesUpdate) AddLossesHome(i int) *TSFixturesUpdate {
	tfu.mutation.AddLossesHome(i)
	return tfu
}

// ClearLossesHome clears the value of the "lossesHome" field.
func (tfu *TSFixturesUpdate) ClearLossesHome() *TSFixturesUpdate {
	tfu.mutation.ClearLossesHome()
	return tfu
}

// SetLossesAway sets the "lossesAway" field.
func (tfu *TSFixturesUpdate) SetLossesAway(i int) *TSFixturesUpdate {
	tfu.mutation.ResetLossesAway()
	tfu.mutation.SetLossesAway(i)
	return tfu
}

// SetNillableLossesAway sets the "lossesAway" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableLossesAway(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetLossesAway(*i)
	}
	return tfu
}

// AddLossesAway adds i to the "lossesAway" field.
func (tfu *TSFixturesUpdate) AddLossesAway(i int) *TSFixturesUpdate {
	tfu.mutation.AddLossesAway(i)
	return tfu
}

// ClearLossesAway clears the value of the "lossesAway" field.
func (tfu *TSFixturesUpdate) ClearLossesAway() *TSFixturesUpdate {
	tfu.mutation.ClearLossesAway()
	return tfu
}

// SetLossesTotal sets the "lossesTotal" field.
func (tfu *TSFixturesUpdate) SetLossesTotal(i int) *TSFixturesUpdate {
	tfu.mutation.ResetLossesTotal()
	tfu.mutation.SetLossesTotal(i)
	return tfu
}

// SetNillableLossesTotal sets the "lossesTotal" field if the given value is not nil.
func (tfu *TSFixturesUpdate) SetNillableLossesTotal(i *int) *TSFixturesUpdate {
	if i != nil {
		tfu.SetLossesTotal(*i)
	}
	return tfu
}

// AddLossesTotal adds i to the "lossesTotal" field.
func (tfu *TSFixturesUpdate) AddLossesTotal(i int) *TSFixturesUpdate {
	tfu.mutation.AddLossesTotal(i)
	return tfu
}

// ClearLossesTotal clears the value of the "lossesTotal" field.
func (tfu *TSFixturesUpdate) ClearLossesTotal() *TSFixturesUpdate {
	tfu.mutation.ClearLossesTotal()
	return tfu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tfu *TSFixturesUpdate) SetLastUpdated(t time.Time) *TSFixturesUpdate {
	tfu.mutation.SetLastUpdated(t)
	return tfu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tfu *TSFixturesUpdate) ClearLastUpdated() *TSFixturesUpdate {
	tfu.mutation.ClearLastUpdated()
	return tfu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tfu *TSFixturesUpdate) SetTeamID(id int) *TSFixturesUpdate {
	tfu.mutation.SetTeamID(id)
	return tfu
}

// SetTeam sets the "team" edge to the Team entity.
func (tfu *TSFixturesUpdate) SetTeam(t *Team) *TSFixturesUpdate {
	return tfu.SetTeamID(t.ID)
}

// Mutation returns the TSFixturesMutation object of the builder.
func (tfu *TSFixturesUpdate) Mutation() *TSFixturesMutation {
	return tfu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tfu *TSFixturesUpdate) ClearTeam() *TSFixturesUpdate {
	tfu.mutation.ClearTeam()
	return tfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TSFixturesUpdate) Save(ctx context.Context) (int, error) {
	tfu.defaults()
	return withHooks[int, TSFixturesMutation](ctx, tfu.sqlSave, tfu.mutation, tfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TSFixturesUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TSFixturesUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TSFixturesUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfu *TSFixturesUpdate) defaults() {
	if _, ok := tfu.mutation.LastUpdated(); !ok && !tfu.mutation.LastUpdatedCleared() {
		v := tsfixtures.UpdateDefaultLastUpdated()
		tfu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfu *TSFixturesUpdate) check() error {
	if _, ok := tfu.mutation.TeamID(); tfu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSFixtures.team"`)
	}
	return nil
}

func (tfu *TSFixturesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsfixtures.Table, tsfixtures.Columns, sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt))
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.PlayedHome(); ok {
		_spec.SetField(tsfixtures.FieldPlayedHome, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedPlayedHome(); ok {
		_spec.AddField(tsfixtures.FieldPlayedHome, field.TypeInt, value)
	}
	if tfu.mutation.PlayedHomeCleared() {
		_spec.ClearField(tsfixtures.FieldPlayedHome, field.TypeInt)
	}
	if value, ok := tfu.mutation.PlayedAway(); ok {
		_spec.SetField(tsfixtures.FieldPlayedAway, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedPlayedAway(); ok {
		_spec.AddField(tsfixtures.FieldPlayedAway, field.TypeInt, value)
	}
	if tfu.mutation.PlayedAwayCleared() {
		_spec.ClearField(tsfixtures.FieldPlayedAway, field.TypeInt)
	}
	if value, ok := tfu.mutation.PlayedTotal(); ok {
		_spec.SetField(tsfixtures.FieldPlayedTotal, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedPlayedTotal(); ok {
		_spec.AddField(tsfixtures.FieldPlayedTotal, field.TypeInt, value)
	}
	if tfu.mutation.PlayedTotalCleared() {
		_spec.ClearField(tsfixtures.FieldPlayedTotal, field.TypeInt)
	}
	if value, ok := tfu.mutation.WinsHome(); ok {
		_spec.SetField(tsfixtures.FieldWinsHome, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedWinsHome(); ok {
		_spec.AddField(tsfixtures.FieldWinsHome, field.TypeInt, value)
	}
	if tfu.mutation.WinsHomeCleared() {
		_spec.ClearField(tsfixtures.FieldWinsHome, field.TypeInt)
	}
	if value, ok := tfu.mutation.WinsAway(); ok {
		_spec.SetField(tsfixtures.FieldWinsAway, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedWinsAway(); ok {
		_spec.AddField(tsfixtures.FieldWinsAway, field.TypeInt, value)
	}
	if tfu.mutation.WinsAwayCleared() {
		_spec.ClearField(tsfixtures.FieldWinsAway, field.TypeInt)
	}
	if value, ok := tfu.mutation.WinsTotal(); ok {
		_spec.SetField(tsfixtures.FieldWinsTotal, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedWinsTotal(); ok {
		_spec.AddField(tsfixtures.FieldWinsTotal, field.TypeInt, value)
	}
	if tfu.mutation.WinsTotalCleared() {
		_spec.ClearField(tsfixtures.FieldWinsTotal, field.TypeInt)
	}
	if value, ok := tfu.mutation.DrawsHome(); ok {
		_spec.SetField(tsfixtures.FieldDrawsHome, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedDrawsHome(); ok {
		_spec.AddField(tsfixtures.FieldDrawsHome, field.TypeInt, value)
	}
	if tfu.mutation.DrawsHomeCleared() {
		_spec.ClearField(tsfixtures.FieldDrawsHome, field.TypeInt)
	}
	if value, ok := tfu.mutation.DrawsAway(); ok {
		_spec.SetField(tsfixtures.FieldDrawsAway, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedDrawsAway(); ok {
		_spec.AddField(tsfixtures.FieldDrawsAway, field.TypeInt, value)
	}
	if tfu.mutation.DrawsAwayCleared() {
		_spec.ClearField(tsfixtures.FieldDrawsAway, field.TypeInt)
	}
	if value, ok := tfu.mutation.DrawsTotal(); ok {
		_spec.SetField(tsfixtures.FieldDrawsTotal, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedDrawsTotal(); ok {
		_spec.AddField(tsfixtures.FieldDrawsTotal, field.TypeInt, value)
	}
	if tfu.mutation.DrawsTotalCleared() {
		_spec.ClearField(tsfixtures.FieldDrawsTotal, field.TypeInt)
	}
	if value, ok := tfu.mutation.LossesHome(); ok {
		_spec.SetField(tsfixtures.FieldLossesHome, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedLossesHome(); ok {
		_spec.AddField(tsfixtures.FieldLossesHome, field.TypeInt, value)
	}
	if tfu.mutation.LossesHomeCleared() {
		_spec.ClearField(tsfixtures.FieldLossesHome, field.TypeInt)
	}
	if value, ok := tfu.mutation.LossesAway(); ok {
		_spec.SetField(tsfixtures.FieldLossesAway, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedLossesAway(); ok {
		_spec.AddField(tsfixtures.FieldLossesAway, field.TypeInt, value)
	}
	if tfu.mutation.LossesAwayCleared() {
		_spec.ClearField(tsfixtures.FieldLossesAway, field.TypeInt)
	}
	if value, ok := tfu.mutation.LossesTotal(); ok {
		_spec.SetField(tsfixtures.FieldLossesTotal, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedLossesTotal(); ok {
		_spec.AddField(tsfixtures.FieldLossesTotal, field.TypeInt, value)
	}
	if tfu.mutation.LossesTotalCleared() {
		_spec.ClearField(tsfixtures.FieldLossesTotal, field.TypeInt)
	}
	if value, ok := tfu.mutation.LastUpdated(); ok {
		_spec.SetField(tsfixtures.FieldLastUpdated, field.TypeTime, value)
	}
	if tfu.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsfixtures.FieldLastUpdated, field.TypeTime)
	}
	if tfu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfixtures.TeamTable,
			Columns: []string{tsfixtures.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfixtures.TeamTable,
			Columns: []string{tsfixtures.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsfixtures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfu.mutation.done = true
	return n, nil
}

// TSFixturesUpdateOne is the builder for updating a single TSFixtures entity.
type TSFixturesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSFixturesMutation
}

// SetPlayedHome sets the "playedHome" field.
func (tfuo *TSFixturesUpdateOne) SetPlayedHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetPlayedHome()
	tfuo.mutation.SetPlayedHome(i)
	return tfuo
}

// SetNillablePlayedHome sets the "playedHome" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillablePlayedHome(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetPlayedHome(*i)
	}
	return tfuo
}

// AddPlayedHome adds i to the "playedHome" field.
func (tfuo *TSFixturesUpdateOne) AddPlayedHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddPlayedHome(i)
	return tfuo
}

// ClearPlayedHome clears the value of the "playedHome" field.
func (tfuo *TSFixturesUpdateOne) ClearPlayedHome() *TSFixturesUpdateOne {
	tfuo.mutation.ClearPlayedHome()
	return tfuo
}

// SetPlayedAway sets the "playedAway" field.
func (tfuo *TSFixturesUpdateOne) SetPlayedAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetPlayedAway()
	tfuo.mutation.SetPlayedAway(i)
	return tfuo
}

// SetNillablePlayedAway sets the "playedAway" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillablePlayedAway(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetPlayedAway(*i)
	}
	return tfuo
}

// AddPlayedAway adds i to the "playedAway" field.
func (tfuo *TSFixturesUpdateOne) AddPlayedAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddPlayedAway(i)
	return tfuo
}

// ClearPlayedAway clears the value of the "playedAway" field.
func (tfuo *TSFixturesUpdateOne) ClearPlayedAway() *TSFixturesUpdateOne {
	tfuo.mutation.ClearPlayedAway()
	return tfuo
}

// SetPlayedTotal sets the "playedTotal" field.
func (tfuo *TSFixturesUpdateOne) SetPlayedTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetPlayedTotal()
	tfuo.mutation.SetPlayedTotal(i)
	return tfuo
}

// SetNillablePlayedTotal sets the "playedTotal" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillablePlayedTotal(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetPlayedTotal(*i)
	}
	return tfuo
}

// AddPlayedTotal adds i to the "playedTotal" field.
func (tfuo *TSFixturesUpdateOne) AddPlayedTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddPlayedTotal(i)
	return tfuo
}

// ClearPlayedTotal clears the value of the "playedTotal" field.
func (tfuo *TSFixturesUpdateOne) ClearPlayedTotal() *TSFixturesUpdateOne {
	tfuo.mutation.ClearPlayedTotal()
	return tfuo
}

// SetWinsHome sets the "winsHome" field.
func (tfuo *TSFixturesUpdateOne) SetWinsHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetWinsHome()
	tfuo.mutation.SetWinsHome(i)
	return tfuo
}

// SetNillableWinsHome sets the "winsHome" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableWinsHome(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetWinsHome(*i)
	}
	return tfuo
}

// AddWinsHome adds i to the "winsHome" field.
func (tfuo *TSFixturesUpdateOne) AddWinsHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddWinsHome(i)
	return tfuo
}

// ClearWinsHome clears the value of the "winsHome" field.
func (tfuo *TSFixturesUpdateOne) ClearWinsHome() *TSFixturesUpdateOne {
	tfuo.mutation.ClearWinsHome()
	return tfuo
}

// SetWinsAway sets the "winsAway" field.
func (tfuo *TSFixturesUpdateOne) SetWinsAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetWinsAway()
	tfuo.mutation.SetWinsAway(i)
	return tfuo
}

// SetNillableWinsAway sets the "winsAway" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableWinsAway(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetWinsAway(*i)
	}
	return tfuo
}

// AddWinsAway adds i to the "winsAway" field.
func (tfuo *TSFixturesUpdateOne) AddWinsAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddWinsAway(i)
	return tfuo
}

// ClearWinsAway clears the value of the "winsAway" field.
func (tfuo *TSFixturesUpdateOne) ClearWinsAway() *TSFixturesUpdateOne {
	tfuo.mutation.ClearWinsAway()
	return tfuo
}

// SetWinsTotal sets the "winsTotal" field.
func (tfuo *TSFixturesUpdateOne) SetWinsTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetWinsTotal()
	tfuo.mutation.SetWinsTotal(i)
	return tfuo
}

// SetNillableWinsTotal sets the "winsTotal" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableWinsTotal(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetWinsTotal(*i)
	}
	return tfuo
}

// AddWinsTotal adds i to the "winsTotal" field.
func (tfuo *TSFixturesUpdateOne) AddWinsTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddWinsTotal(i)
	return tfuo
}

// ClearWinsTotal clears the value of the "winsTotal" field.
func (tfuo *TSFixturesUpdateOne) ClearWinsTotal() *TSFixturesUpdateOne {
	tfuo.mutation.ClearWinsTotal()
	return tfuo
}

// SetDrawsHome sets the "drawsHome" field.
func (tfuo *TSFixturesUpdateOne) SetDrawsHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetDrawsHome()
	tfuo.mutation.SetDrawsHome(i)
	return tfuo
}

// SetNillableDrawsHome sets the "drawsHome" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableDrawsHome(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetDrawsHome(*i)
	}
	return tfuo
}

// AddDrawsHome adds i to the "drawsHome" field.
func (tfuo *TSFixturesUpdateOne) AddDrawsHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddDrawsHome(i)
	return tfuo
}

// ClearDrawsHome clears the value of the "drawsHome" field.
func (tfuo *TSFixturesUpdateOne) ClearDrawsHome() *TSFixturesUpdateOne {
	tfuo.mutation.ClearDrawsHome()
	return tfuo
}

// SetDrawsAway sets the "drawsAway" field.
func (tfuo *TSFixturesUpdateOne) SetDrawsAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetDrawsAway()
	tfuo.mutation.SetDrawsAway(i)
	return tfuo
}

// SetNillableDrawsAway sets the "drawsAway" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableDrawsAway(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetDrawsAway(*i)
	}
	return tfuo
}

// AddDrawsAway adds i to the "drawsAway" field.
func (tfuo *TSFixturesUpdateOne) AddDrawsAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddDrawsAway(i)
	return tfuo
}

// ClearDrawsAway clears the value of the "drawsAway" field.
func (tfuo *TSFixturesUpdateOne) ClearDrawsAway() *TSFixturesUpdateOne {
	tfuo.mutation.ClearDrawsAway()
	return tfuo
}

// SetDrawsTotal sets the "drawsTotal" field.
func (tfuo *TSFixturesUpdateOne) SetDrawsTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetDrawsTotal()
	tfuo.mutation.SetDrawsTotal(i)
	return tfuo
}

// SetNillableDrawsTotal sets the "drawsTotal" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableDrawsTotal(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetDrawsTotal(*i)
	}
	return tfuo
}

// AddDrawsTotal adds i to the "drawsTotal" field.
func (tfuo *TSFixturesUpdateOne) AddDrawsTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddDrawsTotal(i)
	return tfuo
}

// ClearDrawsTotal clears the value of the "drawsTotal" field.
func (tfuo *TSFixturesUpdateOne) ClearDrawsTotal() *TSFixturesUpdateOne {
	tfuo.mutation.ClearDrawsTotal()
	return tfuo
}

// SetLossesHome sets the "lossesHome" field.
func (tfuo *TSFixturesUpdateOne) SetLossesHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetLossesHome()
	tfuo.mutation.SetLossesHome(i)
	return tfuo
}

// SetNillableLossesHome sets the "lossesHome" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableLossesHome(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetLossesHome(*i)
	}
	return tfuo
}

// AddLossesHome adds i to the "lossesHome" field.
func (tfuo *TSFixturesUpdateOne) AddLossesHome(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddLossesHome(i)
	return tfuo
}

// ClearLossesHome clears the value of the "lossesHome" field.
func (tfuo *TSFixturesUpdateOne) ClearLossesHome() *TSFixturesUpdateOne {
	tfuo.mutation.ClearLossesHome()
	return tfuo
}

// SetLossesAway sets the "lossesAway" field.
func (tfuo *TSFixturesUpdateOne) SetLossesAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetLossesAway()
	tfuo.mutation.SetLossesAway(i)
	return tfuo
}

// SetNillableLossesAway sets the "lossesAway" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableLossesAway(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetLossesAway(*i)
	}
	return tfuo
}

// AddLossesAway adds i to the "lossesAway" field.
func (tfuo *TSFixturesUpdateOne) AddLossesAway(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddLossesAway(i)
	return tfuo
}

// ClearLossesAway clears the value of the "lossesAway" field.
func (tfuo *TSFixturesUpdateOne) ClearLossesAway() *TSFixturesUpdateOne {
	tfuo.mutation.ClearLossesAway()
	return tfuo
}

// SetLossesTotal sets the "lossesTotal" field.
func (tfuo *TSFixturesUpdateOne) SetLossesTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.ResetLossesTotal()
	tfuo.mutation.SetLossesTotal(i)
	return tfuo
}

// SetNillableLossesTotal sets the "lossesTotal" field if the given value is not nil.
func (tfuo *TSFixturesUpdateOne) SetNillableLossesTotal(i *int) *TSFixturesUpdateOne {
	if i != nil {
		tfuo.SetLossesTotal(*i)
	}
	return tfuo
}

// AddLossesTotal adds i to the "lossesTotal" field.
func (tfuo *TSFixturesUpdateOne) AddLossesTotal(i int) *TSFixturesUpdateOne {
	tfuo.mutation.AddLossesTotal(i)
	return tfuo
}

// ClearLossesTotal clears the value of the "lossesTotal" field.
func (tfuo *TSFixturesUpdateOne) ClearLossesTotal() *TSFixturesUpdateOne {
	tfuo.mutation.ClearLossesTotal()
	return tfuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tfuo *TSFixturesUpdateOne) SetLastUpdated(t time.Time) *TSFixturesUpdateOne {
	tfuo.mutation.SetLastUpdated(t)
	return tfuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tfuo *TSFixturesUpdateOne) ClearLastUpdated() *TSFixturesUpdateOne {
	tfuo.mutation.ClearLastUpdated()
	return tfuo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tfuo *TSFixturesUpdateOne) SetTeamID(id int) *TSFixturesUpdateOne {
	tfuo.mutation.SetTeamID(id)
	return tfuo
}

// SetTeam sets the "team" edge to the Team entity.
func (tfuo *TSFixturesUpdateOne) SetTeam(t *Team) *TSFixturesUpdateOne {
	return tfuo.SetTeamID(t.ID)
}

// Mutation returns the TSFixturesMutation object of the builder.
func (tfuo *TSFixturesUpdateOne) Mutation() *TSFixturesMutation {
	return tfuo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tfuo *TSFixturesUpdateOne) ClearTeam() *TSFixturesUpdateOne {
	tfuo.mutation.ClearTeam()
	return tfuo
}

// Where appends a list predicates to the TSFixturesUpdate builder.
func (tfuo *TSFixturesUpdateOne) Where(ps ...predicate.TSFixtures) *TSFixturesUpdateOne {
	tfuo.mutation.Where(ps...)
	return tfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfuo *TSFixturesUpdateOne) Select(field string, fields ...string) *TSFixturesUpdateOne {
	tfuo.fields = append([]string{field}, fields...)
	return tfuo
}

// Save executes the query and returns the updated TSFixtures entity.
func (tfuo *TSFixturesUpdateOne) Save(ctx context.Context) (*TSFixtures, error) {
	tfuo.defaults()
	return withHooks[*TSFixtures, TSFixturesMutation](ctx, tfuo.sqlSave, tfuo.mutation, tfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TSFixturesUpdateOne) SaveX(ctx context.Context) *TSFixtures {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TSFixturesUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TSFixturesUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfuo *TSFixturesUpdateOne) defaults() {
	if _, ok := tfuo.mutation.LastUpdated(); !ok && !tfuo.mutation.LastUpdatedCleared() {
		v := tsfixtures.UpdateDefaultLastUpdated()
		tfuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfuo *TSFixturesUpdateOne) check() error {
	if _, ok := tfuo.mutation.TeamID(); tfuo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSFixtures.team"`)
	}
	return nil
}

func (tfuo *TSFixturesUpdateOne) sqlSave(ctx context.Context) (_node *TSFixtures, err error) {
	if err := tfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsfixtures.Table, tsfixtures.Columns, sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt))
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSFixtures.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tsfixtures.FieldID)
		for _, f := range fields {
			if !tsfixtures.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tsfixtures.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfuo.mutation.PlayedHome(); ok {
		_spec.SetField(tsfixtures.FieldPlayedHome, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedPlayedHome(); ok {
		_spec.AddField(tsfixtures.FieldPlayedHome, field.TypeInt, value)
	}
	if tfuo.mutation.PlayedHomeCleared() {
		_spec.ClearField(tsfixtures.FieldPlayedHome, field.TypeInt)
	}
	if value, ok := tfuo.mutation.PlayedAway(); ok {
		_spec.SetField(tsfixtures.FieldPlayedAway, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedPlayedAway(); ok {
		_spec.AddField(tsfixtures.FieldPlayedAway, field.TypeInt, value)
	}
	if tfuo.mutation.PlayedAwayCleared() {
		_spec.ClearField(tsfixtures.FieldPlayedAway, field.TypeInt)
	}
	if value, ok := tfuo.mutation.PlayedTotal(); ok {
		_spec.SetField(tsfixtures.FieldPlayedTotal, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedPlayedTotal(); ok {
		_spec.AddField(tsfixtures.FieldPlayedTotal, field.TypeInt, value)
	}
	if tfuo.mutation.PlayedTotalCleared() {
		_spec.ClearField(tsfixtures.FieldPlayedTotal, field.TypeInt)
	}
	if value, ok := tfuo.mutation.WinsHome(); ok {
		_spec.SetField(tsfixtures.FieldWinsHome, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedWinsHome(); ok {
		_spec.AddField(tsfixtures.FieldWinsHome, field.TypeInt, value)
	}
	if tfuo.mutation.WinsHomeCleared() {
		_spec.ClearField(tsfixtures.FieldWinsHome, field.TypeInt)
	}
	if value, ok := tfuo.mutation.WinsAway(); ok {
		_spec.SetField(tsfixtures.FieldWinsAway, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedWinsAway(); ok {
		_spec.AddField(tsfixtures.FieldWinsAway, field.TypeInt, value)
	}
	if tfuo.mutation.WinsAwayCleared() {
		_spec.ClearField(tsfixtures.FieldWinsAway, field.TypeInt)
	}
	if value, ok := tfuo.mutation.WinsTotal(); ok {
		_spec.SetField(tsfixtures.FieldWinsTotal, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedWinsTotal(); ok {
		_spec.AddField(tsfixtures.FieldWinsTotal, field.TypeInt, value)
	}
	if tfuo.mutation.WinsTotalCleared() {
		_spec.ClearField(tsfixtures.FieldWinsTotal, field.TypeInt)
	}
	if value, ok := tfuo.mutation.DrawsHome(); ok {
		_spec.SetField(tsfixtures.FieldDrawsHome, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedDrawsHome(); ok {
		_spec.AddField(tsfixtures.FieldDrawsHome, field.TypeInt, value)
	}
	if tfuo.mutation.DrawsHomeCleared() {
		_spec.ClearField(tsfixtures.FieldDrawsHome, field.TypeInt)
	}
	if value, ok := tfuo.mutation.DrawsAway(); ok {
		_spec.SetField(tsfixtures.FieldDrawsAway, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedDrawsAway(); ok {
		_spec.AddField(tsfixtures.FieldDrawsAway, field.TypeInt, value)
	}
	if tfuo.mutation.DrawsAwayCleared() {
		_spec.ClearField(tsfixtures.FieldDrawsAway, field.TypeInt)
	}
	if value, ok := tfuo.mutation.DrawsTotal(); ok {
		_spec.SetField(tsfixtures.FieldDrawsTotal, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedDrawsTotal(); ok {
		_spec.AddField(tsfixtures.FieldDrawsTotal, field.TypeInt, value)
	}
	if tfuo.mutation.DrawsTotalCleared() {
		_spec.ClearField(tsfixtures.FieldDrawsTotal, field.TypeInt)
	}
	if value, ok := tfuo.mutation.LossesHome(); ok {
		_spec.SetField(tsfixtures.FieldLossesHome, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedLossesHome(); ok {
		_spec.AddField(tsfixtures.FieldLossesHome, field.TypeInt, value)
	}
	if tfuo.mutation.LossesHomeCleared() {
		_spec.ClearField(tsfixtures.FieldLossesHome, field.TypeInt)
	}
	if value, ok := tfuo.mutation.LossesAway(); ok {
		_spec.SetField(tsfixtures.FieldLossesAway, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedLossesAway(); ok {
		_spec.AddField(tsfixtures.FieldLossesAway, field.TypeInt, value)
	}
	if tfuo.mutation.LossesAwayCleared() {
		_spec.ClearField(tsfixtures.FieldLossesAway, field.TypeInt)
	}
	if value, ok := tfuo.mutation.LossesTotal(); ok {
		_spec.SetField(tsfixtures.FieldLossesTotal, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedLossesTotal(); ok {
		_spec.AddField(tsfixtures.FieldLossesTotal, field.TypeInt, value)
	}
	if tfuo.mutation.LossesTotalCleared() {
		_spec.ClearField(tsfixtures.FieldLossesTotal, field.TypeInt)
	}
	if value, ok := tfuo.mutation.LastUpdated(); ok {
		_spec.SetField(tsfixtures.FieldLastUpdated, field.TypeTime, value)
	}
	if tfuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsfixtures.FieldLastUpdated, field.TypeTime)
	}
	if tfuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfixtures.TeamTable,
			Columns: []string{tsfixtures.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfixtures.TeamTable,
			Columns: []string{tsfixtures.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TSFixtures{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsfixtures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfuo.mutation.done = true
	return _node, nil
}
