// Code generated by ent, DO NOT EDIT.

package matchplayer

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldID, id))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldNumber, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldPosition, v))
}

// X applies equality check predicate on the "x" field. It's identical to XEQ.
func X(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldX, v))
}

// Y applies equality check predicate on the "y" field. It's identical to YEQ.
func Y(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldY, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldLastUpdated, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldNumber, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldContainsFold(FieldPosition, v))
}

// XEQ applies the EQ predicate on the "x" field.
func XEQ(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldX, v))
}

// XNEQ applies the NEQ predicate on the "x" field.
func XNEQ(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldX, v))
}

// XIn applies the In predicate on the "x" field.
func XIn(vs ...string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldX, vs...))
}

// XNotIn applies the NotIn predicate on the "x" field.
func XNotIn(vs ...string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldX, vs...))
}

// XGT applies the GT predicate on the "x" field.
func XGT(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldX, v))
}

// XGTE applies the GTE predicate on the "x" field.
func XGTE(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldX, v))
}

// XLT applies the LT predicate on the "x" field.
func XLT(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldX, v))
}

// XLTE applies the LTE predicate on the "x" field.
func XLTE(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldX, v))
}

// XContains applies the Contains predicate on the "x" field.
func XContains(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldContains(FieldX, v))
}

// XHasPrefix applies the HasPrefix predicate on the "x" field.
func XHasPrefix(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldHasPrefix(FieldX, v))
}

// XHasSuffix applies the HasSuffix predicate on the "x" field.
func XHasSuffix(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldHasSuffix(FieldX, v))
}

// XEqualFold applies the EqualFold predicate on the "x" field.
func XEqualFold(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEqualFold(FieldX, v))
}

// XContainsFold applies the ContainsFold predicate on the "x" field.
func XContainsFold(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldContainsFold(FieldX, v))
}

// YEQ applies the EQ predicate on the "y" field.
func YEQ(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldY, v))
}

// YNEQ applies the NEQ predicate on the "y" field.
func YNEQ(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldY, v))
}

// YIn applies the In predicate on the "y" field.
func YIn(vs ...string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldY, vs...))
}

// YNotIn applies the NotIn predicate on the "y" field.
func YNotIn(vs ...string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldY, vs...))
}

// YGT applies the GT predicate on the "y" field.
func YGT(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldY, v))
}

// YGTE applies the GTE predicate on the "y" field.
func YGTE(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldY, v))
}

// YLT applies the LT predicate on the "y" field.
func YLT(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldY, v))
}

// YLTE applies the LTE predicate on the "y" field.
func YLTE(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldY, v))
}

// YContains applies the Contains predicate on the "y" field.
func YContains(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldContains(FieldY, v))
}

// YHasPrefix applies the HasPrefix predicate on the "y" field.
func YHasPrefix(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldHasPrefix(FieldY, v))
}

// YHasSuffix applies the HasSuffix predicate on the "y" field.
func YHasSuffix(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldHasSuffix(FieldY, v))
}

// YEqualFold applies the EqualFold predicate on the "y" field.
func YEqualFold(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEqualFold(FieldY, v))
}

// YContainsFold applies the ContainsFold predicate on the "y" field.
func YContainsFold(v string) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldContainsFold(FieldY, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotNull(FieldLastUpdated))
}

// HasPlayer applies the HasEdge predicate on the "player" edge.
func HasPlayer() predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerWith applies the HasEdge predicate on the "player" edge with a given conditions (other predicates).
func HasPlayerWith(preds ...predicate.Player) predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := newPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLineup applies the HasEdge predicate on the "lineup" edge.
func HasLineup() predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LineupTable, LineupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineupWith applies the HasEdge predicate on the "lineup" edge with a given conditions (other predicates).
func HasLineupWith(preds ...predicate.FixtureLineups) predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := newLineupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MatchPlayer) predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MatchPlayer) predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MatchPlayer) predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		p(s.Not())
	})
}
