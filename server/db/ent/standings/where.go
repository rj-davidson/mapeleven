// Code generated by ent, DO NOT EDIT.

package standings

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldID, id))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldRank, v))
}

// Points applies equality check predicate on the "points" field. It's identical to PointsEQ.
func Points(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldPoints, v))
}

// GoalsDiff applies equality check predicate on the "goalsDiff" field. It's identical to GoalsDiffEQ.
func GoalsDiff(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldGoalsDiff, v))
}

// Group applies equality check predicate on the "group" field. It's identical to GroupEQ.
func Group(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldGroup, v))
}

// Form applies equality check predicate on the "form" field. It's identical to FormEQ.
func Form(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldForm, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldStatus, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldDescription, v))
}

// AllPlayed applies equality check predicate on the "allPlayed" field. It's identical to AllPlayedEQ.
func AllPlayed(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllPlayed, v))
}

// AllWin applies equality check predicate on the "allWin" field. It's identical to AllWinEQ.
func AllWin(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllWin, v))
}

// AllDraw applies equality check predicate on the "allDraw" field. It's identical to AllDrawEQ.
func AllDraw(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllDraw, v))
}

// AllLose applies equality check predicate on the "allLose" field. It's identical to AllLoseEQ.
func AllLose(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllLose, v))
}

// AllGoalsFor applies equality check predicate on the "allGoalsFor" field. It's identical to AllGoalsForEQ.
func AllGoalsFor(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllGoalsFor, v))
}

// AllGoalsAgainst applies equality check predicate on the "allGoalsAgainst" field. It's identical to AllGoalsAgainstEQ.
func AllGoalsAgainst(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllGoalsAgainst, v))
}

// HomePlayed applies equality check predicate on the "homePlayed" field. It's identical to HomePlayedEQ.
func HomePlayed(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomePlayed, v))
}

// HomeWin applies equality check predicate on the "homeWin" field. It's identical to HomeWinEQ.
func HomeWin(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeWin, v))
}

// HomeDraw applies equality check predicate on the "homeDraw" field. It's identical to HomeDrawEQ.
func HomeDraw(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeDraw, v))
}

// HomeLose applies equality check predicate on the "homeLose" field. It's identical to HomeLoseEQ.
func HomeLose(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeLose, v))
}

// HomeGoalsFor applies equality check predicate on the "homeGoalsFor" field. It's identical to HomeGoalsForEQ.
func HomeGoalsFor(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeGoalsFor, v))
}

// HomeGoalsAgainst applies equality check predicate on the "homeGoalsAgainst" field. It's identical to HomeGoalsAgainstEQ.
func HomeGoalsAgainst(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeGoalsAgainst, v))
}

// AwayPlayed applies equality check predicate on the "awayPlayed" field. It's identical to AwayPlayedEQ.
func AwayPlayed(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayPlayed, v))
}

// AwayWin applies equality check predicate on the "awayWin" field. It's identical to AwayWinEQ.
func AwayWin(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayWin, v))
}

// AwayDraw applies equality check predicate on the "awayDraw" field. It's identical to AwayDrawEQ.
func AwayDraw(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayDraw, v))
}

// AwayLose applies equality check predicate on the "awayLose" field. It's identical to AwayLoseEQ.
func AwayLose(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayLose, v))
}

// AwayGoalsFor applies equality check predicate on the "awayGoalsFor" field. It's identical to AwayGoalsForEQ.
func AwayGoalsFor(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayGoalsFor, v))
}

// AwayGoalsAgainst applies equality check predicate on the "awayGoalsAgainst" field. It's identical to AwayGoalsAgainstEQ.
func AwayGoalsAgainst(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayGoalsAgainst, v))
}

// LastUpdated applies equality check predicate on the "LastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldLastUpdated, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldRank, v))
}

// PointsEQ applies the EQ predicate on the "points" field.
func PointsEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldPoints, v))
}

// PointsNEQ applies the NEQ predicate on the "points" field.
func PointsNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldPoints, v))
}

// PointsIn applies the In predicate on the "points" field.
func PointsIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldPoints, vs...))
}

// PointsNotIn applies the NotIn predicate on the "points" field.
func PointsNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldPoints, vs...))
}

// PointsGT applies the GT predicate on the "points" field.
func PointsGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldPoints, v))
}

// PointsGTE applies the GTE predicate on the "points" field.
func PointsGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldPoints, v))
}

// PointsLT applies the LT predicate on the "points" field.
func PointsLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldPoints, v))
}

// PointsLTE applies the LTE predicate on the "points" field.
func PointsLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldPoints, v))
}

// GoalsDiffEQ applies the EQ predicate on the "goalsDiff" field.
func GoalsDiffEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldGoalsDiff, v))
}

// GoalsDiffNEQ applies the NEQ predicate on the "goalsDiff" field.
func GoalsDiffNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldGoalsDiff, v))
}

// GoalsDiffIn applies the In predicate on the "goalsDiff" field.
func GoalsDiffIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldGoalsDiff, vs...))
}

// GoalsDiffNotIn applies the NotIn predicate on the "goalsDiff" field.
func GoalsDiffNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldGoalsDiff, vs...))
}

// GoalsDiffGT applies the GT predicate on the "goalsDiff" field.
func GoalsDiffGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldGoalsDiff, v))
}

// GoalsDiffGTE applies the GTE predicate on the "goalsDiff" field.
func GoalsDiffGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldGoalsDiff, v))
}

// GoalsDiffLT applies the LT predicate on the "goalsDiff" field.
func GoalsDiffLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldGoalsDiff, v))
}

// GoalsDiffLTE applies the LTE predicate on the "goalsDiff" field.
func GoalsDiffLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldGoalsDiff, v))
}

// GroupEQ applies the EQ predicate on the "group" field.
func GroupEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldGroup, v))
}

// GroupNEQ applies the NEQ predicate on the "group" field.
func GroupNEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldGroup, v))
}

// GroupIn applies the In predicate on the "group" field.
func GroupIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldGroup, vs...))
}

// GroupNotIn applies the NotIn predicate on the "group" field.
func GroupNotIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldGroup, vs...))
}

// GroupGT applies the GT predicate on the "group" field.
func GroupGT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldGroup, v))
}

// GroupGTE applies the GTE predicate on the "group" field.
func GroupGTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldGroup, v))
}

// GroupLT applies the LT predicate on the "group" field.
func GroupLT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldGroup, v))
}

// GroupLTE applies the LTE predicate on the "group" field.
func GroupLTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldGroup, v))
}

// GroupContains applies the Contains predicate on the "group" field.
func GroupContains(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContains(FieldGroup, v))
}

// GroupHasPrefix applies the HasPrefix predicate on the "group" field.
func GroupHasPrefix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasPrefix(FieldGroup, v))
}

// GroupHasSuffix applies the HasSuffix predicate on the "group" field.
func GroupHasSuffix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasSuffix(FieldGroup, v))
}

// GroupEqualFold applies the EqualFold predicate on the "group" field.
func GroupEqualFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEqualFold(FieldGroup, v))
}

// GroupContainsFold applies the ContainsFold predicate on the "group" field.
func GroupContainsFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContainsFold(FieldGroup, v))
}

// FormEQ applies the EQ predicate on the "form" field.
func FormEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldForm, v))
}

// FormNEQ applies the NEQ predicate on the "form" field.
func FormNEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldForm, v))
}

// FormIn applies the In predicate on the "form" field.
func FormIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldForm, vs...))
}

// FormNotIn applies the NotIn predicate on the "form" field.
func FormNotIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldForm, vs...))
}

// FormGT applies the GT predicate on the "form" field.
func FormGT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldForm, v))
}

// FormGTE applies the GTE predicate on the "form" field.
func FormGTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldForm, v))
}

// FormLT applies the LT predicate on the "form" field.
func FormLT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldForm, v))
}

// FormLTE applies the LTE predicate on the "form" field.
func FormLTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldForm, v))
}

// FormContains applies the Contains predicate on the "form" field.
func FormContains(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContains(FieldForm, v))
}

// FormHasPrefix applies the HasPrefix predicate on the "form" field.
func FormHasPrefix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasPrefix(FieldForm, v))
}

// FormHasSuffix applies the HasSuffix predicate on the "form" field.
func FormHasSuffix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasSuffix(FieldForm, v))
}

// FormEqualFold applies the EqualFold predicate on the "form" field.
func FormEqualFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEqualFold(FieldForm, v))
}

// FormContainsFold applies the ContainsFold predicate on the "form" field.
func FormContainsFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContainsFold(FieldForm, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Standings {
	return predicate.Standings(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Standings {
	return predicate.Standings(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContainsFold(FieldStatus, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Standings {
	return predicate.Standings(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Standings {
	return predicate.Standings(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Standings {
	return predicate.Standings(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Standings {
	return predicate.Standings(sql.FieldContainsFold(FieldDescription, v))
}

// AllPlayedEQ applies the EQ predicate on the "allPlayed" field.
func AllPlayedEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllPlayed, v))
}

// AllPlayedNEQ applies the NEQ predicate on the "allPlayed" field.
func AllPlayedNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAllPlayed, v))
}

// AllPlayedIn applies the In predicate on the "allPlayed" field.
func AllPlayedIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAllPlayed, vs...))
}

// AllPlayedNotIn applies the NotIn predicate on the "allPlayed" field.
func AllPlayedNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAllPlayed, vs...))
}

// AllPlayedGT applies the GT predicate on the "allPlayed" field.
func AllPlayedGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAllPlayed, v))
}

// AllPlayedGTE applies the GTE predicate on the "allPlayed" field.
func AllPlayedGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAllPlayed, v))
}

// AllPlayedLT applies the LT predicate on the "allPlayed" field.
func AllPlayedLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAllPlayed, v))
}

// AllPlayedLTE applies the LTE predicate on the "allPlayed" field.
func AllPlayedLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAllPlayed, v))
}

// AllWinEQ applies the EQ predicate on the "allWin" field.
func AllWinEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllWin, v))
}

// AllWinNEQ applies the NEQ predicate on the "allWin" field.
func AllWinNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAllWin, v))
}

// AllWinIn applies the In predicate on the "allWin" field.
func AllWinIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAllWin, vs...))
}

// AllWinNotIn applies the NotIn predicate on the "allWin" field.
func AllWinNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAllWin, vs...))
}

// AllWinGT applies the GT predicate on the "allWin" field.
func AllWinGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAllWin, v))
}

// AllWinGTE applies the GTE predicate on the "allWin" field.
func AllWinGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAllWin, v))
}

// AllWinLT applies the LT predicate on the "allWin" field.
func AllWinLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAllWin, v))
}

// AllWinLTE applies the LTE predicate on the "allWin" field.
func AllWinLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAllWin, v))
}

// AllDrawEQ applies the EQ predicate on the "allDraw" field.
func AllDrawEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllDraw, v))
}

// AllDrawNEQ applies the NEQ predicate on the "allDraw" field.
func AllDrawNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAllDraw, v))
}

// AllDrawIn applies the In predicate on the "allDraw" field.
func AllDrawIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAllDraw, vs...))
}

// AllDrawNotIn applies the NotIn predicate on the "allDraw" field.
func AllDrawNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAllDraw, vs...))
}

// AllDrawGT applies the GT predicate on the "allDraw" field.
func AllDrawGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAllDraw, v))
}

// AllDrawGTE applies the GTE predicate on the "allDraw" field.
func AllDrawGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAllDraw, v))
}

// AllDrawLT applies the LT predicate on the "allDraw" field.
func AllDrawLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAllDraw, v))
}

// AllDrawLTE applies the LTE predicate on the "allDraw" field.
func AllDrawLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAllDraw, v))
}

// AllLoseEQ applies the EQ predicate on the "allLose" field.
func AllLoseEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllLose, v))
}

// AllLoseNEQ applies the NEQ predicate on the "allLose" field.
func AllLoseNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAllLose, v))
}

// AllLoseIn applies the In predicate on the "allLose" field.
func AllLoseIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAllLose, vs...))
}

// AllLoseNotIn applies the NotIn predicate on the "allLose" field.
func AllLoseNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAllLose, vs...))
}

// AllLoseGT applies the GT predicate on the "allLose" field.
func AllLoseGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAllLose, v))
}

// AllLoseGTE applies the GTE predicate on the "allLose" field.
func AllLoseGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAllLose, v))
}

// AllLoseLT applies the LT predicate on the "allLose" field.
func AllLoseLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAllLose, v))
}

// AllLoseLTE applies the LTE predicate on the "allLose" field.
func AllLoseLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAllLose, v))
}

// AllGoalsForEQ applies the EQ predicate on the "allGoalsFor" field.
func AllGoalsForEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllGoalsFor, v))
}

// AllGoalsForNEQ applies the NEQ predicate on the "allGoalsFor" field.
func AllGoalsForNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAllGoalsFor, v))
}

// AllGoalsForIn applies the In predicate on the "allGoalsFor" field.
func AllGoalsForIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAllGoalsFor, vs...))
}

// AllGoalsForNotIn applies the NotIn predicate on the "allGoalsFor" field.
func AllGoalsForNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAllGoalsFor, vs...))
}

// AllGoalsForGT applies the GT predicate on the "allGoalsFor" field.
func AllGoalsForGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAllGoalsFor, v))
}

// AllGoalsForGTE applies the GTE predicate on the "allGoalsFor" field.
func AllGoalsForGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAllGoalsFor, v))
}

// AllGoalsForLT applies the LT predicate on the "allGoalsFor" field.
func AllGoalsForLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAllGoalsFor, v))
}

// AllGoalsForLTE applies the LTE predicate on the "allGoalsFor" field.
func AllGoalsForLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAllGoalsFor, v))
}

// AllGoalsAgainstEQ applies the EQ predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAllGoalsAgainst, v))
}

// AllGoalsAgainstNEQ applies the NEQ predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAllGoalsAgainst, v))
}

// AllGoalsAgainstIn applies the In predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAllGoalsAgainst, vs...))
}

// AllGoalsAgainstNotIn applies the NotIn predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAllGoalsAgainst, vs...))
}

// AllGoalsAgainstGT applies the GT predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAllGoalsAgainst, v))
}

// AllGoalsAgainstGTE applies the GTE predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAllGoalsAgainst, v))
}

// AllGoalsAgainstLT applies the LT predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAllGoalsAgainst, v))
}

// AllGoalsAgainstLTE applies the LTE predicate on the "allGoalsAgainst" field.
func AllGoalsAgainstLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAllGoalsAgainst, v))
}

// HomePlayedEQ applies the EQ predicate on the "homePlayed" field.
func HomePlayedEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomePlayed, v))
}

// HomePlayedNEQ applies the NEQ predicate on the "homePlayed" field.
func HomePlayedNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldHomePlayed, v))
}

// HomePlayedIn applies the In predicate on the "homePlayed" field.
func HomePlayedIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldHomePlayed, vs...))
}

// HomePlayedNotIn applies the NotIn predicate on the "homePlayed" field.
func HomePlayedNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldHomePlayed, vs...))
}

// HomePlayedGT applies the GT predicate on the "homePlayed" field.
func HomePlayedGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldHomePlayed, v))
}

// HomePlayedGTE applies the GTE predicate on the "homePlayed" field.
func HomePlayedGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldHomePlayed, v))
}

// HomePlayedLT applies the LT predicate on the "homePlayed" field.
func HomePlayedLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldHomePlayed, v))
}

// HomePlayedLTE applies the LTE predicate on the "homePlayed" field.
func HomePlayedLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldHomePlayed, v))
}

// HomeWinEQ applies the EQ predicate on the "homeWin" field.
func HomeWinEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeWin, v))
}

// HomeWinNEQ applies the NEQ predicate on the "homeWin" field.
func HomeWinNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldHomeWin, v))
}

// HomeWinIn applies the In predicate on the "homeWin" field.
func HomeWinIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldHomeWin, vs...))
}

// HomeWinNotIn applies the NotIn predicate on the "homeWin" field.
func HomeWinNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldHomeWin, vs...))
}

// HomeWinGT applies the GT predicate on the "homeWin" field.
func HomeWinGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldHomeWin, v))
}

// HomeWinGTE applies the GTE predicate on the "homeWin" field.
func HomeWinGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldHomeWin, v))
}

// HomeWinLT applies the LT predicate on the "homeWin" field.
func HomeWinLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldHomeWin, v))
}

// HomeWinLTE applies the LTE predicate on the "homeWin" field.
func HomeWinLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldHomeWin, v))
}

// HomeDrawEQ applies the EQ predicate on the "homeDraw" field.
func HomeDrawEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeDraw, v))
}

// HomeDrawNEQ applies the NEQ predicate on the "homeDraw" field.
func HomeDrawNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldHomeDraw, v))
}

// HomeDrawIn applies the In predicate on the "homeDraw" field.
func HomeDrawIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldHomeDraw, vs...))
}

// HomeDrawNotIn applies the NotIn predicate on the "homeDraw" field.
func HomeDrawNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldHomeDraw, vs...))
}

// HomeDrawGT applies the GT predicate on the "homeDraw" field.
func HomeDrawGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldHomeDraw, v))
}

// HomeDrawGTE applies the GTE predicate on the "homeDraw" field.
func HomeDrawGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldHomeDraw, v))
}

// HomeDrawLT applies the LT predicate on the "homeDraw" field.
func HomeDrawLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldHomeDraw, v))
}

// HomeDrawLTE applies the LTE predicate on the "homeDraw" field.
func HomeDrawLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldHomeDraw, v))
}

// HomeLoseEQ applies the EQ predicate on the "homeLose" field.
func HomeLoseEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeLose, v))
}

// HomeLoseNEQ applies the NEQ predicate on the "homeLose" field.
func HomeLoseNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldHomeLose, v))
}

// HomeLoseIn applies the In predicate on the "homeLose" field.
func HomeLoseIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldHomeLose, vs...))
}

// HomeLoseNotIn applies the NotIn predicate on the "homeLose" field.
func HomeLoseNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldHomeLose, vs...))
}

// HomeLoseGT applies the GT predicate on the "homeLose" field.
func HomeLoseGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldHomeLose, v))
}

// HomeLoseGTE applies the GTE predicate on the "homeLose" field.
func HomeLoseGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldHomeLose, v))
}

// HomeLoseLT applies the LT predicate on the "homeLose" field.
func HomeLoseLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldHomeLose, v))
}

// HomeLoseLTE applies the LTE predicate on the "homeLose" field.
func HomeLoseLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldHomeLose, v))
}

// HomeGoalsForEQ applies the EQ predicate on the "homeGoalsFor" field.
func HomeGoalsForEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeGoalsFor, v))
}

// HomeGoalsForNEQ applies the NEQ predicate on the "homeGoalsFor" field.
func HomeGoalsForNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldHomeGoalsFor, v))
}

// HomeGoalsForIn applies the In predicate on the "homeGoalsFor" field.
func HomeGoalsForIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldHomeGoalsFor, vs...))
}

// HomeGoalsForNotIn applies the NotIn predicate on the "homeGoalsFor" field.
func HomeGoalsForNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldHomeGoalsFor, vs...))
}

// HomeGoalsForGT applies the GT predicate on the "homeGoalsFor" field.
func HomeGoalsForGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldHomeGoalsFor, v))
}

// HomeGoalsForGTE applies the GTE predicate on the "homeGoalsFor" field.
func HomeGoalsForGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldHomeGoalsFor, v))
}

// HomeGoalsForLT applies the LT predicate on the "homeGoalsFor" field.
func HomeGoalsForLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldHomeGoalsFor, v))
}

// HomeGoalsForLTE applies the LTE predicate on the "homeGoalsFor" field.
func HomeGoalsForLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldHomeGoalsFor, v))
}

// HomeGoalsAgainstEQ applies the EQ predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldHomeGoalsAgainst, v))
}

// HomeGoalsAgainstNEQ applies the NEQ predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldHomeGoalsAgainst, v))
}

// HomeGoalsAgainstIn applies the In predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldHomeGoalsAgainst, vs...))
}

// HomeGoalsAgainstNotIn applies the NotIn predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldHomeGoalsAgainst, vs...))
}

// HomeGoalsAgainstGT applies the GT predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldHomeGoalsAgainst, v))
}

// HomeGoalsAgainstGTE applies the GTE predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldHomeGoalsAgainst, v))
}

// HomeGoalsAgainstLT applies the LT predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldHomeGoalsAgainst, v))
}

// HomeGoalsAgainstLTE applies the LTE predicate on the "homeGoalsAgainst" field.
func HomeGoalsAgainstLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldHomeGoalsAgainst, v))
}

// AwayPlayedEQ applies the EQ predicate on the "awayPlayed" field.
func AwayPlayedEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayPlayed, v))
}

// AwayPlayedNEQ applies the NEQ predicate on the "awayPlayed" field.
func AwayPlayedNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAwayPlayed, v))
}

// AwayPlayedIn applies the In predicate on the "awayPlayed" field.
func AwayPlayedIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAwayPlayed, vs...))
}

// AwayPlayedNotIn applies the NotIn predicate on the "awayPlayed" field.
func AwayPlayedNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAwayPlayed, vs...))
}

// AwayPlayedGT applies the GT predicate on the "awayPlayed" field.
func AwayPlayedGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAwayPlayed, v))
}

// AwayPlayedGTE applies the GTE predicate on the "awayPlayed" field.
func AwayPlayedGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAwayPlayed, v))
}

// AwayPlayedLT applies the LT predicate on the "awayPlayed" field.
func AwayPlayedLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAwayPlayed, v))
}

// AwayPlayedLTE applies the LTE predicate on the "awayPlayed" field.
func AwayPlayedLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAwayPlayed, v))
}

// AwayWinEQ applies the EQ predicate on the "awayWin" field.
func AwayWinEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayWin, v))
}

// AwayWinNEQ applies the NEQ predicate on the "awayWin" field.
func AwayWinNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAwayWin, v))
}

// AwayWinIn applies the In predicate on the "awayWin" field.
func AwayWinIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAwayWin, vs...))
}

// AwayWinNotIn applies the NotIn predicate on the "awayWin" field.
func AwayWinNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAwayWin, vs...))
}

// AwayWinGT applies the GT predicate on the "awayWin" field.
func AwayWinGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAwayWin, v))
}

// AwayWinGTE applies the GTE predicate on the "awayWin" field.
func AwayWinGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAwayWin, v))
}

// AwayWinLT applies the LT predicate on the "awayWin" field.
func AwayWinLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAwayWin, v))
}

// AwayWinLTE applies the LTE predicate on the "awayWin" field.
func AwayWinLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAwayWin, v))
}

// AwayDrawEQ applies the EQ predicate on the "awayDraw" field.
func AwayDrawEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayDraw, v))
}

// AwayDrawNEQ applies the NEQ predicate on the "awayDraw" field.
func AwayDrawNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAwayDraw, v))
}

// AwayDrawIn applies the In predicate on the "awayDraw" field.
func AwayDrawIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAwayDraw, vs...))
}

// AwayDrawNotIn applies the NotIn predicate on the "awayDraw" field.
func AwayDrawNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAwayDraw, vs...))
}

// AwayDrawGT applies the GT predicate on the "awayDraw" field.
func AwayDrawGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAwayDraw, v))
}

// AwayDrawGTE applies the GTE predicate on the "awayDraw" field.
func AwayDrawGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAwayDraw, v))
}

// AwayDrawLT applies the LT predicate on the "awayDraw" field.
func AwayDrawLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAwayDraw, v))
}

// AwayDrawLTE applies the LTE predicate on the "awayDraw" field.
func AwayDrawLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAwayDraw, v))
}

// AwayLoseEQ applies the EQ predicate on the "awayLose" field.
func AwayLoseEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayLose, v))
}

// AwayLoseNEQ applies the NEQ predicate on the "awayLose" field.
func AwayLoseNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAwayLose, v))
}

// AwayLoseIn applies the In predicate on the "awayLose" field.
func AwayLoseIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAwayLose, vs...))
}

// AwayLoseNotIn applies the NotIn predicate on the "awayLose" field.
func AwayLoseNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAwayLose, vs...))
}

// AwayLoseGT applies the GT predicate on the "awayLose" field.
func AwayLoseGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAwayLose, v))
}

// AwayLoseGTE applies the GTE predicate on the "awayLose" field.
func AwayLoseGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAwayLose, v))
}

// AwayLoseLT applies the LT predicate on the "awayLose" field.
func AwayLoseLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAwayLose, v))
}

// AwayLoseLTE applies the LTE predicate on the "awayLose" field.
func AwayLoseLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAwayLose, v))
}

// AwayGoalsForEQ applies the EQ predicate on the "awayGoalsFor" field.
func AwayGoalsForEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayGoalsFor, v))
}

// AwayGoalsForNEQ applies the NEQ predicate on the "awayGoalsFor" field.
func AwayGoalsForNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAwayGoalsFor, v))
}

// AwayGoalsForIn applies the In predicate on the "awayGoalsFor" field.
func AwayGoalsForIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAwayGoalsFor, vs...))
}

// AwayGoalsForNotIn applies the NotIn predicate on the "awayGoalsFor" field.
func AwayGoalsForNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAwayGoalsFor, vs...))
}

// AwayGoalsForGT applies the GT predicate on the "awayGoalsFor" field.
func AwayGoalsForGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAwayGoalsFor, v))
}

// AwayGoalsForGTE applies the GTE predicate on the "awayGoalsFor" field.
func AwayGoalsForGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAwayGoalsFor, v))
}

// AwayGoalsForLT applies the LT predicate on the "awayGoalsFor" field.
func AwayGoalsForLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAwayGoalsFor, v))
}

// AwayGoalsForLTE applies the LTE predicate on the "awayGoalsFor" field.
func AwayGoalsForLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAwayGoalsFor, v))
}

// AwayGoalsAgainstEQ applies the EQ predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldAwayGoalsAgainst, v))
}

// AwayGoalsAgainstNEQ applies the NEQ predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstNEQ(v int) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldAwayGoalsAgainst, v))
}

// AwayGoalsAgainstIn applies the In predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldAwayGoalsAgainst, vs...))
}

// AwayGoalsAgainstNotIn applies the NotIn predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstNotIn(vs ...int) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldAwayGoalsAgainst, vs...))
}

// AwayGoalsAgainstGT applies the GT predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstGT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldAwayGoalsAgainst, v))
}

// AwayGoalsAgainstGTE applies the GTE predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstGTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldAwayGoalsAgainst, v))
}

// AwayGoalsAgainstLT applies the LT predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstLT(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldAwayGoalsAgainst, v))
}

// AwayGoalsAgainstLTE applies the LTE predicate on the "awayGoalsAgainst" field.
func AwayGoalsAgainstLTE(v int) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldAwayGoalsAgainst, v))
}

// LastUpdatedEQ applies the EQ predicate on the "LastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "LastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "LastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "LastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "LastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "LastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "LastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "LastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.Standings {
	return predicate.Standings(sql.FieldLTE(FieldLastUpdated, v))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Standings {
	return predicate.Standings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Standings {
	return predicate.Standings(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeason applies the HasEdge predicate on the "season" edge.
func HasSeason() predicate.Standings {
	return predicate.Standings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonWith applies the HasEdge predicate on the "season" edge with a given conditions (other predicates).
func HasSeasonWith(preds ...predicate.Season) predicate.Standings {
	return predicate.Standings(func(s *sql.Selector) {
		step := newSeasonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Standings) predicate.Standings {
	return predicate.Standings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Standings) predicate.Standings {
	return predicate.Standings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Standings) predicate.Standings {
	return predicate.Standings(func(s *sql.Selector) {
		p(s.Not())
	})
}
