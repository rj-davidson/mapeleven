// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"mapeleven/db/ent/fixture"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/team"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureQuery is the builder for querying Fixture entities.
type FixtureQuery struct {
	config
	ctx          *QueryContext
	order        []fixture.Order
	inters       []Interceptor
	predicates   []predicate.Fixture
	withHomeTeam *TeamQuery
	withAwayTeam *TeamQuery
	withSeason   *SeasonQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FixtureQuery builder.
func (fq *FixtureQuery) Where(ps ...predicate.Fixture) *FixtureQuery {
	fq.predicates = append(fq.predicates, ps...)
	return fq
}

// Limit the number of records to be returned by this query.
func (fq *FixtureQuery) Limit(limit int) *FixtureQuery {
	fq.ctx.Limit = &limit
	return fq
}

// Offset to start from.
func (fq *FixtureQuery) Offset(offset int) *FixtureQuery {
	fq.ctx.Offset = &offset
	return fq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fq *FixtureQuery) Unique(unique bool) *FixtureQuery {
	fq.ctx.Unique = &unique
	return fq
}

// Order specifies how the records should be ordered.
func (fq *FixtureQuery) Order(o ...fixture.Order) *FixtureQuery {
	fq.order = append(fq.order, o...)
	return fq
}

// QueryHomeTeam chains the current query on the "homeTeam" edge.
func (fq *FixtureQuery) QueryHomeTeam() *TeamQuery {
	query := (&TeamClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixture.Table, fixture.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixture.HomeTeamTable, fixture.HomeTeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAwayTeam chains the current query on the "awayTeam" edge.
func (fq *FixtureQuery) QueryAwayTeam() *TeamQuery {
	query := (&TeamClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixture.Table, fixture.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixture.AwayTeamTable, fixture.AwayTeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySeason chains the current query on the "season" edge.
func (fq *FixtureQuery) QuerySeason() *SeasonQuery {
	query := (&SeasonClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixture.Table, fixture.FieldID, selector),
			sqlgraph.To(season.Table, season.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixture.SeasonTable, fixture.SeasonColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Fixture entity from the query.
// Returns a *NotFoundError when no Fixture was found.
func (fq *FixtureQuery) First(ctx context.Context) (*Fixture, error) {
	nodes, err := fq.Limit(1).All(setContextOp(ctx, fq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{fixture.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fq *FixtureQuery) FirstX(ctx context.Context) *Fixture {
	node, err := fq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Fixture ID from the query.
// Returns a *NotFoundError when no Fixture ID was found.
func (fq *FixtureQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fq.Limit(1).IDs(setContextOp(ctx, fq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fixture.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fq *FixtureQuery) FirstIDX(ctx context.Context) int {
	id, err := fq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Fixture entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Fixture entity is found.
// Returns a *NotFoundError when no Fixture entities are found.
func (fq *FixtureQuery) Only(ctx context.Context) (*Fixture, error) {
	nodes, err := fq.Limit(2).All(setContextOp(ctx, fq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{fixture.Label}
	default:
		return nil, &NotSingularError{fixture.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fq *FixtureQuery) OnlyX(ctx context.Context) *Fixture {
	node, err := fq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Fixture ID in the query.
// Returns a *NotSingularError when more than one Fixture ID is found.
// Returns a *NotFoundError when no entities are found.
func (fq *FixtureQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fq.Limit(2).IDs(setContextOp(ctx, fq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fixture.Label}
	default:
		err = &NotSingularError{fixture.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fq *FixtureQuery) OnlyIDX(ctx context.Context) int {
	id, err := fq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Fixtures.
func (fq *FixtureQuery) All(ctx context.Context) ([]*Fixture, error) {
	ctx = setContextOp(ctx, fq.ctx, "All")
	if err := fq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Fixture, *FixtureQuery]()
	return withInterceptors[[]*Fixture](ctx, fq, qr, fq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fq *FixtureQuery) AllX(ctx context.Context) []*Fixture {
	nodes, err := fq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Fixture IDs.
func (fq *FixtureQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fq.ctx.Unique == nil && fq.path != nil {
		fq.Unique(true)
	}
	ctx = setContextOp(ctx, fq.ctx, "IDs")
	if err = fq.Select(fixture.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fq *FixtureQuery) IDsX(ctx context.Context) []int {
	ids, err := fq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fq *FixtureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fq.ctx, "Count")
	if err := fq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fq, querierCount[*FixtureQuery](), fq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fq *FixtureQuery) CountX(ctx context.Context) int {
	count, err := fq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fq *FixtureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fq.ctx, "Exist")
	switch _, err := fq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fq *FixtureQuery) ExistX(ctx context.Context) bool {
	exist, err := fq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FixtureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fq *FixtureQuery) Clone() *FixtureQuery {
	if fq == nil {
		return nil
	}
	return &FixtureQuery{
		config:       fq.config,
		ctx:          fq.ctx.Clone(),
		order:        append([]fixture.Order{}, fq.order...),
		inters:       append([]Interceptor{}, fq.inters...),
		predicates:   append([]predicate.Fixture{}, fq.predicates...),
		withHomeTeam: fq.withHomeTeam.Clone(),
		withAwayTeam: fq.withAwayTeam.Clone(),
		withSeason:   fq.withSeason.Clone(),
		// clone intermediate query.
		sql:  fq.sql.Clone(),
		path: fq.path,
	}
}

// WithHomeTeam tells the query-builder to eager-load the nodes that are connected to
// the "homeTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FixtureQuery) WithHomeTeam(opts ...func(*TeamQuery)) *FixtureQuery {
	query := (&TeamClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withHomeTeam = query
	return fq
}

// WithAwayTeam tells the query-builder to eager-load the nodes that are connected to
// the "awayTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FixtureQuery) WithAwayTeam(opts ...func(*TeamQuery)) *FixtureQuery {
	query := (&TeamClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withAwayTeam = query
	return fq
}

// WithSeason tells the query-builder to eager-load the nodes that are connected to
// the "season" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FixtureQuery) WithSeason(opts ...func(*SeasonQuery)) *FixtureQuery {
	query := (&SeasonClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withSeason = query
	return fq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Slug string `json:"slug,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Fixture.Query().
//		GroupBy(fixture.FieldSlug).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fq *FixtureQuery) GroupBy(field string, fields ...string) *FixtureGroupBy {
	fq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FixtureGroupBy{build: fq}
	grbuild.flds = &fq.ctx.Fields
	grbuild.label = fixture.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Slug string `json:"slug,omitempty"`
//	}
//
//	client.Fixture.Query().
//		Select(fixture.FieldSlug).
//		Scan(ctx, &v)
func (fq *FixtureQuery) Select(fields ...string) *FixtureSelect {
	fq.ctx.Fields = append(fq.ctx.Fields, fields...)
	sbuild := &FixtureSelect{FixtureQuery: fq}
	sbuild.label = fixture.Label
	sbuild.flds, sbuild.scan = &fq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FixtureSelect configured with the given aggregations.
func (fq *FixtureQuery) Aggregate(fns ...AggregateFunc) *FixtureSelect {
	return fq.Select().Aggregate(fns...)
}

func (fq *FixtureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fq); err != nil {
				return err
			}
		}
	}
	for _, f := range fq.ctx.Fields {
		if !fixture.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fq.path != nil {
		prev, err := fq.path(ctx)
		if err != nil {
			return err
		}
		fq.sql = prev
	}
	return nil
}

func (fq *FixtureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Fixture, error) {
	var (
		nodes       = []*Fixture{}
		withFKs     = fq.withFKs
		_spec       = fq.querySpec()
		loadedTypes = [3]bool{
			fq.withHomeTeam != nil,
			fq.withAwayTeam != nil,
			fq.withSeason != nil,
		}
	)
	if fq.withHomeTeam != nil || fq.withAwayTeam != nil || fq.withSeason != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, fixture.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Fixture).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Fixture{config: fq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fq.withHomeTeam; query != nil {
		if err := fq.loadHomeTeam(ctx, query, nodes, nil,
			func(n *Fixture, e *Team) { n.Edges.HomeTeam = e }); err != nil {
			return nil, err
		}
	}
	if query := fq.withAwayTeam; query != nil {
		if err := fq.loadAwayTeam(ctx, query, nodes, nil,
			func(n *Fixture, e *Team) { n.Edges.AwayTeam = e }); err != nil {
			return nil, err
		}
	}
	if query := fq.withSeason; query != nil {
		if err := fq.loadSeason(ctx, query, nodes, nil,
			func(n *Fixture, e *Season) { n.Edges.Season = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fq *FixtureQuery) loadHomeTeam(ctx context.Context, query *TeamQuery, nodes []*Fixture, init func(*Fixture), assign func(*Fixture, *Team)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Fixture)
	for i := range nodes {
		if nodes[i].team_home_fixtures == nil {
			continue
		}
		fk := *nodes[i].team_home_fixtures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_home_fixtures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fq *FixtureQuery) loadAwayTeam(ctx context.Context, query *TeamQuery, nodes []*Fixture, init func(*Fixture), assign func(*Fixture, *Team)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Fixture)
	for i := range nodes {
		if nodes[i].team_away_fixtures == nil {
			continue
		}
		fk := *nodes[i].team_away_fixtures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_away_fixtures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fq *FixtureQuery) loadSeason(ctx context.Context, query *SeasonQuery, nodes []*Fixture, init func(*Fixture), assign func(*Fixture, *Season)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Fixture)
	for i := range nodes {
		if nodes[i].season_fixtures == nil {
			continue
		}
		fk := *nodes[i].season_fixtures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(season.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "season_fixtures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fq *FixtureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fq.querySpec()
	_spec.Node.Columns = fq.ctx.Fields
	if len(fq.ctx.Fields) > 0 {
		_spec.Unique = fq.ctx.Unique != nil && *fq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fq.driver, _spec)
}

func (fq *FixtureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(fixture.Table, fixture.Columns, sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt))
	_spec.From = fq.sql
	if unique := fq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fq.path != nil {
		_spec.Unique = true
	}
	if fields := fq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixture.FieldID)
		for i := range fields {
			if fields[i] != fixture.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fq *FixtureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fq.driver.Dialect())
	t1 := builder.Table(fixture.Table)
	columns := fq.ctx.Fields
	if len(columns) == 0 {
		columns = fixture.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fq.sql != nil {
		selector = fq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fq.ctx.Unique != nil && *fq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fq.predicates {
		p(selector)
	}
	for _, p := range fq.order {
		p(selector)
	}
	if offset := fq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FixtureGroupBy is the group-by builder for Fixture entities.
type FixtureGroupBy struct {
	selector
	build *FixtureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fgb *FixtureGroupBy) Aggregate(fns ...AggregateFunc) *FixtureGroupBy {
	fgb.fns = append(fgb.fns, fns...)
	return fgb
}

// Scan applies the selector query and scans the result into the given value.
func (fgb *FixtureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fgb.build.ctx, "GroupBy")
	if err := fgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FixtureQuery, *FixtureGroupBy](ctx, fgb.build, fgb, fgb.build.inters, v)
}

func (fgb *FixtureGroupBy) sqlScan(ctx context.Context, root *FixtureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fgb.fns))
	for _, fn := range fgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fgb.flds)+len(fgb.fns))
		for _, f := range *fgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FixtureSelect is the builder for selecting fields of Fixture entities.
type FixtureSelect struct {
	*FixtureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fs *FixtureSelect) Aggregate(fns ...AggregateFunc) *FixtureSelect {
	fs.fns = append(fs.fns, fns...)
	return fs
}

// Scan applies the selector query and scans the result into the given value.
func (fs *FixtureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fs.ctx, "Select")
	if err := fs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FixtureQuery, *FixtureSelect](ctx, fs.FixtureQuery, fs, fs.inters, v)
}

func (fs *FixtureSelect) sqlScan(ctx context.Context, root *FixtureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fs.fns))
	for _, fn := range fs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
