// Code generated by ent, DO NOT EDIT.

package playerseason

import (
	"mapeleven/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldID, id))
}

// Season applies equality check predicate on the "season" field. It's identical to SeasonEQ.
func Season(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldSeason, v))
}

// PID applies equality check predicate on the "pID" field. It's identical to PIDEQ.
func PID(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldPID, v))
}

// Nationality applies equality check predicate on the "nationality" field. It's identical to NationalityEQ.
func Nationality(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldNationality, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldPosition, v))
}

// Team applies equality check predicate on the "team" field. It's identical to TeamEQ.
func Team(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldTeam, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldYear, v))
}

// Appearances applies equality check predicate on the "appearances" field. It's identical to AppearancesEQ.
func Appearances(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldAppearances, v))
}

// Goals applies equality check predicate on the "goals" field. It's identical to GoalsEQ.
func Goals(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldGoals, v))
}

// Assists applies equality check predicate on the "assists" field. It's identical to AssistsEQ.
func Assists(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldAssists, v))
}

// Saves applies equality check predicate on the "saves" field. It's identical to SavesEQ.
func Saves(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldSaves, v))
}

// SeasonEQ applies the EQ predicate on the "season" field.
func SeasonEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldSeason, v))
}

// SeasonNEQ applies the NEQ predicate on the "season" field.
func SeasonNEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldSeason, v))
}

// SeasonIn applies the In predicate on the "season" field.
func SeasonIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldSeason, vs...))
}

// SeasonNotIn applies the NotIn predicate on the "season" field.
func SeasonNotIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldSeason, vs...))
}

// SeasonGT applies the GT predicate on the "season" field.
func SeasonGT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldSeason, v))
}

// SeasonGTE applies the GTE predicate on the "season" field.
func SeasonGTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldSeason, v))
}

// SeasonLT applies the LT predicate on the "season" field.
func SeasonLT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldSeason, v))
}

// SeasonLTE applies the LTE predicate on the "season" field.
func SeasonLTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldSeason, v))
}

// PIDEQ applies the EQ predicate on the "pID" field.
func PIDEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldPID, v))
}

// PIDNEQ applies the NEQ predicate on the "pID" field.
func PIDNEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldPID, v))
}

// PIDIn applies the In predicate on the "pID" field.
func PIDIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldPID, vs...))
}

// PIDNotIn applies the NotIn predicate on the "pID" field.
func PIDNotIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldPID, vs...))
}

// PIDGT applies the GT predicate on the "pID" field.
func PIDGT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldPID, v))
}

// PIDGTE applies the GTE predicate on the "pID" field.
func PIDGTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldPID, v))
}

// PIDLT applies the LT predicate on the "pID" field.
func PIDLT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldPID, v))
}

// PIDLTE applies the LTE predicate on the "pID" field.
func PIDLTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldPID, v))
}

// NationalityEQ applies the EQ predicate on the "nationality" field.
func NationalityEQ(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldNationality, v))
}

// NationalityNEQ applies the NEQ predicate on the "nationality" field.
func NationalityNEQ(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldNationality, v))
}

// NationalityIn applies the In predicate on the "nationality" field.
func NationalityIn(vs ...string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldNationality, vs...))
}

// NationalityNotIn applies the NotIn predicate on the "nationality" field.
func NationalityNotIn(vs ...string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldNationality, vs...))
}

// NationalityGT applies the GT predicate on the "nationality" field.
func NationalityGT(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldNationality, v))
}

// NationalityGTE applies the GTE predicate on the "nationality" field.
func NationalityGTE(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldNationality, v))
}

// NationalityLT applies the LT predicate on the "nationality" field.
func NationalityLT(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldNationality, v))
}

// NationalityLTE applies the LTE predicate on the "nationality" field.
func NationalityLTE(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldNationality, v))
}

// NationalityContains applies the Contains predicate on the "nationality" field.
func NationalityContains(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldContains(FieldNationality, v))
}

// NationalityHasPrefix applies the HasPrefix predicate on the "nationality" field.
func NationalityHasPrefix(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldHasPrefix(FieldNationality, v))
}

// NationalityHasSuffix applies the HasSuffix predicate on the "nationality" field.
func NationalityHasSuffix(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldHasSuffix(FieldNationality, v))
}

// NationalityEqualFold applies the EqualFold predicate on the "nationality" field.
func NationalityEqualFold(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEqualFold(FieldNationality, v))
}

// NationalityContainsFold applies the ContainsFold predicate on the "nationality" field.
func NationalityContainsFold(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldContainsFold(FieldNationality, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldContainsFold(FieldPosition, v))
}

// TeamEQ applies the EQ predicate on the "team" field.
func TeamEQ(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldTeam, v))
}

// TeamNEQ applies the NEQ predicate on the "team" field.
func TeamNEQ(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldTeam, v))
}

// TeamIn applies the In predicate on the "team" field.
func TeamIn(vs ...string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldTeam, vs...))
}

// TeamNotIn applies the NotIn predicate on the "team" field.
func TeamNotIn(vs ...string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldTeam, vs...))
}

// TeamGT applies the GT predicate on the "team" field.
func TeamGT(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldTeam, v))
}

// TeamGTE applies the GTE predicate on the "team" field.
func TeamGTE(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldTeam, v))
}

// TeamLT applies the LT predicate on the "team" field.
func TeamLT(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldTeam, v))
}

// TeamLTE applies the LTE predicate on the "team" field.
func TeamLTE(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldTeam, v))
}

// TeamContains applies the Contains predicate on the "team" field.
func TeamContains(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldContains(FieldTeam, v))
}

// TeamHasPrefix applies the HasPrefix predicate on the "team" field.
func TeamHasPrefix(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldHasPrefix(FieldTeam, v))
}

// TeamHasSuffix applies the HasSuffix predicate on the "team" field.
func TeamHasSuffix(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldHasSuffix(FieldTeam, v))
}

// TeamEqualFold applies the EqualFold predicate on the "team" field.
func TeamEqualFold(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEqualFold(FieldTeam, v))
}

// TeamContainsFold applies the ContainsFold predicate on the "team" field.
func TeamContainsFold(v string) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldContainsFold(FieldTeam, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldYear, v))
}

// AppearancesEQ applies the EQ predicate on the "appearances" field.
func AppearancesEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldAppearances, v))
}

// AppearancesNEQ applies the NEQ predicate on the "appearances" field.
func AppearancesNEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldAppearances, v))
}

// AppearancesIn applies the In predicate on the "appearances" field.
func AppearancesIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldAppearances, vs...))
}

// AppearancesNotIn applies the NotIn predicate on the "appearances" field.
func AppearancesNotIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldAppearances, vs...))
}

// AppearancesGT applies the GT predicate on the "appearances" field.
func AppearancesGT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldAppearances, v))
}

// AppearancesGTE applies the GTE predicate on the "appearances" field.
func AppearancesGTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldAppearances, v))
}

// AppearancesLT applies the LT predicate on the "appearances" field.
func AppearancesLT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldAppearances, v))
}

// AppearancesLTE applies the LTE predicate on the "appearances" field.
func AppearancesLTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldAppearances, v))
}

// GoalsEQ applies the EQ predicate on the "goals" field.
func GoalsEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldGoals, v))
}

// GoalsNEQ applies the NEQ predicate on the "goals" field.
func GoalsNEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldGoals, v))
}

// GoalsIn applies the In predicate on the "goals" field.
func GoalsIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldGoals, vs...))
}

// GoalsNotIn applies the NotIn predicate on the "goals" field.
func GoalsNotIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldGoals, vs...))
}

// GoalsGT applies the GT predicate on the "goals" field.
func GoalsGT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldGoals, v))
}

// GoalsGTE applies the GTE predicate on the "goals" field.
func GoalsGTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldGoals, v))
}

// GoalsLT applies the LT predicate on the "goals" field.
func GoalsLT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldGoals, v))
}

// GoalsLTE applies the LTE predicate on the "goals" field.
func GoalsLTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldGoals, v))
}

// AssistsEQ applies the EQ predicate on the "assists" field.
func AssistsEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldAssists, v))
}

// AssistsNEQ applies the NEQ predicate on the "assists" field.
func AssistsNEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldAssists, v))
}

// AssistsIn applies the In predicate on the "assists" field.
func AssistsIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldAssists, vs...))
}

// AssistsNotIn applies the NotIn predicate on the "assists" field.
func AssistsNotIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldAssists, vs...))
}

// AssistsGT applies the GT predicate on the "assists" field.
func AssistsGT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldAssists, v))
}

// AssistsGTE applies the GTE predicate on the "assists" field.
func AssistsGTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldAssists, v))
}

// AssistsLT applies the LT predicate on the "assists" field.
func AssistsLT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldAssists, v))
}

// AssistsLTE applies the LTE predicate on the "assists" field.
func AssistsLTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldAssists, v))
}

// SavesEQ applies the EQ predicate on the "saves" field.
func SavesEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldEQ(FieldSaves, v))
}

// SavesNEQ applies the NEQ predicate on the "saves" field.
func SavesNEQ(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNEQ(FieldSaves, v))
}

// SavesIn applies the In predicate on the "saves" field.
func SavesIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldIn(FieldSaves, vs...))
}

// SavesNotIn applies the NotIn predicate on the "saves" field.
func SavesNotIn(vs ...int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldNotIn(FieldSaves, vs...))
}

// SavesGT applies the GT predicate on the "saves" field.
func SavesGT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGT(FieldSaves, v))
}

// SavesGTE applies the GTE predicate on the "saves" field.
func SavesGTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldGTE(FieldSaves, v))
}

// SavesLT applies the LT predicate on the "saves" field.
func SavesLT(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLT(FieldSaves, v))
}

// SavesLTE applies the LTE predicate on the "saves" field.
func SavesLTE(v int) predicate.PlayerSeason {
	return predicate.PlayerSeason(sql.FieldLTE(FieldSaves, v))
}

// HasClub applies the HasEdge predicate on the "club" edge.
func HasClub() predicate.PlayerSeason {
	return predicate.PlayerSeason(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ClubTable, ClubPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubWith applies the HasEdge predicate on the "club" edge with a given conditions (other predicates).
func HasClubWith(preds ...predicate.Club) predicate.PlayerSeason {
	return predicate.PlayerSeason(func(s *sql.Selector) {
		step := newClubStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlayerSeason) predicate.PlayerSeason {
	return predicate.PlayerSeason(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlayerSeason) predicate.PlayerSeason {
	return predicate.PlayerSeason(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlayerSeason) predicate.PlayerSeason {
	return predicate.PlayerSeason(func(s *sql.Selector) {
		p(s.Not())
	})
}
