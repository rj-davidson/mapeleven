// Code generated by ent, DO NOT EDIT.

package playerseason

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the playerseason type in the database.
	Label = "player_season"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeason holds the string denoting the season field in the database.
	FieldSeason = "season"
	// FieldPID holds the string denoting the pid field in the database.
	FieldPID = "p_id"
	// FieldNationality holds the string denoting the nationality field in the database.
	FieldNationality = "nationality"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldTeam holds the string denoting the team field in the database.
	FieldTeam = "team"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldAppearances holds the string denoting the appearances field in the database.
	FieldAppearances = "appearances"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldAssists holds the string denoting the assists field in the database.
	FieldAssists = "assists"
	// FieldSaves holds the string denoting the saves field in the database.
	FieldSaves = "saves"
	// EdgeClub holds the string denoting the club edge name in mutations.
	EdgeClub = "club"
	// Table holds the table name of the playerseason in the database.
	Table = "player_seasons"
	// ClubTable is the table that holds the club relation/edge. The primary key declared below.
	ClubTable = "club_playerSeasons"
	// ClubInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	ClubInverseTable = "clubs"
)

// Columns holds all SQL columns for playerseason fields.
var Columns = []string{
	FieldID,
	FieldSeason,
	FieldPID,
	FieldNationality,
	FieldPosition,
	FieldTeam,
	FieldYear,
	FieldAppearances,
	FieldGoals,
	FieldAssists,
	FieldSaves,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "player_seasons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"season_player_seasons",
	"team_team",
}

var (
	// ClubPrimaryKey and ClubColumn2 are the table columns denoting the
	// primary key for the club relation (M2M).
	ClubPrimaryKey = []string{"club_id", "player_season_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the PlayerSeason queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeason orders the results by the season field.
func BySeason(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSeason, opts...).ToFunc()
}

// ByPID orders the results by the pID field.
func ByPID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPID, opts...).ToFunc()
}

// ByNationality orders the results by the nationality field.
func ByNationality(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNationality, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByTeam orders the results by the team field.
func ByTeam(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTeam, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByAppearances orders the results by the appearances field.
func ByAppearances(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAppearances, opts...).ToFunc()
}

// ByGoals orders the results by the goals field.
func ByGoals(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldGoals, opts...).ToFunc()
}

// ByAssists orders the results by the assists field.
func ByAssists(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAssists, opts...).ToFunc()
}

// BySaves orders the results by the saves field.
func BySaves(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSaves, opts...).ToFunc()
}

// ByClubCount orders the results by club count.
func ByClubCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClubStep(), opts...)
	}
}

// ByClub orders the results by club terms.
func ByClub(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClubStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClubStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClubInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ClubTable, ClubPrimaryKey...),
	)
}
