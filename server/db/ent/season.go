// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/league"
	"mapeleven/db/ent/season"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Season is the model entity for the Season schema.
type Season struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Year holds the value of the "year" field.
	Year int `json:"year,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// Current holds the value of the "current" field.
	Current bool `json:"current,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeasonQuery when eager-loading is set.
	Edges        SeasonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SeasonEdges holds the relations/edges for other nodes in the graph.
type SeasonEdges struct {
	// League holds the value of the league edge.
	League *League `json:"league,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LeagueOrErr returns the League value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeasonEdges) LeagueOrErr() (*League, error) {
	if e.loadedTypes[0] {
		if e.League == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: league.Label}
		}
		return e.League, nil
	}
	return nil, &NotLoadedError{edge: "league"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Season) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case season.FieldCurrent:
			values[i] = new(sql.NullBool)
		case season.FieldID, season.FieldYear:
			values[i] = new(sql.NullInt64)
		case season.FieldStart, season.FieldEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Season fields.
func (s *Season) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case season.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case season.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				s.Year = int(value.Int64)
			}
		case season.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				s.Start = value.Time
			}
		case season.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				s.End = value.Time
			}
		case season.FieldCurrent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field current", values[i])
			} else if value.Valid {
				s.Current = value.Bool
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Season.
// This includes values selected through modifiers, order, etc.
func (s *Season) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryLeague queries the "league" edge of the Season entity.
func (s *Season) QueryLeague() *LeagueQuery {
	return NewSeasonClient(s.config).QueryLeague(s)
}

// Update returns a builder for updating this Season.
// Note that you need to call Season.Unwrap() before calling this method if this Season
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Season) Update() *SeasonUpdateOne {
	return NewSeasonClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Season entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Season) Unwrap() *Season {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Season is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Season) String() string {
	var builder strings.Builder
	builder.WriteString("Season(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", s.Year))
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(s.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(s.End.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("current=")
	builder.WriteString(fmt.Sprintf("%v", s.Current))
	builder.WriteByte(')')
	return builder.String()
}

// Seasons is a parsable slice of Season.
type Seasons []*Season
