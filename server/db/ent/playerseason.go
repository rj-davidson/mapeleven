// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/playerseason"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PlayerSeason is the model entity for the PlayerSeason schema.
type PlayerSeason struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Season holds the value of the "season" field.
	Season int `json:"season,omitempty"`
	// PID holds the value of the "pID" field.
	PID int `json:"pID,omitempty"`
	// Nationality holds the value of the "nationality" field.
	Nationality string `json:"nationality,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Team holds the value of the "team" field.
	Team string `json:"team,omitempty"`
	// Year holds the value of the "year" field.
	Year int `json:"year,omitempty"`
	// Appearances holds the value of the "appearances" field.
	Appearances int `json:"appearances,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals int `json:"goals,omitempty"`
	// Assists holds the value of the "assists" field.
	Assists int `json:"assists,omitempty"`
	// Saves holds the value of the "saves" field.
	Saves int `json:"saves,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerSeasonQuery when eager-loading is set.
	Edges                 PlayerSeasonEdges `json:"edges"`
	season_player_seasons *int
	team_team             *int
	selectValues          sql.SelectValues
}

// PlayerSeasonEdges holds the relations/edges for other nodes in the graph.
type PlayerSeasonEdges struct {
	// Club holds the value of the club edge.
	Club []*Club `json:"club,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerSeasonEdges) ClubOrErr() ([]*Club, error) {
	if e.loadedTypes[0] {
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlayerSeason) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playerseason.FieldID, playerseason.FieldSeason, playerseason.FieldPID, playerseason.FieldYear, playerseason.FieldAppearances, playerseason.FieldGoals, playerseason.FieldAssists, playerseason.FieldSaves:
			values[i] = new(sql.NullInt64)
		case playerseason.FieldNationality, playerseason.FieldPosition, playerseason.FieldTeam:
			values[i] = new(sql.NullString)
		case playerseason.ForeignKeys[0]: // season_player_seasons
			values[i] = new(sql.NullInt64)
		case playerseason.ForeignKeys[1]: // team_team
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlayerSeason fields.
func (ps *PlayerSeason) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playerseason.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case playerseason.FieldSeason:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field season", values[i])
			} else if value.Valid {
				ps.Season = int(value.Int64)
			}
		case playerseason.FieldPID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pID", values[i])
			} else if value.Valid {
				ps.PID = int(value.Int64)
			}
		case playerseason.FieldNationality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nationality", values[i])
			} else if value.Valid {
				ps.Nationality = value.String
			}
		case playerseason.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				ps.Position = value.String
			}
		case playerseason.FieldTeam:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team", values[i])
			} else if value.Valid {
				ps.Team = value.String
			}
		case playerseason.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				ps.Year = int(value.Int64)
			}
		case playerseason.FieldAppearances:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field appearances", values[i])
			} else if value.Valid {
				ps.Appearances = int(value.Int64)
			}
		case playerseason.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value.Valid {
				ps.Goals = int(value.Int64)
			}
		case playerseason.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assists", values[i])
			} else if value.Valid {
				ps.Assists = int(value.Int64)
			}
		case playerseason.FieldSaves:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saves", values[i])
			} else if value.Valid {
				ps.Saves = int(value.Int64)
			}
		case playerseason.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field season_player_seasons", value)
			} else if value.Valid {
				ps.season_player_seasons = new(int)
				*ps.season_player_seasons = int(value.Int64)
			}
		case playerseason.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_team", value)
			} else if value.Valid {
				ps.team_team = new(int)
				*ps.team_team = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlayerSeason.
// This includes values selected through modifiers, order, etc.
func (ps *PlayerSeason) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryClub queries the "club" edge of the PlayerSeason entity.
func (ps *PlayerSeason) QueryClub() *ClubQuery {
	return NewPlayerSeasonClient(ps.config).QueryClub(ps)
}

// Update returns a builder for updating this PlayerSeason.
// Note that you need to call PlayerSeason.Unwrap() before calling this method if this PlayerSeason
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PlayerSeason) Update() *PlayerSeasonUpdateOne {
	return NewPlayerSeasonClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PlayerSeason entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PlayerSeason) Unwrap() *PlayerSeason {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlayerSeason is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PlayerSeason) String() string {
	var builder strings.Builder
	builder.WriteString("PlayerSeason(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("season=")
	builder.WriteString(fmt.Sprintf("%v", ps.Season))
	builder.WriteString(", ")
	builder.WriteString("pID=")
	builder.WriteString(fmt.Sprintf("%v", ps.PID))
	builder.WriteString(", ")
	builder.WriteString("nationality=")
	builder.WriteString(ps.Nationality)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(ps.Position)
	builder.WriteString(", ")
	builder.WriteString("team=")
	builder.WriteString(ps.Team)
	builder.WriteString(", ")
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", ps.Year))
	builder.WriteString(", ")
	builder.WriteString("appearances=")
	builder.WriteString(fmt.Sprintf("%v", ps.Appearances))
	builder.WriteString(", ")
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", ps.Goals))
	builder.WriteString(", ")
	builder.WriteString("assists=")
	builder.WriteString(fmt.Sprintf("%v", ps.Assists))
	builder.WriteString(", ")
	builder.WriteString("saves=")
	builder.WriteString(fmt.Sprintf("%v", ps.Saves))
	builder.WriteByte(')')
	return builder.String()
}

// PlayerSeasons is a parsable slice of PlayerSeason.
type PlayerSeasons []*PlayerSeason
