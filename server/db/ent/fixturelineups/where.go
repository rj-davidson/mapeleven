// Code generated by ent, DO NOT EDIT.

package fixturelineups

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldLTE(FieldID, id))
}

// Formation applies equality check predicate on the "formation" field. It's identical to FormationEQ.
func Formation(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldEQ(FieldFormation, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldEQ(FieldLastUpdated, v))
}

// FormationEQ applies the EQ predicate on the "formation" field.
func FormationEQ(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldEQ(FieldFormation, v))
}

// FormationNEQ applies the NEQ predicate on the "formation" field.
func FormationNEQ(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldNEQ(FieldFormation, v))
}

// FormationIn applies the In predicate on the "formation" field.
func FormationIn(vs ...string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldIn(FieldFormation, vs...))
}

// FormationNotIn applies the NotIn predicate on the "formation" field.
func FormationNotIn(vs ...string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldNotIn(FieldFormation, vs...))
}

// FormationGT applies the GT predicate on the "formation" field.
func FormationGT(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldGT(FieldFormation, v))
}

// FormationGTE applies the GTE predicate on the "formation" field.
func FormationGTE(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldGTE(FieldFormation, v))
}

// FormationLT applies the LT predicate on the "formation" field.
func FormationLT(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldLT(FieldFormation, v))
}

// FormationLTE applies the LTE predicate on the "formation" field.
func FormationLTE(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldLTE(FieldFormation, v))
}

// FormationContains applies the Contains predicate on the "formation" field.
func FormationContains(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldContains(FieldFormation, v))
}

// FormationHasPrefix applies the HasPrefix predicate on the "formation" field.
func FormationHasPrefix(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldHasPrefix(FieldFormation, v))
}

// FormationHasSuffix applies the HasSuffix predicate on the "formation" field.
func FormationHasSuffix(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldHasSuffix(FieldFormation, v))
}

// FormationEqualFold applies the EqualFold predicate on the "formation" field.
func FormationEqualFold(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldEqualFold(FieldFormation, v))
}

// FormationContainsFold applies the ContainsFold predicate on the "formation" field.
func FormationContainsFold(v string) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldContainsFold(FieldFormation, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.FixtureLineups {
	return predicate.FixtureLineups(sql.FieldNotNull(FieldLastUpdated))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.FixtureLineups {
	return predicate.FixtureLineups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.FixtureLineups {
	return predicate.FixtureLineups(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLineupPlayer applies the HasEdge predicate on the "lineupPlayer" edge.
func HasLineupPlayer() predicate.FixtureLineups {
	return predicate.FixtureLineups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LineupPlayerTable, LineupPlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineupPlayerWith applies the HasEdge predicate on the "lineupPlayer" edge with a given conditions (other predicates).
func HasLineupPlayerWith(preds ...predicate.MatchPlayer) predicate.FixtureLineups {
	return predicate.FixtureLineups(func(s *sql.Selector) {
		step := newLineupPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FixtureLineups) predicate.FixtureLineups {
	return predicate.FixtureLineups(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FixtureLineups) predicate.FixtureLineups {
	return predicate.FixtureLineups(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FixtureLineups) predicate.FixtureLineups {
	return predicate.FixtureLineups(func(s *sql.Selector) {
		p(s.Not())
	})
}
