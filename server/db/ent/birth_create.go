// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/models/ent/birth"
	"mapeleven/models/ent/player"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BirthCreate is the builder for creating a Birth entity.
type BirthCreate struct {
	config
	mutation *BirthMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (bc *BirthCreate) SetDate(t time.Time) *BirthCreate {
	bc.mutation.SetDate(t)
	return bc
}

// SetPlace sets the "place" field.
func (bc *BirthCreate) SetPlace(s string) *BirthCreate {
	bc.mutation.SetPlace(s)
	return bc
}

// SetCountry sets the "country" field.
func (bc *BirthCreate) SetCountry(s string) *BirthCreate {
	bc.mutation.SetCountry(s)
	return bc
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (bc *BirthCreate) SetPlayerID(id int) *BirthCreate {
	bc.mutation.SetPlayerID(id)
	return bc
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (bc *BirthCreate) SetNillablePlayerID(id *int) *BirthCreate {
	if id != nil {
		bc = bc.SetPlayerID(*id)
	}
	return bc
}

// SetPlayer sets the "player" edge to the Player entity.
func (bc *BirthCreate) SetPlayer(p *Player) *BirthCreate {
	return bc.SetPlayerID(p.ID)
}

// Mutation returns the BirthMutation object of the builder.
func (bc *BirthCreate) Mutation() *BirthMutation {
	return bc.mutation
}

// Save creates the Birth in the database.
func (bc *BirthCreate) Save(ctx context.Context) (*Birth, error) {
	return withHooks[*Birth, BirthMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BirthCreate) SaveX(ctx context.Context) *Birth {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BirthCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BirthCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BirthCreate) check() error {
	if _, ok := bc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Birth.date"`)}
	}
	if _, ok := bc.mutation.Place(); !ok {
		return &ValidationError{Name: "place", err: errors.New(`ent: missing required field "Birth.place"`)}
	}
	if _, ok := bc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Birth.country"`)}
	}
	return nil
}

func (bc *BirthCreate) sqlSave(ctx context.Context) (*Birth, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BirthCreate) createSpec() (*Birth, *sqlgraph.CreateSpec) {
	var (
		_node = &Birth{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(birth.Table, sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Date(); ok {
		_spec.SetField(birth.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := bc.mutation.Place(); ok {
		_spec.SetField(birth.FieldPlace, field.TypeString, value)
		_node.Place = value
	}
	if value, ok := bc.mutation.Country(); ok {
		_spec.SetField(birth.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if nodes := bc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   birth.PlayerTable,
			Columns: []string{birth.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_birth = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BirthCreateBulk is the builder for creating many Birth entities in bulk.
type BirthCreateBulk struct {
	config
	builders []*BirthCreate
}

// Save creates the Birth entities in the database.
func (bcb *BirthCreateBulk) Save(ctx context.Context) ([]*Birth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Birth, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BirthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BirthCreateBulk) SaveX(ctx context.Context) []*Birth {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BirthCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BirthCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
