// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/fixturelineups"
	"mapeleven/db/ent/matchplayer"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchPlayerUpdate is the builder for updating MatchPlayer entities.
type MatchPlayerUpdate struct {
	config
	hooks    []Hook
	mutation *MatchPlayerMutation
}

// Where appends a list predicates to the MatchPlayerUpdate builder.
func (mpu *MatchPlayerUpdate) Where(ps ...predicate.MatchPlayer) *MatchPlayerUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetNumber sets the "number" field.
func (mpu *MatchPlayerUpdate) SetNumber(i int) *MatchPlayerUpdate {
	mpu.mutation.ResetNumber()
	mpu.mutation.SetNumber(i)
	return mpu
}

// AddNumber adds i to the "number" field.
func (mpu *MatchPlayerUpdate) AddNumber(i int) *MatchPlayerUpdate {
	mpu.mutation.AddNumber(i)
	return mpu
}

// SetPosition sets the "position" field.
func (mpu *MatchPlayerUpdate) SetPosition(s string) *MatchPlayerUpdate {
	mpu.mutation.SetPosition(s)
	return mpu
}

// SetX sets the "x" field.
func (mpu *MatchPlayerUpdate) SetX(s string) *MatchPlayerUpdate {
	mpu.mutation.SetX(s)
	return mpu
}

// SetY sets the "y" field.
func (mpu *MatchPlayerUpdate) SetY(s string) *MatchPlayerUpdate {
	mpu.mutation.SetY(s)
	return mpu
}

// SetLastUpdated sets the "lastUpdated" field.
func (mpu *MatchPlayerUpdate) SetLastUpdated(t time.Time) *MatchPlayerUpdate {
	mpu.mutation.SetLastUpdated(t)
	return mpu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (mpu *MatchPlayerUpdate) ClearLastUpdated() *MatchPlayerUpdate {
	mpu.mutation.ClearLastUpdated()
	return mpu
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (mpu *MatchPlayerUpdate) SetPlayerID(id int) *MatchPlayerUpdate {
	mpu.mutation.SetPlayerID(id)
	return mpu
}

// SetPlayer sets the "player" edge to the Player entity.
func (mpu *MatchPlayerUpdate) SetPlayer(p *Player) *MatchPlayerUpdate {
	return mpu.SetPlayerID(p.ID)
}

// SetLineupID sets the "lineup" edge to the FixtureLineups entity by ID.
func (mpu *MatchPlayerUpdate) SetLineupID(id int) *MatchPlayerUpdate {
	mpu.mutation.SetLineupID(id)
	return mpu
}

// SetLineup sets the "lineup" edge to the FixtureLineups entity.
func (mpu *MatchPlayerUpdate) SetLineup(f *FixtureLineups) *MatchPlayerUpdate {
	return mpu.SetLineupID(f.ID)
}

// Mutation returns the MatchPlayerMutation object of the builder.
func (mpu *MatchPlayerUpdate) Mutation() *MatchPlayerMutation {
	return mpu.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (mpu *MatchPlayerUpdate) ClearPlayer() *MatchPlayerUpdate {
	mpu.mutation.ClearPlayer()
	return mpu
}

// ClearLineup clears the "lineup" edge to the FixtureLineups entity.
func (mpu *MatchPlayerUpdate) ClearLineup() *MatchPlayerUpdate {
	mpu.mutation.ClearLineup()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MatchPlayerUpdate) Save(ctx context.Context) (int, error) {
	mpu.defaults()
	return withHooks[int, MatchPlayerMutation](ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MatchPlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MatchPlayerUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MatchPlayerUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpu *MatchPlayerUpdate) defaults() {
	if _, ok := mpu.mutation.LastUpdated(); !ok && !mpu.mutation.LastUpdatedCleared() {
		v := matchplayer.UpdateDefaultLastUpdated()
		mpu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MatchPlayerUpdate) check() error {
	if _, ok := mpu.mutation.PlayerID(); mpu.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MatchPlayer.player"`)
	}
	if _, ok := mpu.mutation.LineupID(); mpu.mutation.LineupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MatchPlayer.lineup"`)
	}
	return nil
}

func (mpu *MatchPlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchplayer.Table, matchplayer.Columns, sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.Number(); ok {
		_spec.SetField(matchplayer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := mpu.mutation.AddedNumber(); ok {
		_spec.AddField(matchplayer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := mpu.mutation.Position(); ok {
		_spec.SetField(matchplayer.FieldPosition, field.TypeString, value)
	}
	if value, ok := mpu.mutation.X(); ok {
		_spec.SetField(matchplayer.FieldX, field.TypeString, value)
	}
	if value, ok := mpu.mutation.Y(); ok {
		_spec.SetField(matchplayer.FieldY, field.TypeString, value)
	}
	if value, ok := mpu.mutation.LastUpdated(); ok {
		_spec.SetField(matchplayer.FieldLastUpdated, field.TypeTime, value)
	}
	if mpu.mutation.LastUpdatedCleared() {
		_spec.ClearField(matchplayer.FieldLastUpdated, field.TypeTime)
	}
	if mpu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.LineupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.LineupTable,
			Columns: []string{matchplayer.LineupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.LineupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.LineupTable,
			Columns: []string{matchplayer.LineupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MatchPlayerUpdateOne is the builder for updating a single MatchPlayer entity.
type MatchPlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchPlayerMutation
}

// SetNumber sets the "number" field.
func (mpuo *MatchPlayerUpdateOne) SetNumber(i int) *MatchPlayerUpdateOne {
	mpuo.mutation.ResetNumber()
	mpuo.mutation.SetNumber(i)
	return mpuo
}

// AddNumber adds i to the "number" field.
func (mpuo *MatchPlayerUpdateOne) AddNumber(i int) *MatchPlayerUpdateOne {
	mpuo.mutation.AddNumber(i)
	return mpuo
}

// SetPosition sets the "position" field.
func (mpuo *MatchPlayerUpdateOne) SetPosition(s string) *MatchPlayerUpdateOne {
	mpuo.mutation.SetPosition(s)
	return mpuo
}

// SetX sets the "x" field.
func (mpuo *MatchPlayerUpdateOne) SetX(s string) *MatchPlayerUpdateOne {
	mpuo.mutation.SetX(s)
	return mpuo
}

// SetY sets the "y" field.
func (mpuo *MatchPlayerUpdateOne) SetY(s string) *MatchPlayerUpdateOne {
	mpuo.mutation.SetY(s)
	return mpuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (mpuo *MatchPlayerUpdateOne) SetLastUpdated(t time.Time) *MatchPlayerUpdateOne {
	mpuo.mutation.SetLastUpdated(t)
	return mpuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (mpuo *MatchPlayerUpdateOne) ClearLastUpdated() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearLastUpdated()
	return mpuo
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (mpuo *MatchPlayerUpdateOne) SetPlayerID(id int) *MatchPlayerUpdateOne {
	mpuo.mutation.SetPlayerID(id)
	return mpuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (mpuo *MatchPlayerUpdateOne) SetPlayer(p *Player) *MatchPlayerUpdateOne {
	return mpuo.SetPlayerID(p.ID)
}

// SetLineupID sets the "lineup" edge to the FixtureLineups entity by ID.
func (mpuo *MatchPlayerUpdateOne) SetLineupID(id int) *MatchPlayerUpdateOne {
	mpuo.mutation.SetLineupID(id)
	return mpuo
}

// SetLineup sets the "lineup" edge to the FixtureLineups entity.
func (mpuo *MatchPlayerUpdateOne) SetLineup(f *FixtureLineups) *MatchPlayerUpdateOne {
	return mpuo.SetLineupID(f.ID)
}

// Mutation returns the MatchPlayerMutation object of the builder.
func (mpuo *MatchPlayerUpdateOne) Mutation() *MatchPlayerMutation {
	return mpuo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (mpuo *MatchPlayerUpdateOne) ClearPlayer() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearPlayer()
	return mpuo
}

// ClearLineup clears the "lineup" edge to the FixtureLineups entity.
func (mpuo *MatchPlayerUpdateOne) ClearLineup() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearLineup()
	return mpuo
}

// Where appends a list predicates to the MatchPlayerUpdate builder.
func (mpuo *MatchPlayerUpdateOne) Where(ps ...predicate.MatchPlayer) *MatchPlayerUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MatchPlayerUpdateOne) Select(field string, fields ...string) *MatchPlayerUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MatchPlayer entity.
func (mpuo *MatchPlayerUpdateOne) Save(ctx context.Context) (*MatchPlayer, error) {
	mpuo.defaults()
	return withHooks[*MatchPlayer, MatchPlayerMutation](ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MatchPlayerUpdateOne) SaveX(ctx context.Context) *MatchPlayer {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MatchPlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MatchPlayerUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuo *MatchPlayerUpdateOne) defaults() {
	if _, ok := mpuo.mutation.LastUpdated(); !ok && !mpuo.mutation.LastUpdatedCleared() {
		v := matchplayer.UpdateDefaultLastUpdated()
		mpuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MatchPlayerUpdateOne) check() error {
	if _, ok := mpuo.mutation.PlayerID(); mpuo.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MatchPlayer.player"`)
	}
	if _, ok := mpuo.mutation.LineupID(); mpuo.mutation.LineupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MatchPlayer.lineup"`)
	}
	return nil
}

func (mpuo *MatchPlayerUpdateOne) sqlSave(ctx context.Context) (_node *MatchPlayer, err error) {
	if err := mpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchplayer.Table, matchplayer.Columns, sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MatchPlayer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, matchplayer.FieldID)
		for _, f := range fields {
			if !matchplayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != matchplayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.Number(); ok {
		_spec.SetField(matchplayer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := mpuo.mutation.AddedNumber(); ok {
		_spec.AddField(matchplayer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := mpuo.mutation.Position(); ok {
		_spec.SetField(matchplayer.FieldPosition, field.TypeString, value)
	}
	if value, ok := mpuo.mutation.X(); ok {
		_spec.SetField(matchplayer.FieldX, field.TypeString, value)
	}
	if value, ok := mpuo.mutation.Y(); ok {
		_spec.SetField(matchplayer.FieldY, field.TypeString, value)
	}
	if value, ok := mpuo.mutation.LastUpdated(); ok {
		_spec.SetField(matchplayer.FieldLastUpdated, field.TypeTime, value)
	}
	if mpuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(matchplayer.FieldLastUpdated, field.TypeTime)
	}
	if mpuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.LineupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.LineupTable,
			Columns: []string{matchplayer.LineupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.LineupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.LineupTable,
			Columns: []string{matchplayer.LineupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MatchPlayer{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}
