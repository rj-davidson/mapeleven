// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/club"
	"mapeleven/db/ent/fixture"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/squad"
	"mapeleven/db/ent/standings"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tsbiggest"
	"mapeleven/db/ent/tscards"
	"mapeleven/db/ent/tscleansheet"
	"mapeleven/db/ent/tsfailedtoscore"
	"mapeleven/db/ent/tsfixtures"
	"mapeleven/db/ent/tsgoals"
	"mapeleven/db/ent/tslineups"
	"mapeleven/db/ent/tspenalty"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetForm sets the "form" field.
func (tu *TeamUpdate) SetForm(s string) *TeamUpdate {
	tu.mutation.SetForm(s)
	return tu
}

// SetNillableForm sets the "form" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableForm(s *string) *TeamUpdate {
	if s != nil {
		tu.SetForm(*s)
	}
	return tu
}

// ClearForm clears the value of the "form" field.
func (tu *TeamUpdate) ClearForm() *TeamUpdate {
	tu.mutation.ClearForm()
	return tu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tu *TeamUpdate) SetLastUpdated(t time.Time) *TeamUpdate {
	tu.mutation.SetLastUpdated(t)
	return tu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tu *TeamUpdate) ClearLastUpdated() *TeamUpdate {
	tu.mutation.ClearLastUpdated()
	return tu
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (tu *TeamUpdate) SetSeasonID(id int) *TeamUpdate {
	tu.mutation.SetSeasonID(id)
	return tu
}

// SetNillableSeasonID sets the "season" edge to the Season entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableSeasonID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetSeasonID(*id)
	}
	return tu
}

// SetSeason sets the "season" edge to the Season entity.
func (tu *TeamUpdate) SetSeason(s *Season) *TeamUpdate {
	return tu.SetSeasonID(s.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (tu *TeamUpdate) SetClubID(id int) *TeamUpdate {
	tu.mutation.SetClubID(id)
	return tu
}

// SetClub sets the "club" edge to the Club entity.
func (tu *TeamUpdate) SetClub(c *Club) *TeamUpdate {
	return tu.SetClubID(c.ID)
}

// AddStandingIDs adds the "standings" edge to the Standings entity by IDs.
func (tu *TeamUpdate) AddStandingIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddStandingIDs(ids...)
	return tu
}

// AddStandings adds the "standings" edges to the Standings entity.
func (tu *TeamUpdate) AddStandings(s ...*Standings) *TeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddStandingIDs(ids...)
}

// AddHomeFixtureIDs adds the "homeFixtures" edge to the Fixture entity by IDs.
func (tu *TeamUpdate) AddHomeFixtureIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddHomeFixtureIDs(ids...)
	return tu
}

// AddHomeFixtures adds the "homeFixtures" edges to the Fixture entity.
func (tu *TeamUpdate) AddHomeFixtures(f ...*Fixture) *TeamUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddHomeFixtureIDs(ids...)
}

// AddAwayFixtureIDs adds the "awayFixtures" edge to the Fixture entity by IDs.
func (tu *TeamUpdate) AddAwayFixtureIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddAwayFixtureIDs(ids...)
	return tu
}

// AddAwayFixtures adds the "awayFixtures" edges to the Fixture entity.
func (tu *TeamUpdate) AddAwayFixtures(f ...*Fixture) *TeamUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddAwayFixtureIDs(ids...)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (tu *TeamUpdate) AddPlayerIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddPlayerIDs(ids...)
	return tu
}

// AddPlayers adds the "players" edges to the Player entity.
func (tu *TeamUpdate) AddPlayers(p ...*Player) *TeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPlayerIDs(ids...)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (tu *TeamUpdate) AddSquadIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddSquadIDs(ids...)
	return tu
}

// AddSquad adds the "squad" edges to the Squad entity.
func (tu *TeamUpdate) AddSquad(s ...*Squad) *TeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSquadIDs(ids...)
}

// SetBiggestStatsID sets the "biggest_stats" edge to the TSBiggest entity by ID.
func (tu *TeamUpdate) SetBiggestStatsID(id int) *TeamUpdate {
	tu.mutation.SetBiggestStatsID(id)
	return tu
}

// SetNillableBiggestStatsID sets the "biggest_stats" edge to the TSBiggest entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableBiggestStatsID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetBiggestStatsID(*id)
	}
	return tu
}

// SetBiggestStats sets the "biggest_stats" edge to the TSBiggest entity.
func (tu *TeamUpdate) SetBiggestStats(t *TSBiggest) *TeamUpdate {
	return tu.SetBiggestStatsID(t.ID)
}

// SetCardsStatsID sets the "cards_stats" edge to the TSCards entity by ID.
func (tu *TeamUpdate) SetCardsStatsID(id int) *TeamUpdate {
	tu.mutation.SetCardsStatsID(id)
	return tu
}

// SetNillableCardsStatsID sets the "cards_stats" edge to the TSCards entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableCardsStatsID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetCardsStatsID(*id)
	}
	return tu
}

// SetCardsStats sets the "cards_stats" edge to the TSCards entity.
func (tu *TeamUpdate) SetCardsStats(t *TSCards) *TeamUpdate {
	return tu.SetCardsStatsID(t.ID)
}

// SetCleanSheetStatsID sets the "clean_sheet_stats" edge to the TSCleanSheet entity by ID.
func (tu *TeamUpdate) SetCleanSheetStatsID(id int) *TeamUpdate {
	tu.mutation.SetCleanSheetStatsID(id)
	return tu
}

// SetNillableCleanSheetStatsID sets the "clean_sheet_stats" edge to the TSCleanSheet entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableCleanSheetStatsID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetCleanSheetStatsID(*id)
	}
	return tu
}

// SetCleanSheetStats sets the "clean_sheet_stats" edge to the TSCleanSheet entity.
func (tu *TeamUpdate) SetCleanSheetStats(t *TSCleanSheet) *TeamUpdate {
	return tu.SetCleanSheetStatsID(t.ID)
}

// SetFailedToScoreStatsID sets the "failed_to_score_stats" edge to the TSFailedToScore entity by ID.
func (tu *TeamUpdate) SetFailedToScoreStatsID(id int) *TeamUpdate {
	tu.mutation.SetFailedToScoreStatsID(id)
	return tu
}

// SetNillableFailedToScoreStatsID sets the "failed_to_score_stats" edge to the TSFailedToScore entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableFailedToScoreStatsID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetFailedToScoreStatsID(*id)
	}
	return tu
}

// SetFailedToScoreStats sets the "failed_to_score_stats" edge to the TSFailedToScore entity.
func (tu *TeamUpdate) SetFailedToScoreStats(t *TSFailedToScore) *TeamUpdate {
	return tu.SetFailedToScoreStatsID(t.ID)
}

// SetFixturesStatsID sets the "fixtures_stats" edge to the TSFixtures entity by ID.
func (tu *TeamUpdate) SetFixturesStatsID(id int) *TeamUpdate {
	tu.mutation.SetFixturesStatsID(id)
	return tu
}

// SetNillableFixturesStatsID sets the "fixtures_stats" edge to the TSFixtures entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableFixturesStatsID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetFixturesStatsID(*id)
	}
	return tu
}

// SetFixturesStats sets the "fixtures_stats" edge to the TSFixtures entity.
func (tu *TeamUpdate) SetFixturesStats(t *TSFixtures) *TeamUpdate {
	return tu.SetFixturesStatsID(t.ID)
}

// SetGoalsStatsID sets the "goals_stats" edge to the TSGoals entity by ID.
func (tu *TeamUpdate) SetGoalsStatsID(id int) *TeamUpdate {
	tu.mutation.SetGoalsStatsID(id)
	return tu
}

// SetNillableGoalsStatsID sets the "goals_stats" edge to the TSGoals entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableGoalsStatsID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetGoalsStatsID(*id)
	}
	return tu
}

// SetGoalsStats sets the "goals_stats" edge to the TSGoals entity.
func (tu *TeamUpdate) SetGoalsStats(t *TSGoals) *TeamUpdate {
	return tu.SetGoalsStatsID(t.ID)
}

// AddLineupIDs adds the "lineups" edge to the TSLineups entity by IDs.
func (tu *TeamUpdate) AddLineupIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddLineupIDs(ids...)
	return tu
}

// AddLineups adds the "lineups" edges to the TSLineups entity.
func (tu *TeamUpdate) AddLineups(t ...*TSLineups) *TeamUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddLineupIDs(ids...)
}

// SetPenaltyStatsID sets the "penalty_stats" edge to the TSPenalty entity by ID.
func (tu *TeamUpdate) SetPenaltyStatsID(id int) *TeamUpdate {
	tu.mutation.SetPenaltyStatsID(id)
	return tu
}

// SetNillablePenaltyStatsID sets the "penalty_stats" edge to the TSPenalty entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillablePenaltyStatsID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetPenaltyStatsID(*id)
	}
	return tu
}

// SetPenaltyStats sets the "penalty_stats" edge to the TSPenalty entity.
func (tu *TeamUpdate) SetPenaltyStats(t *TSPenalty) *TeamUpdate {
	return tu.SetPenaltyStatsID(t.ID)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (tu *TeamUpdate) ClearSeason() *TeamUpdate {
	tu.mutation.ClearSeason()
	return tu
}

// ClearClub clears the "club" edge to the Club entity.
func (tu *TeamUpdate) ClearClub() *TeamUpdate {
	tu.mutation.ClearClub()
	return tu
}

// ClearStandings clears all "standings" edges to the Standings entity.
func (tu *TeamUpdate) ClearStandings() *TeamUpdate {
	tu.mutation.ClearStandings()
	return tu
}

// RemoveStandingIDs removes the "standings" edge to Standings entities by IDs.
func (tu *TeamUpdate) RemoveStandingIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveStandingIDs(ids...)
	return tu
}

// RemoveStandings removes "standings" edges to Standings entities.
func (tu *TeamUpdate) RemoveStandings(s ...*Standings) *TeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveStandingIDs(ids...)
}

// ClearHomeFixtures clears all "homeFixtures" edges to the Fixture entity.
func (tu *TeamUpdate) ClearHomeFixtures() *TeamUpdate {
	tu.mutation.ClearHomeFixtures()
	return tu
}

// RemoveHomeFixtureIDs removes the "homeFixtures" edge to Fixture entities by IDs.
func (tu *TeamUpdate) RemoveHomeFixtureIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveHomeFixtureIDs(ids...)
	return tu
}

// RemoveHomeFixtures removes "homeFixtures" edges to Fixture entities.
func (tu *TeamUpdate) RemoveHomeFixtures(f ...*Fixture) *TeamUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveHomeFixtureIDs(ids...)
}

// ClearAwayFixtures clears all "awayFixtures" edges to the Fixture entity.
func (tu *TeamUpdate) ClearAwayFixtures() *TeamUpdate {
	tu.mutation.ClearAwayFixtures()
	return tu
}

// RemoveAwayFixtureIDs removes the "awayFixtures" edge to Fixture entities by IDs.
func (tu *TeamUpdate) RemoveAwayFixtureIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveAwayFixtureIDs(ids...)
	return tu
}

// RemoveAwayFixtures removes "awayFixtures" edges to Fixture entities.
func (tu *TeamUpdate) RemoveAwayFixtures(f ...*Fixture) *TeamUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveAwayFixtureIDs(ids...)
}

// ClearPlayers clears all "players" edges to the Player entity.
func (tu *TeamUpdate) ClearPlayers() *TeamUpdate {
	tu.mutation.ClearPlayers()
	return tu
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (tu *TeamUpdate) RemovePlayerIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemovePlayerIDs(ids...)
	return tu
}

// RemovePlayers removes "players" edges to Player entities.
func (tu *TeamUpdate) RemovePlayers(p ...*Player) *TeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePlayerIDs(ids...)
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (tu *TeamUpdate) ClearSquad() *TeamUpdate {
	tu.mutation.ClearSquad()
	return tu
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (tu *TeamUpdate) RemoveSquadIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveSquadIDs(ids...)
	return tu
}

// RemoveSquad removes "squad" edges to Squad entities.
func (tu *TeamUpdate) RemoveSquad(s ...*Squad) *TeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSquadIDs(ids...)
}

// ClearBiggestStats clears the "biggest_stats" edge to the TSBiggest entity.
func (tu *TeamUpdate) ClearBiggestStats() *TeamUpdate {
	tu.mutation.ClearBiggestStats()
	return tu
}

// ClearCardsStats clears the "cards_stats" edge to the TSCards entity.
func (tu *TeamUpdate) ClearCardsStats() *TeamUpdate {
	tu.mutation.ClearCardsStats()
	return tu
}

// ClearCleanSheetStats clears the "clean_sheet_stats" edge to the TSCleanSheet entity.
func (tu *TeamUpdate) ClearCleanSheetStats() *TeamUpdate {
	tu.mutation.ClearCleanSheetStats()
	return tu
}

// ClearFailedToScoreStats clears the "failed_to_score_stats" edge to the TSFailedToScore entity.
func (tu *TeamUpdate) ClearFailedToScoreStats() *TeamUpdate {
	tu.mutation.ClearFailedToScoreStats()
	return tu
}

// ClearFixturesStats clears the "fixtures_stats" edge to the TSFixtures entity.
func (tu *TeamUpdate) ClearFixturesStats() *TeamUpdate {
	tu.mutation.ClearFixturesStats()
	return tu
}

// ClearGoalsStats clears the "goals_stats" edge to the TSGoals entity.
func (tu *TeamUpdate) ClearGoalsStats() *TeamUpdate {
	tu.mutation.ClearGoalsStats()
	return tu
}

// ClearLineups clears all "lineups" edges to the TSLineups entity.
func (tu *TeamUpdate) ClearLineups() *TeamUpdate {
	tu.mutation.ClearLineups()
	return tu
}

// RemoveLineupIDs removes the "lineups" edge to TSLineups entities by IDs.
func (tu *TeamUpdate) RemoveLineupIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveLineupIDs(ids...)
	return tu
}

// RemoveLineups removes "lineups" edges to TSLineups entities.
func (tu *TeamUpdate) RemoveLineups(t ...*TSLineups) *TeamUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveLineupIDs(ids...)
}

// ClearPenaltyStats clears the "penalty_stats" edge to the TSPenalty entity.
func (tu *TeamUpdate) ClearPenaltyStats() *TeamUpdate {
	tu.mutation.ClearPenaltyStats()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks[int, TeamMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TeamUpdate) defaults() {
	if _, ok := tu.mutation.LastUpdated(); !ok && !tu.mutation.LastUpdatedCleared() {
		v := team.UpdateDefaultLastUpdated()
		tu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TeamUpdate) check() error {
	if _, ok := tu.mutation.ClubID(); tu.mutation.ClubCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Team.club"`)
	}
	return nil
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Form(); ok {
		_spec.SetField(team.FieldForm, field.TypeString, value)
	}
	if tu.mutation.FormCleared() {
		_spec.ClearField(team.FieldForm, field.TypeString)
	}
	if value, ok := tu.mutation.LastUpdated(); ok {
		_spec.SetField(team.FieldLastUpdated, field.TypeTime, value)
	}
	if tu.mutation.LastUpdatedCleared() {
		_spec.ClearField(team.FieldLastUpdated, field.TypeTime)
	}
	if tu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.SeasonTable,
			Columns: []string{team.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.SeasonTable,
			Columns: []string{team.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.ClubTable,
			Columns: []string{team.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.ClubTable,
			Columns: []string{team.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.StandingsTable,
			Columns: []string{team.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedStandingsIDs(); len(nodes) > 0 && !tu.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.StandingsTable,
			Columns: []string{team.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StandingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.StandingsTable,
			Columns: []string{team.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.HomeFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HomeFixturesTable,
			Columns: []string{team.HomeFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedHomeFixturesIDs(); len(nodes) > 0 && !tu.mutation.HomeFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HomeFixturesTable,
			Columns: []string{team.HomeFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.HomeFixturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HomeFixturesTable,
			Columns: []string{team.HomeFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AwayFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.AwayFixturesTable,
			Columns: []string{team.AwayFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAwayFixturesIDs(); len(nodes) > 0 && !tu.mutation.AwayFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.AwayFixturesTable,
			Columns: []string{team.AwayFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AwayFixturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.AwayFixturesTable,
			Columns: []string{team.AwayFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PlayersTable,
			Columns: []string{team.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !tu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PlayersTable,
			Columns: []string{team.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PlayersTable,
			Columns: []string{team.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.SquadTable,
			Columns: []string{team.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSquadIDs(); len(nodes) > 0 && !tu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.SquadTable,
			Columns: []string{team.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.SquadTable,
			Columns: []string{team.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.BiggestStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.BiggestStatsTable,
			Columns: []string{team.BiggestStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsbiggest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BiggestStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.BiggestStatsTable,
			Columns: []string{team.BiggestStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsbiggest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CardsStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CardsStatsTable,
			Columns: []string{team.CardsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CardsStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CardsStatsTable,
			Columns: []string{team.CardsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CleanSheetStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CleanSheetStatsTable,
			Columns: []string{team.CleanSheetStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscleansheet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CleanSheetStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CleanSheetStatsTable,
			Columns: []string{team.CleanSheetStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscleansheet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FailedToScoreStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FailedToScoreStatsTable,
			Columns: []string{team.FailedToScoreStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FailedToScoreStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FailedToScoreStatsTable,
			Columns: []string{team.FailedToScoreStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FixturesStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FixturesStatsTable,
			Columns: []string{team.FixturesStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FixturesStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FixturesStatsTable,
			Columns: []string{team.FixturesStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.GoalsStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.GoalsStatsTable,
			Columns: []string{team.GoalsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.GoalsStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.GoalsStatsTable,
			Columns: []string{team.GoalsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LineupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.LineupsTable,
			Columns: []string{team.LineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLineupsIDs(); len(nodes) > 0 && !tu.mutation.LineupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.LineupsTable,
			Columns: []string{team.LineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LineupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.LineupsTable,
			Columns: []string{team.LineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PenaltyStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.PenaltyStatsTable,
			Columns: []string{team.PenaltyStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PenaltyStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.PenaltyStatsTable,
			Columns: []string{team.PenaltyStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetForm sets the "form" field.
func (tuo *TeamUpdateOne) SetForm(s string) *TeamUpdateOne {
	tuo.mutation.SetForm(s)
	return tuo
}

// SetNillableForm sets the "form" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableForm(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetForm(*s)
	}
	return tuo
}

// ClearForm clears the value of the "form" field.
func (tuo *TeamUpdateOne) ClearForm() *TeamUpdateOne {
	tuo.mutation.ClearForm()
	return tuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tuo *TeamUpdateOne) SetLastUpdated(t time.Time) *TeamUpdateOne {
	tuo.mutation.SetLastUpdated(t)
	return tuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tuo *TeamUpdateOne) ClearLastUpdated() *TeamUpdateOne {
	tuo.mutation.ClearLastUpdated()
	return tuo
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (tuo *TeamUpdateOne) SetSeasonID(id int) *TeamUpdateOne {
	tuo.mutation.SetSeasonID(id)
	return tuo
}

// SetNillableSeasonID sets the "season" edge to the Season entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableSeasonID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetSeasonID(*id)
	}
	return tuo
}

// SetSeason sets the "season" edge to the Season entity.
func (tuo *TeamUpdateOne) SetSeason(s *Season) *TeamUpdateOne {
	return tuo.SetSeasonID(s.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (tuo *TeamUpdateOne) SetClubID(id int) *TeamUpdateOne {
	tuo.mutation.SetClubID(id)
	return tuo
}

// SetClub sets the "club" edge to the Club entity.
func (tuo *TeamUpdateOne) SetClub(c *Club) *TeamUpdateOne {
	return tuo.SetClubID(c.ID)
}

// AddStandingIDs adds the "standings" edge to the Standings entity by IDs.
func (tuo *TeamUpdateOne) AddStandingIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddStandingIDs(ids...)
	return tuo
}

// AddStandings adds the "standings" edges to the Standings entity.
func (tuo *TeamUpdateOne) AddStandings(s ...*Standings) *TeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddStandingIDs(ids...)
}

// AddHomeFixtureIDs adds the "homeFixtures" edge to the Fixture entity by IDs.
func (tuo *TeamUpdateOne) AddHomeFixtureIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddHomeFixtureIDs(ids...)
	return tuo
}

// AddHomeFixtures adds the "homeFixtures" edges to the Fixture entity.
func (tuo *TeamUpdateOne) AddHomeFixtures(f ...*Fixture) *TeamUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddHomeFixtureIDs(ids...)
}

// AddAwayFixtureIDs adds the "awayFixtures" edge to the Fixture entity by IDs.
func (tuo *TeamUpdateOne) AddAwayFixtureIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddAwayFixtureIDs(ids...)
	return tuo
}

// AddAwayFixtures adds the "awayFixtures" edges to the Fixture entity.
func (tuo *TeamUpdateOne) AddAwayFixtures(f ...*Fixture) *TeamUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddAwayFixtureIDs(ids...)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (tuo *TeamUpdateOne) AddPlayerIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddPlayerIDs(ids...)
	return tuo
}

// AddPlayers adds the "players" edges to the Player entity.
func (tuo *TeamUpdateOne) AddPlayers(p ...*Player) *TeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPlayerIDs(ids...)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (tuo *TeamUpdateOne) AddSquadIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddSquadIDs(ids...)
	return tuo
}

// AddSquad adds the "squad" edges to the Squad entity.
func (tuo *TeamUpdateOne) AddSquad(s ...*Squad) *TeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSquadIDs(ids...)
}

// SetBiggestStatsID sets the "biggest_stats" edge to the TSBiggest entity by ID.
func (tuo *TeamUpdateOne) SetBiggestStatsID(id int) *TeamUpdateOne {
	tuo.mutation.SetBiggestStatsID(id)
	return tuo
}

// SetNillableBiggestStatsID sets the "biggest_stats" edge to the TSBiggest entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableBiggestStatsID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetBiggestStatsID(*id)
	}
	return tuo
}

// SetBiggestStats sets the "biggest_stats" edge to the TSBiggest entity.
func (tuo *TeamUpdateOne) SetBiggestStats(t *TSBiggest) *TeamUpdateOne {
	return tuo.SetBiggestStatsID(t.ID)
}

// SetCardsStatsID sets the "cards_stats" edge to the TSCards entity by ID.
func (tuo *TeamUpdateOne) SetCardsStatsID(id int) *TeamUpdateOne {
	tuo.mutation.SetCardsStatsID(id)
	return tuo
}

// SetNillableCardsStatsID sets the "cards_stats" edge to the TSCards entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableCardsStatsID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetCardsStatsID(*id)
	}
	return tuo
}

// SetCardsStats sets the "cards_stats" edge to the TSCards entity.
func (tuo *TeamUpdateOne) SetCardsStats(t *TSCards) *TeamUpdateOne {
	return tuo.SetCardsStatsID(t.ID)
}

// SetCleanSheetStatsID sets the "clean_sheet_stats" edge to the TSCleanSheet entity by ID.
func (tuo *TeamUpdateOne) SetCleanSheetStatsID(id int) *TeamUpdateOne {
	tuo.mutation.SetCleanSheetStatsID(id)
	return tuo
}

// SetNillableCleanSheetStatsID sets the "clean_sheet_stats" edge to the TSCleanSheet entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableCleanSheetStatsID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetCleanSheetStatsID(*id)
	}
	return tuo
}

// SetCleanSheetStats sets the "clean_sheet_stats" edge to the TSCleanSheet entity.
func (tuo *TeamUpdateOne) SetCleanSheetStats(t *TSCleanSheet) *TeamUpdateOne {
	return tuo.SetCleanSheetStatsID(t.ID)
}

// SetFailedToScoreStatsID sets the "failed_to_score_stats" edge to the TSFailedToScore entity by ID.
func (tuo *TeamUpdateOne) SetFailedToScoreStatsID(id int) *TeamUpdateOne {
	tuo.mutation.SetFailedToScoreStatsID(id)
	return tuo
}

// SetNillableFailedToScoreStatsID sets the "failed_to_score_stats" edge to the TSFailedToScore entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableFailedToScoreStatsID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetFailedToScoreStatsID(*id)
	}
	return tuo
}

// SetFailedToScoreStats sets the "failed_to_score_stats" edge to the TSFailedToScore entity.
func (tuo *TeamUpdateOne) SetFailedToScoreStats(t *TSFailedToScore) *TeamUpdateOne {
	return tuo.SetFailedToScoreStatsID(t.ID)
}

// SetFixturesStatsID sets the "fixtures_stats" edge to the TSFixtures entity by ID.
func (tuo *TeamUpdateOne) SetFixturesStatsID(id int) *TeamUpdateOne {
	tuo.mutation.SetFixturesStatsID(id)
	return tuo
}

// SetNillableFixturesStatsID sets the "fixtures_stats" edge to the TSFixtures entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableFixturesStatsID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetFixturesStatsID(*id)
	}
	return tuo
}

// SetFixturesStats sets the "fixtures_stats" edge to the TSFixtures entity.
func (tuo *TeamUpdateOne) SetFixturesStats(t *TSFixtures) *TeamUpdateOne {
	return tuo.SetFixturesStatsID(t.ID)
}

// SetGoalsStatsID sets the "goals_stats" edge to the TSGoals entity by ID.
func (tuo *TeamUpdateOne) SetGoalsStatsID(id int) *TeamUpdateOne {
	tuo.mutation.SetGoalsStatsID(id)
	return tuo
}

// SetNillableGoalsStatsID sets the "goals_stats" edge to the TSGoals entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableGoalsStatsID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetGoalsStatsID(*id)
	}
	return tuo
}

// SetGoalsStats sets the "goals_stats" edge to the TSGoals entity.
func (tuo *TeamUpdateOne) SetGoalsStats(t *TSGoals) *TeamUpdateOne {
	return tuo.SetGoalsStatsID(t.ID)
}

// AddLineupIDs adds the "lineups" edge to the TSLineups entity by IDs.
func (tuo *TeamUpdateOne) AddLineupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddLineupIDs(ids...)
	return tuo
}

// AddLineups adds the "lineups" edges to the TSLineups entity.
func (tuo *TeamUpdateOne) AddLineups(t ...*TSLineups) *TeamUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddLineupIDs(ids...)
}

// SetPenaltyStatsID sets the "penalty_stats" edge to the TSPenalty entity by ID.
func (tuo *TeamUpdateOne) SetPenaltyStatsID(id int) *TeamUpdateOne {
	tuo.mutation.SetPenaltyStatsID(id)
	return tuo
}

// SetNillablePenaltyStatsID sets the "penalty_stats" edge to the TSPenalty entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillablePenaltyStatsID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetPenaltyStatsID(*id)
	}
	return tuo
}

// SetPenaltyStats sets the "penalty_stats" edge to the TSPenalty entity.
func (tuo *TeamUpdateOne) SetPenaltyStats(t *TSPenalty) *TeamUpdateOne {
	return tuo.SetPenaltyStatsID(t.ID)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (tuo *TeamUpdateOne) ClearSeason() *TeamUpdateOne {
	tuo.mutation.ClearSeason()
	return tuo
}

// ClearClub clears the "club" edge to the Club entity.
func (tuo *TeamUpdateOne) ClearClub() *TeamUpdateOne {
	tuo.mutation.ClearClub()
	return tuo
}

// ClearStandings clears all "standings" edges to the Standings entity.
func (tuo *TeamUpdateOne) ClearStandings() *TeamUpdateOne {
	tuo.mutation.ClearStandings()
	return tuo
}

// RemoveStandingIDs removes the "standings" edge to Standings entities by IDs.
func (tuo *TeamUpdateOne) RemoveStandingIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveStandingIDs(ids...)
	return tuo
}

// RemoveStandings removes "standings" edges to Standings entities.
func (tuo *TeamUpdateOne) RemoveStandings(s ...*Standings) *TeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveStandingIDs(ids...)
}

// ClearHomeFixtures clears all "homeFixtures" edges to the Fixture entity.
func (tuo *TeamUpdateOne) ClearHomeFixtures() *TeamUpdateOne {
	tuo.mutation.ClearHomeFixtures()
	return tuo
}

// RemoveHomeFixtureIDs removes the "homeFixtures" edge to Fixture entities by IDs.
func (tuo *TeamUpdateOne) RemoveHomeFixtureIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveHomeFixtureIDs(ids...)
	return tuo
}

// RemoveHomeFixtures removes "homeFixtures" edges to Fixture entities.
func (tuo *TeamUpdateOne) RemoveHomeFixtures(f ...*Fixture) *TeamUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveHomeFixtureIDs(ids...)
}

// ClearAwayFixtures clears all "awayFixtures" edges to the Fixture entity.
func (tuo *TeamUpdateOne) ClearAwayFixtures() *TeamUpdateOne {
	tuo.mutation.ClearAwayFixtures()
	return tuo
}

// RemoveAwayFixtureIDs removes the "awayFixtures" edge to Fixture entities by IDs.
func (tuo *TeamUpdateOne) RemoveAwayFixtureIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveAwayFixtureIDs(ids...)
	return tuo
}

// RemoveAwayFixtures removes "awayFixtures" edges to Fixture entities.
func (tuo *TeamUpdateOne) RemoveAwayFixtures(f ...*Fixture) *TeamUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveAwayFixtureIDs(ids...)
}

// ClearPlayers clears all "players" edges to the Player entity.
func (tuo *TeamUpdateOne) ClearPlayers() *TeamUpdateOne {
	tuo.mutation.ClearPlayers()
	return tuo
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (tuo *TeamUpdateOne) RemovePlayerIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemovePlayerIDs(ids...)
	return tuo
}

// RemovePlayers removes "players" edges to Player entities.
func (tuo *TeamUpdateOne) RemovePlayers(p ...*Player) *TeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePlayerIDs(ids...)
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (tuo *TeamUpdateOne) ClearSquad() *TeamUpdateOne {
	tuo.mutation.ClearSquad()
	return tuo
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (tuo *TeamUpdateOne) RemoveSquadIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveSquadIDs(ids...)
	return tuo
}

// RemoveSquad removes "squad" edges to Squad entities.
func (tuo *TeamUpdateOne) RemoveSquad(s ...*Squad) *TeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSquadIDs(ids...)
}

// ClearBiggestStats clears the "biggest_stats" edge to the TSBiggest entity.
func (tuo *TeamUpdateOne) ClearBiggestStats() *TeamUpdateOne {
	tuo.mutation.ClearBiggestStats()
	return tuo
}

// ClearCardsStats clears the "cards_stats" edge to the TSCards entity.
func (tuo *TeamUpdateOne) ClearCardsStats() *TeamUpdateOne {
	tuo.mutation.ClearCardsStats()
	return tuo
}

// ClearCleanSheetStats clears the "clean_sheet_stats" edge to the TSCleanSheet entity.
func (tuo *TeamUpdateOne) ClearCleanSheetStats() *TeamUpdateOne {
	tuo.mutation.ClearCleanSheetStats()
	return tuo
}

// ClearFailedToScoreStats clears the "failed_to_score_stats" edge to the TSFailedToScore entity.
func (tuo *TeamUpdateOne) ClearFailedToScoreStats() *TeamUpdateOne {
	tuo.mutation.ClearFailedToScoreStats()
	return tuo
}

// ClearFixturesStats clears the "fixtures_stats" edge to the TSFixtures entity.
func (tuo *TeamUpdateOne) ClearFixturesStats() *TeamUpdateOne {
	tuo.mutation.ClearFixturesStats()
	return tuo
}

// ClearGoalsStats clears the "goals_stats" edge to the TSGoals entity.
func (tuo *TeamUpdateOne) ClearGoalsStats() *TeamUpdateOne {
	tuo.mutation.ClearGoalsStats()
	return tuo
}

// ClearLineups clears all "lineups" edges to the TSLineups entity.
func (tuo *TeamUpdateOne) ClearLineups() *TeamUpdateOne {
	tuo.mutation.ClearLineups()
	return tuo
}

// RemoveLineupIDs removes the "lineups" edge to TSLineups entities by IDs.
func (tuo *TeamUpdateOne) RemoveLineupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveLineupIDs(ids...)
	return tuo
}

// RemoveLineups removes "lineups" edges to TSLineups entities.
func (tuo *TeamUpdateOne) RemoveLineups(t ...*TSLineups) *TeamUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveLineupIDs(ids...)
}

// ClearPenaltyStats clears the "penalty_stats" edge to the TSPenalty entity.
func (tuo *TeamUpdateOne) ClearPenaltyStats() *TeamUpdateOne {
	tuo.mutation.ClearPenaltyStats()
	return tuo
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	tuo.defaults()
	return withHooks[*Team, TeamMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TeamUpdateOne) defaults() {
	if _, ok := tuo.mutation.LastUpdated(); !ok && !tuo.mutation.LastUpdatedCleared() {
		v := team.UpdateDefaultLastUpdated()
		tuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TeamUpdateOne) check() error {
	if _, ok := tuo.mutation.ClubID(); tuo.mutation.ClubCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Team.club"`)
	}
	return nil
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Form(); ok {
		_spec.SetField(team.FieldForm, field.TypeString, value)
	}
	if tuo.mutation.FormCleared() {
		_spec.ClearField(team.FieldForm, field.TypeString)
	}
	if value, ok := tuo.mutation.LastUpdated(); ok {
		_spec.SetField(team.FieldLastUpdated, field.TypeTime, value)
	}
	if tuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(team.FieldLastUpdated, field.TypeTime)
	}
	if tuo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.SeasonTable,
			Columns: []string{team.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.SeasonTable,
			Columns: []string{team.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.ClubTable,
			Columns: []string{team.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.ClubTable,
			Columns: []string{team.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.StandingsTable,
			Columns: []string{team.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedStandingsIDs(); len(nodes) > 0 && !tuo.mutation.StandingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.StandingsTable,
			Columns: []string{team.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StandingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.StandingsTable,
			Columns: []string{team.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.HomeFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HomeFixturesTable,
			Columns: []string{team.HomeFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedHomeFixturesIDs(); len(nodes) > 0 && !tuo.mutation.HomeFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HomeFixturesTable,
			Columns: []string{team.HomeFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.HomeFixturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HomeFixturesTable,
			Columns: []string{team.HomeFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AwayFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.AwayFixturesTable,
			Columns: []string{team.AwayFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAwayFixturesIDs(); len(nodes) > 0 && !tuo.mutation.AwayFixturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.AwayFixturesTable,
			Columns: []string{team.AwayFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AwayFixturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.AwayFixturesTable,
			Columns: []string{team.AwayFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PlayersTable,
			Columns: []string{team.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !tuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PlayersTable,
			Columns: []string{team.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PlayersTable,
			Columns: []string{team.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.SquadTable,
			Columns: []string{team.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSquadIDs(); len(nodes) > 0 && !tuo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.SquadTable,
			Columns: []string{team.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.SquadTable,
			Columns: []string{team.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.BiggestStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.BiggestStatsTable,
			Columns: []string{team.BiggestStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsbiggest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BiggestStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.BiggestStatsTable,
			Columns: []string{team.BiggestStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsbiggest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CardsStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CardsStatsTable,
			Columns: []string{team.CardsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CardsStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CardsStatsTable,
			Columns: []string{team.CardsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CleanSheetStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CleanSheetStatsTable,
			Columns: []string{team.CleanSheetStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscleansheet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CleanSheetStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CleanSheetStatsTable,
			Columns: []string{team.CleanSheetStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscleansheet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FailedToScoreStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FailedToScoreStatsTable,
			Columns: []string{team.FailedToScoreStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FailedToScoreStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FailedToScoreStatsTable,
			Columns: []string{team.FailedToScoreStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FixturesStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FixturesStatsTable,
			Columns: []string{team.FixturesStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FixturesStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FixturesStatsTable,
			Columns: []string{team.FixturesStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.GoalsStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.GoalsStatsTable,
			Columns: []string{team.GoalsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.GoalsStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.GoalsStatsTable,
			Columns: []string{team.GoalsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LineupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.LineupsTable,
			Columns: []string{team.LineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLineupsIDs(); len(nodes) > 0 && !tuo.mutation.LineupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.LineupsTable,
			Columns: []string{team.LineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LineupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.LineupsTable,
			Columns: []string{team.LineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PenaltyStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.PenaltyStatsTable,
			Columns: []string{team.PenaltyStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PenaltyStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.PenaltyStatsTable,
			Columns: []string{team.PenaltyStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
