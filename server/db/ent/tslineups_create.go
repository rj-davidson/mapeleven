// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tslineups"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSLineupsCreate is the builder for creating a TSLineups entity.
type TSLineupsCreate struct {
	config
	mutation *TSLineupsMutation
	hooks    []Hook
}

// SetFormation sets the "formation" field.
func (tlc *TSLineupsCreate) SetFormation(s string) *TSLineupsCreate {
	tlc.mutation.SetFormation(s)
	return tlc
}

// SetPlayed sets the "played" field.
func (tlc *TSLineupsCreate) SetPlayed(i int) *TSLineupsCreate {
	tlc.mutation.SetPlayed(i)
	return tlc
}

// SetTeamID sets the "team_id" field.
func (tlc *TSLineupsCreate) SetTeamID(i int) *TSLineupsCreate {
	tlc.mutation.SetTeamID(i)
	return tlc
}

// SetLastUpdated sets the "lastUpdated" field.
func (tlc *TSLineupsCreate) SetLastUpdated(t time.Time) *TSLineupsCreate {
	tlc.mutation.SetLastUpdated(t)
	return tlc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (tlc *TSLineupsCreate) SetNillableLastUpdated(t *time.Time) *TSLineupsCreate {
	if t != nil {
		tlc.SetLastUpdated(*t)
	}
	return tlc
}

// SetTeam sets the "team" edge to the Team entity.
func (tlc *TSLineupsCreate) SetTeam(t *Team) *TSLineupsCreate {
	return tlc.SetTeamID(t.ID)
}

// Mutation returns the TSLineupsMutation object of the builder.
func (tlc *TSLineupsCreate) Mutation() *TSLineupsMutation {
	return tlc.mutation
}

// Save creates the TSLineups in the database.
func (tlc *TSLineupsCreate) Save(ctx context.Context) (*TSLineups, error) {
	tlc.defaults()
	return withHooks[*TSLineups, TSLineupsMutation](ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TSLineupsCreate) SaveX(ctx context.Context) *TSLineups {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TSLineupsCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TSLineupsCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TSLineupsCreate) defaults() {
	if _, ok := tlc.mutation.LastUpdated(); !ok {
		v := tslineups.DefaultLastUpdated()
		tlc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TSLineupsCreate) check() error {
	if _, ok := tlc.mutation.Formation(); !ok {
		return &ValidationError{Name: "formation", err: errors.New(`ent: missing required field "TSLineups.formation"`)}
	}
	if _, ok := tlc.mutation.Played(); !ok {
		return &ValidationError{Name: "played", err: errors.New(`ent: missing required field "TSLineups.played"`)}
	}
	if _, ok := tlc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "TSLineups.team_id"`)}
	}
	if _, ok := tlc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "TSLineups.team"`)}
	}
	return nil
}

func (tlc *TSLineupsCreate) sqlSave(ctx context.Context) (*TSLineups, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TSLineupsCreate) createSpec() (*TSLineups, *sqlgraph.CreateSpec) {
	var (
		_node = &TSLineups{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(tslineups.Table, sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt))
	)
	if value, ok := tlc.mutation.Formation(); ok {
		_spec.SetField(tslineups.FieldFormation, field.TypeString, value)
		_node.Formation = value
	}
	if value, ok := tlc.mutation.Played(); ok {
		_spec.SetField(tslineups.FieldPlayed, field.TypeInt, value)
		_node.Played = value
	}
	if value, ok := tlc.mutation.LastUpdated(); ok {
		_spec.SetField(tslineups.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := tlc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tslineups.TeamTable,
			Columns: []string{tslineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TSLineupsCreateBulk is the builder for creating many TSLineups entities in bulk.
type TSLineupsCreateBulk struct {
	config
	builders []*TSLineupsCreate
}

// Save creates the TSLineups entities in the database.
func (tlcb *TSLineupsCreateBulk) Save(ctx context.Context) ([]*TSLineups, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TSLineups, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TSLineupsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TSLineupsCreateBulk) SaveX(ctx context.Context) []*TSLineups {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TSLineupsCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TSLineupsCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
