// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"mapeleven/db/ent/playerteamseason"
	"mapeleven/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerTeamSeasonDelete is the builder for deleting a PlayerTeamSeason entity.
type PlayerTeamSeasonDelete struct {
	config
	hooks    []Hook
	mutation *PlayerTeamSeasonMutation
}

// Where appends a list predicates to the PlayerTeamSeasonDelete builder.
func (ptsd *PlayerTeamSeasonDelete) Where(ps ...predicate.PlayerTeamSeason) *PlayerTeamSeasonDelete {
	ptsd.mutation.Where(ps...)
	return ptsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptsd *PlayerTeamSeasonDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, PlayerTeamSeasonMutation](ctx, ptsd.sqlExec, ptsd.mutation, ptsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptsd *PlayerTeamSeasonDelete) ExecX(ctx context.Context) int {
	n, err := ptsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptsd *PlayerTeamSeasonDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(playerteamseason.Table, sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt))
	if ps := ptsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptsd.mutation.done = true
	return affected, err
}

// PlayerTeamSeasonDeleteOne is the builder for deleting a single PlayerTeamSeason entity.
type PlayerTeamSeasonDeleteOne struct {
	ptsd *PlayerTeamSeasonDelete
}

// Where appends a list predicates to the PlayerTeamSeasonDelete builder.
func (ptsdo *PlayerTeamSeasonDeleteOne) Where(ps ...predicate.PlayerTeamSeason) *PlayerTeamSeasonDeleteOne {
	ptsdo.ptsd.mutation.Where(ps...)
	return ptsdo
}

// Exec executes the deletion query.
func (ptsdo *PlayerTeamSeasonDeleteOne) Exec(ctx context.Context) error {
	n, err := ptsdo.ptsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{playerteamseason.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptsdo *PlayerTeamSeasonDeleteOne) ExecX(ctx context.Context) {
	if err := ptsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
