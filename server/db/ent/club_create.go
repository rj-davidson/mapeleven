// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/club"
	"mapeleven/db/ent/country"
	"mapeleven/db/ent/playerseason"
	"mapeleven/db/ent/team"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClubCreate is the builder for creating a Club entity.
type ClubCreate struct {
	config
	mutation *ClubMutation
	hooks    []Hook
}

// SetApiFootballId sets the "apiFootballId" field.
func (cc *ClubCreate) SetApiFootballId(i int) *ClubCreate {
	cc.mutation.SetApiFootballId(i)
	return cc
}

// SetSlug sets the "slug" field.
func (cc *ClubCreate) SetSlug(s string) *ClubCreate {
	cc.mutation.SetSlug(s)
	return cc
}

// SetName sets the "name" field.
func (cc *ClubCreate) SetName(s string) *ClubCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCode sets the "code" field.
func (cc *ClubCreate) SetCode(s string) *ClubCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetFounded sets the "founded" field.
func (cc *ClubCreate) SetFounded(i int) *ClubCreate {
	cc.mutation.SetFounded(i)
	return cc
}

// SetNational sets the "national" field.
func (cc *ClubCreate) SetNational(b bool) *ClubCreate {
	cc.mutation.SetNational(b)
	return cc
}

// SetLogo sets the "logo" field.
func (cc *ClubCreate) SetLogo(s string) *ClubCreate {
	cc.mutation.SetLogo(s)
	return cc
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (cc *ClubCreate) SetCountryID(id int) *ClubCreate {
	cc.mutation.SetCountryID(id)
	return cc
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (cc *ClubCreate) SetNillableCountryID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetCountryID(*id)
	}
	return cc
}

// SetCountry sets the "country" edge to the Country entity.
func (cc *ClubCreate) SetCountry(c *Country) *ClubCreate {
	return cc.SetCountryID(c.ID)
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (cc *ClubCreate) AddTeamIDs(ids ...int) *ClubCreate {
	cc.mutation.AddTeamIDs(ids...)
	return cc
}

// AddTeam adds the "team" edges to the Team entity.
func (cc *ClubCreate) AddTeam(t ...*Team) *ClubCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTeamIDs(ids...)
}

// AddPlayerSeasonIDs adds the "playerSeasons" edge to the PlayerSeason entity by IDs.
func (cc *ClubCreate) AddPlayerSeasonIDs(ids ...int) *ClubCreate {
	cc.mutation.AddPlayerSeasonIDs(ids...)
	return cc
}

// AddPlayerSeasons adds the "playerSeasons" edges to the PlayerSeason entity.
func (cc *ClubCreate) AddPlayerSeasons(p ...*PlayerSeason) *ClubCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPlayerSeasonIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cc *ClubCreate) Mutation() *ClubMutation {
	return cc.mutation
}

// Save creates the Club in the database.
func (cc *ClubCreate) Save(ctx context.Context) (*Club, error) {
	return withHooks[*Club, ClubMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClubCreate) SaveX(ctx context.Context) *Club {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClubCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClubCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClubCreate) check() error {
	if _, ok := cc.mutation.ApiFootballId(); !ok {
		return &ValidationError{Name: "apiFootballId", err: errors.New(`ent: missing required field "Club.apiFootballId"`)}
	}
	if _, ok := cc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Club.slug"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Club.name"`)}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Club.code"`)}
	}
	if v, ok := cc.mutation.Code(); ok {
		if err := club.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Club.code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Founded(); !ok {
		return &ValidationError{Name: "founded", err: errors.New(`ent: missing required field "Club.founded"`)}
	}
	if _, ok := cc.mutation.National(); !ok {
		return &ValidationError{Name: "national", err: errors.New(`ent: missing required field "Club.national"`)}
	}
	if _, ok := cc.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`ent: missing required field "Club.logo"`)}
	}
	return nil
}

func (cc *ClubCreate) sqlSave(ctx context.Context) (*Club, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClubCreate) createSpec() (*Club, *sqlgraph.CreateSpec) {
	var (
		_node = &Club{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(club.Table, sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.ApiFootballId(); ok {
		_spec.SetField(club.FieldApiFootballId, field.TypeInt, value)
		_node.ApiFootballId = value
	}
	if value, ok := cc.mutation.Slug(); ok {
		_spec.SetField(club.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(club.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(club.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.Founded(); ok {
		_spec.SetField(club.FieldFounded, field.TypeInt, value)
		_node.Founded = value
	}
	if value, ok := cc.mutation.National(); ok {
		_spec.SetField(club.FieldNational, field.TypeBool, value)
		_node.National = value
	}
	if value, ok := cc.mutation.Logo(); ok {
		_spec.SetField(club.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if nodes := cc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.CountryTable,
			Columns: []string{club.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_clubs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.TeamTable,
			Columns: []string{club.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PlayerSeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   club.PlayerSeasonsTable,
			Columns: club.PlayerSeasonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClubCreateBulk is the builder for creating many Club entities in bulk.
type ClubCreateBulk struct {
	config
	builders []*ClubCreate
}

// Save creates the Club entities in the database.
func (ccb *ClubCreateBulk) Save(ctx context.Context) ([]*Club, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Club, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClubCreateBulk) SaveX(ctx context.Context) []*Club {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClubCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClubCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
