// Code generated by ent, DO NOT EDIT.

package club

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the club type in the database.
	Label = "club"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApiFootballId holds the string denoting the apifootballid field in the database.
	FieldApiFootballId = "api_football_id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldFounded holds the string denoting the founded field in the database.
	FieldFounded = "founded"
	// FieldNational holds the string denoting the national field in the database.
	FieldNational = "national"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the club in the database.
	Table = "clubs"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "clubs"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "country_clubs"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "teams"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "club_team"
)

// Columns holds all SQL columns for club fields.
var Columns = []string{
	FieldID,
	FieldApiFootballId,
	FieldSlug,
	FieldName,
	FieldCode,
	FieldFounded,
	FieldNational,
	FieldLogo,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "clubs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"country_clubs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// Order defines the ordering method for the Club queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApiFootballId orders the results by the apiFootballId field.
func ByApiFootballId(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldApiFootballId, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByFounded orders the results by the founded field.
func ByFounded(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFounded, opts...).ToFunc()
}

// ByNational orders the results by the national field.
func ByNational(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNational, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByCountryField orders the results by country field.
func ByCountryField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamCount orders the results by team count.
func ByTeamCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeamStep(), opts...)
	}
}

// ByTeam orders the results by team terms.
func ByTeam(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCountryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TeamTable, TeamColumn),
	)
}
