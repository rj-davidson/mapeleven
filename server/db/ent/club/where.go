// Code generated by ent, DO NOT EDIT.

package club

import (
	"mapeleven/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldID, id))
}

// ApiFootballId applies equality check predicate on the "apiFootballId" field. It's identical to ApiFootballIdEQ.
func ApiFootballId(v int) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldApiFootballId, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldSlug, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldCode, v))
}

// Founded applies equality check predicate on the "founded" field. It's identical to FoundedEQ.
func Founded(v int) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldFounded, v))
}

// National applies equality check predicate on the "national" field. It's identical to NationalEQ.
func National(v bool) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldNational, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldLogo, v))
}

// ApiFootballIdEQ applies the EQ predicate on the "apiFootballId" field.
func ApiFootballIdEQ(v int) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldApiFootballId, v))
}

// ApiFootballIdNEQ applies the NEQ predicate on the "apiFootballId" field.
func ApiFootballIdNEQ(v int) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldApiFootballId, v))
}

// ApiFootballIdIn applies the In predicate on the "apiFootballId" field.
func ApiFootballIdIn(vs ...int) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldApiFootballId, vs...))
}

// ApiFootballIdNotIn applies the NotIn predicate on the "apiFootballId" field.
func ApiFootballIdNotIn(vs ...int) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldApiFootballId, vs...))
}

// ApiFootballIdGT applies the GT predicate on the "apiFootballId" field.
func ApiFootballIdGT(v int) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldApiFootballId, v))
}

// ApiFootballIdGTE applies the GTE predicate on the "apiFootballId" field.
func ApiFootballIdGTE(v int) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldApiFootballId, v))
}

// ApiFootballIdLT applies the LT predicate on the "apiFootballId" field.
func ApiFootballIdLT(v int) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldApiFootballId, v))
}

// ApiFootballIdLTE applies the LTE predicate on the "apiFootballId" field.
func ApiFootballIdLTE(v int) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldApiFootballId, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldSlug, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldCode, v))
}

// FoundedEQ applies the EQ predicate on the "founded" field.
func FoundedEQ(v int) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldFounded, v))
}

// FoundedNEQ applies the NEQ predicate on the "founded" field.
func FoundedNEQ(v int) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldFounded, v))
}

// FoundedIn applies the In predicate on the "founded" field.
func FoundedIn(vs ...int) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldFounded, vs...))
}

// FoundedNotIn applies the NotIn predicate on the "founded" field.
func FoundedNotIn(vs ...int) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldFounded, vs...))
}

// FoundedGT applies the GT predicate on the "founded" field.
func FoundedGT(v int) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldFounded, v))
}

// FoundedGTE applies the GTE predicate on the "founded" field.
func FoundedGTE(v int) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldFounded, v))
}

// FoundedLT applies the LT predicate on the "founded" field.
func FoundedLT(v int) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldFounded, v))
}

// FoundedLTE applies the LTE predicate on the "founded" field.
func FoundedLTE(v int) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldFounded, v))
}

// NationalEQ applies the EQ predicate on the "national" field.
func NationalEQ(v bool) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldNational, v))
}

// NationalNEQ applies the NEQ predicate on the "national" field.
func NationalNEQ(v bool) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldNational, v))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldLogo, v))
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		p(s.Not())
	})
}
