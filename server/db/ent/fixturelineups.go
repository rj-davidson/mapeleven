// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/fixturelineups"
	"mapeleven/db/ent/team"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FixtureLineups is the model entity for the FixtureLineups schema.
type FixtureLineups struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Formation holds the value of the "formation" field.
	Formation string `json:"formation,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FixtureLineupsQuery when eager-loading is set.
	Edges                FixtureLineupsEdges `json:"edges"`
	team_fixture_lineups *int
	selectValues         sql.SelectValues
}

// FixtureLineupsEdges holds the relations/edges for other nodes in the graph.
type FixtureLineupsEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// LineupPlayer holds the value of the lineupPlayer edge.
	LineupPlayer []*MatchPlayer `json:"lineupPlayer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureLineupsEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// LineupPlayerOrErr returns the LineupPlayer value or an error if the edge
// was not loaded in eager-loading.
func (e FixtureLineupsEdges) LineupPlayerOrErr() ([]*MatchPlayer, error) {
	if e.loadedTypes[1] {
		return e.LineupPlayer, nil
	}
	return nil, &NotLoadedError{edge: "lineupPlayer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FixtureLineups) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fixturelineups.FieldID:
			values[i] = new(sql.NullInt64)
		case fixturelineups.FieldFormation:
			values[i] = new(sql.NullString)
		case fixturelineups.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case fixturelineups.ForeignKeys[0]: // team_fixture_lineups
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FixtureLineups fields.
func (fl *FixtureLineups) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fixturelineups.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fl.ID = int(value.Int64)
		case fixturelineups.FieldFormation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field formation", values[i])
			} else if value.Valid {
				fl.Formation = value.String
			}
		case fixturelineups.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				fl.LastUpdated = value.Time
			}
		case fixturelineups.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_fixture_lineups", value)
			} else if value.Valid {
				fl.team_fixture_lineups = new(int)
				*fl.team_fixture_lineups = int(value.Int64)
			}
		default:
			fl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FixtureLineups.
// This includes values selected through modifiers, order, etc.
func (fl *FixtureLineups) Value(name string) (ent.Value, error) {
	return fl.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the FixtureLineups entity.
func (fl *FixtureLineups) QueryTeam() *TeamQuery {
	return NewFixtureLineupsClient(fl.config).QueryTeam(fl)
}

// QueryLineupPlayer queries the "lineupPlayer" edge of the FixtureLineups entity.
func (fl *FixtureLineups) QueryLineupPlayer() *MatchPlayerQuery {
	return NewFixtureLineupsClient(fl.config).QueryLineupPlayer(fl)
}

// Update returns a builder for updating this FixtureLineups.
// Note that you need to call FixtureLineups.Unwrap() before calling this method if this FixtureLineups
// was returned from a transaction, and the transaction was committed or rolled back.
func (fl *FixtureLineups) Update() *FixtureLineupsUpdateOne {
	return NewFixtureLineupsClient(fl.config).UpdateOne(fl)
}

// Unwrap unwraps the FixtureLineups entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fl *FixtureLineups) Unwrap() *FixtureLineups {
	_tx, ok := fl.config.driver.(*txDriver)
	if !ok {
		panic("ent: FixtureLineups is not a transactional entity")
	}
	fl.config.driver = _tx.drv
	return fl
}

// String implements the fmt.Stringer.
func (fl *FixtureLineups) String() string {
	var builder strings.Builder
	builder.WriteString("FixtureLineups(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fl.ID))
	builder.WriteString("formation=")
	builder.WriteString(fl.Formation)
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(fl.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FixtureLineupsSlice is a parsable slice of FixtureLineups.
type FixtureLineupsSlice []*FixtureLineups
