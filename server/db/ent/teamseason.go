// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/teamseason"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TeamSeason is the model entity for the TeamSeason schema.
type TeamSeason struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TeamSeasonID holds the value of the "team_season_id" field.
	TeamSeasonID int `json:"team_season_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamSeasonQuery when eager-loading is set.
	Edges               TeamSeasonEdges `json:"edges"`
	season_team_seasons *int
	team_team_seasons   *int
	selectValues        sql.SelectValues
}

// TeamSeasonEdges holds the relations/edges for other nodes in the graph.
type TeamSeasonEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// Season holds the value of the season edge.
	Season *Season `json:"season,omitempty"`
	// PlayerTeamSeasons holds the value of the playerTeamSeasons edge.
	PlayerTeamSeasons []*PlayerTeamSeason `json:"playerTeamSeasons,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamSeasonEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// SeasonOrErr returns the Season value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamSeasonEdges) SeasonOrErr() (*Season, error) {
	if e.loadedTypes[1] {
		if e.Season == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: season.Label}
		}
		return e.Season, nil
	}
	return nil, &NotLoadedError{edge: "season"}
}

// PlayerTeamSeasonsOrErr returns the PlayerTeamSeasons value or an error if the edge
// was not loaded in eager-loading.
func (e TeamSeasonEdges) PlayerTeamSeasonsOrErr() ([]*PlayerTeamSeason, error) {
	if e.loadedTypes[2] {
		return e.PlayerTeamSeasons, nil
	}
	return nil, &NotLoadedError{edge: "playerTeamSeasons"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeamSeason) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case teamseason.FieldID, teamseason.FieldTeamSeasonID:
			values[i] = new(sql.NullInt64)
		case teamseason.ForeignKeys[0]: // season_team_seasons
			values[i] = new(sql.NullInt64)
		case teamseason.ForeignKeys[1]: // team_team_seasons
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeamSeason fields.
func (ts *TeamSeason) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teamseason.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = int(value.Int64)
		case teamseason.FieldTeamSeasonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field team_season_id", values[i])
			} else if value.Valid {
				ts.TeamSeasonID = int(value.Int64)
			}
		case teamseason.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field season_team_seasons", value)
			} else if value.Valid {
				ts.season_team_seasons = new(int)
				*ts.season_team_seasons = int(value.Int64)
			}
		case teamseason.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_team_seasons", value)
			} else if value.Valid {
				ts.team_team_seasons = new(int)
				*ts.team_team_seasons = int(value.Int64)
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TeamSeason.
// This includes values selected through modifiers, order, etc.
func (ts *TeamSeason) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the TeamSeason entity.
func (ts *TeamSeason) QueryTeam() *TeamQuery {
	return NewTeamSeasonClient(ts.config).QueryTeam(ts)
}

// QuerySeason queries the "season" edge of the TeamSeason entity.
func (ts *TeamSeason) QuerySeason() *SeasonQuery {
	return NewTeamSeasonClient(ts.config).QuerySeason(ts)
}

// QueryPlayerTeamSeasons queries the "playerTeamSeasons" edge of the TeamSeason entity.
func (ts *TeamSeason) QueryPlayerTeamSeasons() *PlayerTeamSeasonQuery {
	return NewTeamSeasonClient(ts.config).QueryPlayerTeamSeasons(ts)
}

// Update returns a builder for updating this TeamSeason.
// Note that you need to call TeamSeason.Unwrap() before calling this method if this TeamSeason
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TeamSeason) Update() *TeamSeasonUpdateOne {
	return NewTeamSeasonClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TeamSeason entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TeamSeason) Unwrap() *TeamSeason {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeamSeason is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TeamSeason) String() string {
	var builder strings.Builder
	builder.WriteString("TeamSeason(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("team_season_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.TeamSeasonID))
	builder.WriteByte(')')
	return builder.String()
}

// TeamSeasons is a parsable slice of TeamSeason.
type TeamSeasons []*TeamSeason
