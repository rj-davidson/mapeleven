// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tsfailedtoscore"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSFailedToScoreCreate is the builder for creating a TSFailedToScore entity.
type TSFailedToScoreCreate struct {
	config
	mutation *TSFailedToScoreMutation
	hooks    []Hook
}

// SetHome sets the "home" field.
func (tftsc *TSFailedToScoreCreate) SetHome(i int) *TSFailedToScoreCreate {
	tftsc.mutation.SetHome(i)
	return tftsc
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (tftsc *TSFailedToScoreCreate) SetNillableHome(i *int) *TSFailedToScoreCreate {
	if i != nil {
		tftsc.SetHome(*i)
	}
	return tftsc
}

// SetAway sets the "away" field.
func (tftsc *TSFailedToScoreCreate) SetAway(i int) *TSFailedToScoreCreate {
	tftsc.mutation.SetAway(i)
	return tftsc
}

// SetNillableAway sets the "away" field if the given value is not nil.
func (tftsc *TSFailedToScoreCreate) SetNillableAway(i *int) *TSFailedToScoreCreate {
	if i != nil {
		tftsc.SetAway(*i)
	}
	return tftsc
}

// SetTotal sets the "total" field.
func (tftsc *TSFailedToScoreCreate) SetTotal(i int) *TSFailedToScoreCreate {
	tftsc.mutation.SetTotal(i)
	return tftsc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tftsc *TSFailedToScoreCreate) SetNillableTotal(i *int) *TSFailedToScoreCreate {
	if i != nil {
		tftsc.SetTotal(*i)
	}
	return tftsc
}

// SetLastUpdated sets the "lastUpdated" field.
func (tftsc *TSFailedToScoreCreate) SetLastUpdated(t time.Time) *TSFailedToScoreCreate {
	tftsc.mutation.SetLastUpdated(t)
	return tftsc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (tftsc *TSFailedToScoreCreate) SetNillableLastUpdated(t *time.Time) *TSFailedToScoreCreate {
	if t != nil {
		tftsc.SetLastUpdated(*t)
	}
	return tftsc
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tftsc *TSFailedToScoreCreate) SetTeamID(id int) *TSFailedToScoreCreate {
	tftsc.mutation.SetTeamID(id)
	return tftsc
}

// SetTeam sets the "team" edge to the Team entity.
func (tftsc *TSFailedToScoreCreate) SetTeam(t *Team) *TSFailedToScoreCreate {
	return tftsc.SetTeamID(t.ID)
}

// Mutation returns the TSFailedToScoreMutation object of the builder.
func (tftsc *TSFailedToScoreCreate) Mutation() *TSFailedToScoreMutation {
	return tftsc.mutation
}

// Save creates the TSFailedToScore in the database.
func (tftsc *TSFailedToScoreCreate) Save(ctx context.Context) (*TSFailedToScore, error) {
	tftsc.defaults()
	return withHooks[*TSFailedToScore, TSFailedToScoreMutation](ctx, tftsc.sqlSave, tftsc.mutation, tftsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tftsc *TSFailedToScoreCreate) SaveX(ctx context.Context) *TSFailedToScore {
	v, err := tftsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tftsc *TSFailedToScoreCreate) Exec(ctx context.Context) error {
	_, err := tftsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tftsc *TSFailedToScoreCreate) ExecX(ctx context.Context) {
	if err := tftsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tftsc *TSFailedToScoreCreate) defaults() {
	if _, ok := tftsc.mutation.Home(); !ok {
		v := tsfailedtoscore.DefaultHome
		tftsc.mutation.SetHome(v)
	}
	if _, ok := tftsc.mutation.Away(); !ok {
		v := tsfailedtoscore.DefaultAway
		tftsc.mutation.SetAway(v)
	}
	if _, ok := tftsc.mutation.Total(); !ok {
		v := tsfailedtoscore.DefaultTotal
		tftsc.mutation.SetTotal(v)
	}
	if _, ok := tftsc.mutation.LastUpdated(); !ok {
		v := tsfailedtoscore.DefaultLastUpdated()
		tftsc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tftsc *TSFailedToScoreCreate) check() error {
	if _, ok := tftsc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "TSFailedToScore.team"`)}
	}
	return nil
}

func (tftsc *TSFailedToScoreCreate) sqlSave(ctx context.Context) (*TSFailedToScore, error) {
	if err := tftsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tftsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tftsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tftsc.mutation.id = &_node.ID
	tftsc.mutation.done = true
	return _node, nil
}

func (tftsc *TSFailedToScoreCreate) createSpec() (*TSFailedToScore, *sqlgraph.CreateSpec) {
	var (
		_node = &TSFailedToScore{config: tftsc.config}
		_spec = sqlgraph.NewCreateSpec(tsfailedtoscore.Table, sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt))
	)
	if value, ok := tftsc.mutation.Home(); ok {
		_spec.SetField(tsfailedtoscore.FieldHome, field.TypeInt, value)
		_node.Home = value
	}
	if value, ok := tftsc.mutation.Away(); ok {
		_spec.SetField(tsfailedtoscore.FieldAway, field.TypeInt, value)
		_node.Away = value
	}
	if value, ok := tftsc.mutation.Total(); ok {
		_spec.SetField(tsfailedtoscore.FieldTotal, field.TypeInt, value)
		_node.Total = value
	}
	if value, ok := tftsc.mutation.LastUpdated(); ok {
		_spec.SetField(tsfailedtoscore.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := tftsc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfailedtoscore.TeamTable,
			Columns: []string{tsfailedtoscore.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_failed_to_score_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TSFailedToScoreCreateBulk is the builder for creating many TSFailedToScore entities in bulk.
type TSFailedToScoreCreateBulk struct {
	config
	builders []*TSFailedToScoreCreate
}

// Save creates the TSFailedToScore entities in the database.
func (tftscb *TSFailedToScoreCreateBulk) Save(ctx context.Context) ([]*TSFailedToScore, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tftscb.builders))
	nodes := make([]*TSFailedToScore, len(tftscb.builders))
	mutators := make([]Mutator, len(tftscb.builders))
	for i := range tftscb.builders {
		func(i int, root context.Context) {
			builder := tftscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TSFailedToScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tftscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tftscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tftscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tftscb *TSFailedToScoreCreateBulk) SaveX(ctx context.Context) []*TSFailedToScore {
	v, err := tftscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tftscb *TSFailedToScoreCreateBulk) Exec(ctx context.Context) error {
	_, err := tftscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tftscb *TSFailedToScoreCreateBulk) ExecX(ctx context.Context) {
	if err := tftscb.Exec(ctx); err != nil {
		panic(err)
	}
}
