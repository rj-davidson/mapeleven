// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tsfixtures"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TSFixtures is the model entity for the TSFixtures schema.
type TSFixtures struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PlayedHome holds the value of the "playedHome" field.
	PlayedHome int `json:"playedHome,omitempty"`
	// PlayedAway holds the value of the "playedAway" field.
	PlayedAway int `json:"playedAway,omitempty"`
	// PlayedTotal holds the value of the "playedTotal" field.
	PlayedTotal int `json:"playedTotal,omitempty"`
	// WinsHome holds the value of the "winsHome" field.
	WinsHome int `json:"winsHome,omitempty"`
	// WinsAway holds the value of the "winsAway" field.
	WinsAway int `json:"winsAway,omitempty"`
	// WinsTotal holds the value of the "winsTotal" field.
	WinsTotal int `json:"winsTotal,omitempty"`
	// DrawsHome holds the value of the "drawsHome" field.
	DrawsHome int `json:"drawsHome,omitempty"`
	// DrawsAway holds the value of the "drawsAway" field.
	DrawsAway int `json:"drawsAway,omitempty"`
	// DrawsTotal holds the value of the "drawsTotal" field.
	DrawsTotal int `json:"drawsTotal,omitempty"`
	// LossesHome holds the value of the "lossesHome" field.
	LossesHome int `json:"lossesHome,omitempty"`
	// LossesAway holds the value of the "lossesAway" field.
	LossesAway int `json:"lossesAway,omitempty"`
	// LossesTotal holds the value of the "lossesTotal" field.
	LossesTotal int `json:"lossesTotal,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TSFixturesQuery when eager-loading is set.
	Edges               TSFixturesEdges `json:"edges"`
	team_fixtures_stats *int
	selectValues        sql.SelectValues
}

// TSFixturesEdges holds the relations/edges for other nodes in the graph.
type TSFixturesEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TSFixturesEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TSFixtures) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tsfixtures.FieldID, tsfixtures.FieldPlayedHome, tsfixtures.FieldPlayedAway, tsfixtures.FieldPlayedTotal, tsfixtures.FieldWinsHome, tsfixtures.FieldWinsAway, tsfixtures.FieldWinsTotal, tsfixtures.FieldDrawsHome, tsfixtures.FieldDrawsAway, tsfixtures.FieldDrawsTotal, tsfixtures.FieldLossesHome, tsfixtures.FieldLossesAway, tsfixtures.FieldLossesTotal:
			values[i] = new(sql.NullInt64)
		case tsfixtures.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case tsfixtures.ForeignKeys[0]: // team_fixtures_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TSFixtures fields.
func (tf *TSFixtures) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tsfixtures.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tf.ID = int(value.Int64)
		case tsfixtures.FieldPlayedHome:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field playedHome", values[i])
			} else if value.Valid {
				tf.PlayedHome = int(value.Int64)
			}
		case tsfixtures.FieldPlayedAway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field playedAway", values[i])
			} else if value.Valid {
				tf.PlayedAway = int(value.Int64)
			}
		case tsfixtures.FieldPlayedTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field playedTotal", values[i])
			} else if value.Valid {
				tf.PlayedTotal = int(value.Int64)
			}
		case tsfixtures.FieldWinsHome:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field winsHome", values[i])
			} else if value.Valid {
				tf.WinsHome = int(value.Int64)
			}
		case tsfixtures.FieldWinsAway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field winsAway", values[i])
			} else if value.Valid {
				tf.WinsAway = int(value.Int64)
			}
		case tsfixtures.FieldWinsTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field winsTotal", values[i])
			} else if value.Valid {
				tf.WinsTotal = int(value.Int64)
			}
		case tsfixtures.FieldDrawsHome:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field drawsHome", values[i])
			} else if value.Valid {
				tf.DrawsHome = int(value.Int64)
			}
		case tsfixtures.FieldDrawsAway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field drawsAway", values[i])
			} else if value.Valid {
				tf.DrawsAway = int(value.Int64)
			}
		case tsfixtures.FieldDrawsTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field drawsTotal", values[i])
			} else if value.Valid {
				tf.DrawsTotal = int(value.Int64)
			}
		case tsfixtures.FieldLossesHome:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lossesHome", values[i])
			} else if value.Valid {
				tf.LossesHome = int(value.Int64)
			}
		case tsfixtures.FieldLossesAway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lossesAway", values[i])
			} else if value.Valid {
				tf.LossesAway = int(value.Int64)
			}
		case tsfixtures.FieldLossesTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lossesTotal", values[i])
			} else if value.Valid {
				tf.LossesTotal = int(value.Int64)
			}
		case tsfixtures.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				tf.LastUpdated = value.Time
			}
		case tsfixtures.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_fixtures_stats", value)
			} else if value.Valid {
				tf.team_fixtures_stats = new(int)
				*tf.team_fixtures_stats = int(value.Int64)
			}
		default:
			tf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TSFixtures.
// This includes values selected through modifiers, order, etc.
func (tf *TSFixtures) Value(name string) (ent.Value, error) {
	return tf.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the TSFixtures entity.
func (tf *TSFixtures) QueryTeam() *TeamQuery {
	return NewTSFixturesClient(tf.config).QueryTeam(tf)
}

// Update returns a builder for updating this TSFixtures.
// Note that you need to call TSFixtures.Unwrap() before calling this method if this TSFixtures
// was returned from a transaction, and the transaction was committed or rolled back.
func (tf *TSFixtures) Update() *TSFixturesUpdateOne {
	return NewTSFixturesClient(tf.config).UpdateOne(tf)
}

// Unwrap unwraps the TSFixtures entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tf *TSFixtures) Unwrap() *TSFixtures {
	_tx, ok := tf.config.driver.(*txDriver)
	if !ok {
		panic("ent: TSFixtures is not a transactional entity")
	}
	tf.config.driver = _tx.drv
	return tf
}

// String implements the fmt.Stringer.
func (tf *TSFixtures) String() string {
	var builder strings.Builder
	builder.WriteString("TSFixtures(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tf.ID))
	builder.WriteString("playedHome=")
	builder.WriteString(fmt.Sprintf("%v", tf.PlayedHome))
	builder.WriteString(", ")
	builder.WriteString("playedAway=")
	builder.WriteString(fmt.Sprintf("%v", tf.PlayedAway))
	builder.WriteString(", ")
	builder.WriteString("playedTotal=")
	builder.WriteString(fmt.Sprintf("%v", tf.PlayedTotal))
	builder.WriteString(", ")
	builder.WriteString("winsHome=")
	builder.WriteString(fmt.Sprintf("%v", tf.WinsHome))
	builder.WriteString(", ")
	builder.WriteString("winsAway=")
	builder.WriteString(fmt.Sprintf("%v", tf.WinsAway))
	builder.WriteString(", ")
	builder.WriteString("winsTotal=")
	builder.WriteString(fmt.Sprintf("%v", tf.WinsTotal))
	builder.WriteString(", ")
	builder.WriteString("drawsHome=")
	builder.WriteString(fmt.Sprintf("%v", tf.DrawsHome))
	builder.WriteString(", ")
	builder.WriteString("drawsAway=")
	builder.WriteString(fmt.Sprintf("%v", tf.DrawsAway))
	builder.WriteString(", ")
	builder.WriteString("drawsTotal=")
	builder.WriteString(fmt.Sprintf("%v", tf.DrawsTotal))
	builder.WriteString(", ")
	builder.WriteString("lossesHome=")
	builder.WriteString(fmt.Sprintf("%v", tf.LossesHome))
	builder.WriteString(", ")
	builder.WriteString("lossesAway=")
	builder.WriteString(fmt.Sprintf("%v", tf.LossesAway))
	builder.WriteString(", ")
	builder.WriteString("lossesTotal=")
	builder.WriteString(fmt.Sprintf("%v", tf.LossesTotal))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(tf.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TSFixturesSlice is a parsable slice of TSFixtures.
type TSFixturesSlice []*TSFixtures
