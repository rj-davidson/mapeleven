// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/league"
	"mapeleven/db/ent/standings"
	"mapeleven/db/ent/team"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Standings is the model entity for the Standings schema.
type Standings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// Points holds the value of the "points" field.
	Points int `json:"points,omitempty"`
	// GoalsDiff holds the value of the "goalsDiff" field.
	GoalsDiff int `json:"goalsDiff,omitempty"`
	// Group holds the value of the "group" field.
	Group string `json:"group,omitempty"`
	// Form holds the value of the "form" field.
	Form string `json:"form,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AllPlayed holds the value of the "allPlayed" field.
	AllPlayed int `json:"allPlayed,omitempty"`
	// AllWin holds the value of the "allWin" field.
	AllWin int `json:"allWin,omitempty"`
	// AllDraw holds the value of the "allDraw" field.
	AllDraw int `json:"allDraw,omitempty"`
	// AllLose holds the value of the "allLose" field.
	AllLose int `json:"allLose,omitempty"`
	// AllGoalsFor holds the value of the "allGoalsFor" field.
	AllGoalsFor int `json:"allGoalsFor,omitempty"`
	// AllGoalsAgainst holds the value of the "allGoalsAgainst" field.
	AllGoalsAgainst int `json:"allGoalsAgainst,omitempty"`
	// HomePlayed holds the value of the "homePlayed" field.
	HomePlayed int `json:"homePlayed,omitempty"`
	// HomeWin holds the value of the "homeWin" field.
	HomeWin int `json:"homeWin,omitempty"`
	// HomeDraw holds the value of the "homeDraw" field.
	HomeDraw int `json:"homeDraw,omitempty"`
	// HomeLose holds the value of the "homeLose" field.
	HomeLose int `json:"homeLose,omitempty"`
	// HomeGoalsFor holds the value of the "homeGoalsFor" field.
	HomeGoalsFor int `json:"homeGoalsFor,omitempty"`
	// HomeGoalsAgainst holds the value of the "homeGoalsAgainst" field.
	HomeGoalsAgainst int `json:"homeGoalsAgainst,omitempty"`
	// AwayPlayed holds the value of the "awayPlayed" field.
	AwayPlayed int `json:"awayPlayed,omitempty"`
	// AwayWin holds the value of the "awayWin" field.
	AwayWin int `json:"awayWin,omitempty"`
	// AwayDraw holds the value of the "awayDraw" field.
	AwayDraw int `json:"awayDraw,omitempty"`
	// AwayLose holds the value of the "awayLose" field.
	AwayLose int `json:"awayLose,omitempty"`
	// AwayGoalsFor holds the value of the "awayGoalsFor" field.
	AwayGoalsFor int `json:"awayGoalsFor,omitempty"`
	// AwayGoalsAgainst holds the value of the "awayGoalsAgainst" field.
	AwayGoalsAgainst int `json:"awayGoalsAgainst,omitempty"`
	// LastUpdated holds the value of the "LastUpdated" field.
	LastUpdated time.Time `json:"LastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StandingsQuery when eager-loading is set.
	Edges            StandingsEdges `json:"edges"`
	league_standings *int
	team_standings   *int
	selectValues     sql.SelectValues
}

// StandingsEdges holds the relations/edges for other nodes in the graph.
type StandingsEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// League holds the value of the league edge.
	League *League `json:"league,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StandingsEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// LeagueOrErr returns the League value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StandingsEdges) LeagueOrErr() (*League, error) {
	if e.loadedTypes[1] {
		if e.League == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: league.Label}
		}
		return e.League, nil
	}
	return nil, &NotLoadedError{edge: "league"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Standings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case standings.FieldID, standings.FieldRank, standings.FieldPoints, standings.FieldGoalsDiff, standings.FieldAllPlayed, standings.FieldAllWin, standings.FieldAllDraw, standings.FieldAllLose, standings.FieldAllGoalsFor, standings.FieldAllGoalsAgainst, standings.FieldHomePlayed, standings.FieldHomeWin, standings.FieldHomeDraw, standings.FieldHomeLose, standings.FieldHomeGoalsFor, standings.FieldHomeGoalsAgainst, standings.FieldAwayPlayed, standings.FieldAwayWin, standings.FieldAwayDraw, standings.FieldAwayLose, standings.FieldAwayGoalsFor, standings.FieldAwayGoalsAgainst:
			values[i] = new(sql.NullInt64)
		case standings.FieldGroup, standings.FieldForm, standings.FieldStatus, standings.FieldDescription:
			values[i] = new(sql.NullString)
		case standings.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case standings.ForeignKeys[0]: // league_standings
			values[i] = new(sql.NullInt64)
		case standings.ForeignKeys[1]: // team_standings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Standings fields.
func (s *Standings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case standings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case standings.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				s.Rank = int(value.Int64)
			}
		case standings.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				s.Points = int(value.Int64)
			}
		case standings.FieldGoalsDiff:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goalsDiff", values[i])
			} else if value.Valid {
				s.GoalsDiff = int(value.Int64)
			}
		case standings.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group", values[i])
			} else if value.Valid {
				s.Group = value.String
			}
		case standings.FieldForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form", values[i])
			} else if value.Valid {
				s.Form = value.String
			}
		case standings.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case standings.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case standings.FieldAllPlayed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allPlayed", values[i])
			} else if value.Valid {
				s.AllPlayed = int(value.Int64)
			}
		case standings.FieldAllWin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allWin", values[i])
			} else if value.Valid {
				s.AllWin = int(value.Int64)
			}
		case standings.FieldAllDraw:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allDraw", values[i])
			} else if value.Valid {
				s.AllDraw = int(value.Int64)
			}
		case standings.FieldAllLose:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allLose", values[i])
			} else if value.Valid {
				s.AllLose = int(value.Int64)
			}
		case standings.FieldAllGoalsFor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allGoalsFor", values[i])
			} else if value.Valid {
				s.AllGoalsFor = int(value.Int64)
			}
		case standings.FieldAllGoalsAgainst:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allGoalsAgainst", values[i])
			} else if value.Valid {
				s.AllGoalsAgainst = int(value.Int64)
			}
		case standings.FieldHomePlayed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homePlayed", values[i])
			} else if value.Valid {
				s.HomePlayed = int(value.Int64)
			}
		case standings.FieldHomeWin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeWin", values[i])
			} else if value.Valid {
				s.HomeWin = int(value.Int64)
			}
		case standings.FieldHomeDraw:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeDraw", values[i])
			} else if value.Valid {
				s.HomeDraw = int(value.Int64)
			}
		case standings.FieldHomeLose:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeLose", values[i])
			} else if value.Valid {
				s.HomeLose = int(value.Int64)
			}
		case standings.FieldHomeGoalsFor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeGoalsFor", values[i])
			} else if value.Valid {
				s.HomeGoalsFor = int(value.Int64)
			}
		case standings.FieldHomeGoalsAgainst:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeGoalsAgainst", values[i])
			} else if value.Valid {
				s.HomeGoalsAgainst = int(value.Int64)
			}
		case standings.FieldAwayPlayed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field awayPlayed", values[i])
			} else if value.Valid {
				s.AwayPlayed = int(value.Int64)
			}
		case standings.FieldAwayWin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field awayWin", values[i])
			} else if value.Valid {
				s.AwayWin = int(value.Int64)
			}
		case standings.FieldAwayDraw:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field awayDraw", values[i])
			} else if value.Valid {
				s.AwayDraw = int(value.Int64)
			}
		case standings.FieldAwayLose:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field awayLose", values[i])
			} else if value.Valid {
				s.AwayLose = int(value.Int64)
			}
		case standings.FieldAwayGoalsFor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field awayGoalsFor", values[i])
			} else if value.Valid {
				s.AwayGoalsFor = int(value.Int64)
			}
		case standings.FieldAwayGoalsAgainst:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field awayGoalsAgainst", values[i])
			} else if value.Valid {
				s.AwayGoalsAgainst = int(value.Int64)
			}
		case standings.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field LastUpdated", values[i])
			} else if value.Valid {
				s.LastUpdated = value.Time
			}
		case standings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field league_standings", value)
			} else if value.Valid {
				s.league_standings = new(int)
				*s.league_standings = int(value.Int64)
			}
		case standings.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_standings", value)
			} else if value.Valid {
				s.team_standings = new(int)
				*s.team_standings = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Standings.
// This includes values selected through modifiers, order, etc.
func (s *Standings) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the Standings entity.
func (s *Standings) QueryTeam() *TeamQuery {
	return NewStandingsClient(s.config).QueryTeam(s)
}

// QueryLeague queries the "league" edge of the Standings entity.
func (s *Standings) QueryLeague() *LeagueQuery {
	return NewStandingsClient(s.config).QueryLeague(s)
}

// Update returns a builder for updating this Standings.
// Note that you need to call Standings.Unwrap() before calling this method if this Standings
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Standings) Update() *StandingsUpdateOne {
	return NewStandingsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Standings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Standings) Unwrap() *Standings {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Standings is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Standings) String() string {
	var builder strings.Builder
	builder.WriteString("Standings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", s.Rank))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", s.Points))
	builder.WriteString(", ")
	builder.WriteString("goalsDiff=")
	builder.WriteString(fmt.Sprintf("%v", s.GoalsDiff))
	builder.WriteString(", ")
	builder.WriteString("group=")
	builder.WriteString(s.Group)
	builder.WriteString(", ")
	builder.WriteString("form=")
	builder.WriteString(s.Form)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("allPlayed=")
	builder.WriteString(fmt.Sprintf("%v", s.AllPlayed))
	builder.WriteString(", ")
	builder.WriteString("allWin=")
	builder.WriteString(fmt.Sprintf("%v", s.AllWin))
	builder.WriteString(", ")
	builder.WriteString("allDraw=")
	builder.WriteString(fmt.Sprintf("%v", s.AllDraw))
	builder.WriteString(", ")
	builder.WriteString("allLose=")
	builder.WriteString(fmt.Sprintf("%v", s.AllLose))
	builder.WriteString(", ")
	builder.WriteString("allGoalsFor=")
	builder.WriteString(fmt.Sprintf("%v", s.AllGoalsFor))
	builder.WriteString(", ")
	builder.WriteString("allGoalsAgainst=")
	builder.WriteString(fmt.Sprintf("%v", s.AllGoalsAgainst))
	builder.WriteString(", ")
	builder.WriteString("homePlayed=")
	builder.WriteString(fmt.Sprintf("%v", s.HomePlayed))
	builder.WriteString(", ")
	builder.WriteString("homeWin=")
	builder.WriteString(fmt.Sprintf("%v", s.HomeWin))
	builder.WriteString(", ")
	builder.WriteString("homeDraw=")
	builder.WriteString(fmt.Sprintf("%v", s.HomeDraw))
	builder.WriteString(", ")
	builder.WriteString("homeLose=")
	builder.WriteString(fmt.Sprintf("%v", s.HomeLose))
	builder.WriteString(", ")
	builder.WriteString("homeGoalsFor=")
	builder.WriteString(fmt.Sprintf("%v", s.HomeGoalsFor))
	builder.WriteString(", ")
	builder.WriteString("homeGoalsAgainst=")
	builder.WriteString(fmt.Sprintf("%v", s.HomeGoalsAgainst))
	builder.WriteString(", ")
	builder.WriteString("awayPlayed=")
	builder.WriteString(fmt.Sprintf("%v", s.AwayPlayed))
	builder.WriteString(", ")
	builder.WriteString("awayWin=")
	builder.WriteString(fmt.Sprintf("%v", s.AwayWin))
	builder.WriteString(", ")
	builder.WriteString("awayDraw=")
	builder.WriteString(fmt.Sprintf("%v", s.AwayDraw))
	builder.WriteString(", ")
	builder.WriteString("awayLose=")
	builder.WriteString(fmt.Sprintf("%v", s.AwayLose))
	builder.WriteString(", ")
	builder.WriteString("awayGoalsFor=")
	builder.WriteString(fmt.Sprintf("%v", s.AwayGoalsFor))
	builder.WriteString(", ")
	builder.WriteString("awayGoalsAgainst=")
	builder.WriteString(fmt.Sprintf("%v", s.AwayGoalsAgainst))
	builder.WriteString(", ")
	builder.WriteString("LastUpdated=")
	builder.WriteString(s.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StandingsSlice is a parsable slice of Standings.
type StandingsSlice []*Standings
