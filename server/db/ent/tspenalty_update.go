// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tspenalty"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSPenaltyUpdate is the builder for updating TSPenalty entities.
type TSPenaltyUpdate struct {
	config
	hooks    []Hook
	mutation *TSPenaltyMutation
}

// Where appends a list predicates to the TSPenaltyUpdate builder.
func (tpu *TSPenaltyUpdate) Where(ps ...predicate.TSPenalty) *TSPenaltyUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetTotal sets the "total" field.
func (tpu *TSPenaltyUpdate) SetTotal(i int) *TSPenaltyUpdate {
	tpu.mutation.ResetTotal()
	tpu.mutation.SetTotal(i)
	return tpu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tpu *TSPenaltyUpdate) SetNillableTotal(i *int) *TSPenaltyUpdate {
	if i != nil {
		tpu.SetTotal(*i)
	}
	return tpu
}

// AddTotal adds i to the "total" field.
func (tpu *TSPenaltyUpdate) AddTotal(i int) *TSPenaltyUpdate {
	tpu.mutation.AddTotal(i)
	return tpu
}

// ClearTotal clears the value of the "total" field.
func (tpu *TSPenaltyUpdate) ClearTotal() *TSPenaltyUpdate {
	tpu.mutation.ClearTotal()
	return tpu
}

// SetScoredTotal sets the "scoredTotal" field.
func (tpu *TSPenaltyUpdate) SetScoredTotal(i int) *TSPenaltyUpdate {
	tpu.mutation.ResetScoredTotal()
	tpu.mutation.SetScoredTotal(i)
	return tpu
}

// SetNillableScoredTotal sets the "scoredTotal" field if the given value is not nil.
func (tpu *TSPenaltyUpdate) SetNillableScoredTotal(i *int) *TSPenaltyUpdate {
	if i != nil {
		tpu.SetScoredTotal(*i)
	}
	return tpu
}

// AddScoredTotal adds i to the "scoredTotal" field.
func (tpu *TSPenaltyUpdate) AddScoredTotal(i int) *TSPenaltyUpdate {
	tpu.mutation.AddScoredTotal(i)
	return tpu
}

// ClearScoredTotal clears the value of the "scoredTotal" field.
func (tpu *TSPenaltyUpdate) ClearScoredTotal() *TSPenaltyUpdate {
	tpu.mutation.ClearScoredTotal()
	return tpu
}

// SetMissedTotal sets the "missedTotal" field.
func (tpu *TSPenaltyUpdate) SetMissedTotal(i int) *TSPenaltyUpdate {
	tpu.mutation.ResetMissedTotal()
	tpu.mutation.SetMissedTotal(i)
	return tpu
}

// SetNillableMissedTotal sets the "missedTotal" field if the given value is not nil.
func (tpu *TSPenaltyUpdate) SetNillableMissedTotal(i *int) *TSPenaltyUpdate {
	if i != nil {
		tpu.SetMissedTotal(*i)
	}
	return tpu
}

// AddMissedTotal adds i to the "missedTotal" field.
func (tpu *TSPenaltyUpdate) AddMissedTotal(i int) *TSPenaltyUpdate {
	tpu.mutation.AddMissedTotal(i)
	return tpu
}

// ClearMissedTotal clears the value of the "missedTotal" field.
func (tpu *TSPenaltyUpdate) ClearMissedTotal() *TSPenaltyUpdate {
	tpu.mutation.ClearMissedTotal()
	return tpu
}

// SetScoredPercentage sets the "scoredPercentage" field.
func (tpu *TSPenaltyUpdate) SetScoredPercentage(s string) *TSPenaltyUpdate {
	tpu.mutation.SetScoredPercentage(s)
	return tpu
}

// SetNillableScoredPercentage sets the "scoredPercentage" field if the given value is not nil.
func (tpu *TSPenaltyUpdate) SetNillableScoredPercentage(s *string) *TSPenaltyUpdate {
	if s != nil {
		tpu.SetScoredPercentage(*s)
	}
	return tpu
}

// ClearScoredPercentage clears the value of the "scoredPercentage" field.
func (tpu *TSPenaltyUpdate) ClearScoredPercentage() *TSPenaltyUpdate {
	tpu.mutation.ClearScoredPercentage()
	return tpu
}

// SetMissedPercentage sets the "missedPercentage" field.
func (tpu *TSPenaltyUpdate) SetMissedPercentage(s string) *TSPenaltyUpdate {
	tpu.mutation.SetMissedPercentage(s)
	return tpu
}

// SetNillableMissedPercentage sets the "missedPercentage" field if the given value is not nil.
func (tpu *TSPenaltyUpdate) SetNillableMissedPercentage(s *string) *TSPenaltyUpdate {
	if s != nil {
		tpu.SetMissedPercentage(*s)
	}
	return tpu
}

// ClearMissedPercentage clears the value of the "missedPercentage" field.
func (tpu *TSPenaltyUpdate) ClearMissedPercentage() *TSPenaltyUpdate {
	tpu.mutation.ClearMissedPercentage()
	return tpu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tpu *TSPenaltyUpdate) SetLastUpdated(t time.Time) *TSPenaltyUpdate {
	tpu.mutation.SetLastUpdated(t)
	return tpu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tpu *TSPenaltyUpdate) ClearLastUpdated() *TSPenaltyUpdate {
	tpu.mutation.ClearLastUpdated()
	return tpu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tpu *TSPenaltyUpdate) SetTeamID(id int) *TSPenaltyUpdate {
	tpu.mutation.SetTeamID(id)
	return tpu
}

// SetTeam sets the "team" edge to the Team entity.
func (tpu *TSPenaltyUpdate) SetTeam(t *Team) *TSPenaltyUpdate {
	return tpu.SetTeamID(t.ID)
}

// Mutation returns the TSPenaltyMutation object of the builder.
func (tpu *TSPenaltyUpdate) Mutation() *TSPenaltyMutation {
	return tpu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tpu *TSPenaltyUpdate) ClearTeam() *TSPenaltyUpdate {
	tpu.mutation.ClearTeam()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TSPenaltyUpdate) Save(ctx context.Context) (int, error) {
	tpu.defaults()
	return withHooks[int, TSPenaltyMutation](ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TSPenaltyUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TSPenaltyUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TSPenaltyUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpu *TSPenaltyUpdate) defaults() {
	if _, ok := tpu.mutation.LastUpdated(); !ok && !tpu.mutation.LastUpdatedCleared() {
		v := tspenalty.UpdateDefaultLastUpdated()
		tpu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TSPenaltyUpdate) check() error {
	if _, ok := tpu.mutation.TeamID(); tpu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSPenalty.team"`)
	}
	return nil
}

func (tpu *TSPenaltyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tspenalty.Table, tspenalty.Columns, sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Total(); ok {
		_spec.SetField(tspenalty.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedTotal(); ok {
		_spec.AddField(tspenalty.FieldTotal, field.TypeInt, value)
	}
	if tpu.mutation.TotalCleared() {
		_spec.ClearField(tspenalty.FieldTotal, field.TypeInt)
	}
	if value, ok := tpu.mutation.ScoredTotal(); ok {
		_spec.SetField(tspenalty.FieldScoredTotal, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedScoredTotal(); ok {
		_spec.AddField(tspenalty.FieldScoredTotal, field.TypeInt, value)
	}
	if tpu.mutation.ScoredTotalCleared() {
		_spec.ClearField(tspenalty.FieldScoredTotal, field.TypeInt)
	}
	if value, ok := tpu.mutation.MissedTotal(); ok {
		_spec.SetField(tspenalty.FieldMissedTotal, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedMissedTotal(); ok {
		_spec.AddField(tspenalty.FieldMissedTotal, field.TypeInt, value)
	}
	if tpu.mutation.MissedTotalCleared() {
		_spec.ClearField(tspenalty.FieldMissedTotal, field.TypeInt)
	}
	if value, ok := tpu.mutation.ScoredPercentage(); ok {
		_spec.SetField(tspenalty.FieldScoredPercentage, field.TypeString, value)
	}
	if tpu.mutation.ScoredPercentageCleared() {
		_spec.ClearField(tspenalty.FieldScoredPercentage, field.TypeString)
	}
	if value, ok := tpu.mutation.MissedPercentage(); ok {
		_spec.SetField(tspenalty.FieldMissedPercentage, field.TypeString, value)
	}
	if tpu.mutation.MissedPercentageCleared() {
		_spec.ClearField(tspenalty.FieldMissedPercentage, field.TypeString)
	}
	if value, ok := tpu.mutation.LastUpdated(); ok {
		_spec.SetField(tspenalty.FieldLastUpdated, field.TypeTime, value)
	}
	if tpu.mutation.LastUpdatedCleared() {
		_spec.ClearField(tspenalty.FieldLastUpdated, field.TypeTime)
	}
	if tpu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tspenalty.TeamTable,
			Columns: []string{tspenalty.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tspenalty.TeamTable,
			Columns: []string{tspenalty.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tspenalty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TSPenaltyUpdateOne is the builder for updating a single TSPenalty entity.
type TSPenaltyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSPenaltyMutation
}

// SetTotal sets the "total" field.
func (tpuo *TSPenaltyUpdateOne) SetTotal(i int) *TSPenaltyUpdateOne {
	tpuo.mutation.ResetTotal()
	tpuo.mutation.SetTotal(i)
	return tpuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tpuo *TSPenaltyUpdateOne) SetNillableTotal(i *int) *TSPenaltyUpdateOne {
	if i != nil {
		tpuo.SetTotal(*i)
	}
	return tpuo
}

// AddTotal adds i to the "total" field.
func (tpuo *TSPenaltyUpdateOne) AddTotal(i int) *TSPenaltyUpdateOne {
	tpuo.mutation.AddTotal(i)
	return tpuo
}

// ClearTotal clears the value of the "total" field.
func (tpuo *TSPenaltyUpdateOne) ClearTotal() *TSPenaltyUpdateOne {
	tpuo.mutation.ClearTotal()
	return tpuo
}

// SetScoredTotal sets the "scoredTotal" field.
func (tpuo *TSPenaltyUpdateOne) SetScoredTotal(i int) *TSPenaltyUpdateOne {
	tpuo.mutation.ResetScoredTotal()
	tpuo.mutation.SetScoredTotal(i)
	return tpuo
}

// SetNillableScoredTotal sets the "scoredTotal" field if the given value is not nil.
func (tpuo *TSPenaltyUpdateOne) SetNillableScoredTotal(i *int) *TSPenaltyUpdateOne {
	if i != nil {
		tpuo.SetScoredTotal(*i)
	}
	return tpuo
}

// AddScoredTotal adds i to the "scoredTotal" field.
func (tpuo *TSPenaltyUpdateOne) AddScoredTotal(i int) *TSPenaltyUpdateOne {
	tpuo.mutation.AddScoredTotal(i)
	return tpuo
}

// ClearScoredTotal clears the value of the "scoredTotal" field.
func (tpuo *TSPenaltyUpdateOne) ClearScoredTotal() *TSPenaltyUpdateOne {
	tpuo.mutation.ClearScoredTotal()
	return tpuo
}

// SetMissedTotal sets the "missedTotal" field.
func (tpuo *TSPenaltyUpdateOne) SetMissedTotal(i int) *TSPenaltyUpdateOne {
	tpuo.mutation.ResetMissedTotal()
	tpuo.mutation.SetMissedTotal(i)
	return tpuo
}

// SetNillableMissedTotal sets the "missedTotal" field if the given value is not nil.
func (tpuo *TSPenaltyUpdateOne) SetNillableMissedTotal(i *int) *TSPenaltyUpdateOne {
	if i != nil {
		tpuo.SetMissedTotal(*i)
	}
	return tpuo
}

// AddMissedTotal adds i to the "missedTotal" field.
func (tpuo *TSPenaltyUpdateOne) AddMissedTotal(i int) *TSPenaltyUpdateOne {
	tpuo.mutation.AddMissedTotal(i)
	return tpuo
}

// ClearMissedTotal clears the value of the "missedTotal" field.
func (tpuo *TSPenaltyUpdateOne) ClearMissedTotal() *TSPenaltyUpdateOne {
	tpuo.mutation.ClearMissedTotal()
	return tpuo
}

// SetScoredPercentage sets the "scoredPercentage" field.
func (tpuo *TSPenaltyUpdateOne) SetScoredPercentage(s string) *TSPenaltyUpdateOne {
	tpuo.mutation.SetScoredPercentage(s)
	return tpuo
}

// SetNillableScoredPercentage sets the "scoredPercentage" field if the given value is not nil.
func (tpuo *TSPenaltyUpdateOne) SetNillableScoredPercentage(s *string) *TSPenaltyUpdateOne {
	if s != nil {
		tpuo.SetScoredPercentage(*s)
	}
	return tpuo
}

// ClearScoredPercentage clears the value of the "scoredPercentage" field.
func (tpuo *TSPenaltyUpdateOne) ClearScoredPercentage() *TSPenaltyUpdateOne {
	tpuo.mutation.ClearScoredPercentage()
	return tpuo
}

// SetMissedPercentage sets the "missedPercentage" field.
func (tpuo *TSPenaltyUpdateOne) SetMissedPercentage(s string) *TSPenaltyUpdateOne {
	tpuo.mutation.SetMissedPercentage(s)
	return tpuo
}

// SetNillableMissedPercentage sets the "missedPercentage" field if the given value is not nil.
func (tpuo *TSPenaltyUpdateOne) SetNillableMissedPercentage(s *string) *TSPenaltyUpdateOne {
	if s != nil {
		tpuo.SetMissedPercentage(*s)
	}
	return tpuo
}

// ClearMissedPercentage clears the value of the "missedPercentage" field.
func (tpuo *TSPenaltyUpdateOne) ClearMissedPercentage() *TSPenaltyUpdateOne {
	tpuo.mutation.ClearMissedPercentage()
	return tpuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tpuo *TSPenaltyUpdateOne) SetLastUpdated(t time.Time) *TSPenaltyUpdateOne {
	tpuo.mutation.SetLastUpdated(t)
	return tpuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tpuo *TSPenaltyUpdateOne) ClearLastUpdated() *TSPenaltyUpdateOne {
	tpuo.mutation.ClearLastUpdated()
	return tpuo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tpuo *TSPenaltyUpdateOne) SetTeamID(id int) *TSPenaltyUpdateOne {
	tpuo.mutation.SetTeamID(id)
	return tpuo
}

// SetTeam sets the "team" edge to the Team entity.
func (tpuo *TSPenaltyUpdateOne) SetTeam(t *Team) *TSPenaltyUpdateOne {
	return tpuo.SetTeamID(t.ID)
}

// Mutation returns the TSPenaltyMutation object of the builder.
func (tpuo *TSPenaltyUpdateOne) Mutation() *TSPenaltyMutation {
	return tpuo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tpuo *TSPenaltyUpdateOne) ClearTeam() *TSPenaltyUpdateOne {
	tpuo.mutation.ClearTeam()
	return tpuo
}

// Where appends a list predicates to the TSPenaltyUpdate builder.
func (tpuo *TSPenaltyUpdateOne) Where(ps ...predicate.TSPenalty) *TSPenaltyUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TSPenaltyUpdateOne) Select(field string, fields ...string) *TSPenaltyUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TSPenalty entity.
func (tpuo *TSPenaltyUpdateOne) Save(ctx context.Context) (*TSPenalty, error) {
	tpuo.defaults()
	return withHooks[*TSPenalty, TSPenaltyMutation](ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TSPenaltyUpdateOne) SaveX(ctx context.Context) *TSPenalty {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TSPenaltyUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TSPenaltyUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpuo *TSPenaltyUpdateOne) defaults() {
	if _, ok := tpuo.mutation.LastUpdated(); !ok && !tpuo.mutation.LastUpdatedCleared() {
		v := tspenalty.UpdateDefaultLastUpdated()
		tpuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TSPenaltyUpdateOne) check() error {
	if _, ok := tpuo.mutation.TeamID(); tpuo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSPenalty.team"`)
	}
	return nil
}

func (tpuo *TSPenaltyUpdateOne) sqlSave(ctx context.Context) (_node *TSPenalty, err error) {
	if err := tpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tspenalty.Table, tspenalty.Columns, sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSPenalty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tspenalty.FieldID)
		for _, f := range fields {
			if !tspenalty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tspenalty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Total(); ok {
		_spec.SetField(tspenalty.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedTotal(); ok {
		_spec.AddField(tspenalty.FieldTotal, field.TypeInt, value)
	}
	if tpuo.mutation.TotalCleared() {
		_spec.ClearField(tspenalty.FieldTotal, field.TypeInt)
	}
	if value, ok := tpuo.mutation.ScoredTotal(); ok {
		_spec.SetField(tspenalty.FieldScoredTotal, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedScoredTotal(); ok {
		_spec.AddField(tspenalty.FieldScoredTotal, field.TypeInt, value)
	}
	if tpuo.mutation.ScoredTotalCleared() {
		_spec.ClearField(tspenalty.FieldScoredTotal, field.TypeInt)
	}
	if value, ok := tpuo.mutation.MissedTotal(); ok {
		_spec.SetField(tspenalty.FieldMissedTotal, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedMissedTotal(); ok {
		_spec.AddField(tspenalty.FieldMissedTotal, field.TypeInt, value)
	}
	if tpuo.mutation.MissedTotalCleared() {
		_spec.ClearField(tspenalty.FieldMissedTotal, field.TypeInt)
	}
	if value, ok := tpuo.mutation.ScoredPercentage(); ok {
		_spec.SetField(tspenalty.FieldScoredPercentage, field.TypeString, value)
	}
	if tpuo.mutation.ScoredPercentageCleared() {
		_spec.ClearField(tspenalty.FieldScoredPercentage, field.TypeString)
	}
	if value, ok := tpuo.mutation.MissedPercentage(); ok {
		_spec.SetField(tspenalty.FieldMissedPercentage, field.TypeString, value)
	}
	if tpuo.mutation.MissedPercentageCleared() {
		_spec.ClearField(tspenalty.FieldMissedPercentage, field.TypeString)
	}
	if value, ok := tpuo.mutation.LastUpdated(); ok {
		_spec.SetField(tspenalty.FieldLastUpdated, field.TypeTime, value)
	}
	if tpuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(tspenalty.FieldLastUpdated, field.TypeTime)
	}
	if tpuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tspenalty.TeamTable,
			Columns: []string{tspenalty.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tspenalty.TeamTable,
			Columns: []string{tspenalty.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TSPenalty{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tspenalty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
