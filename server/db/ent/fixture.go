// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/fixture"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/team"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Fixture is the model entity for the Fixture schema.
type Fixture struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// ApiFootballId holds the value of the "apiFootballId" field.
	ApiFootballId int `json:"apiFootballId,omitempty"`
	// Referee holds the value of the "referee" field.
	Referee string `json:"referee,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Elapsed holds the value of the "elapsed" field.
	Elapsed int `json:"elapsed,omitempty"`
	// Round holds the value of the "round" field.
	Round int `json:"round,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// HomeTeamScore holds the value of the "homeTeamScore" field.
	HomeTeamScore int `json:"homeTeamScore,omitempty"`
	// AwayTeamScore holds the value of the "awayTeamScore" field.
	AwayTeamScore int `json:"awayTeamScore,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FixtureQuery when eager-loading is set.
	Edges              FixtureEdges `json:"edges"`
	season_fixtures    *int
	team_home_fixtures *int
	team_away_fixtures *int
	selectValues       sql.SelectValues
}

// FixtureEdges holds the relations/edges for other nodes in the graph.
type FixtureEdges struct {
	// HomeTeam holds the value of the homeTeam edge.
	HomeTeam *Team `json:"homeTeam,omitempty"`
	// AwayTeam holds the value of the awayTeam edge.
	AwayTeam *Team `json:"awayTeam,omitempty"`
	// Season holds the value of the season edge.
	Season *Season `json:"season,omitempty"`
	// Lineups holds the value of the lineups edge.
	Lineups []*FixtureLineups `json:"lineups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// HomeTeamOrErr returns the HomeTeam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureEdges) HomeTeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.HomeTeam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.HomeTeam, nil
	}
	return nil, &NotLoadedError{edge: "homeTeam"}
}

// AwayTeamOrErr returns the AwayTeam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureEdges) AwayTeamOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.AwayTeam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.AwayTeam, nil
	}
	return nil, &NotLoadedError{edge: "awayTeam"}
}

// SeasonOrErr returns the Season value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureEdges) SeasonOrErr() (*Season, error) {
	if e.loadedTypes[2] {
		if e.Season == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: season.Label}
		}
		return e.Season, nil
	}
	return nil, &NotLoadedError{edge: "season"}
}

// LineupsOrErr returns the Lineups value or an error if the edge
// was not loaded in eager-loading.
func (e FixtureEdges) LineupsOrErr() ([]*FixtureLineups, error) {
	if e.loadedTypes[3] {
		return e.Lineups, nil
	}
	return nil, &NotLoadedError{edge: "lineups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fixture) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fixture.FieldID, fixture.FieldApiFootballId, fixture.FieldElapsed, fixture.FieldRound, fixture.FieldHomeTeamScore, fixture.FieldAwayTeamScore:
			values[i] = new(sql.NullInt64)
		case fixture.FieldSlug, fixture.FieldReferee, fixture.FieldTimezone, fixture.FieldStatus:
			values[i] = new(sql.NullString)
		case fixture.FieldDate, fixture.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case fixture.ForeignKeys[0]: // season_fixtures
			values[i] = new(sql.NullInt64)
		case fixture.ForeignKeys[1]: // team_home_fixtures
			values[i] = new(sql.NullInt64)
		case fixture.ForeignKeys[2]: // team_away_fixtures
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fixture fields.
func (f *Fixture) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fixture.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case fixture.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				f.Slug = value.String
			}
		case fixture.FieldApiFootballId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field apiFootballId", values[i])
			} else if value.Valid {
				f.ApiFootballId = int(value.Int64)
			}
		case fixture.FieldReferee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field referee", values[i])
			} else if value.Valid {
				f.Referee = value.String
			}
		case fixture.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				f.Timezone = value.String
			}
		case fixture.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				f.Date = value.Time
			}
		case fixture.FieldElapsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field elapsed", values[i])
			} else if value.Valid {
				f.Elapsed = int(value.Int64)
			}
		case fixture.FieldRound:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round", values[i])
			} else if value.Valid {
				f.Round = int(value.Int64)
			}
		case fixture.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = value.String
			}
		case fixture.FieldHomeTeamScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeTeamScore", values[i])
			} else if value.Valid {
				f.HomeTeamScore = int(value.Int64)
			}
		case fixture.FieldAwayTeamScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field awayTeamScore", values[i])
			} else if value.Valid {
				f.AwayTeamScore = int(value.Int64)
			}
		case fixture.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				f.LastUpdated = value.Time
			}
		case fixture.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field season_fixtures", value)
			} else if value.Valid {
				f.season_fixtures = new(int)
				*f.season_fixtures = int(value.Int64)
			}
		case fixture.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_home_fixtures", value)
			} else if value.Valid {
				f.team_home_fixtures = new(int)
				*f.team_home_fixtures = int(value.Int64)
			}
		case fixture.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_away_fixtures", value)
			} else if value.Valid {
				f.team_away_fixtures = new(int)
				*f.team_away_fixtures = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Fixture.
// This includes values selected through modifiers, order, etc.
func (f *Fixture) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryHomeTeam queries the "homeTeam" edge of the Fixture entity.
func (f *Fixture) QueryHomeTeam() *TeamQuery {
	return NewFixtureClient(f.config).QueryHomeTeam(f)
}

// QueryAwayTeam queries the "awayTeam" edge of the Fixture entity.
func (f *Fixture) QueryAwayTeam() *TeamQuery {
	return NewFixtureClient(f.config).QueryAwayTeam(f)
}

// QuerySeason queries the "season" edge of the Fixture entity.
func (f *Fixture) QuerySeason() *SeasonQuery {
	return NewFixtureClient(f.config).QuerySeason(f)
}

// QueryLineups queries the "lineups" edge of the Fixture entity.
func (f *Fixture) QueryLineups() *FixtureLineupsQuery {
	return NewFixtureClient(f.config).QueryLineups(f)
}

// Update returns a builder for updating this Fixture.
// Note that you need to call Fixture.Unwrap() before calling this method if this Fixture
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fixture) Update() *FixtureUpdateOne {
	return NewFixtureClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fixture entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fixture) Unwrap() *Fixture {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fixture is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fixture) String() string {
	var builder strings.Builder
	builder.WriteString("Fixture(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("slug=")
	builder.WriteString(f.Slug)
	builder.WriteString(", ")
	builder.WriteString("apiFootballId=")
	builder.WriteString(fmt.Sprintf("%v", f.ApiFootballId))
	builder.WriteString(", ")
	builder.WriteString("referee=")
	builder.WriteString(f.Referee)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(f.Timezone)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(f.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("elapsed=")
	builder.WriteString(fmt.Sprintf("%v", f.Elapsed))
	builder.WriteString(", ")
	builder.WriteString("round=")
	builder.WriteString(fmt.Sprintf("%v", f.Round))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(f.Status)
	builder.WriteString(", ")
	builder.WriteString("homeTeamScore=")
	builder.WriteString(fmt.Sprintf("%v", f.HomeTeamScore))
	builder.WriteString(", ")
	builder.WriteString("awayTeamScore=")
	builder.WriteString(fmt.Sprintf("%v", f.AwayTeamScore))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(f.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Fixtures is a parsable slice of Fixture.
type Fixtures []*Fixture
