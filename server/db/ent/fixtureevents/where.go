// Code generated by ent, DO NOT EDIT.

package fixtureevents

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLTE(FieldID, id))
}

// ElapsedTime applies equality check predicate on the "elapsedTime" field. It's identical to ElapsedTimeEQ.
func ElapsedTime(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldElapsedTime, v))
}

// ExtraTime applies equality check predicate on the "extraTime" field. It's identical to ExtraTimeEQ.
func ExtraTime(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldExtraTime, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldType, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldDetail, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldComments, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldLastUpdated, v))
}

// ElapsedTimeEQ applies the EQ predicate on the "elapsedTime" field.
func ElapsedTimeEQ(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldElapsedTime, v))
}

// ElapsedTimeNEQ applies the NEQ predicate on the "elapsedTime" field.
func ElapsedTimeNEQ(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNEQ(FieldElapsedTime, v))
}

// ElapsedTimeIn applies the In predicate on the "elapsedTime" field.
func ElapsedTimeIn(vs ...int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIn(FieldElapsedTime, vs...))
}

// ElapsedTimeNotIn applies the NotIn predicate on the "elapsedTime" field.
func ElapsedTimeNotIn(vs ...int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotIn(FieldElapsedTime, vs...))
}

// ElapsedTimeGT applies the GT predicate on the "elapsedTime" field.
func ElapsedTimeGT(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGT(FieldElapsedTime, v))
}

// ElapsedTimeGTE applies the GTE predicate on the "elapsedTime" field.
func ElapsedTimeGTE(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGTE(FieldElapsedTime, v))
}

// ElapsedTimeLT applies the LT predicate on the "elapsedTime" field.
func ElapsedTimeLT(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLT(FieldElapsedTime, v))
}

// ElapsedTimeLTE applies the LTE predicate on the "elapsedTime" field.
func ElapsedTimeLTE(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLTE(FieldElapsedTime, v))
}

// ExtraTimeEQ applies the EQ predicate on the "extraTime" field.
func ExtraTimeEQ(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldExtraTime, v))
}

// ExtraTimeNEQ applies the NEQ predicate on the "extraTime" field.
func ExtraTimeNEQ(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNEQ(FieldExtraTime, v))
}

// ExtraTimeIn applies the In predicate on the "extraTime" field.
func ExtraTimeIn(vs ...int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIn(FieldExtraTime, vs...))
}

// ExtraTimeNotIn applies the NotIn predicate on the "extraTime" field.
func ExtraTimeNotIn(vs ...int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotIn(FieldExtraTime, vs...))
}

// ExtraTimeGT applies the GT predicate on the "extraTime" field.
func ExtraTimeGT(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGT(FieldExtraTime, v))
}

// ExtraTimeGTE applies the GTE predicate on the "extraTime" field.
func ExtraTimeGTE(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGTE(FieldExtraTime, v))
}

// ExtraTimeLT applies the LT predicate on the "extraTime" field.
func ExtraTimeLT(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLT(FieldExtraTime, v))
}

// ExtraTimeLTE applies the LTE predicate on the "extraTime" field.
func ExtraTimeLTE(v int) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLTE(FieldExtraTime, v))
}

// ExtraTimeIsNil applies the IsNil predicate on the "extraTime" field.
func ExtraTimeIsNil() predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIsNull(FieldExtraTime))
}

// ExtraTimeNotNil applies the NotNil predicate on the "extraTime" field.
func ExtraTimeNotNil() predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotNull(FieldExtraTime))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldContainsFold(FieldType, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldContainsFold(FieldDetail, v))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldContainsFold(FieldComments, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.FixtureEvents {
	return predicate.FixtureEvents(sql.FieldNotNull(FieldLastUpdated))
}

// HasPlayer applies the HasEdge predicate on the "player" edge.
func HasPlayer() predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerWith applies the HasEdge predicate on the "player" edge with a given conditions (other predicates).
func HasPlayerWith(preds ...predicate.Player) predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := newPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssist applies the HasEdge predicate on the "assist" edge.
func HasAssist() predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssistTable, AssistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssistWith applies the HasEdge predicate on the "assist" edge with a given conditions (other predicates).
func HasAssistWith(preds ...predicate.Player) predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := newAssistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixture applies the HasEdge predicate on the "fixture" edge.
func HasFixture() predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FixtureTable, FixtureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixtureWith applies the HasEdge predicate on the "fixture" edge with a given conditions (other predicates).
func HasFixtureWith(preds ...predicate.Fixture) predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		step := newFixtureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FixtureEvents) predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FixtureEvents) predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FixtureEvents) predicate.FixtureEvents {
	return predicate.FixtureEvents(func(s *sql.Selector) {
		p(s.Not())
	})
}
