// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BirthsColumns holds the columns for the "births" table.
	BirthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "date", Type: field.TypeTime},
		{Name: "place", Type: field.TypeString},
		{Name: "country", Type: field.TypeString},
		{Name: "player_birth", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// BirthsTable holds the schema information for the "births" table.
	BirthsTable = &schema.Table{
		Name:       "births",
		Columns:    BirthsColumns,
		PrimaryKey: []*schema.Column{BirthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "births_players_birth",
				Columns:    []*schema.Column{BirthsColumns[4]},
				RefColumns: []*schema.Column{PlayersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CountriesColumns holds the columns for the "countries" table.
	CountriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "code", Type: field.TypeString, Size: 3},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "flag", Type: field.TypeString},
	}
	// CountriesTable holds the schema information for the "countries" table.
	CountriesTable = &schema.Table{
		Name:       "countries",
		Columns:    CountriesColumns,
		PrimaryKey: []*schema.Column{CountriesColumns[0]},
	}
	// FixturesColumns holds the columns for the "fixtures" table.
	FixturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "api_football_id", Type: field.TypeInt, Unique: true},
		{Name: "referee", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "date", Type: field.TypeTime},
		{Name: "elapsed", Type: field.TypeInt, Nullable: true},
		{Name: "round", Type: field.TypeInt, Nullable: true},
		{Name: "status", Type: field.TypeString},
		{Name: "home_team_score", Type: field.TypeInt, Nullable: true},
		{Name: "away_team_score", Type: field.TypeInt, Nullable: true},
		{Name: "league_fixtures", Type: field.TypeInt, Nullable: true},
		{Name: "team_home_fixtures", Type: field.TypeInt, Nullable: true},
		{Name: "team_away_fixtures", Type: field.TypeInt, Nullable: true},
	}
	// FixturesTable holds the schema information for the "fixtures" table.
	FixturesTable = &schema.Table{
		Name:       "fixtures",
		Columns:    FixturesColumns,
		PrimaryKey: []*schema.Column{FixturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "fixtures_leagues_fixtures",
				Columns:    []*schema.Column{FixturesColumns[11]},
				RefColumns: []*schema.Column{LeaguesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "fixtures_teams_homeFixtures",
				Columns:    []*schema.Column{FixturesColumns[12]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "fixtures_teams_awayFixtures",
				Columns:    []*schema.Column{FixturesColumns[13]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LeaguesColumns holds the columns for the "leagues" table.
	LeaguesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"League", "Cup", "Tournament", "Friendly"}},
		{Name: "logo", Type: field.TypeString},
		{Name: "country_leagues", Type: field.TypeInt, Nullable: true},
		{Name: "season_league", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// LeaguesTable holds the schema information for the "leagues" table.
	LeaguesTable = &schema.Table{
		Name:       "leagues",
		Columns:    LeaguesColumns,
		PrimaryKey: []*schema.Column{LeaguesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "leagues_countries_leagues",
				Columns:    []*schema.Column{LeaguesColumns[5]},
				RefColumns: []*schema.Column{CountriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "leagues_seasons_league",
				Columns:    []*schema.Column{LeaguesColumns[6]},
				RefColumns: []*schema.Column{SeasonsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PlayersColumns holds the columns for the "players" table.
	PlayersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "firstname", Type: field.TypeString},
		{Name: "lastname", Type: field.TypeString},
		{Name: "age", Type: field.TypeInt},
		{Name: "height", Type: field.TypeFloat64},
		{Name: "weight", Type: field.TypeFloat64},
		{Name: "injured", Type: field.TypeBool},
		{Name: "photo", Type: field.TypeString},
		{Name: "country_players", Type: field.TypeInt, Nullable: true},
	}
	// PlayersTable holds the schema information for the "players" table.
	PlayersTable = &schema.Table{
		Name:       "players",
		Columns:    PlayersColumns,
		PrimaryKey: []*schema.Column{PlayersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "players_countries_players",
				Columns:    []*schema.Column{PlayersColumns[10]},
				RefColumns: []*schema.Column{CountriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PlayerTeamSeasonsColumns holds the columns for the "player_team_seasons" table.
	PlayerTeamSeasonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "player_team_season_id", Type: field.TypeInt, Unique: true},
		{Name: "player_player_team_seasons", Type: field.TypeInt},
		{Name: "team_season_player_team_seasons", Type: field.TypeInt},
	}
	// PlayerTeamSeasonsTable holds the schema information for the "player_team_seasons" table.
	PlayerTeamSeasonsTable = &schema.Table{
		Name:       "player_team_seasons",
		Columns:    PlayerTeamSeasonsColumns,
		PrimaryKey: []*schema.Column{PlayerTeamSeasonsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "player_team_seasons_players_playerTeamSeasons",
				Columns:    []*schema.Column{PlayerTeamSeasonsColumns[2]},
				RefColumns: []*schema.Column{PlayersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "player_team_seasons_team_seasons_playerTeamSeasons",
				Columns:    []*schema.Column{PlayerTeamSeasonsColumns[3]},
				RefColumns: []*schema.Column{TeamSeasonsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SeasonsColumns holds the columns for the "seasons" table.
	SeasonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "year", Type: field.TypeInt},
		{Name: "start", Type: field.TypeTime},
		{Name: "end", Type: field.TypeTime},
		{Name: "current", Type: field.TypeBool, Default: false},
	}
	// SeasonsTable holds the schema information for the "seasons" table.
	SeasonsTable = &schema.Table{
		Name:       "seasons",
		Columns:    SeasonsColumns,
		PrimaryKey: []*schema.Column{SeasonsColumns[0]},
	}
	// StandingsColumns holds the columns for the "standings" table.
	StandingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "rank", Type: field.TypeInt},
		{Name: "points", Type: field.TypeInt, Default: 0},
		{Name: "goals_diff", Type: field.TypeInt, Default: 0},
		{Name: "group", Type: field.TypeString, Default: ""},
		{Name: "form", Type: field.TypeString, Default: ""},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "all_played", Type: field.TypeInt},
		{Name: "all_win", Type: field.TypeInt},
		{Name: "all_draw", Type: field.TypeInt},
		{Name: "all_lose", Type: field.TypeInt},
		{Name: "all_goals_for", Type: field.TypeInt},
		{Name: "all_goals_against", Type: field.TypeInt},
		{Name: "home_played", Type: field.TypeInt},
		{Name: "home_win", Type: field.TypeInt},
		{Name: "home_draw", Type: field.TypeInt},
		{Name: "home_lose", Type: field.TypeInt},
		{Name: "home_goals_for", Type: field.TypeInt},
		{Name: "home_goals_against", Type: field.TypeInt},
		{Name: "away_played", Type: field.TypeInt},
		{Name: "away_win", Type: field.TypeInt},
		{Name: "away_draw", Type: field.TypeInt},
		{Name: "away_lose", Type: field.TypeInt},
		{Name: "away_goals_for", Type: field.TypeInt},
		{Name: "away_goals_against", Type: field.TypeInt},
		{Name: "last_updated", Type: field.TypeTime},
		{Name: "league_standings", Type: field.TypeInt},
		{Name: "team_standings", Type: field.TypeInt},
	}
	// StandingsTable holds the schema information for the "standings" table.
	StandingsTable = &schema.Table{
		Name:       "standings",
		Columns:    StandingsColumns,
		PrimaryKey: []*schema.Column{StandingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "standings_leagues_standings",
				Columns:    []*schema.Column{StandingsColumns[27]},
				RefColumns: []*schema.Column{LeaguesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "standings_teams_standings",
				Columns:    []*schema.Column{StandingsColumns[28]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TeamsColumns holds the columns for the "teams" table.
	TeamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "code", Type: field.TypeString, Size: 3},
		{Name: "founded", Type: field.TypeInt},
		{Name: "national", Type: field.TypeBool},
		{Name: "logo", Type: field.TypeString},
		{Name: "country_teams", Type: field.TypeInt, Nullable: true},
	}
	// TeamsTable holds the schema information for the "teams" table.
	TeamsTable = &schema.Table{
		Name:       "teams",
		Columns:    TeamsColumns,
		PrimaryKey: []*schema.Column{TeamsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "teams_countries_teams",
				Columns:    []*schema.Column{TeamsColumns[7]},
				RefColumns: []*schema.Column{CountriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TeamSeasonsColumns holds the columns for the "team_seasons" table.
	TeamSeasonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "team_season_id", Type: field.TypeInt, Unique: true},
		{Name: "season_team_seasons", Type: field.TypeInt},
		{Name: "team_team_seasons", Type: field.TypeInt},
	}
	// TeamSeasonsTable holds the schema information for the "team_seasons" table.
	TeamSeasonsTable = &schema.Table{
		Name:       "team_seasons",
		Columns:    TeamSeasonsColumns,
		PrimaryKey: []*schema.Column{TeamSeasonsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_seasons_seasons_teamSeasons",
				Columns:    []*schema.Column{TeamSeasonsColumns[2]},
				RefColumns: []*schema.Column{SeasonsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "team_seasons_teams_teamSeasons",
				Columns:    []*schema.Column{TeamSeasonsColumns[3]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LeagueTeamsColumns holds the columns for the "league_teams" table.
	LeagueTeamsColumns = []*schema.Column{
		{Name: "league_id", Type: field.TypeInt},
		{Name: "team_id", Type: field.TypeInt},
	}
	// LeagueTeamsTable holds the schema information for the "league_teams" table.
	LeagueTeamsTable = &schema.Table{
		Name:       "league_teams",
		Columns:    LeagueTeamsColumns,
		PrimaryKey: []*schema.Column{LeagueTeamsColumns[0], LeagueTeamsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "league_teams_league_id",
				Columns:    []*schema.Column{LeagueTeamsColumns[0]},
				RefColumns: []*schema.Column{LeaguesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "league_teams_team_id",
				Columns:    []*schema.Column{LeagueTeamsColumns[1]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamPlayersColumns holds the columns for the "team_players" table.
	TeamPlayersColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeInt},
		{Name: "player_id", Type: field.TypeInt},
	}
	// TeamPlayersTable holds the schema information for the "team_players" table.
	TeamPlayersTable = &schema.Table{
		Name:       "team_players",
		Columns:    TeamPlayersColumns,
		PrimaryKey: []*schema.Column{TeamPlayersColumns[0], TeamPlayersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_players_team_id",
				Columns:    []*schema.Column{TeamPlayersColumns[0]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_players_player_id",
				Columns:    []*schema.Column{TeamPlayersColumns[1]},
				RefColumns: []*schema.Column{PlayersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BirthsTable,
		CountriesTable,
		FixturesTable,
		LeaguesTable,
		PlayersTable,
		PlayerTeamSeasonsTable,
		SeasonsTable,
		StandingsTable,
		TeamsTable,
		TeamSeasonsTable,
		LeagueTeamsTable,
		TeamPlayersTable,
	}
)

func init() {
	BirthsTable.ForeignKeys[0].RefTable = PlayersTable
	FixturesTable.ForeignKeys[0].RefTable = LeaguesTable
	FixturesTable.ForeignKeys[1].RefTable = TeamsTable
	FixturesTable.ForeignKeys[2].RefTable = TeamsTable
	LeaguesTable.ForeignKeys[0].RefTable = CountriesTable
	LeaguesTable.ForeignKeys[1].RefTable = SeasonsTable
	PlayersTable.ForeignKeys[0].RefTable = CountriesTable
	PlayerTeamSeasonsTable.ForeignKeys[0].RefTable = PlayersTable
	PlayerTeamSeasonsTable.ForeignKeys[1].RefTable = TeamSeasonsTable
	StandingsTable.ForeignKeys[0].RefTable = LeaguesTable
	StandingsTable.ForeignKeys[1].RefTable = TeamsTable
	TeamsTable.ForeignKeys[0].RefTable = CountriesTable
	TeamSeasonsTable.ForeignKeys[0].RefTable = SeasonsTable
	TeamSeasonsTable.ForeignKeys[1].RefTable = TeamsTable
	LeagueTeamsTable.ForeignKeys[0].RefTable = LeaguesTable
	LeagueTeamsTable.ForeignKeys[1].RefTable = TeamsTable
	TeamPlayersTable.ForeignKeys[0].RefTable = TeamsTable
	TeamPlayersTable.ForeignKeys[1].RefTable = PlayersTable
}
