// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tsfailedtoscore"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TSFailedToScore is the model entity for the TSFailedToScore schema.
type TSFailedToScore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Home holds the value of the "home" field.
	Home int `json:"home,omitempty"`
	// Away holds the value of the "away" field.
	Away int `json:"away,omitempty"`
	// Total holds the value of the "total" field.
	Total int `json:"total,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TSFailedToScoreQuery when eager-loading is set.
	Edges                      TSFailedToScoreEdges `json:"edges"`
	team_failed_to_score_stats *int
	selectValues               sql.SelectValues
}

// TSFailedToScoreEdges holds the relations/edges for other nodes in the graph.
type TSFailedToScoreEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TSFailedToScoreEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TSFailedToScore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tsfailedtoscore.FieldID, tsfailedtoscore.FieldHome, tsfailedtoscore.FieldAway, tsfailedtoscore.FieldTotal:
			values[i] = new(sql.NullInt64)
		case tsfailedtoscore.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case tsfailedtoscore.ForeignKeys[0]: // team_failed_to_score_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TSFailedToScore fields.
func (tfts *TSFailedToScore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tsfailedtoscore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tfts.ID = int(value.Int64)
		case tsfailedtoscore.FieldHome:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field home", values[i])
			} else if value.Valid {
				tfts.Home = int(value.Int64)
			}
		case tsfailedtoscore.FieldAway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field away", values[i])
			} else if value.Valid {
				tfts.Away = int(value.Int64)
			}
		case tsfailedtoscore.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				tfts.Total = int(value.Int64)
			}
		case tsfailedtoscore.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				tfts.LastUpdated = value.Time
			}
		case tsfailedtoscore.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_failed_to_score_stats", value)
			} else if value.Valid {
				tfts.team_failed_to_score_stats = new(int)
				*tfts.team_failed_to_score_stats = int(value.Int64)
			}
		default:
			tfts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TSFailedToScore.
// This includes values selected through modifiers, order, etc.
func (tfts *TSFailedToScore) Value(name string) (ent.Value, error) {
	return tfts.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the TSFailedToScore entity.
func (tfts *TSFailedToScore) QueryTeam() *TeamQuery {
	return NewTSFailedToScoreClient(tfts.config).QueryTeam(tfts)
}

// Update returns a builder for updating this TSFailedToScore.
// Note that you need to call TSFailedToScore.Unwrap() before calling this method if this TSFailedToScore
// was returned from a transaction, and the transaction was committed or rolled back.
func (tfts *TSFailedToScore) Update() *TSFailedToScoreUpdateOne {
	return NewTSFailedToScoreClient(tfts.config).UpdateOne(tfts)
}

// Unwrap unwraps the TSFailedToScore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tfts *TSFailedToScore) Unwrap() *TSFailedToScore {
	_tx, ok := tfts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TSFailedToScore is not a transactional entity")
	}
	tfts.config.driver = _tx.drv
	return tfts
}

// String implements the fmt.Stringer.
func (tfts *TSFailedToScore) String() string {
	var builder strings.Builder
	builder.WriteString("TSFailedToScore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tfts.ID))
	builder.WriteString("home=")
	builder.WriteString(fmt.Sprintf("%v", tfts.Home))
	builder.WriteString(", ")
	builder.WriteString("away=")
	builder.WriteString(fmt.Sprintf("%v", tfts.Away))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", tfts.Total))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(tfts.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TSFailedToScores is a parsable slice of TSFailedToScore.
type TSFailedToScores []*TSFailedToScore
