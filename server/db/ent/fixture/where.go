// Code generated by ent, DO NOT EDIT.

package fixture

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldSlug, v))
}

// ApiFootballId applies equality check predicate on the "apiFootballId" field. It's identical to ApiFootballIdEQ.
func ApiFootballId(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldApiFootballId, v))
}

// Referee applies equality check predicate on the "referee" field. It's identical to RefereeEQ.
func Referee(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldReferee, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldTimezone, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldDate, v))
}

// Elapsed applies equality check predicate on the "elapsed" field. It's identical to ElapsedEQ.
func Elapsed(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldElapsed, v))
}

// Round applies equality check predicate on the "round" field. It's identical to RoundEQ.
func Round(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldRound, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldStatus, v))
}

// HomeTeamScore applies equality check predicate on the "homeTeamScore" field. It's identical to HomeTeamScoreEQ.
func HomeTeamScore(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldHomeTeamScore, v))
}

// AwayTeamScore applies equality check predicate on the "awayTeamScore" field. It's identical to AwayTeamScoreEQ.
func AwayTeamScore(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldAwayTeamScore, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldLastUpdated, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContainsFold(FieldSlug, v))
}

// ApiFootballIdEQ applies the EQ predicate on the "apiFootballId" field.
func ApiFootballIdEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldApiFootballId, v))
}

// ApiFootballIdNEQ applies the NEQ predicate on the "apiFootballId" field.
func ApiFootballIdNEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldApiFootballId, v))
}

// ApiFootballIdIn applies the In predicate on the "apiFootballId" field.
func ApiFootballIdIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldApiFootballId, vs...))
}

// ApiFootballIdNotIn applies the NotIn predicate on the "apiFootballId" field.
func ApiFootballIdNotIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldApiFootballId, vs...))
}

// ApiFootballIdGT applies the GT predicate on the "apiFootballId" field.
func ApiFootballIdGT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldApiFootballId, v))
}

// ApiFootballIdGTE applies the GTE predicate on the "apiFootballId" field.
func ApiFootballIdGTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldApiFootballId, v))
}

// ApiFootballIdLT applies the LT predicate on the "apiFootballId" field.
func ApiFootballIdLT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldApiFootballId, v))
}

// ApiFootballIdLTE applies the LTE predicate on the "apiFootballId" field.
func ApiFootballIdLTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldApiFootballId, v))
}

// RefereeEQ applies the EQ predicate on the "referee" field.
func RefereeEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldReferee, v))
}

// RefereeNEQ applies the NEQ predicate on the "referee" field.
func RefereeNEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldReferee, v))
}

// RefereeIn applies the In predicate on the "referee" field.
func RefereeIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldReferee, vs...))
}

// RefereeNotIn applies the NotIn predicate on the "referee" field.
func RefereeNotIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldReferee, vs...))
}

// RefereeGT applies the GT predicate on the "referee" field.
func RefereeGT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldReferee, v))
}

// RefereeGTE applies the GTE predicate on the "referee" field.
func RefereeGTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldReferee, v))
}

// RefereeLT applies the LT predicate on the "referee" field.
func RefereeLT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldReferee, v))
}

// RefereeLTE applies the LTE predicate on the "referee" field.
func RefereeLTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldReferee, v))
}

// RefereeContains applies the Contains predicate on the "referee" field.
func RefereeContains(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContains(FieldReferee, v))
}

// RefereeHasPrefix applies the HasPrefix predicate on the "referee" field.
func RefereeHasPrefix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasPrefix(FieldReferee, v))
}

// RefereeHasSuffix applies the HasSuffix predicate on the "referee" field.
func RefereeHasSuffix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasSuffix(FieldReferee, v))
}

// RefereeIsNil applies the IsNil predicate on the "referee" field.
func RefereeIsNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldIsNull(FieldReferee))
}

// RefereeNotNil applies the NotNil predicate on the "referee" field.
func RefereeNotNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldNotNull(FieldReferee))
}

// RefereeEqualFold applies the EqualFold predicate on the "referee" field.
func RefereeEqualFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEqualFold(FieldReferee, v))
}

// RefereeContainsFold applies the ContainsFold predicate on the "referee" field.
func RefereeContainsFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContainsFold(FieldReferee, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneIsNil applies the IsNil predicate on the "timezone" field.
func TimezoneIsNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldIsNull(FieldTimezone))
}

// TimezoneNotNil applies the NotNil predicate on the "timezone" field.
func TimezoneNotNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldNotNull(FieldTimezone))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContainsFold(FieldTimezone, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldDate, v))
}

// ElapsedEQ applies the EQ predicate on the "elapsed" field.
func ElapsedEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldElapsed, v))
}

// ElapsedNEQ applies the NEQ predicate on the "elapsed" field.
func ElapsedNEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldElapsed, v))
}

// ElapsedIn applies the In predicate on the "elapsed" field.
func ElapsedIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldElapsed, vs...))
}

// ElapsedNotIn applies the NotIn predicate on the "elapsed" field.
func ElapsedNotIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldElapsed, vs...))
}

// ElapsedGT applies the GT predicate on the "elapsed" field.
func ElapsedGT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldElapsed, v))
}

// ElapsedGTE applies the GTE predicate on the "elapsed" field.
func ElapsedGTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldElapsed, v))
}

// ElapsedLT applies the LT predicate on the "elapsed" field.
func ElapsedLT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldElapsed, v))
}

// ElapsedLTE applies the LTE predicate on the "elapsed" field.
func ElapsedLTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldElapsed, v))
}

// ElapsedIsNil applies the IsNil predicate on the "elapsed" field.
func ElapsedIsNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldIsNull(FieldElapsed))
}

// ElapsedNotNil applies the NotNil predicate on the "elapsed" field.
func ElapsedNotNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldNotNull(FieldElapsed))
}

// RoundEQ applies the EQ predicate on the "round" field.
func RoundEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldRound, v))
}

// RoundNEQ applies the NEQ predicate on the "round" field.
func RoundNEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldRound, v))
}

// RoundIn applies the In predicate on the "round" field.
func RoundIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldRound, vs...))
}

// RoundNotIn applies the NotIn predicate on the "round" field.
func RoundNotIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldRound, vs...))
}

// RoundGT applies the GT predicate on the "round" field.
func RoundGT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldRound, v))
}

// RoundGTE applies the GTE predicate on the "round" field.
func RoundGTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldRound, v))
}

// RoundLT applies the LT predicate on the "round" field.
func RoundLT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldRound, v))
}

// RoundLTE applies the LTE predicate on the "round" field.
func RoundLTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldRound, v))
}

// RoundIsNil applies the IsNil predicate on the "round" field.
func RoundIsNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldIsNull(FieldRound))
}

// RoundNotNil applies the NotNil predicate on the "round" field.
func RoundNotNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldNotNull(FieldRound))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Fixture {
	return predicate.Fixture(sql.FieldContainsFold(FieldStatus, v))
}

// HomeTeamScoreEQ applies the EQ predicate on the "homeTeamScore" field.
func HomeTeamScoreEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldHomeTeamScore, v))
}

// HomeTeamScoreNEQ applies the NEQ predicate on the "homeTeamScore" field.
func HomeTeamScoreNEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldHomeTeamScore, v))
}

// HomeTeamScoreIn applies the In predicate on the "homeTeamScore" field.
func HomeTeamScoreIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldHomeTeamScore, vs...))
}

// HomeTeamScoreNotIn applies the NotIn predicate on the "homeTeamScore" field.
func HomeTeamScoreNotIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldHomeTeamScore, vs...))
}

// HomeTeamScoreGT applies the GT predicate on the "homeTeamScore" field.
func HomeTeamScoreGT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldHomeTeamScore, v))
}

// HomeTeamScoreGTE applies the GTE predicate on the "homeTeamScore" field.
func HomeTeamScoreGTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldHomeTeamScore, v))
}

// HomeTeamScoreLT applies the LT predicate on the "homeTeamScore" field.
func HomeTeamScoreLT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldHomeTeamScore, v))
}

// HomeTeamScoreLTE applies the LTE predicate on the "homeTeamScore" field.
func HomeTeamScoreLTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldHomeTeamScore, v))
}

// HomeTeamScoreIsNil applies the IsNil predicate on the "homeTeamScore" field.
func HomeTeamScoreIsNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldIsNull(FieldHomeTeamScore))
}

// HomeTeamScoreNotNil applies the NotNil predicate on the "homeTeamScore" field.
func HomeTeamScoreNotNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldNotNull(FieldHomeTeamScore))
}

// AwayTeamScoreEQ applies the EQ predicate on the "awayTeamScore" field.
func AwayTeamScoreEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldAwayTeamScore, v))
}

// AwayTeamScoreNEQ applies the NEQ predicate on the "awayTeamScore" field.
func AwayTeamScoreNEQ(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldAwayTeamScore, v))
}

// AwayTeamScoreIn applies the In predicate on the "awayTeamScore" field.
func AwayTeamScoreIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldAwayTeamScore, vs...))
}

// AwayTeamScoreNotIn applies the NotIn predicate on the "awayTeamScore" field.
func AwayTeamScoreNotIn(vs ...int) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldAwayTeamScore, vs...))
}

// AwayTeamScoreGT applies the GT predicate on the "awayTeamScore" field.
func AwayTeamScoreGT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldAwayTeamScore, v))
}

// AwayTeamScoreGTE applies the GTE predicate on the "awayTeamScore" field.
func AwayTeamScoreGTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldAwayTeamScore, v))
}

// AwayTeamScoreLT applies the LT predicate on the "awayTeamScore" field.
func AwayTeamScoreLT(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldAwayTeamScore, v))
}

// AwayTeamScoreLTE applies the LTE predicate on the "awayTeamScore" field.
func AwayTeamScoreLTE(v int) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldAwayTeamScore, v))
}

// AwayTeamScoreIsNil applies the IsNil predicate on the "awayTeamScore" field.
func AwayTeamScoreIsNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldIsNull(FieldAwayTeamScore))
}

// AwayTeamScoreNotNil applies the NotNil predicate on the "awayTeamScore" field.
func AwayTeamScoreNotNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldNotNull(FieldAwayTeamScore))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.Fixture {
	return predicate.Fixture(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.Fixture {
	return predicate.Fixture(sql.FieldNotNull(FieldLastUpdated))
}

// HasHomeTeam applies the HasEdge predicate on the "homeTeam" edge.
func HasHomeTeam() predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HomeTeamTable, HomeTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHomeTeamWith applies the HasEdge predicate on the "homeTeam" edge with a given conditions (other predicates).
func HasHomeTeamWith(preds ...predicate.Team) predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		step := newHomeTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAwayTeam applies the HasEdge predicate on the "awayTeam" edge.
func HasAwayTeam() predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AwayTeamTable, AwayTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAwayTeamWith applies the HasEdge predicate on the "awayTeam" edge with a given conditions (other predicates).
func HasAwayTeamWith(preds ...predicate.Team) predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		step := newAwayTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeason applies the HasEdge predicate on the "season" edge.
func HasSeason() predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonWith applies the HasEdge predicate on the "season" edge with a given conditions (other predicates).
func HasSeasonWith(preds ...predicate.Season) predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		step := newSeasonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fixture) predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fixture) predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fixture) predicate.Fixture {
	return predicate.Fixture(func(s *sql.Selector) {
		p(s.Not())
	})
}
