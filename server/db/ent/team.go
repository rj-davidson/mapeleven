// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/club"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/team"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Team is the model entity for the Team schema.
type Team struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges        TeamEdges `json:"edges"`
	club_team    *int
	season_teams *int
	selectValues sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// Season holds the value of the season edge.
	Season *Season `json:"season,omitempty"`
	// Club holds the value of the club edge.
	Club *Club `json:"club,omitempty"`
	// Standings holds the value of the standings edge.
	Standings []*Standings `json:"standings,omitempty"`
	// HomeFixtures holds the value of the homeFixtures edge.
	HomeFixtures []*Fixture `json:"homeFixtures,omitempty"`
	// AwayFixtures holds the value of the awayFixtures edge.
	AwayFixtures []*Fixture `json:"awayFixtures,omitempty"`
	// Players holds the value of the players edge.
	Players []*Player `json:"players,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// SeasonOrErr returns the Season value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) SeasonOrErr() (*Season, error) {
	if e.loadedTypes[0] {
		if e.Season == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: season.Label}
		}
		return e.Season, nil
	}
	return nil, &NotLoadedError{edge: "season"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) ClubOrErr() (*Club, error) {
	if e.loadedTypes[1] {
		if e.Club == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: club.Label}
		}
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// StandingsOrErr returns the Standings value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) StandingsOrErr() ([]*Standings, error) {
	if e.loadedTypes[2] {
		return e.Standings, nil
	}
	return nil, &NotLoadedError{edge: "standings"}
}

// HomeFixturesOrErr returns the HomeFixtures value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) HomeFixturesOrErr() ([]*Fixture, error) {
	if e.loadedTypes[3] {
		return e.HomeFixtures, nil
	}
	return nil, &NotLoadedError{edge: "homeFixtures"}
}

// AwayFixturesOrErr returns the AwayFixtures value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) AwayFixturesOrErr() ([]*Fixture, error) {
	if e.loadedTypes[4] {
		return e.AwayFixtures, nil
	}
	return nil, &NotLoadedError{edge: "awayFixtures"}
}

// PlayersOrErr returns the Players value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) PlayersOrErr() ([]*Player, error) {
	if e.loadedTypes[5] {
		return e.Players, nil
	}
	return nil, &NotLoadedError{edge: "players"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			values[i] = new(sql.NullInt64)
		case team.ForeignKeys[0]: // club_team
			values[i] = new(sql.NullInt64)
		case team.ForeignKeys[1]: // season_teams
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case team.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field club_team", value)
			} else if value.Valid {
				t.club_team = new(int)
				*t.club_team = int(value.Int64)
			}
		case team.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field season_teams", value)
			} else if value.Valid {
				t.season_teams = new(int)
				*t.season_teams = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QuerySeason queries the "season" edge of the Team entity.
func (t *Team) QuerySeason() *SeasonQuery {
	return NewTeamClient(t.config).QuerySeason(t)
}

// QueryClub queries the "club" edge of the Team entity.
func (t *Team) QueryClub() *ClubQuery {
	return NewTeamClient(t.config).QueryClub(t)
}

// QueryStandings queries the "standings" edge of the Team entity.
func (t *Team) QueryStandings() *StandingsQuery {
	return NewTeamClient(t.config).QueryStandings(t)
}

// QueryHomeFixtures queries the "homeFixtures" edge of the Team entity.
func (t *Team) QueryHomeFixtures() *FixtureQuery {
	return NewTeamClient(t.config).QueryHomeFixtures(t)
}

// QueryAwayFixtures queries the "awayFixtures" edge of the Team entity.
func (t *Team) QueryAwayFixtures() *FixtureQuery {
	return NewTeamClient(t.config).QueryAwayFixtures(t)
}

// QueryPlayers queries the "players" edge of the Team entity.
func (t *Team) QueryPlayers() *PlayerQuery {
	return NewTeamClient(t.config).QueryPlayers(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team
