// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/country"
	"mapeleven/db/ent/team"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Founded holds the value of the "founded" field.
	Founded int `json:"founded,omitempty"`
	// National holds the value of the "national" field.
	National bool `json:"national,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges         TeamEdges `json:"edges"`
	country_teams *int
	selectValues  sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// Standings holds the value of the standings edge.
	Standings []*Standings `json:"standings,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// Leagues holds the value of the leagues edge.
	Leagues []*League `json:"leagues,omitempty"`
	// Players holds the value of the players edge.
	Players []*Player `json:"players,omitempty"`
	// TeamSeasons holds the value of the teamSeasons edge.
	TeamSeasons []*TeamSeason `json:"teamSeasons,omitempty"`
	// HomeFixtures holds the value of the homeFixtures edge.
	HomeFixtures []*Fixture `json:"homeFixtures,omitempty"`
	// AwayFixtures holds the value of the awayFixtures edge.
	AwayFixtures []*Fixture `json:"awayFixtures,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// StandingsOrErr returns the Standings value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) StandingsOrErr() ([]*Standings, error) {
	if e.loadedTypes[0] {
		return e.Standings, nil
	}
	return nil, &NotLoadedError{edge: "standings"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) CountryOrErr() (*Country, error) {
	if e.loadedTypes[1] {
		if e.Country == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// LeaguesOrErr returns the Leagues value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) LeaguesOrErr() ([]*League, error) {
	if e.loadedTypes[2] {
		return e.Leagues, nil
	}
	return nil, &NotLoadedError{edge: "leagues"}
}

// PlayersOrErr returns the Players value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) PlayersOrErr() ([]*Player, error) {
	if e.loadedTypes[3] {
		return e.Players, nil
	}
	return nil, &NotLoadedError{edge: "players"}
}

// TeamSeasonsOrErr returns the TeamSeasons value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamSeasonsOrErr() ([]*TeamSeason, error) {
	if e.loadedTypes[4] {
		return e.TeamSeasons, nil
	}
	return nil, &NotLoadedError{edge: "teamSeasons"}
}

// HomeFixturesOrErr returns the HomeFixtures value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) HomeFixturesOrErr() ([]*Fixture, error) {
	if e.loadedTypes[5] {
		return e.HomeFixtures, nil
	}
	return nil, &NotLoadedError{edge: "homeFixtures"}
}

// AwayFixturesOrErr returns the AwayFixtures value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) AwayFixturesOrErr() ([]*Fixture, error) {
	if e.loadedTypes[6] {
		return e.AwayFixtures, nil
	}
	return nil, &NotLoadedError{edge: "awayFixtures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldNational:
			values[i] = new(sql.NullBool)
		case team.FieldID, team.FieldFounded:
			values[i] = new(sql.NullInt64)
		case team.FieldSlug, team.FieldName, team.FieldCode, team.FieldLogo:
			values[i] = new(sql.NullString)
		case team.ForeignKeys[0]: // country_teams
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case team.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				t.Slug = value.String
			}
		case team.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case team.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case team.FieldFounded:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field founded", values[i])
			} else if value.Valid {
				t.Founded = int(value.Int64)
			}
		case team.FieldNational:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field national", values[i])
			} else if value.Valid {
				t.National = value.Bool
			}
		case team.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				t.Logo = value.String
			}
		case team.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field country_teams", value)
			} else if value.Valid {
				t.country_teams = new(int)
				*t.country_teams = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryStandings queries the "standings" edge of the Team entity.
func (t *Team) QueryStandings() *StandingsQuery {
	return NewTeamClient(t.config).QueryStandings(t)
}

// QueryCountry queries the "country" edge of the Team entity.
func (t *Team) QueryCountry() *CountryQuery {
	return NewTeamClient(t.config).QueryCountry(t)
}

// QueryLeagues queries the "leagues" edge of the Team entity.
func (t *Team) QueryLeagues() *LeagueQuery {
	return NewTeamClient(t.config).QueryLeagues(t)
}

// QueryPlayers queries the "players" edge of the Team entity.
func (t *Team) QueryPlayers() *PlayerQuery {
	return NewTeamClient(t.config).QueryPlayers(t)
}

// QueryTeamSeasons queries the "teamSeasons" edge of the Team entity.
func (t *Team) QueryTeamSeasons() *TeamSeasonQuery {
	return NewTeamClient(t.config).QueryTeamSeasons(t)
}

// QueryHomeFixtures queries the "homeFixtures" edge of the Team entity.
func (t *Team) QueryHomeFixtures() *FixtureQuery {
	return NewTeamClient(t.config).QueryHomeFixtures(t)
}

// QueryAwayFixtures queries the "awayFixtures" edge of the Team entity.
func (t *Team) QueryAwayFixtures() *FixtureQuery {
	return NewTeamClient(t.config).QueryAwayFixtures(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("slug=")
	builder.WriteString(t.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(t.Code)
	builder.WriteString(", ")
	builder.WriteString("founded=")
	builder.WriteString(fmt.Sprintf("%v", t.Founded))
	builder.WriteString(", ")
	builder.WriteString("national=")
	builder.WriteString(fmt.Sprintf("%v", t.National))
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(t.Logo)
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team
