// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/fixturelineups"
	"mapeleven/db/ent/matchplayer"
	"mapeleven/db/ent/player"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchPlayerCreate is the builder for creating a MatchPlayer entity.
type MatchPlayerCreate struct {
	config
	mutation *MatchPlayerMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (mpc *MatchPlayerCreate) SetNumber(i int) *MatchPlayerCreate {
	mpc.mutation.SetNumber(i)
	return mpc
}

// SetPosition sets the "position" field.
func (mpc *MatchPlayerCreate) SetPosition(s string) *MatchPlayerCreate {
	mpc.mutation.SetPosition(s)
	return mpc
}

// SetX sets the "x" field.
func (mpc *MatchPlayerCreate) SetX(s string) *MatchPlayerCreate {
	mpc.mutation.SetX(s)
	return mpc
}

// SetY sets the "y" field.
func (mpc *MatchPlayerCreate) SetY(s string) *MatchPlayerCreate {
	mpc.mutation.SetY(s)
	return mpc
}

// SetLastUpdated sets the "lastUpdated" field.
func (mpc *MatchPlayerCreate) SetLastUpdated(t time.Time) *MatchPlayerCreate {
	mpc.mutation.SetLastUpdated(t)
	return mpc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableLastUpdated(t *time.Time) *MatchPlayerCreate {
	if t != nil {
		mpc.SetLastUpdated(*t)
	}
	return mpc
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (mpc *MatchPlayerCreate) SetPlayerID(id int) *MatchPlayerCreate {
	mpc.mutation.SetPlayerID(id)
	return mpc
}

// SetPlayer sets the "player" edge to the Player entity.
func (mpc *MatchPlayerCreate) SetPlayer(p *Player) *MatchPlayerCreate {
	return mpc.SetPlayerID(p.ID)
}

// SetLineupID sets the "lineup" edge to the FixtureLineups entity by ID.
func (mpc *MatchPlayerCreate) SetLineupID(id int) *MatchPlayerCreate {
	mpc.mutation.SetLineupID(id)
	return mpc
}

// SetLineup sets the "lineup" edge to the FixtureLineups entity.
func (mpc *MatchPlayerCreate) SetLineup(f *FixtureLineups) *MatchPlayerCreate {
	return mpc.SetLineupID(f.ID)
}

// Mutation returns the MatchPlayerMutation object of the builder.
func (mpc *MatchPlayerCreate) Mutation() *MatchPlayerMutation {
	return mpc.mutation
}

// Save creates the MatchPlayer in the database.
func (mpc *MatchPlayerCreate) Save(ctx context.Context) (*MatchPlayer, error) {
	mpc.defaults()
	return withHooks[*MatchPlayer, MatchPlayerMutation](ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MatchPlayerCreate) SaveX(ctx context.Context) *MatchPlayer {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MatchPlayerCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MatchPlayerCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *MatchPlayerCreate) defaults() {
	if _, ok := mpc.mutation.LastUpdated(); !ok {
		v := matchplayer.DefaultLastUpdated()
		mpc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MatchPlayerCreate) check() error {
	if _, ok := mpc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "MatchPlayer.number"`)}
	}
	if _, ok := mpc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "MatchPlayer.position"`)}
	}
	if _, ok := mpc.mutation.X(); !ok {
		return &ValidationError{Name: "x", err: errors.New(`ent: missing required field "MatchPlayer.x"`)}
	}
	if _, ok := mpc.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New(`ent: missing required field "MatchPlayer.y"`)}
	}
	if _, ok := mpc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player", err: errors.New(`ent: missing required edge "MatchPlayer.player"`)}
	}
	if _, ok := mpc.mutation.LineupID(); !ok {
		return &ValidationError{Name: "lineup", err: errors.New(`ent: missing required edge "MatchPlayer.lineup"`)}
	}
	return nil
}

func (mpc *MatchPlayerCreate) sqlSave(ctx context.Context) (*MatchPlayer, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MatchPlayerCreate) createSpec() (*MatchPlayer, *sqlgraph.CreateSpec) {
	var (
		_node = &MatchPlayer{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(matchplayer.Table, sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt))
	)
	if value, ok := mpc.mutation.Number(); ok {
		_spec.SetField(matchplayer.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := mpc.mutation.Position(); ok {
		_spec.SetField(matchplayer.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := mpc.mutation.X(); ok {
		_spec.SetField(matchplayer.FieldX, field.TypeString, value)
		_node.X = value
	}
	if value, ok := mpc.mutation.Y(); ok {
		_spec.SetField(matchplayer.FieldY, field.TypeString, value)
		_node.Y = value
	}
	if value, ok := mpc.mutation.LastUpdated(); ok {
		_spec.SetField(matchplayer.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := mpc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_match_player = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.LineupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.LineupTable,
			Columns: []string{matchplayer.LineupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fixture_lineups_lineup_player = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchPlayerCreateBulk is the builder for creating many MatchPlayer entities in bulk.
type MatchPlayerCreateBulk struct {
	config
	builders []*MatchPlayerCreate
}

// Save creates the MatchPlayer entities in the database.
func (mpcb *MatchPlayerCreateBulk) Save(ctx context.Context) ([]*MatchPlayer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MatchPlayer, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchPlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MatchPlayerCreateBulk) SaveX(ctx context.Context) []*MatchPlayer {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MatchPlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MatchPlayerCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
