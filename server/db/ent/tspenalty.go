// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tspenalty"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TSPenalty is the model entity for the TSPenalty schema.
type TSPenalty struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Total holds the value of the "total" field.
	Total int `json:"total,omitempty"`
	// ScoredTotal holds the value of the "scoredTotal" field.
	ScoredTotal int `json:"scoredTotal,omitempty"`
	// MissedTotal holds the value of the "missedTotal" field.
	MissedTotal int `json:"missedTotal,omitempty"`
	// ScoredPercentage holds the value of the "scoredPercentage" field.
	ScoredPercentage string `json:"scoredPercentage,omitempty"`
	// MissedPercentage holds the value of the "missedPercentage" field.
	MissedPercentage string `json:"missedPercentage,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TSPenaltyQuery when eager-loading is set.
	Edges              TSPenaltyEdges `json:"edges"`
	team_penalty_stats *int
	selectValues       sql.SelectValues
}

// TSPenaltyEdges holds the relations/edges for other nodes in the graph.
type TSPenaltyEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TSPenaltyEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TSPenalty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tspenalty.FieldID, tspenalty.FieldTotal, tspenalty.FieldScoredTotal, tspenalty.FieldMissedTotal:
			values[i] = new(sql.NullInt64)
		case tspenalty.FieldScoredPercentage, tspenalty.FieldMissedPercentage:
			values[i] = new(sql.NullString)
		case tspenalty.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case tspenalty.ForeignKeys[0]: // team_penalty_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TSPenalty fields.
func (tp *TSPenalty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tspenalty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tp.ID = int(value.Int64)
		case tspenalty.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				tp.Total = int(value.Int64)
			}
		case tspenalty.FieldScoredTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scoredTotal", values[i])
			} else if value.Valid {
				tp.ScoredTotal = int(value.Int64)
			}
		case tspenalty.FieldMissedTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field missedTotal", values[i])
			} else if value.Valid {
				tp.MissedTotal = int(value.Int64)
			}
		case tspenalty.FieldScoredPercentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scoredPercentage", values[i])
			} else if value.Valid {
				tp.ScoredPercentage = value.String
			}
		case tspenalty.FieldMissedPercentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field missedPercentage", values[i])
			} else if value.Valid {
				tp.MissedPercentage = value.String
			}
		case tspenalty.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				tp.LastUpdated = value.Time
			}
		case tspenalty.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_penalty_stats", value)
			} else if value.Valid {
				tp.team_penalty_stats = new(int)
				*tp.team_penalty_stats = int(value.Int64)
			}
		default:
			tp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TSPenalty.
// This includes values selected through modifiers, order, etc.
func (tp *TSPenalty) Value(name string) (ent.Value, error) {
	return tp.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the TSPenalty entity.
func (tp *TSPenalty) QueryTeam() *TeamQuery {
	return NewTSPenaltyClient(tp.config).QueryTeam(tp)
}

// Update returns a builder for updating this TSPenalty.
// Note that you need to call TSPenalty.Unwrap() before calling this method if this TSPenalty
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TSPenalty) Update() *TSPenaltyUpdateOne {
	return NewTSPenaltyClient(tp.config).UpdateOne(tp)
}

// Unwrap unwraps the TSPenalty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TSPenalty) Unwrap() *TSPenalty {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TSPenalty is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TSPenalty) String() string {
	var builder strings.Builder
	builder.WriteString("TSPenalty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tp.ID))
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", tp.Total))
	builder.WriteString(", ")
	builder.WriteString("scoredTotal=")
	builder.WriteString(fmt.Sprintf("%v", tp.ScoredTotal))
	builder.WriteString(", ")
	builder.WriteString("missedTotal=")
	builder.WriteString(fmt.Sprintf("%v", tp.MissedTotal))
	builder.WriteString(", ")
	builder.WriteString("scoredPercentage=")
	builder.WriteString(tp.ScoredPercentage)
	builder.WriteString(", ")
	builder.WriteString("missedPercentage=")
	builder.WriteString(tp.MissedPercentage)
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(tp.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TSPenalties is a parsable slice of TSPenalty.
type TSPenalties []*TSPenalty
