// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/fixture"
	"mapeleven/db/ent/fixturelineups"
	"mapeleven/db/ent/matchplayer"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/team"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureLineupsUpdate is the builder for updating FixtureLineups entities.
type FixtureLineupsUpdate struct {
	config
	hooks    []Hook
	mutation *FixtureLineupsMutation
}

// Where appends a list predicates to the FixtureLineupsUpdate builder.
func (flu *FixtureLineupsUpdate) Where(ps ...predicate.FixtureLineups) *FixtureLineupsUpdate {
	flu.mutation.Where(ps...)
	return flu
}

// SetFormation sets the "formation" field.
func (flu *FixtureLineupsUpdate) SetFormation(s string) *FixtureLineupsUpdate {
	flu.mutation.SetFormation(s)
	return flu
}

// SetLastUpdated sets the "lastUpdated" field.
func (flu *FixtureLineupsUpdate) SetLastUpdated(t time.Time) *FixtureLineupsUpdate {
	flu.mutation.SetLastUpdated(t)
	return flu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (flu *FixtureLineupsUpdate) ClearLastUpdated() *FixtureLineupsUpdate {
	flu.mutation.ClearLastUpdated()
	return flu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (flu *FixtureLineupsUpdate) SetTeamID(id int) *FixtureLineupsUpdate {
	flu.mutation.SetTeamID(id)
	return flu
}

// SetTeam sets the "team" edge to the Team entity.
func (flu *FixtureLineupsUpdate) SetTeam(t *Team) *FixtureLineupsUpdate {
	return flu.SetTeamID(t.ID)
}

// SetFixtureID sets the "fixture" edge to the Fixture entity by ID.
func (flu *FixtureLineupsUpdate) SetFixtureID(id int) *FixtureLineupsUpdate {
	flu.mutation.SetFixtureID(id)
	return flu
}

// SetFixture sets the "fixture" edge to the Fixture entity.
func (flu *FixtureLineupsUpdate) SetFixture(f *Fixture) *FixtureLineupsUpdate {
	return flu.SetFixtureID(f.ID)
}

// AddLineupPlayerIDs adds the "lineupPlayer" edge to the MatchPlayer entity by IDs.
func (flu *FixtureLineupsUpdate) AddLineupPlayerIDs(ids ...int) *FixtureLineupsUpdate {
	flu.mutation.AddLineupPlayerIDs(ids...)
	return flu
}

// AddLineupPlayer adds the "lineupPlayer" edges to the MatchPlayer entity.
func (flu *FixtureLineupsUpdate) AddLineupPlayer(m ...*MatchPlayer) *FixtureLineupsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return flu.AddLineupPlayerIDs(ids...)
}

// Mutation returns the FixtureLineupsMutation object of the builder.
func (flu *FixtureLineupsUpdate) Mutation() *FixtureLineupsMutation {
	return flu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (flu *FixtureLineupsUpdate) ClearTeam() *FixtureLineupsUpdate {
	flu.mutation.ClearTeam()
	return flu
}

// ClearFixture clears the "fixture" edge to the Fixture entity.
func (flu *FixtureLineupsUpdate) ClearFixture() *FixtureLineupsUpdate {
	flu.mutation.ClearFixture()
	return flu
}

// ClearLineupPlayer clears all "lineupPlayer" edges to the MatchPlayer entity.
func (flu *FixtureLineupsUpdate) ClearLineupPlayer() *FixtureLineupsUpdate {
	flu.mutation.ClearLineupPlayer()
	return flu
}

// RemoveLineupPlayerIDs removes the "lineupPlayer" edge to MatchPlayer entities by IDs.
func (flu *FixtureLineupsUpdate) RemoveLineupPlayerIDs(ids ...int) *FixtureLineupsUpdate {
	flu.mutation.RemoveLineupPlayerIDs(ids...)
	return flu
}

// RemoveLineupPlayer removes "lineupPlayer" edges to MatchPlayer entities.
func (flu *FixtureLineupsUpdate) RemoveLineupPlayer(m ...*MatchPlayer) *FixtureLineupsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return flu.RemoveLineupPlayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (flu *FixtureLineupsUpdate) Save(ctx context.Context) (int, error) {
	flu.defaults()
	return withHooks[int, FixtureLineupsMutation](ctx, flu.sqlSave, flu.mutation, flu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (flu *FixtureLineupsUpdate) SaveX(ctx context.Context) int {
	affected, err := flu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (flu *FixtureLineupsUpdate) Exec(ctx context.Context) error {
	_, err := flu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flu *FixtureLineupsUpdate) ExecX(ctx context.Context) {
	if err := flu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (flu *FixtureLineupsUpdate) defaults() {
	if _, ok := flu.mutation.LastUpdated(); !ok && !flu.mutation.LastUpdatedCleared() {
		v := fixturelineups.UpdateDefaultLastUpdated()
		flu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (flu *FixtureLineupsUpdate) check() error {
	if _, ok := flu.mutation.TeamID(); flu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureLineups.team"`)
	}
	if _, ok := flu.mutation.FixtureID(); flu.mutation.FixtureCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureLineups.fixture"`)
	}
	return nil
}

func (flu *FixtureLineupsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := flu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixturelineups.Table, fixturelineups.Columns, sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt))
	if ps := flu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := flu.mutation.Formation(); ok {
		_spec.SetField(fixturelineups.FieldFormation, field.TypeString, value)
	}
	if value, ok := flu.mutation.LastUpdated(); ok {
		_spec.SetField(fixturelineups.FieldLastUpdated, field.TypeTime, value)
	}
	if flu.mutation.LastUpdatedCleared() {
		_spec.ClearField(fixturelineups.FieldLastUpdated, field.TypeTime)
	}
	if flu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.TeamTable,
			Columns: []string{fixturelineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := flu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.TeamTable,
			Columns: []string{fixturelineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if flu.mutation.FixtureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.FixtureTable,
			Columns: []string{fixturelineups.FixtureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := flu.mutation.FixtureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.FixtureTable,
			Columns: []string{fixturelineups.FixtureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if flu.mutation.LineupPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixturelineups.LineupPlayerTable,
			Columns: []string{fixturelineups.LineupPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := flu.mutation.RemovedLineupPlayerIDs(); len(nodes) > 0 && !flu.mutation.LineupPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixturelineups.LineupPlayerTable,
			Columns: []string{fixturelineups.LineupPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := flu.mutation.LineupPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixturelineups.LineupPlayerTable,
			Columns: []string{fixturelineups.LineupPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, flu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixturelineups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	flu.mutation.done = true
	return n, nil
}

// FixtureLineupsUpdateOne is the builder for updating a single FixtureLineups entity.
type FixtureLineupsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FixtureLineupsMutation
}

// SetFormation sets the "formation" field.
func (fluo *FixtureLineupsUpdateOne) SetFormation(s string) *FixtureLineupsUpdateOne {
	fluo.mutation.SetFormation(s)
	return fluo
}

// SetLastUpdated sets the "lastUpdated" field.
func (fluo *FixtureLineupsUpdateOne) SetLastUpdated(t time.Time) *FixtureLineupsUpdateOne {
	fluo.mutation.SetLastUpdated(t)
	return fluo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (fluo *FixtureLineupsUpdateOne) ClearLastUpdated() *FixtureLineupsUpdateOne {
	fluo.mutation.ClearLastUpdated()
	return fluo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (fluo *FixtureLineupsUpdateOne) SetTeamID(id int) *FixtureLineupsUpdateOne {
	fluo.mutation.SetTeamID(id)
	return fluo
}

// SetTeam sets the "team" edge to the Team entity.
func (fluo *FixtureLineupsUpdateOne) SetTeam(t *Team) *FixtureLineupsUpdateOne {
	return fluo.SetTeamID(t.ID)
}

// SetFixtureID sets the "fixture" edge to the Fixture entity by ID.
func (fluo *FixtureLineupsUpdateOne) SetFixtureID(id int) *FixtureLineupsUpdateOne {
	fluo.mutation.SetFixtureID(id)
	return fluo
}

// SetFixture sets the "fixture" edge to the Fixture entity.
func (fluo *FixtureLineupsUpdateOne) SetFixture(f *Fixture) *FixtureLineupsUpdateOne {
	return fluo.SetFixtureID(f.ID)
}

// AddLineupPlayerIDs adds the "lineupPlayer" edge to the MatchPlayer entity by IDs.
func (fluo *FixtureLineupsUpdateOne) AddLineupPlayerIDs(ids ...int) *FixtureLineupsUpdateOne {
	fluo.mutation.AddLineupPlayerIDs(ids...)
	return fluo
}

// AddLineupPlayer adds the "lineupPlayer" edges to the MatchPlayer entity.
func (fluo *FixtureLineupsUpdateOne) AddLineupPlayer(m ...*MatchPlayer) *FixtureLineupsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fluo.AddLineupPlayerIDs(ids...)
}

// Mutation returns the FixtureLineupsMutation object of the builder.
func (fluo *FixtureLineupsUpdateOne) Mutation() *FixtureLineupsMutation {
	return fluo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (fluo *FixtureLineupsUpdateOne) ClearTeam() *FixtureLineupsUpdateOne {
	fluo.mutation.ClearTeam()
	return fluo
}

// ClearFixture clears the "fixture" edge to the Fixture entity.
func (fluo *FixtureLineupsUpdateOne) ClearFixture() *FixtureLineupsUpdateOne {
	fluo.mutation.ClearFixture()
	return fluo
}

// ClearLineupPlayer clears all "lineupPlayer" edges to the MatchPlayer entity.
func (fluo *FixtureLineupsUpdateOne) ClearLineupPlayer() *FixtureLineupsUpdateOne {
	fluo.mutation.ClearLineupPlayer()
	return fluo
}

// RemoveLineupPlayerIDs removes the "lineupPlayer" edge to MatchPlayer entities by IDs.
func (fluo *FixtureLineupsUpdateOne) RemoveLineupPlayerIDs(ids ...int) *FixtureLineupsUpdateOne {
	fluo.mutation.RemoveLineupPlayerIDs(ids...)
	return fluo
}

// RemoveLineupPlayer removes "lineupPlayer" edges to MatchPlayer entities.
func (fluo *FixtureLineupsUpdateOne) RemoveLineupPlayer(m ...*MatchPlayer) *FixtureLineupsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fluo.RemoveLineupPlayerIDs(ids...)
}

// Where appends a list predicates to the FixtureLineupsUpdate builder.
func (fluo *FixtureLineupsUpdateOne) Where(ps ...predicate.FixtureLineups) *FixtureLineupsUpdateOne {
	fluo.mutation.Where(ps...)
	return fluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fluo *FixtureLineupsUpdateOne) Select(field string, fields ...string) *FixtureLineupsUpdateOne {
	fluo.fields = append([]string{field}, fields...)
	return fluo
}

// Save executes the query and returns the updated FixtureLineups entity.
func (fluo *FixtureLineupsUpdateOne) Save(ctx context.Context) (*FixtureLineups, error) {
	fluo.defaults()
	return withHooks[*FixtureLineups, FixtureLineupsMutation](ctx, fluo.sqlSave, fluo.mutation, fluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fluo *FixtureLineupsUpdateOne) SaveX(ctx context.Context) *FixtureLineups {
	node, err := fluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fluo *FixtureLineupsUpdateOne) Exec(ctx context.Context) error {
	_, err := fluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fluo *FixtureLineupsUpdateOne) ExecX(ctx context.Context) {
	if err := fluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fluo *FixtureLineupsUpdateOne) defaults() {
	if _, ok := fluo.mutation.LastUpdated(); !ok && !fluo.mutation.LastUpdatedCleared() {
		v := fixturelineups.UpdateDefaultLastUpdated()
		fluo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fluo *FixtureLineupsUpdateOne) check() error {
	if _, ok := fluo.mutation.TeamID(); fluo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureLineups.team"`)
	}
	if _, ok := fluo.mutation.FixtureID(); fluo.mutation.FixtureCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FixtureLineups.fixture"`)
	}
	return nil
}

func (fluo *FixtureLineupsUpdateOne) sqlSave(ctx context.Context) (_node *FixtureLineups, err error) {
	if err := fluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixturelineups.Table, fixturelineups.Columns, sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt))
	id, ok := fluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FixtureLineups.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixturelineups.FieldID)
		for _, f := range fields {
			if !fixturelineups.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fixturelineups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fluo.mutation.Formation(); ok {
		_spec.SetField(fixturelineups.FieldFormation, field.TypeString, value)
	}
	if value, ok := fluo.mutation.LastUpdated(); ok {
		_spec.SetField(fixturelineups.FieldLastUpdated, field.TypeTime, value)
	}
	if fluo.mutation.LastUpdatedCleared() {
		_spec.ClearField(fixturelineups.FieldLastUpdated, field.TypeTime)
	}
	if fluo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.TeamTable,
			Columns: []string{fixturelineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fluo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.TeamTable,
			Columns: []string{fixturelineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fluo.mutation.FixtureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.FixtureTable,
			Columns: []string{fixturelineups.FixtureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fluo.mutation.FixtureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.FixtureTable,
			Columns: []string{fixturelineups.FixtureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fluo.mutation.LineupPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixturelineups.LineupPlayerTable,
			Columns: []string{fixturelineups.LineupPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fluo.mutation.RemovedLineupPlayerIDs(); len(nodes) > 0 && !fluo.mutation.LineupPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixturelineups.LineupPlayerTable,
			Columns: []string{fixturelineups.LineupPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fluo.mutation.LineupPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixturelineups.LineupPlayerTable,
			Columns: []string{fixturelineups.LineupPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FixtureLineups{config: fluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixturelineups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fluo.mutation.done = true
	return _node, nil
}
