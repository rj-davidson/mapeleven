// Code generated by ent, DO NOT EDIT.

package team

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the team type in the database.
	Label = "team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldFounded holds the string denoting the founded field in the database.
	FieldFounded = "founded"
	// FieldNational holds the string denoting the national field in the database.
	FieldNational = "national"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// EdgeStandings holds the string denoting the standings edge name in mutations.
	EdgeStandings = "standings"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// EdgeLeagues holds the string denoting the leagues edge name in mutations.
	EdgeLeagues = "leagues"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// EdgeTeamSeasons holds the string denoting the teamseasons edge name in mutations.
	EdgeTeamSeasons = "teamSeasons"
	// EdgeHomeFixtures holds the string denoting the homefixtures edge name in mutations.
	EdgeHomeFixtures = "homeFixtures"
	// EdgeAwayFixtures holds the string denoting the awayfixtures edge name in mutations.
	EdgeAwayFixtures = "awayFixtures"
	// Table holds the table name of the team in the database.
	Table = "teams"
	// StandingsTable is the table that holds the standings relation/edge.
	StandingsTable = "standings"
	// StandingsInverseTable is the table name for the Standings entity.
	// It exists in this package in order to avoid circular dependency with the "standings" package.
	StandingsInverseTable = "standings"
	// StandingsColumn is the table column denoting the standings relation/edge.
	StandingsColumn = "team_standings"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "teams"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "country_teams"
	// LeaguesTable is the table that holds the leagues relation/edge. The primary key declared below.
	LeaguesTable = "league_teams"
	// LeaguesInverseTable is the table name for the League entity.
	// It exists in this package in order to avoid circular dependency with the "league" package.
	LeaguesInverseTable = "leagues"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "team_players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
	// TeamSeasonsTable is the table that holds the teamSeasons relation/edge.
	TeamSeasonsTable = "team_seasons"
	// TeamSeasonsInverseTable is the table name for the TeamSeason entity.
	// It exists in this package in order to avoid circular dependency with the "teamseason" package.
	TeamSeasonsInverseTable = "team_seasons"
	// TeamSeasonsColumn is the table column denoting the teamSeasons relation/edge.
	TeamSeasonsColumn = "team_team_seasons"
	// HomeFixturesTable is the table that holds the homeFixtures relation/edge.
	HomeFixturesTable = "fixtures"
	// HomeFixturesInverseTable is the table name for the Fixture entity.
	// It exists in this package in order to avoid circular dependency with the "fixture" package.
	HomeFixturesInverseTable = "fixtures"
	// HomeFixturesColumn is the table column denoting the homeFixtures relation/edge.
	HomeFixturesColumn = "team_home_fixtures"
	// AwayFixturesTable is the table that holds the awayFixtures relation/edge.
	AwayFixturesTable = "fixtures"
	// AwayFixturesInverseTable is the table name for the Fixture entity.
	// It exists in this package in order to avoid circular dependency with the "fixture" package.
	AwayFixturesInverseTable = "fixtures"
	// AwayFixturesColumn is the table column denoting the awayFixtures relation/edge.
	AwayFixturesColumn = "team_away_fixtures"
)

// Columns holds all SQL columns for team fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldName,
	FieldCode,
	FieldFounded,
	FieldNational,
	FieldLogo,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "teams"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"country_teams",
}

var (
	// LeaguesPrimaryKey and LeaguesColumn2 are the table columns denoting the
	// primary key for the leagues relation (M2M).
	LeaguesPrimaryKey = []string{"league_id", "team_id"}
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"team_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// Order defines the ordering method for the Team queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByFounded orders the results by the founded field.
func ByFounded(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFounded, opts...).ToFunc()
}

// ByNational orders the results by the national field.
func ByNational(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNational, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByStandingsCount orders the results by standings count.
func ByStandingsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStandingsStep(), opts...)
	}
}

// ByStandings orders the results by standings terms.
func ByStandings(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStandingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountryField orders the results by country field.
func ByCountryField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryStep(), sql.OrderByField(field, opts...))
	}
}

// ByLeaguesCount orders the results by leagues count.
func ByLeaguesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLeaguesStep(), opts...)
	}
}

// ByLeagues orders the results by leagues terms.
func ByLeagues(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeaguesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlayersCount orders the results by players count.
func ByPlayersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayersStep(), opts...)
	}
}

// ByPlayers orders the results by players terms.
func ByPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTeamSeasonsCount orders the results by teamSeasons count.
func ByTeamSeasonsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeamSeasonsStep(), opts...)
	}
}

// ByTeamSeasons orders the results by teamSeasons terms.
func ByTeamSeasons(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamSeasonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHomeFixturesCount orders the results by homeFixtures count.
func ByHomeFixturesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHomeFixturesStep(), opts...)
	}
}

// ByHomeFixtures orders the results by homeFixtures terms.
func ByHomeFixtures(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHomeFixturesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAwayFixturesCount orders the results by awayFixtures count.
func ByAwayFixturesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAwayFixturesStep(), opts...)
	}
}

// ByAwayFixtures orders the results by awayFixtures terms.
func ByAwayFixtures(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAwayFixturesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStandingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StandingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StandingsTable, StandingsColumn),
	)
}
func newCountryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
	)
}
func newLeaguesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeaguesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LeaguesTable, LeaguesPrimaryKey...),
	)
}
func newPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PlayersTable, PlayersPrimaryKey...),
	)
}
func newTeamSeasonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamSeasonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TeamSeasonsTable, TeamSeasonsColumn),
	)
}
func newHomeFixturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HomeFixturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HomeFixturesTable, HomeFixturesColumn),
	)
}
func newAwayFixturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AwayFixturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AwayFixturesTable, AwayFixturesColumn),
	)
}
