// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"mapeleven/db/ent/fixture"
	"mapeleven/db/ent/fixtureevents"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/team"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureEventsQuery is the builder for querying FixtureEvents entities.
type FixtureEventsQuery struct {
	config
	ctx         *QueryContext
	order       []fixtureevents.Order
	inters      []Interceptor
	predicates  []predicate.FixtureEvents
	withPlayer  *PlayerQuery
	withAssist  *PlayerQuery
	withTeam    *TeamQuery
	withFixture *FixtureQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FixtureEventsQuery builder.
func (feq *FixtureEventsQuery) Where(ps ...predicate.FixtureEvents) *FixtureEventsQuery {
	feq.predicates = append(feq.predicates, ps...)
	return feq
}

// Limit the number of records to be returned by this query.
func (feq *FixtureEventsQuery) Limit(limit int) *FixtureEventsQuery {
	feq.ctx.Limit = &limit
	return feq
}

// Offset to start from.
func (feq *FixtureEventsQuery) Offset(offset int) *FixtureEventsQuery {
	feq.ctx.Offset = &offset
	return feq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (feq *FixtureEventsQuery) Unique(unique bool) *FixtureEventsQuery {
	feq.ctx.Unique = &unique
	return feq
}

// Order specifies how the records should be ordered.
func (feq *FixtureEventsQuery) Order(o ...fixtureevents.Order) *FixtureEventsQuery {
	feq.order = append(feq.order, o...)
	return feq
}

// QueryPlayer chains the current query on the "player" edge.
func (feq *FixtureEventsQuery) QueryPlayer() *PlayerQuery {
	query := (&PlayerClient{config: feq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixtureevents.Table, fixtureevents.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixtureevents.PlayerTable, fixtureevents.PlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssist chains the current query on the "assist" edge.
func (feq *FixtureEventsQuery) QueryAssist() *PlayerQuery {
	query := (&PlayerClient{config: feq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixtureevents.Table, fixtureevents.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixtureevents.AssistTable, fixtureevents.AssistColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeam chains the current query on the "team" edge.
func (feq *FixtureEventsQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: feq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixtureevents.Table, fixtureevents.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixtureevents.TeamTable, fixtureevents.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixture chains the current query on the "fixture" edge.
func (feq *FixtureEventsQuery) QueryFixture() *FixtureQuery {
	query := (&FixtureClient{config: feq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixtureevents.Table, fixtureevents.FieldID, selector),
			sqlgraph.To(fixture.Table, fixture.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixtureevents.FixtureTable, fixtureevents.FixtureColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FixtureEvents entity from the query.
// Returns a *NotFoundError when no FixtureEvents was found.
func (feq *FixtureEventsQuery) First(ctx context.Context) (*FixtureEvents, error) {
	nodes, err := feq.Limit(1).All(setContextOp(ctx, feq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{fixtureevents.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (feq *FixtureEventsQuery) FirstX(ctx context.Context) *FixtureEvents {
	node, err := feq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FixtureEvents ID from the query.
// Returns a *NotFoundError when no FixtureEvents ID was found.
func (feq *FixtureEventsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = feq.Limit(1).IDs(setContextOp(ctx, feq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fixtureevents.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (feq *FixtureEventsQuery) FirstIDX(ctx context.Context) int {
	id, err := feq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FixtureEvents entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FixtureEvents entity is found.
// Returns a *NotFoundError when no FixtureEvents entities are found.
func (feq *FixtureEventsQuery) Only(ctx context.Context) (*FixtureEvents, error) {
	nodes, err := feq.Limit(2).All(setContextOp(ctx, feq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{fixtureevents.Label}
	default:
		return nil, &NotSingularError{fixtureevents.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (feq *FixtureEventsQuery) OnlyX(ctx context.Context) *FixtureEvents {
	node, err := feq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FixtureEvents ID in the query.
// Returns a *NotSingularError when more than one FixtureEvents ID is found.
// Returns a *NotFoundError when no entities are found.
func (feq *FixtureEventsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = feq.Limit(2).IDs(setContextOp(ctx, feq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fixtureevents.Label}
	default:
		err = &NotSingularError{fixtureevents.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (feq *FixtureEventsQuery) OnlyIDX(ctx context.Context) int {
	id, err := feq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FixtureEventsSlice.
func (feq *FixtureEventsQuery) All(ctx context.Context) ([]*FixtureEvents, error) {
	ctx = setContextOp(ctx, feq.ctx, "All")
	if err := feq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FixtureEvents, *FixtureEventsQuery]()
	return withInterceptors[[]*FixtureEvents](ctx, feq, qr, feq.inters)
}

// AllX is like All, but panics if an error occurs.
func (feq *FixtureEventsQuery) AllX(ctx context.Context) []*FixtureEvents {
	nodes, err := feq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FixtureEvents IDs.
func (feq *FixtureEventsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if feq.ctx.Unique == nil && feq.path != nil {
		feq.Unique(true)
	}
	ctx = setContextOp(ctx, feq.ctx, "IDs")
	if err = feq.Select(fixtureevents.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (feq *FixtureEventsQuery) IDsX(ctx context.Context) []int {
	ids, err := feq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (feq *FixtureEventsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, feq.ctx, "Count")
	if err := feq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, feq, querierCount[*FixtureEventsQuery](), feq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (feq *FixtureEventsQuery) CountX(ctx context.Context) int {
	count, err := feq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (feq *FixtureEventsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, feq.ctx, "Exist")
	switch _, err := feq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (feq *FixtureEventsQuery) ExistX(ctx context.Context) bool {
	exist, err := feq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FixtureEventsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (feq *FixtureEventsQuery) Clone() *FixtureEventsQuery {
	if feq == nil {
		return nil
	}
	return &FixtureEventsQuery{
		config:      feq.config,
		ctx:         feq.ctx.Clone(),
		order:       append([]fixtureevents.Order{}, feq.order...),
		inters:      append([]Interceptor{}, feq.inters...),
		predicates:  append([]predicate.FixtureEvents{}, feq.predicates...),
		withPlayer:  feq.withPlayer.Clone(),
		withAssist:  feq.withAssist.Clone(),
		withTeam:    feq.withTeam.Clone(),
		withFixture: feq.withFixture.Clone(),
		// clone intermediate query.
		sql:  feq.sql.Clone(),
		path: feq.path,
	}
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FixtureEventsQuery) WithPlayer(opts ...func(*PlayerQuery)) *FixtureEventsQuery {
	query := (&PlayerClient{config: feq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	feq.withPlayer = query
	return feq
}

// WithAssist tells the query-builder to eager-load the nodes that are connected to
// the "assist" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FixtureEventsQuery) WithAssist(opts ...func(*PlayerQuery)) *FixtureEventsQuery {
	query := (&PlayerClient{config: feq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	feq.withAssist = query
	return feq
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FixtureEventsQuery) WithTeam(opts ...func(*TeamQuery)) *FixtureEventsQuery {
	query := (&TeamClient{config: feq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	feq.withTeam = query
	return feq
}

// WithFixture tells the query-builder to eager-load the nodes that are connected to
// the "fixture" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FixtureEventsQuery) WithFixture(opts ...func(*FixtureQuery)) *FixtureEventsQuery {
	query := (&FixtureClient{config: feq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	feq.withFixture = query
	return feq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ElapsedTime int `json:"elapsedTime,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FixtureEvents.Query().
//		GroupBy(fixtureevents.FieldElapsedTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (feq *FixtureEventsQuery) GroupBy(field string, fields ...string) *FixtureEventsGroupBy {
	feq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FixtureEventsGroupBy{build: feq}
	grbuild.flds = &feq.ctx.Fields
	grbuild.label = fixtureevents.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ElapsedTime int `json:"elapsedTime,omitempty"`
//	}
//
//	client.FixtureEvents.Query().
//		Select(fixtureevents.FieldElapsedTime).
//		Scan(ctx, &v)
func (feq *FixtureEventsQuery) Select(fields ...string) *FixtureEventsSelect {
	feq.ctx.Fields = append(feq.ctx.Fields, fields...)
	sbuild := &FixtureEventsSelect{FixtureEventsQuery: feq}
	sbuild.label = fixtureevents.Label
	sbuild.flds, sbuild.scan = &feq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FixtureEventsSelect configured with the given aggregations.
func (feq *FixtureEventsQuery) Aggregate(fns ...AggregateFunc) *FixtureEventsSelect {
	return feq.Select().Aggregate(fns...)
}

func (feq *FixtureEventsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range feq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, feq); err != nil {
				return err
			}
		}
	}
	for _, f := range feq.ctx.Fields {
		if !fixtureevents.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if feq.path != nil {
		prev, err := feq.path(ctx)
		if err != nil {
			return err
		}
		feq.sql = prev
	}
	return nil
}

func (feq *FixtureEventsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FixtureEvents, error) {
	var (
		nodes       = []*FixtureEvents{}
		withFKs     = feq.withFKs
		_spec       = feq.querySpec()
		loadedTypes = [4]bool{
			feq.withPlayer != nil,
			feq.withAssist != nil,
			feq.withTeam != nil,
			feq.withFixture != nil,
		}
	)
	if feq.withPlayer != nil || feq.withAssist != nil || feq.withTeam != nil || feq.withFixture != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, fixtureevents.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FixtureEvents).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FixtureEvents{config: feq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, feq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := feq.withPlayer; query != nil {
		if err := feq.loadPlayer(ctx, query, nodes, nil,
			func(n *FixtureEvents, e *Player) { n.Edges.Player = e }); err != nil {
			return nil, err
		}
	}
	if query := feq.withAssist; query != nil {
		if err := feq.loadAssist(ctx, query, nodes, nil,
			func(n *FixtureEvents, e *Player) { n.Edges.Assist = e }); err != nil {
			return nil, err
		}
	}
	if query := feq.withTeam; query != nil {
		if err := feq.loadTeam(ctx, query, nodes, nil,
			func(n *FixtureEvents, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	if query := feq.withFixture; query != nil {
		if err := feq.loadFixture(ctx, query, nodes, nil,
			func(n *FixtureEvents, e *Fixture) { n.Edges.Fixture = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (feq *FixtureEventsQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*FixtureEvents, init func(*FixtureEvents), assign func(*FixtureEvents, *Player)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FixtureEvents)
	for i := range nodes {
		if nodes[i].player_player_events == nil {
			continue
		}
		fk := *nodes[i].player_player_events
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_player_events" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (feq *FixtureEventsQuery) loadAssist(ctx context.Context, query *PlayerQuery, nodes []*FixtureEvents, init func(*FixtureEvents), assign func(*FixtureEvents, *Player)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FixtureEvents)
	for i := range nodes {
		if nodes[i].player_assist_events == nil {
			continue
		}
		fk := *nodes[i].player_assist_events
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_assist_events" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (feq *FixtureEventsQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*FixtureEvents, init func(*FixtureEvents), assign func(*FixtureEvents, *Team)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FixtureEvents)
	for i := range nodes {
		if nodes[i].team_team_fixture_events == nil {
			continue
		}
		fk := *nodes[i].team_team_fixture_events
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_team_fixture_events" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (feq *FixtureEventsQuery) loadFixture(ctx context.Context, query *FixtureQuery, nodes []*FixtureEvents, init func(*FixtureEvents), assign func(*FixtureEvents, *Fixture)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FixtureEvents)
	for i := range nodes {
		if nodes[i].fixture_fixture_events == nil {
			continue
		}
		fk := *nodes[i].fixture_fixture_events
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(fixture.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "fixture_fixture_events" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (feq *FixtureEventsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := feq.querySpec()
	_spec.Node.Columns = feq.ctx.Fields
	if len(feq.ctx.Fields) > 0 {
		_spec.Unique = feq.ctx.Unique != nil && *feq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, feq.driver, _spec)
}

func (feq *FixtureEventsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(fixtureevents.Table, fixtureevents.Columns, sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt))
	_spec.From = feq.sql
	if unique := feq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if feq.path != nil {
		_spec.Unique = true
	}
	if fields := feq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixtureevents.FieldID)
		for i := range fields {
			if fields[i] != fixtureevents.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := feq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := feq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := feq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := feq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (feq *FixtureEventsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(feq.driver.Dialect())
	t1 := builder.Table(fixtureevents.Table)
	columns := feq.ctx.Fields
	if len(columns) == 0 {
		columns = fixtureevents.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if feq.sql != nil {
		selector = feq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if feq.ctx.Unique != nil && *feq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range feq.predicates {
		p(selector)
	}
	for _, p := range feq.order {
		p(selector)
	}
	if offset := feq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := feq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FixtureEventsGroupBy is the group-by builder for FixtureEvents entities.
type FixtureEventsGroupBy struct {
	selector
	build *FixtureEventsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fegb *FixtureEventsGroupBy) Aggregate(fns ...AggregateFunc) *FixtureEventsGroupBy {
	fegb.fns = append(fegb.fns, fns...)
	return fegb
}

// Scan applies the selector query and scans the result into the given value.
func (fegb *FixtureEventsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fegb.build.ctx, "GroupBy")
	if err := fegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FixtureEventsQuery, *FixtureEventsGroupBy](ctx, fegb.build, fegb, fegb.build.inters, v)
}

func (fegb *FixtureEventsGroupBy) sqlScan(ctx context.Context, root *FixtureEventsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fegb.fns))
	for _, fn := range fegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fegb.flds)+len(fegb.fns))
		for _, f := range *fegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FixtureEventsSelect is the builder for selecting fields of FixtureEvents entities.
type FixtureEventsSelect struct {
	*FixtureEventsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fes *FixtureEventsSelect) Aggregate(fns ...AggregateFunc) *FixtureEventsSelect {
	fes.fns = append(fes.fns, fns...)
	return fes
}

// Scan applies the selector query and scans the result into the given value.
func (fes *FixtureEventsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fes.ctx, "Select")
	if err := fes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FixtureEventsQuery, *FixtureEventsSelect](ctx, fes.FixtureEventsQuery, fes, fes.inters, v)
}

func (fes *FixtureEventsSelect) sqlScan(ctx context.Context, root *FixtureEventsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fes.fns))
	for _, fn := range fes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
