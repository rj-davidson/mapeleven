// Code generated by ent, DO NOT EDIT.

package teamseason

import (
	"mapeleven/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldLTE(FieldID, id))
}

// TeamSeasonID applies equality check predicate on the "team_season_id" field. It's identical to TeamSeasonIDEQ.
func TeamSeasonID(v int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldEQ(FieldTeamSeasonID, v))
}

// TeamSeasonIDEQ applies the EQ predicate on the "team_season_id" field.
func TeamSeasonIDEQ(v int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldEQ(FieldTeamSeasonID, v))
}

// TeamSeasonIDNEQ applies the NEQ predicate on the "team_season_id" field.
func TeamSeasonIDNEQ(v int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldNEQ(FieldTeamSeasonID, v))
}

// TeamSeasonIDIn applies the In predicate on the "team_season_id" field.
func TeamSeasonIDIn(vs ...int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldIn(FieldTeamSeasonID, vs...))
}

// TeamSeasonIDNotIn applies the NotIn predicate on the "team_season_id" field.
func TeamSeasonIDNotIn(vs ...int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldNotIn(FieldTeamSeasonID, vs...))
}

// TeamSeasonIDGT applies the GT predicate on the "team_season_id" field.
func TeamSeasonIDGT(v int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldGT(FieldTeamSeasonID, v))
}

// TeamSeasonIDGTE applies the GTE predicate on the "team_season_id" field.
func TeamSeasonIDGTE(v int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldGTE(FieldTeamSeasonID, v))
}

// TeamSeasonIDLT applies the LT predicate on the "team_season_id" field.
func TeamSeasonIDLT(v int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldLT(FieldTeamSeasonID, v))
}

// TeamSeasonIDLTE applies the LTE predicate on the "team_season_id" field.
func TeamSeasonIDLTE(v int) predicate.TeamSeason {
	return predicate.TeamSeason(sql.FieldLTE(FieldTeamSeasonID, v))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeason applies the HasEdge predicate on the "season" edge.
func HasSeason() predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonWith applies the HasEdge predicate on the "season" edge with a given conditions (other predicates).
func HasSeasonWith(preds ...predicate.Season) predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		step := newSeasonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerTeamSeasons applies the HasEdge predicate on the "playerTeamSeasons" edge.
func HasPlayerTeamSeasons() predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayerTeamSeasonsTable, PlayerTeamSeasonsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerTeamSeasonsWith applies the HasEdge predicate on the "playerTeamSeasons" edge with a given conditions (other predicates).
func HasPlayerTeamSeasonsWith(preds ...predicate.PlayerTeamSeason) predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		step := newPlayerTeamSeasonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TeamSeason) predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TeamSeason) predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TeamSeason) predicate.TeamSeason {
	return predicate.TeamSeason(func(s *sql.Selector) {
		p(s.Not())
	})
}
