// Code generated by ent, DO NOT EDIT.

package teamseason

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the teamseason type in the database.
	Label = "team_season"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTeamSeasonID holds the string denoting the team_season_id field in the database.
	FieldTeamSeasonID = "team_season_id"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeSeason holds the string denoting the season edge name in mutations.
	EdgeSeason = "season"
	// EdgePlayerTeamSeasons holds the string denoting the playerteamseasons edge name in mutations.
	EdgePlayerTeamSeasons = "playerTeamSeasons"
	// Table holds the table name of the teamseason in the database.
	Table = "team_seasons"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "team_seasons"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_team_seasons"
	// SeasonTable is the table that holds the season relation/edge.
	SeasonTable = "team_seasons"
	// SeasonInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonInverseTable = "seasons"
	// SeasonColumn is the table column denoting the season relation/edge.
	SeasonColumn = "season_team_seasons"
	// PlayerTeamSeasonsTable is the table that holds the playerTeamSeasons relation/edge.
	PlayerTeamSeasonsTable = "player_team_seasons"
	// PlayerTeamSeasonsInverseTable is the table name for the PlayerTeamSeason entity.
	// It exists in this package in order to avoid circular dependency with the "playerteamseason" package.
	PlayerTeamSeasonsInverseTable = "player_team_seasons"
	// PlayerTeamSeasonsColumn is the table column denoting the playerTeamSeasons relation/edge.
	PlayerTeamSeasonsColumn = "team_season_player_team_seasons"
)

// Columns holds all SQL columns for teamseason fields.
var Columns = []string{
	FieldID,
	FieldTeamSeasonID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "team_seasons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"season_team_seasons",
	"team_team_seasons",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the TeamSeason queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTeamSeasonID orders the results by the team_season_id field.
func ByTeamSeasonID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTeamSeasonID, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// BySeasonField orders the results by season field.
func BySeasonField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayerTeamSeasonsCount orders the results by playerTeamSeasons count.
func ByPlayerTeamSeasonsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerTeamSeasonsStep(), opts...)
	}
}

// ByPlayerTeamSeasons orders the results by playerTeamSeasons terms.
func ByPlayerTeamSeasons(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerTeamSeasonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newSeasonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
	)
}
func newPlayerTeamSeasonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerTeamSeasonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlayerTeamSeasonsTable, PlayerTeamSeasonsColumn),
	)
}
