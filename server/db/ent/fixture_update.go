// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/fixture"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/season"
	"mapeleven/db/ent/team"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureUpdate is the builder for updating Fixture entities.
type FixtureUpdate struct {
	config
	hooks    []Hook
	mutation *FixtureMutation
}

// Where appends a list predicates to the FixtureUpdate builder.
func (fu *FixtureUpdate) Where(ps ...predicate.Fixture) *FixtureUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetReferee sets the "referee" field.
func (fu *FixtureUpdate) SetReferee(s string) *FixtureUpdate {
	fu.mutation.SetReferee(s)
	return fu
}

// SetNillableReferee sets the "referee" field if the given value is not nil.
func (fu *FixtureUpdate) SetNillableReferee(s *string) *FixtureUpdate {
	if s != nil {
		fu.SetReferee(*s)
	}
	return fu
}

// ClearReferee clears the value of the "referee" field.
func (fu *FixtureUpdate) ClearReferee() *FixtureUpdate {
	fu.mutation.ClearReferee()
	return fu
}

// SetTimezone sets the "timezone" field.
func (fu *FixtureUpdate) SetTimezone(s string) *FixtureUpdate {
	fu.mutation.SetTimezone(s)
	return fu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (fu *FixtureUpdate) SetNillableTimezone(s *string) *FixtureUpdate {
	if s != nil {
		fu.SetTimezone(*s)
	}
	return fu
}

// ClearTimezone clears the value of the "timezone" field.
func (fu *FixtureUpdate) ClearTimezone() *FixtureUpdate {
	fu.mutation.ClearTimezone()
	return fu
}

// SetDate sets the "date" field.
func (fu *FixtureUpdate) SetDate(t time.Time) *FixtureUpdate {
	fu.mutation.SetDate(t)
	return fu
}

// SetElapsed sets the "elapsed" field.
func (fu *FixtureUpdate) SetElapsed(i int) *FixtureUpdate {
	fu.mutation.ResetElapsed()
	fu.mutation.SetElapsed(i)
	return fu
}

// SetNillableElapsed sets the "elapsed" field if the given value is not nil.
func (fu *FixtureUpdate) SetNillableElapsed(i *int) *FixtureUpdate {
	if i != nil {
		fu.SetElapsed(*i)
	}
	return fu
}

// AddElapsed adds i to the "elapsed" field.
func (fu *FixtureUpdate) AddElapsed(i int) *FixtureUpdate {
	fu.mutation.AddElapsed(i)
	return fu
}

// ClearElapsed clears the value of the "elapsed" field.
func (fu *FixtureUpdate) ClearElapsed() *FixtureUpdate {
	fu.mutation.ClearElapsed()
	return fu
}

// SetRound sets the "round" field.
func (fu *FixtureUpdate) SetRound(i int) *FixtureUpdate {
	fu.mutation.ResetRound()
	fu.mutation.SetRound(i)
	return fu
}

// SetNillableRound sets the "round" field if the given value is not nil.
func (fu *FixtureUpdate) SetNillableRound(i *int) *FixtureUpdate {
	if i != nil {
		fu.SetRound(*i)
	}
	return fu
}

// AddRound adds i to the "round" field.
func (fu *FixtureUpdate) AddRound(i int) *FixtureUpdate {
	fu.mutation.AddRound(i)
	return fu
}

// ClearRound clears the value of the "round" field.
func (fu *FixtureUpdate) ClearRound() *FixtureUpdate {
	fu.mutation.ClearRound()
	return fu
}

// SetStatus sets the "status" field.
func (fu *FixtureUpdate) SetStatus(s string) *FixtureUpdate {
	fu.mutation.SetStatus(s)
	return fu
}

// SetHomeTeamScore sets the "homeTeamScore" field.
func (fu *FixtureUpdate) SetHomeTeamScore(i int) *FixtureUpdate {
	fu.mutation.ResetHomeTeamScore()
	fu.mutation.SetHomeTeamScore(i)
	return fu
}

// SetNillableHomeTeamScore sets the "homeTeamScore" field if the given value is not nil.
func (fu *FixtureUpdate) SetNillableHomeTeamScore(i *int) *FixtureUpdate {
	if i != nil {
		fu.SetHomeTeamScore(*i)
	}
	return fu
}

// AddHomeTeamScore adds i to the "homeTeamScore" field.
func (fu *FixtureUpdate) AddHomeTeamScore(i int) *FixtureUpdate {
	fu.mutation.AddHomeTeamScore(i)
	return fu
}

// ClearHomeTeamScore clears the value of the "homeTeamScore" field.
func (fu *FixtureUpdate) ClearHomeTeamScore() *FixtureUpdate {
	fu.mutation.ClearHomeTeamScore()
	return fu
}

// SetAwayTeamScore sets the "awayTeamScore" field.
func (fu *FixtureUpdate) SetAwayTeamScore(i int) *FixtureUpdate {
	fu.mutation.ResetAwayTeamScore()
	fu.mutation.SetAwayTeamScore(i)
	return fu
}

// SetNillableAwayTeamScore sets the "awayTeamScore" field if the given value is not nil.
func (fu *FixtureUpdate) SetNillableAwayTeamScore(i *int) *FixtureUpdate {
	if i != nil {
		fu.SetAwayTeamScore(*i)
	}
	return fu
}

// AddAwayTeamScore adds i to the "awayTeamScore" field.
func (fu *FixtureUpdate) AddAwayTeamScore(i int) *FixtureUpdate {
	fu.mutation.AddAwayTeamScore(i)
	return fu
}

// ClearAwayTeamScore clears the value of the "awayTeamScore" field.
func (fu *FixtureUpdate) ClearAwayTeamScore() *FixtureUpdate {
	fu.mutation.ClearAwayTeamScore()
	return fu
}

// SetHomeTeamID sets the "homeTeam" edge to the Team entity by ID.
func (fu *FixtureUpdate) SetHomeTeamID(id int) *FixtureUpdate {
	fu.mutation.SetHomeTeamID(id)
	return fu
}

// SetHomeTeam sets the "homeTeam" edge to the Team entity.
func (fu *FixtureUpdate) SetHomeTeam(t *Team) *FixtureUpdate {
	return fu.SetHomeTeamID(t.ID)
}

// SetAwayTeamID sets the "awayTeam" edge to the Team entity by ID.
func (fu *FixtureUpdate) SetAwayTeamID(id int) *FixtureUpdate {
	fu.mutation.SetAwayTeamID(id)
	return fu
}

// SetAwayTeam sets the "awayTeam" edge to the Team entity.
func (fu *FixtureUpdate) SetAwayTeam(t *Team) *FixtureUpdate {
	return fu.SetAwayTeamID(t.ID)
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (fu *FixtureUpdate) SetSeasonID(id int) *FixtureUpdate {
	fu.mutation.SetSeasonID(id)
	return fu
}

// SetSeason sets the "season" edge to the Season entity.
func (fu *FixtureUpdate) SetSeason(s *Season) *FixtureUpdate {
	return fu.SetSeasonID(s.ID)
}

// Mutation returns the FixtureMutation object of the builder.
func (fu *FixtureUpdate) Mutation() *FixtureMutation {
	return fu.mutation
}

// ClearHomeTeam clears the "homeTeam" edge to the Team entity.
func (fu *FixtureUpdate) ClearHomeTeam() *FixtureUpdate {
	fu.mutation.ClearHomeTeam()
	return fu
}

// ClearAwayTeam clears the "awayTeam" edge to the Team entity.
func (fu *FixtureUpdate) ClearAwayTeam() *FixtureUpdate {
	fu.mutation.ClearAwayTeam()
	return fu
}

// ClearSeason clears the "season" edge to the Season entity.
func (fu *FixtureUpdate) ClearSeason() *FixtureUpdate {
	fu.mutation.ClearSeason()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FixtureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FixtureMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FixtureUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FixtureUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FixtureUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FixtureUpdate) check() error {
	if _, ok := fu.mutation.HomeTeamID(); fu.mutation.HomeTeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fixture.homeTeam"`)
	}
	if _, ok := fu.mutation.AwayTeamID(); fu.mutation.AwayTeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fixture.awayTeam"`)
	}
	if _, ok := fu.mutation.SeasonID(); fu.mutation.SeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fixture.season"`)
	}
	return nil
}

func (fu *FixtureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixture.Table, fixture.Columns, sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Referee(); ok {
		_spec.SetField(fixture.FieldReferee, field.TypeString, value)
	}
	if fu.mutation.RefereeCleared() {
		_spec.ClearField(fixture.FieldReferee, field.TypeString)
	}
	if value, ok := fu.mutation.Timezone(); ok {
		_spec.SetField(fixture.FieldTimezone, field.TypeString, value)
	}
	if fu.mutation.TimezoneCleared() {
		_spec.ClearField(fixture.FieldTimezone, field.TypeString)
	}
	if value, ok := fu.mutation.Date(); ok {
		_spec.SetField(fixture.FieldDate, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Elapsed(); ok {
		_spec.SetField(fixture.FieldElapsed, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedElapsed(); ok {
		_spec.AddField(fixture.FieldElapsed, field.TypeInt, value)
	}
	if fu.mutation.ElapsedCleared() {
		_spec.ClearField(fixture.FieldElapsed, field.TypeInt)
	}
	if value, ok := fu.mutation.Round(); ok {
		_spec.SetField(fixture.FieldRound, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedRound(); ok {
		_spec.AddField(fixture.FieldRound, field.TypeInt, value)
	}
	if fu.mutation.RoundCleared() {
		_spec.ClearField(fixture.FieldRound, field.TypeInt)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(fixture.FieldStatus, field.TypeString, value)
	}
	if value, ok := fu.mutation.HomeTeamScore(); ok {
		_spec.SetField(fixture.FieldHomeTeamScore, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedHomeTeamScore(); ok {
		_spec.AddField(fixture.FieldHomeTeamScore, field.TypeInt, value)
	}
	if fu.mutation.HomeTeamScoreCleared() {
		_spec.ClearField(fixture.FieldHomeTeamScore, field.TypeInt)
	}
	if value, ok := fu.mutation.AwayTeamScore(); ok {
		_spec.SetField(fixture.FieldAwayTeamScore, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedAwayTeamScore(); ok {
		_spec.AddField(fixture.FieldAwayTeamScore, field.TypeInt, value)
	}
	if fu.mutation.AwayTeamScoreCleared() {
		_spec.ClearField(fixture.FieldAwayTeamScore, field.TypeInt)
	}
	if fu.mutation.HomeTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.HomeTeamTable,
			Columns: []string{fixture.HomeTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HomeTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.HomeTeamTable,
			Columns: []string{fixture.HomeTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.AwayTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.AwayTeamTable,
			Columns: []string{fixture.AwayTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AwayTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.AwayTeamTable,
			Columns: []string{fixture.AwayTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.SeasonTable,
			Columns: []string{fixture.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.SeasonTable,
			Columns: []string{fixture.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FixtureUpdateOne is the builder for updating a single Fixture entity.
type FixtureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FixtureMutation
}

// SetReferee sets the "referee" field.
func (fuo *FixtureUpdateOne) SetReferee(s string) *FixtureUpdateOne {
	fuo.mutation.SetReferee(s)
	return fuo
}

// SetNillableReferee sets the "referee" field if the given value is not nil.
func (fuo *FixtureUpdateOne) SetNillableReferee(s *string) *FixtureUpdateOne {
	if s != nil {
		fuo.SetReferee(*s)
	}
	return fuo
}

// ClearReferee clears the value of the "referee" field.
func (fuo *FixtureUpdateOne) ClearReferee() *FixtureUpdateOne {
	fuo.mutation.ClearReferee()
	return fuo
}

// SetTimezone sets the "timezone" field.
func (fuo *FixtureUpdateOne) SetTimezone(s string) *FixtureUpdateOne {
	fuo.mutation.SetTimezone(s)
	return fuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (fuo *FixtureUpdateOne) SetNillableTimezone(s *string) *FixtureUpdateOne {
	if s != nil {
		fuo.SetTimezone(*s)
	}
	return fuo
}

// ClearTimezone clears the value of the "timezone" field.
func (fuo *FixtureUpdateOne) ClearTimezone() *FixtureUpdateOne {
	fuo.mutation.ClearTimezone()
	return fuo
}

// SetDate sets the "date" field.
func (fuo *FixtureUpdateOne) SetDate(t time.Time) *FixtureUpdateOne {
	fuo.mutation.SetDate(t)
	return fuo
}

// SetElapsed sets the "elapsed" field.
func (fuo *FixtureUpdateOne) SetElapsed(i int) *FixtureUpdateOne {
	fuo.mutation.ResetElapsed()
	fuo.mutation.SetElapsed(i)
	return fuo
}

// SetNillableElapsed sets the "elapsed" field if the given value is not nil.
func (fuo *FixtureUpdateOne) SetNillableElapsed(i *int) *FixtureUpdateOne {
	if i != nil {
		fuo.SetElapsed(*i)
	}
	return fuo
}

// AddElapsed adds i to the "elapsed" field.
func (fuo *FixtureUpdateOne) AddElapsed(i int) *FixtureUpdateOne {
	fuo.mutation.AddElapsed(i)
	return fuo
}

// ClearElapsed clears the value of the "elapsed" field.
func (fuo *FixtureUpdateOne) ClearElapsed() *FixtureUpdateOne {
	fuo.mutation.ClearElapsed()
	return fuo
}

// SetRound sets the "round" field.
func (fuo *FixtureUpdateOne) SetRound(i int) *FixtureUpdateOne {
	fuo.mutation.ResetRound()
	fuo.mutation.SetRound(i)
	return fuo
}

// SetNillableRound sets the "round" field if the given value is not nil.
func (fuo *FixtureUpdateOne) SetNillableRound(i *int) *FixtureUpdateOne {
	if i != nil {
		fuo.SetRound(*i)
	}
	return fuo
}

// AddRound adds i to the "round" field.
func (fuo *FixtureUpdateOne) AddRound(i int) *FixtureUpdateOne {
	fuo.mutation.AddRound(i)
	return fuo
}

// ClearRound clears the value of the "round" field.
func (fuo *FixtureUpdateOne) ClearRound() *FixtureUpdateOne {
	fuo.mutation.ClearRound()
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FixtureUpdateOne) SetStatus(s string) *FixtureUpdateOne {
	fuo.mutation.SetStatus(s)
	return fuo
}

// SetHomeTeamScore sets the "homeTeamScore" field.
func (fuo *FixtureUpdateOne) SetHomeTeamScore(i int) *FixtureUpdateOne {
	fuo.mutation.ResetHomeTeamScore()
	fuo.mutation.SetHomeTeamScore(i)
	return fuo
}

// SetNillableHomeTeamScore sets the "homeTeamScore" field if the given value is not nil.
func (fuo *FixtureUpdateOne) SetNillableHomeTeamScore(i *int) *FixtureUpdateOne {
	if i != nil {
		fuo.SetHomeTeamScore(*i)
	}
	return fuo
}

// AddHomeTeamScore adds i to the "homeTeamScore" field.
func (fuo *FixtureUpdateOne) AddHomeTeamScore(i int) *FixtureUpdateOne {
	fuo.mutation.AddHomeTeamScore(i)
	return fuo
}

// ClearHomeTeamScore clears the value of the "homeTeamScore" field.
func (fuo *FixtureUpdateOne) ClearHomeTeamScore() *FixtureUpdateOne {
	fuo.mutation.ClearHomeTeamScore()
	return fuo
}

// SetAwayTeamScore sets the "awayTeamScore" field.
func (fuo *FixtureUpdateOne) SetAwayTeamScore(i int) *FixtureUpdateOne {
	fuo.mutation.ResetAwayTeamScore()
	fuo.mutation.SetAwayTeamScore(i)
	return fuo
}

// SetNillableAwayTeamScore sets the "awayTeamScore" field if the given value is not nil.
func (fuo *FixtureUpdateOne) SetNillableAwayTeamScore(i *int) *FixtureUpdateOne {
	if i != nil {
		fuo.SetAwayTeamScore(*i)
	}
	return fuo
}

// AddAwayTeamScore adds i to the "awayTeamScore" field.
func (fuo *FixtureUpdateOne) AddAwayTeamScore(i int) *FixtureUpdateOne {
	fuo.mutation.AddAwayTeamScore(i)
	return fuo
}

// ClearAwayTeamScore clears the value of the "awayTeamScore" field.
func (fuo *FixtureUpdateOne) ClearAwayTeamScore() *FixtureUpdateOne {
	fuo.mutation.ClearAwayTeamScore()
	return fuo
}

// SetHomeTeamID sets the "homeTeam" edge to the Team entity by ID.
func (fuo *FixtureUpdateOne) SetHomeTeamID(id int) *FixtureUpdateOne {
	fuo.mutation.SetHomeTeamID(id)
	return fuo
}

// SetHomeTeam sets the "homeTeam" edge to the Team entity.
func (fuo *FixtureUpdateOne) SetHomeTeam(t *Team) *FixtureUpdateOne {
	return fuo.SetHomeTeamID(t.ID)
}

// SetAwayTeamID sets the "awayTeam" edge to the Team entity by ID.
func (fuo *FixtureUpdateOne) SetAwayTeamID(id int) *FixtureUpdateOne {
	fuo.mutation.SetAwayTeamID(id)
	return fuo
}

// SetAwayTeam sets the "awayTeam" edge to the Team entity.
func (fuo *FixtureUpdateOne) SetAwayTeam(t *Team) *FixtureUpdateOne {
	return fuo.SetAwayTeamID(t.ID)
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (fuo *FixtureUpdateOne) SetSeasonID(id int) *FixtureUpdateOne {
	fuo.mutation.SetSeasonID(id)
	return fuo
}

// SetSeason sets the "season" edge to the Season entity.
func (fuo *FixtureUpdateOne) SetSeason(s *Season) *FixtureUpdateOne {
	return fuo.SetSeasonID(s.ID)
}

// Mutation returns the FixtureMutation object of the builder.
func (fuo *FixtureUpdateOne) Mutation() *FixtureMutation {
	return fuo.mutation
}

// ClearHomeTeam clears the "homeTeam" edge to the Team entity.
func (fuo *FixtureUpdateOne) ClearHomeTeam() *FixtureUpdateOne {
	fuo.mutation.ClearHomeTeam()
	return fuo
}

// ClearAwayTeam clears the "awayTeam" edge to the Team entity.
func (fuo *FixtureUpdateOne) ClearAwayTeam() *FixtureUpdateOne {
	fuo.mutation.ClearAwayTeam()
	return fuo
}

// ClearSeason clears the "season" edge to the Season entity.
func (fuo *FixtureUpdateOne) ClearSeason() *FixtureUpdateOne {
	fuo.mutation.ClearSeason()
	return fuo
}

// Where appends a list predicates to the FixtureUpdate builder.
func (fuo *FixtureUpdateOne) Where(ps ...predicate.Fixture) *FixtureUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FixtureUpdateOne) Select(field string, fields ...string) *FixtureUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fixture entity.
func (fuo *FixtureUpdateOne) Save(ctx context.Context) (*Fixture, error) {
	return withHooks[*Fixture, FixtureMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FixtureUpdateOne) SaveX(ctx context.Context) *Fixture {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FixtureUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FixtureUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FixtureUpdateOne) check() error {
	if _, ok := fuo.mutation.HomeTeamID(); fuo.mutation.HomeTeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fixture.homeTeam"`)
	}
	if _, ok := fuo.mutation.AwayTeamID(); fuo.mutation.AwayTeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fixture.awayTeam"`)
	}
	if _, ok := fuo.mutation.SeasonID(); fuo.mutation.SeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fixture.season"`)
	}
	return nil
}

func (fuo *FixtureUpdateOne) sqlSave(ctx context.Context) (_node *Fixture, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fixture.Table, fixture.Columns, sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fixture.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixture.FieldID)
		for _, f := range fields {
			if !fixture.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fixture.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Referee(); ok {
		_spec.SetField(fixture.FieldReferee, field.TypeString, value)
	}
	if fuo.mutation.RefereeCleared() {
		_spec.ClearField(fixture.FieldReferee, field.TypeString)
	}
	if value, ok := fuo.mutation.Timezone(); ok {
		_spec.SetField(fixture.FieldTimezone, field.TypeString, value)
	}
	if fuo.mutation.TimezoneCleared() {
		_spec.ClearField(fixture.FieldTimezone, field.TypeString)
	}
	if value, ok := fuo.mutation.Date(); ok {
		_spec.SetField(fixture.FieldDate, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Elapsed(); ok {
		_spec.SetField(fixture.FieldElapsed, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedElapsed(); ok {
		_spec.AddField(fixture.FieldElapsed, field.TypeInt, value)
	}
	if fuo.mutation.ElapsedCleared() {
		_spec.ClearField(fixture.FieldElapsed, field.TypeInt)
	}
	if value, ok := fuo.mutation.Round(); ok {
		_spec.SetField(fixture.FieldRound, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedRound(); ok {
		_spec.AddField(fixture.FieldRound, field.TypeInt, value)
	}
	if fuo.mutation.RoundCleared() {
		_spec.ClearField(fixture.FieldRound, field.TypeInt)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(fixture.FieldStatus, field.TypeString, value)
	}
	if value, ok := fuo.mutation.HomeTeamScore(); ok {
		_spec.SetField(fixture.FieldHomeTeamScore, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedHomeTeamScore(); ok {
		_spec.AddField(fixture.FieldHomeTeamScore, field.TypeInt, value)
	}
	if fuo.mutation.HomeTeamScoreCleared() {
		_spec.ClearField(fixture.FieldHomeTeamScore, field.TypeInt)
	}
	if value, ok := fuo.mutation.AwayTeamScore(); ok {
		_spec.SetField(fixture.FieldAwayTeamScore, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedAwayTeamScore(); ok {
		_spec.AddField(fixture.FieldAwayTeamScore, field.TypeInt, value)
	}
	if fuo.mutation.AwayTeamScoreCleared() {
		_spec.ClearField(fixture.FieldAwayTeamScore, field.TypeInt)
	}
	if fuo.mutation.HomeTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.HomeTeamTable,
			Columns: []string{fixture.HomeTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HomeTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.HomeTeamTable,
			Columns: []string{fixture.HomeTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.AwayTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.AwayTeamTable,
			Columns: []string{fixture.AwayTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AwayTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.AwayTeamTable,
			Columns: []string{fixture.AwayTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.SeasonTable,
			Columns: []string{fixture.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixture.SeasonTable,
			Columns: []string{fixture.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fixture{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
