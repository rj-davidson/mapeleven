// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/team"
	"mapeleven/db/ent/tspenalty"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSPenaltyCreate is the builder for creating a TSPenalty entity.
type TSPenaltyCreate struct {
	config
	mutation *TSPenaltyMutation
	hooks    []Hook
}

// SetTotal sets the "total" field.
func (tpc *TSPenaltyCreate) SetTotal(i int) *TSPenaltyCreate {
	tpc.mutation.SetTotal(i)
	return tpc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tpc *TSPenaltyCreate) SetNillableTotal(i *int) *TSPenaltyCreate {
	if i != nil {
		tpc.SetTotal(*i)
	}
	return tpc
}

// SetScoredTotal sets the "scoredTotal" field.
func (tpc *TSPenaltyCreate) SetScoredTotal(i int) *TSPenaltyCreate {
	tpc.mutation.SetScoredTotal(i)
	return tpc
}

// SetNillableScoredTotal sets the "scoredTotal" field if the given value is not nil.
func (tpc *TSPenaltyCreate) SetNillableScoredTotal(i *int) *TSPenaltyCreate {
	if i != nil {
		tpc.SetScoredTotal(*i)
	}
	return tpc
}

// SetMissedTotal sets the "missedTotal" field.
func (tpc *TSPenaltyCreate) SetMissedTotal(i int) *TSPenaltyCreate {
	tpc.mutation.SetMissedTotal(i)
	return tpc
}

// SetNillableMissedTotal sets the "missedTotal" field if the given value is not nil.
func (tpc *TSPenaltyCreate) SetNillableMissedTotal(i *int) *TSPenaltyCreate {
	if i != nil {
		tpc.SetMissedTotal(*i)
	}
	return tpc
}

// SetScoredPercentage sets the "scoredPercentage" field.
func (tpc *TSPenaltyCreate) SetScoredPercentage(s string) *TSPenaltyCreate {
	tpc.mutation.SetScoredPercentage(s)
	return tpc
}

// SetNillableScoredPercentage sets the "scoredPercentage" field if the given value is not nil.
func (tpc *TSPenaltyCreate) SetNillableScoredPercentage(s *string) *TSPenaltyCreate {
	if s != nil {
		tpc.SetScoredPercentage(*s)
	}
	return tpc
}

// SetMissedPercentage sets the "missedPercentage" field.
func (tpc *TSPenaltyCreate) SetMissedPercentage(s string) *TSPenaltyCreate {
	tpc.mutation.SetMissedPercentage(s)
	return tpc
}

// SetNillableMissedPercentage sets the "missedPercentage" field if the given value is not nil.
func (tpc *TSPenaltyCreate) SetNillableMissedPercentage(s *string) *TSPenaltyCreate {
	if s != nil {
		tpc.SetMissedPercentage(*s)
	}
	return tpc
}

// SetLastUpdated sets the "lastUpdated" field.
func (tpc *TSPenaltyCreate) SetLastUpdated(t time.Time) *TSPenaltyCreate {
	tpc.mutation.SetLastUpdated(t)
	return tpc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (tpc *TSPenaltyCreate) SetNillableLastUpdated(t *time.Time) *TSPenaltyCreate {
	if t != nil {
		tpc.SetLastUpdated(*t)
	}
	return tpc
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tpc *TSPenaltyCreate) SetTeamID(id int) *TSPenaltyCreate {
	tpc.mutation.SetTeamID(id)
	return tpc
}

// SetTeam sets the "team" edge to the Team entity.
func (tpc *TSPenaltyCreate) SetTeam(t *Team) *TSPenaltyCreate {
	return tpc.SetTeamID(t.ID)
}

// Mutation returns the TSPenaltyMutation object of the builder.
func (tpc *TSPenaltyCreate) Mutation() *TSPenaltyMutation {
	return tpc.mutation
}

// Save creates the TSPenalty in the database.
func (tpc *TSPenaltyCreate) Save(ctx context.Context) (*TSPenalty, error) {
	tpc.defaults()
	return withHooks[*TSPenalty, TSPenaltyMutation](ctx, tpc.sqlSave, tpc.mutation, tpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TSPenaltyCreate) SaveX(ctx context.Context) *TSPenalty {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TSPenaltyCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TSPenaltyCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpc *TSPenaltyCreate) defaults() {
	if _, ok := tpc.mutation.Total(); !ok {
		v := tspenalty.DefaultTotal
		tpc.mutation.SetTotal(v)
	}
	if _, ok := tpc.mutation.ScoredTotal(); !ok {
		v := tspenalty.DefaultScoredTotal
		tpc.mutation.SetScoredTotal(v)
	}
	if _, ok := tpc.mutation.MissedTotal(); !ok {
		v := tspenalty.DefaultMissedTotal
		tpc.mutation.SetMissedTotal(v)
	}
	if _, ok := tpc.mutation.ScoredPercentage(); !ok {
		v := tspenalty.DefaultScoredPercentage
		tpc.mutation.SetScoredPercentage(v)
	}
	if _, ok := tpc.mutation.MissedPercentage(); !ok {
		v := tspenalty.DefaultMissedPercentage
		tpc.mutation.SetMissedPercentage(v)
	}
	if _, ok := tpc.mutation.LastUpdated(); !ok {
		v := tspenalty.DefaultLastUpdated()
		tpc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TSPenaltyCreate) check() error {
	if _, ok := tpc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "TSPenalty.team"`)}
	}
	return nil
}

func (tpc *TSPenaltyCreate) sqlSave(ctx context.Context) (*TSPenalty, error) {
	if err := tpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tpc.mutation.id = &_node.ID
	tpc.mutation.done = true
	return _node, nil
}

func (tpc *TSPenaltyCreate) createSpec() (*TSPenalty, *sqlgraph.CreateSpec) {
	var (
		_node = &TSPenalty{config: tpc.config}
		_spec = sqlgraph.NewCreateSpec(tspenalty.Table, sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt))
	)
	if value, ok := tpc.mutation.Total(); ok {
		_spec.SetField(tspenalty.FieldTotal, field.TypeInt, value)
		_node.Total = value
	}
	if value, ok := tpc.mutation.ScoredTotal(); ok {
		_spec.SetField(tspenalty.FieldScoredTotal, field.TypeInt, value)
		_node.ScoredTotal = value
	}
	if value, ok := tpc.mutation.MissedTotal(); ok {
		_spec.SetField(tspenalty.FieldMissedTotal, field.TypeInt, value)
		_node.MissedTotal = value
	}
	if value, ok := tpc.mutation.ScoredPercentage(); ok {
		_spec.SetField(tspenalty.FieldScoredPercentage, field.TypeString, value)
		_node.ScoredPercentage = value
	}
	if value, ok := tpc.mutation.MissedPercentage(); ok {
		_spec.SetField(tspenalty.FieldMissedPercentage, field.TypeString, value)
		_node.MissedPercentage = value
	}
	if value, ok := tpc.mutation.LastUpdated(); ok {
		_spec.SetField(tspenalty.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := tpc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tspenalty.TeamTable,
			Columns: []string{tspenalty.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_penalty_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TSPenaltyCreateBulk is the builder for creating many TSPenalty entities in bulk.
type TSPenaltyCreateBulk struct {
	config
	builders []*TSPenaltyCreate
}

// Save creates the TSPenalty entities in the database.
func (tpcb *TSPenaltyCreateBulk) Save(ctx context.Context) ([]*TSPenalty, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TSPenalty, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TSPenaltyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TSPenaltyCreateBulk) SaveX(ctx context.Context) []*TSPenalty {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TSPenaltyCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TSPenaltyCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
