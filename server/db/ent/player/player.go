// Code generated by ent, DO NOT EDIT.

package player

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldInjured holds the string denoting the injured field in the database.
	FieldInjured = "injured"
	// FieldPhoto holds the string denoting the photo field in the database.
	FieldPhoto = "photo"
	// EdgeBirth holds the string denoting the birth edge name in mutations.
	EdgeBirth = "birth"
	// Table holds the table name of the player in the database.
	Table = "players"
	// BirthTable is the table that holds the birth relation/edge.
	BirthTable = "players"
	// BirthInverseTable is the table name for the Birth entity.
	// It exists in this package in order to avoid circular dependency with the "birth" package.
	BirthInverseTable = "births"
	// BirthColumn is the table column denoting the birth relation/edge.
	BirthColumn = "birth_player"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldName,
	FieldFirstname,
	FieldLastname,
	FieldAge,
	FieldHeight,
	FieldWeight,
	FieldInjured,
	FieldPhoto,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"birth_player",
	"country_players",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Player queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFirstname orders the results by the firstname field.
func ByFirstname(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFirstname, opts...).ToFunc()
}

// ByLastname orders the results by the lastname field.
func ByLastname(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLastname, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByInjured orders the results by the injured field.
func ByInjured(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldInjured, opts...).ToFunc()
}

// ByPhoto orders the results by the photo field.
func ByPhoto(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPhoto, opts...).ToFunc()
}

// ByBirthField orders the results by birth field.
func ByBirthField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBirthStep(), sql.OrderByField(field, opts...))
	}
}
func newBirthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BirthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BirthTable, BirthColumn),
	)
}
