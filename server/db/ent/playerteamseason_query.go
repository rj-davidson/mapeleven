// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/playerteamseason"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/teamseason"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerTeamSeasonQuery is the builder for querying PlayerTeamSeason entities.
type PlayerTeamSeasonQuery struct {
	config
	ctx            *QueryContext
	order          []playerteamseason.Order
	inters         []Interceptor
	predicates     []predicate.PlayerTeamSeason
	withPlayer     *PlayerQuery
	withTeamSeason *TeamSeasonQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlayerTeamSeasonQuery builder.
func (ptsq *PlayerTeamSeasonQuery) Where(ps ...predicate.PlayerTeamSeason) *PlayerTeamSeasonQuery {
	ptsq.predicates = append(ptsq.predicates, ps...)
	return ptsq
}

// Limit the number of records to be returned by this query.
func (ptsq *PlayerTeamSeasonQuery) Limit(limit int) *PlayerTeamSeasonQuery {
	ptsq.ctx.Limit = &limit
	return ptsq
}

// Offset to start from.
func (ptsq *PlayerTeamSeasonQuery) Offset(offset int) *PlayerTeamSeasonQuery {
	ptsq.ctx.Offset = &offset
	return ptsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ptsq *PlayerTeamSeasonQuery) Unique(unique bool) *PlayerTeamSeasonQuery {
	ptsq.ctx.Unique = &unique
	return ptsq
}

// Order specifies how the records should be ordered.
func (ptsq *PlayerTeamSeasonQuery) Order(o ...playerteamseason.Order) *PlayerTeamSeasonQuery {
	ptsq.order = append(ptsq.order, o...)
	return ptsq
}

// QueryPlayer chains the current query on the "player" edge.
func (ptsq *PlayerTeamSeasonQuery) QueryPlayer() *PlayerQuery {
	query := (&PlayerClient{config: ptsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ptsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ptsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerteamseason.Table, playerteamseason.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playerteamseason.PlayerTable, playerteamseason.PlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ptsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeamSeason chains the current query on the "teamSeason" edge.
func (ptsq *PlayerTeamSeasonQuery) QueryTeamSeason() *TeamSeasonQuery {
	query := (&TeamSeasonClient{config: ptsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ptsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ptsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerteamseason.Table, playerteamseason.FieldID, selector),
			sqlgraph.To(teamseason.Table, teamseason.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playerteamseason.TeamSeasonTable, playerteamseason.TeamSeasonColumn),
		)
		fromU = sqlgraph.SetNeighbors(ptsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlayerTeamSeason entity from the query.
// Returns a *NotFoundError when no PlayerTeamSeason was found.
func (ptsq *PlayerTeamSeasonQuery) First(ctx context.Context) (*PlayerTeamSeason, error) {
	nodes, err := ptsq.Limit(1).All(setContextOp(ctx, ptsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{playerteamseason.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) FirstX(ctx context.Context) *PlayerTeamSeason {
	node, err := ptsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlayerTeamSeason ID from the query.
// Returns a *NotFoundError when no PlayerTeamSeason ID was found.
func (ptsq *PlayerTeamSeasonQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ptsq.Limit(1).IDs(setContextOp(ctx, ptsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{playerteamseason.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) FirstIDX(ctx context.Context) int {
	id, err := ptsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlayerTeamSeason entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlayerTeamSeason entity is found.
// Returns a *NotFoundError when no PlayerTeamSeason entities are found.
func (ptsq *PlayerTeamSeasonQuery) Only(ctx context.Context) (*PlayerTeamSeason, error) {
	nodes, err := ptsq.Limit(2).All(setContextOp(ctx, ptsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{playerteamseason.Label}
	default:
		return nil, &NotSingularError{playerteamseason.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) OnlyX(ctx context.Context) *PlayerTeamSeason {
	node, err := ptsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlayerTeamSeason ID in the query.
// Returns a *NotSingularError when more than one PlayerTeamSeason ID is found.
// Returns a *NotFoundError when no entities are found.
func (ptsq *PlayerTeamSeasonQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ptsq.Limit(2).IDs(setContextOp(ctx, ptsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{playerteamseason.Label}
	default:
		err = &NotSingularError{playerteamseason.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) OnlyIDX(ctx context.Context) int {
	id, err := ptsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlayerTeamSeasons.
func (ptsq *PlayerTeamSeasonQuery) All(ctx context.Context) ([]*PlayerTeamSeason, error) {
	ctx = setContextOp(ctx, ptsq.ctx, "All")
	if err := ptsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlayerTeamSeason, *PlayerTeamSeasonQuery]()
	return withInterceptors[[]*PlayerTeamSeason](ctx, ptsq, qr, ptsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) AllX(ctx context.Context) []*PlayerTeamSeason {
	nodes, err := ptsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlayerTeamSeason IDs.
func (ptsq *PlayerTeamSeasonQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ptsq.ctx.Unique == nil && ptsq.path != nil {
		ptsq.Unique(true)
	}
	ctx = setContextOp(ctx, ptsq.ctx, "IDs")
	if err = ptsq.Select(playerteamseason.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) IDsX(ctx context.Context) []int {
	ids, err := ptsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ptsq *PlayerTeamSeasonQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ptsq.ctx, "Count")
	if err := ptsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ptsq, querierCount[*PlayerTeamSeasonQuery](), ptsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) CountX(ctx context.Context) int {
	count, err := ptsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ptsq *PlayerTeamSeasonQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ptsq.ctx, "Exist")
	switch _, err := ptsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ptsq *PlayerTeamSeasonQuery) ExistX(ctx context.Context) bool {
	exist, err := ptsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlayerTeamSeasonQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ptsq *PlayerTeamSeasonQuery) Clone() *PlayerTeamSeasonQuery {
	if ptsq == nil {
		return nil
	}
	return &PlayerTeamSeasonQuery{
		config:         ptsq.config,
		ctx:            ptsq.ctx.Clone(),
		order:          append([]playerteamseason.Order{}, ptsq.order...),
		inters:         append([]Interceptor{}, ptsq.inters...),
		predicates:     append([]predicate.PlayerTeamSeason{}, ptsq.predicates...),
		withPlayer:     ptsq.withPlayer.Clone(),
		withTeamSeason: ptsq.withTeamSeason.Clone(),
		// clone intermediate query.
		sql:  ptsq.sql.Clone(),
		path: ptsq.path,
	}
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (ptsq *PlayerTeamSeasonQuery) WithPlayer(opts ...func(*PlayerQuery)) *PlayerTeamSeasonQuery {
	query := (&PlayerClient{config: ptsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ptsq.withPlayer = query
	return ptsq
}

// WithTeamSeason tells the query-builder to eager-load the nodes that are connected to
// the "teamSeason" edge. The optional arguments are used to configure the query builder of the edge.
func (ptsq *PlayerTeamSeasonQuery) WithTeamSeason(opts ...func(*TeamSeasonQuery)) *PlayerTeamSeasonQuery {
	query := (&TeamSeasonClient{config: ptsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ptsq.withTeamSeason = query
	return ptsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PlayerTeamSeasonID int `json:"player_team_season_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlayerTeamSeason.Query().
//		GroupBy(playerteamseason.FieldPlayerTeamSeasonID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ptsq *PlayerTeamSeasonQuery) GroupBy(field string, fields ...string) *PlayerTeamSeasonGroupBy {
	ptsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlayerTeamSeasonGroupBy{build: ptsq}
	grbuild.flds = &ptsq.ctx.Fields
	grbuild.label = playerteamseason.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PlayerTeamSeasonID int `json:"player_team_season_id,omitempty"`
//	}
//
//	client.PlayerTeamSeason.Query().
//		Select(playerteamseason.FieldPlayerTeamSeasonID).
//		Scan(ctx, &v)
func (ptsq *PlayerTeamSeasonQuery) Select(fields ...string) *PlayerTeamSeasonSelect {
	ptsq.ctx.Fields = append(ptsq.ctx.Fields, fields...)
	sbuild := &PlayerTeamSeasonSelect{PlayerTeamSeasonQuery: ptsq}
	sbuild.label = playerteamseason.Label
	sbuild.flds, sbuild.scan = &ptsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlayerTeamSeasonSelect configured with the given aggregations.
func (ptsq *PlayerTeamSeasonQuery) Aggregate(fns ...AggregateFunc) *PlayerTeamSeasonSelect {
	return ptsq.Select().Aggregate(fns...)
}

func (ptsq *PlayerTeamSeasonQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ptsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ptsq); err != nil {
				return err
			}
		}
	}
	for _, f := range ptsq.ctx.Fields {
		if !playerteamseason.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ptsq.path != nil {
		prev, err := ptsq.path(ctx)
		if err != nil {
			return err
		}
		ptsq.sql = prev
	}
	return nil
}

func (ptsq *PlayerTeamSeasonQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlayerTeamSeason, error) {
	var (
		nodes       = []*PlayerTeamSeason{}
		withFKs     = ptsq.withFKs
		_spec       = ptsq.querySpec()
		loadedTypes = [2]bool{
			ptsq.withPlayer != nil,
			ptsq.withTeamSeason != nil,
		}
	)
	if ptsq.withPlayer != nil || ptsq.withTeamSeason != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, playerteamseason.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlayerTeamSeason).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlayerTeamSeason{config: ptsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ptsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ptsq.withPlayer; query != nil {
		if err := ptsq.loadPlayer(ctx, query, nodes, nil,
			func(n *PlayerTeamSeason, e *Player) { n.Edges.Player = e }); err != nil {
			return nil, err
		}
	}
	if query := ptsq.withTeamSeason; query != nil {
		if err := ptsq.loadTeamSeason(ctx, query, nodes, nil,
			func(n *PlayerTeamSeason, e *TeamSeason) { n.Edges.TeamSeason = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ptsq *PlayerTeamSeasonQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*PlayerTeamSeason, init func(*PlayerTeamSeason), assign func(*PlayerTeamSeason, *Player)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlayerTeamSeason)
	for i := range nodes {
		if nodes[i].player_player_team_seasons == nil {
			continue
		}
		fk := *nodes[i].player_player_team_seasons
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_player_team_seasons" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ptsq *PlayerTeamSeasonQuery) loadTeamSeason(ctx context.Context, query *TeamSeasonQuery, nodes []*PlayerTeamSeason, init func(*PlayerTeamSeason), assign func(*PlayerTeamSeason, *TeamSeason)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlayerTeamSeason)
	for i := range nodes {
		if nodes[i].team_season_player_team_seasons == nil {
			continue
		}
		fk := *nodes[i].team_season_player_team_seasons
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(teamseason.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_season_player_team_seasons" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ptsq *PlayerTeamSeasonQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ptsq.querySpec()
	_spec.Node.Columns = ptsq.ctx.Fields
	if len(ptsq.ctx.Fields) > 0 {
		_spec.Unique = ptsq.ctx.Unique != nil && *ptsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ptsq.driver, _spec)
}

func (ptsq *PlayerTeamSeasonQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(playerteamseason.Table, playerteamseason.Columns, sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt))
	_spec.From = ptsq.sql
	if unique := ptsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ptsq.path != nil {
		_spec.Unique = true
	}
	if fields := ptsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerteamseason.FieldID)
		for i := range fields {
			if fields[i] != playerteamseason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ptsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ptsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ptsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ptsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ptsq *PlayerTeamSeasonQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ptsq.driver.Dialect())
	t1 := builder.Table(playerteamseason.Table)
	columns := ptsq.ctx.Fields
	if len(columns) == 0 {
		columns = playerteamseason.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ptsq.sql != nil {
		selector = ptsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ptsq.ctx.Unique != nil && *ptsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ptsq.predicates {
		p(selector)
	}
	for _, p := range ptsq.order {
		p(selector)
	}
	if offset := ptsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ptsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlayerTeamSeasonGroupBy is the group-by builder for PlayerTeamSeason entities.
type PlayerTeamSeasonGroupBy struct {
	selector
	build *PlayerTeamSeasonQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ptsgb *PlayerTeamSeasonGroupBy) Aggregate(fns ...AggregateFunc) *PlayerTeamSeasonGroupBy {
	ptsgb.fns = append(ptsgb.fns, fns...)
	return ptsgb
}

// Scan applies the selector query and scans the result into the given value.
func (ptsgb *PlayerTeamSeasonGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ptsgb.build.ctx, "GroupBy")
	if err := ptsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlayerTeamSeasonQuery, *PlayerTeamSeasonGroupBy](ctx, ptsgb.build, ptsgb, ptsgb.build.inters, v)
}

func (ptsgb *PlayerTeamSeasonGroupBy) sqlScan(ctx context.Context, root *PlayerTeamSeasonQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ptsgb.fns))
	for _, fn := range ptsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ptsgb.flds)+len(ptsgb.fns))
		for _, f := range *ptsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ptsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ptsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlayerTeamSeasonSelect is the builder for selecting fields of PlayerTeamSeason entities.
type PlayerTeamSeasonSelect struct {
	*PlayerTeamSeasonQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ptss *PlayerTeamSeasonSelect) Aggregate(fns ...AggregateFunc) *PlayerTeamSeasonSelect {
	ptss.fns = append(ptss.fns, fns...)
	return ptss
}

// Scan applies the selector query and scans the result into the given value.
func (ptss *PlayerTeamSeasonSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ptss.ctx, "Select")
	if err := ptss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlayerTeamSeasonQuery, *PlayerTeamSeasonSelect](ctx, ptss.PlayerTeamSeasonQuery, ptss, ptss.inters, v)
}

func (ptss *PlayerTeamSeasonSelect) sqlScan(ctx context.Context, root *PlayerTeamSeasonQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ptss.fns))
	for _, fn := range ptss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ptss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ptss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
