// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/club"
	"mapeleven/db/ent/playerseason"
	"mapeleven/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerSeasonUpdate is the builder for updating PlayerSeason entities.
type PlayerSeasonUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerSeasonMutation
}

// Where appends a list predicates to the PlayerSeasonUpdate builder.
func (psu *PlayerSeasonUpdate) Where(ps ...predicate.PlayerSeason) *PlayerSeasonUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetSeason sets the "season" field.
func (psu *PlayerSeasonUpdate) SetSeason(i int) *PlayerSeasonUpdate {
	psu.mutation.ResetSeason()
	psu.mutation.SetSeason(i)
	return psu
}

// AddSeason adds i to the "season" field.
func (psu *PlayerSeasonUpdate) AddSeason(i int) *PlayerSeasonUpdate {
	psu.mutation.AddSeason(i)
	return psu
}

// SetPID sets the "pID" field.
func (psu *PlayerSeasonUpdate) SetPID(i int) *PlayerSeasonUpdate {
	psu.mutation.ResetPID()
	psu.mutation.SetPID(i)
	return psu
}

// AddPID adds i to the "pID" field.
func (psu *PlayerSeasonUpdate) AddPID(i int) *PlayerSeasonUpdate {
	psu.mutation.AddPID(i)
	return psu
}

// SetNationality sets the "nationality" field.
func (psu *PlayerSeasonUpdate) SetNationality(s string) *PlayerSeasonUpdate {
	psu.mutation.SetNationality(s)
	return psu
}

// SetPosition sets the "position" field.
func (psu *PlayerSeasonUpdate) SetPosition(s string) *PlayerSeasonUpdate {
	psu.mutation.SetPosition(s)
	return psu
}

// SetTeam sets the "team" field.
func (psu *PlayerSeasonUpdate) SetTeam(s string) *PlayerSeasonUpdate {
	psu.mutation.SetTeam(s)
	return psu
}

// SetYear sets the "year" field.
func (psu *PlayerSeasonUpdate) SetYear(i int) *PlayerSeasonUpdate {
	psu.mutation.ResetYear()
	psu.mutation.SetYear(i)
	return psu
}

// AddYear adds i to the "year" field.
func (psu *PlayerSeasonUpdate) AddYear(i int) *PlayerSeasonUpdate {
	psu.mutation.AddYear(i)
	return psu
}

// SetAppearances sets the "appearances" field.
func (psu *PlayerSeasonUpdate) SetAppearances(i int) *PlayerSeasonUpdate {
	psu.mutation.ResetAppearances()
	psu.mutation.SetAppearances(i)
	return psu
}

// AddAppearances adds i to the "appearances" field.
func (psu *PlayerSeasonUpdate) AddAppearances(i int) *PlayerSeasonUpdate {
	psu.mutation.AddAppearances(i)
	return psu
}

// SetGoals sets the "goals" field.
func (psu *PlayerSeasonUpdate) SetGoals(i int) *PlayerSeasonUpdate {
	psu.mutation.ResetGoals()
	psu.mutation.SetGoals(i)
	return psu
}

// AddGoals adds i to the "goals" field.
func (psu *PlayerSeasonUpdate) AddGoals(i int) *PlayerSeasonUpdate {
	psu.mutation.AddGoals(i)
	return psu
}

// SetAssists sets the "assists" field.
func (psu *PlayerSeasonUpdate) SetAssists(i int) *PlayerSeasonUpdate {
	psu.mutation.ResetAssists()
	psu.mutation.SetAssists(i)
	return psu
}

// AddAssists adds i to the "assists" field.
func (psu *PlayerSeasonUpdate) AddAssists(i int) *PlayerSeasonUpdate {
	psu.mutation.AddAssists(i)
	return psu
}

// SetSaves sets the "saves" field.
func (psu *PlayerSeasonUpdate) SetSaves(i int) *PlayerSeasonUpdate {
	psu.mutation.ResetSaves()
	psu.mutation.SetSaves(i)
	return psu
}

// AddSaves adds i to the "saves" field.
func (psu *PlayerSeasonUpdate) AddSaves(i int) *PlayerSeasonUpdate {
	psu.mutation.AddSaves(i)
	return psu
}

// AddClubIDs adds the "club" edge to the Club entity by IDs.
func (psu *PlayerSeasonUpdate) AddClubIDs(ids ...int) *PlayerSeasonUpdate {
	psu.mutation.AddClubIDs(ids...)
	return psu
}

// AddClub adds the "club" edges to the Club entity.
func (psu *PlayerSeasonUpdate) AddClub(c ...*Club) *PlayerSeasonUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.AddClubIDs(ids...)
}

// Mutation returns the PlayerSeasonMutation object of the builder.
func (psu *PlayerSeasonUpdate) Mutation() *PlayerSeasonMutation {
	return psu.mutation
}

// ClearClub clears all "club" edges to the Club entity.
func (psu *PlayerSeasonUpdate) ClearClub() *PlayerSeasonUpdate {
	psu.mutation.ClearClub()
	return psu
}

// RemoveClubIDs removes the "club" edge to Club entities by IDs.
func (psu *PlayerSeasonUpdate) RemoveClubIDs(ids ...int) *PlayerSeasonUpdate {
	psu.mutation.RemoveClubIDs(ids...)
	return psu
}

// RemoveClub removes "club" edges to Club entities.
func (psu *PlayerSeasonUpdate) RemoveClub(c ...*Club) *PlayerSeasonUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.RemoveClubIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PlayerSeasonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PlayerSeasonMutation](ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PlayerSeasonUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PlayerSeasonUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PlayerSeasonUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *PlayerSeasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerseason.Table, playerseason.Columns, sqlgraph.NewFieldSpec(playerseason.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Season(); ok {
		_spec.SetField(playerseason.FieldSeason, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedSeason(); ok {
		_spec.AddField(playerseason.FieldSeason, field.TypeInt, value)
	}
	if value, ok := psu.mutation.PID(); ok {
		_spec.SetField(playerseason.FieldPID, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedPID(); ok {
		_spec.AddField(playerseason.FieldPID, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Nationality(); ok {
		_spec.SetField(playerseason.FieldNationality, field.TypeString, value)
	}
	if value, ok := psu.mutation.Position(); ok {
		_spec.SetField(playerseason.FieldPosition, field.TypeString, value)
	}
	if value, ok := psu.mutation.Team(); ok {
		_spec.SetField(playerseason.FieldTeam, field.TypeString, value)
	}
	if value, ok := psu.mutation.Year(); ok {
		_spec.SetField(playerseason.FieldYear, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedYear(); ok {
		_spec.AddField(playerseason.FieldYear, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Appearances(); ok {
		_spec.SetField(playerseason.FieldAppearances, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedAppearances(); ok {
		_spec.AddField(playerseason.FieldAppearances, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Goals(); ok {
		_spec.SetField(playerseason.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedGoals(); ok {
		_spec.AddField(playerseason.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Assists(); ok {
		_spec.SetField(playerseason.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedAssists(); ok {
		_spec.AddField(playerseason.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Saves(); ok {
		_spec.SetField(playerseason.FieldSaves, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedSaves(); ok {
		_spec.AddField(playerseason.FieldSaves, field.TypeInt, value)
	}
	if psu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playerseason.ClubTable,
			Columns: playerseason.ClubPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedClubIDs(); len(nodes) > 0 && !psu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playerseason.ClubTable,
			Columns: playerseason.ClubPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playerseason.ClubTable,
			Columns: playerseason.ClubPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerseason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PlayerSeasonUpdateOne is the builder for updating a single PlayerSeason entity.
type PlayerSeasonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerSeasonMutation
}

// SetSeason sets the "season" field.
func (psuo *PlayerSeasonUpdateOne) SetSeason(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.ResetSeason()
	psuo.mutation.SetSeason(i)
	return psuo
}

// AddSeason adds i to the "season" field.
func (psuo *PlayerSeasonUpdateOne) AddSeason(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddSeason(i)
	return psuo
}

// SetPID sets the "pID" field.
func (psuo *PlayerSeasonUpdateOne) SetPID(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.ResetPID()
	psuo.mutation.SetPID(i)
	return psuo
}

// AddPID adds i to the "pID" field.
func (psuo *PlayerSeasonUpdateOne) AddPID(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddPID(i)
	return psuo
}

// SetNationality sets the "nationality" field.
func (psuo *PlayerSeasonUpdateOne) SetNationality(s string) *PlayerSeasonUpdateOne {
	psuo.mutation.SetNationality(s)
	return psuo
}

// SetPosition sets the "position" field.
func (psuo *PlayerSeasonUpdateOne) SetPosition(s string) *PlayerSeasonUpdateOne {
	psuo.mutation.SetPosition(s)
	return psuo
}

// SetTeam sets the "team" field.
func (psuo *PlayerSeasonUpdateOne) SetTeam(s string) *PlayerSeasonUpdateOne {
	psuo.mutation.SetTeam(s)
	return psuo
}

// SetYear sets the "year" field.
func (psuo *PlayerSeasonUpdateOne) SetYear(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.ResetYear()
	psuo.mutation.SetYear(i)
	return psuo
}

// AddYear adds i to the "year" field.
func (psuo *PlayerSeasonUpdateOne) AddYear(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddYear(i)
	return psuo
}

// SetAppearances sets the "appearances" field.
func (psuo *PlayerSeasonUpdateOne) SetAppearances(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.ResetAppearances()
	psuo.mutation.SetAppearances(i)
	return psuo
}

// AddAppearances adds i to the "appearances" field.
func (psuo *PlayerSeasonUpdateOne) AddAppearances(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddAppearances(i)
	return psuo
}

// SetGoals sets the "goals" field.
func (psuo *PlayerSeasonUpdateOne) SetGoals(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.ResetGoals()
	psuo.mutation.SetGoals(i)
	return psuo
}

// AddGoals adds i to the "goals" field.
func (psuo *PlayerSeasonUpdateOne) AddGoals(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddGoals(i)
	return psuo
}

// SetAssists sets the "assists" field.
func (psuo *PlayerSeasonUpdateOne) SetAssists(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.ResetAssists()
	psuo.mutation.SetAssists(i)
	return psuo
}

// AddAssists adds i to the "assists" field.
func (psuo *PlayerSeasonUpdateOne) AddAssists(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddAssists(i)
	return psuo
}

// SetSaves sets the "saves" field.
func (psuo *PlayerSeasonUpdateOne) SetSaves(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.ResetSaves()
	psuo.mutation.SetSaves(i)
	return psuo
}

// AddSaves adds i to the "saves" field.
func (psuo *PlayerSeasonUpdateOne) AddSaves(i int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddSaves(i)
	return psuo
}

// AddClubIDs adds the "club" edge to the Club entity by IDs.
func (psuo *PlayerSeasonUpdateOne) AddClubIDs(ids ...int) *PlayerSeasonUpdateOne {
	psuo.mutation.AddClubIDs(ids...)
	return psuo
}

// AddClub adds the "club" edges to the Club entity.
func (psuo *PlayerSeasonUpdateOne) AddClub(c ...*Club) *PlayerSeasonUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.AddClubIDs(ids...)
}

// Mutation returns the PlayerSeasonMutation object of the builder.
func (psuo *PlayerSeasonUpdateOne) Mutation() *PlayerSeasonMutation {
	return psuo.mutation
}

// ClearClub clears all "club" edges to the Club entity.
func (psuo *PlayerSeasonUpdateOne) ClearClub() *PlayerSeasonUpdateOne {
	psuo.mutation.ClearClub()
	return psuo
}

// RemoveClubIDs removes the "club" edge to Club entities by IDs.
func (psuo *PlayerSeasonUpdateOne) RemoveClubIDs(ids ...int) *PlayerSeasonUpdateOne {
	psuo.mutation.RemoveClubIDs(ids...)
	return psuo
}

// RemoveClub removes "club" edges to Club entities.
func (psuo *PlayerSeasonUpdateOne) RemoveClub(c ...*Club) *PlayerSeasonUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.RemoveClubIDs(ids...)
}

// Where appends a list predicates to the PlayerSeasonUpdate builder.
func (psuo *PlayerSeasonUpdateOne) Where(ps ...predicate.PlayerSeason) *PlayerSeasonUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PlayerSeasonUpdateOne) Select(field string, fields ...string) *PlayerSeasonUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PlayerSeason entity.
func (psuo *PlayerSeasonUpdateOne) Save(ctx context.Context) (*PlayerSeason, error) {
	return withHooks[*PlayerSeason, PlayerSeasonMutation](ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PlayerSeasonUpdateOne) SaveX(ctx context.Context) *PlayerSeason {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PlayerSeasonUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PlayerSeasonUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *PlayerSeasonUpdateOne) sqlSave(ctx context.Context) (_node *PlayerSeason, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerseason.Table, playerseason.Columns, sqlgraph.NewFieldSpec(playerseason.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerSeason.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerseason.FieldID)
		for _, f := range fields {
			if !playerseason.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playerseason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Season(); ok {
		_spec.SetField(playerseason.FieldSeason, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedSeason(); ok {
		_spec.AddField(playerseason.FieldSeason, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.PID(); ok {
		_spec.SetField(playerseason.FieldPID, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedPID(); ok {
		_spec.AddField(playerseason.FieldPID, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Nationality(); ok {
		_spec.SetField(playerseason.FieldNationality, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Position(); ok {
		_spec.SetField(playerseason.FieldPosition, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Team(); ok {
		_spec.SetField(playerseason.FieldTeam, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Year(); ok {
		_spec.SetField(playerseason.FieldYear, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedYear(); ok {
		_spec.AddField(playerseason.FieldYear, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Appearances(); ok {
		_spec.SetField(playerseason.FieldAppearances, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedAppearances(); ok {
		_spec.AddField(playerseason.FieldAppearances, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Goals(); ok {
		_spec.SetField(playerseason.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedGoals(); ok {
		_spec.AddField(playerseason.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Assists(); ok {
		_spec.SetField(playerseason.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedAssists(); ok {
		_spec.AddField(playerseason.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Saves(); ok {
		_spec.SetField(playerseason.FieldSaves, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedSaves(); ok {
		_spec.AddField(playerseason.FieldSaves, field.TypeInt, value)
	}
	if psuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playerseason.ClubTable,
			Columns: playerseason.ClubPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedClubIDs(); len(nodes) > 0 && !psuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playerseason.ClubTable,
			Columns: playerseason.ClubPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playerseason.ClubTable,
			Columns: playerseason.ClubPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerSeason{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerseason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
