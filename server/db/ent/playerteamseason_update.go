// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/player"
	"mapeleven/db/ent/playerteamseason"
	"mapeleven/db/ent/predicate"
	"mapeleven/db/ent/teamseason"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerTeamSeasonUpdate is the builder for updating PlayerTeamSeason entities.
type PlayerTeamSeasonUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerTeamSeasonMutation
}

// Where appends a list predicates to the PlayerTeamSeasonUpdate builder.
func (ptsu *PlayerTeamSeasonUpdate) Where(ps ...predicate.PlayerTeamSeason) *PlayerTeamSeasonUpdate {
	ptsu.mutation.Where(ps...)
	return ptsu
}

// SetPlayerTeamSeasonID sets the "player_team_season_id" field.
func (ptsu *PlayerTeamSeasonUpdate) SetPlayerTeamSeasonID(i int) *PlayerTeamSeasonUpdate {
	ptsu.mutation.ResetPlayerTeamSeasonID()
	ptsu.mutation.SetPlayerTeamSeasonID(i)
	return ptsu
}

// AddPlayerTeamSeasonID adds i to the "player_team_season_id" field.
func (ptsu *PlayerTeamSeasonUpdate) AddPlayerTeamSeasonID(i int) *PlayerTeamSeasonUpdate {
	ptsu.mutation.AddPlayerTeamSeasonID(i)
	return ptsu
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (ptsu *PlayerTeamSeasonUpdate) SetPlayerID(id int) *PlayerTeamSeasonUpdate {
	ptsu.mutation.SetPlayerID(id)
	return ptsu
}

// SetPlayer sets the "player" edge to the Player entity.
func (ptsu *PlayerTeamSeasonUpdate) SetPlayer(p *Player) *PlayerTeamSeasonUpdate {
	return ptsu.SetPlayerID(p.ID)
}

// SetTeamSeasonID sets the "teamSeason" edge to the TeamSeason entity by ID.
func (ptsu *PlayerTeamSeasonUpdate) SetTeamSeasonID(id int) *PlayerTeamSeasonUpdate {
	ptsu.mutation.SetTeamSeasonID(id)
	return ptsu
}

// SetTeamSeason sets the "teamSeason" edge to the TeamSeason entity.
func (ptsu *PlayerTeamSeasonUpdate) SetTeamSeason(t *TeamSeason) *PlayerTeamSeasonUpdate {
	return ptsu.SetTeamSeasonID(t.ID)
}

// Mutation returns the PlayerTeamSeasonMutation object of the builder.
func (ptsu *PlayerTeamSeasonUpdate) Mutation() *PlayerTeamSeasonMutation {
	return ptsu.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (ptsu *PlayerTeamSeasonUpdate) ClearPlayer() *PlayerTeamSeasonUpdate {
	ptsu.mutation.ClearPlayer()
	return ptsu
}

// ClearTeamSeason clears the "teamSeason" edge to the TeamSeason entity.
func (ptsu *PlayerTeamSeasonUpdate) ClearTeamSeason() *PlayerTeamSeasonUpdate {
	ptsu.mutation.ClearTeamSeason()
	return ptsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptsu *PlayerTeamSeasonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PlayerTeamSeasonMutation](ctx, ptsu.sqlSave, ptsu.mutation, ptsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptsu *PlayerTeamSeasonUpdate) SaveX(ctx context.Context) int {
	affected, err := ptsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptsu *PlayerTeamSeasonUpdate) Exec(ctx context.Context) error {
	_, err := ptsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptsu *PlayerTeamSeasonUpdate) ExecX(ctx context.Context) {
	if err := ptsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptsu *PlayerTeamSeasonUpdate) check() error {
	if _, ok := ptsu.mutation.PlayerID(); ptsu.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerTeamSeason.player"`)
	}
	if _, ok := ptsu.mutation.TeamSeasonID(); ptsu.mutation.TeamSeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerTeamSeason.teamSeason"`)
	}
	return nil
}

func (ptsu *PlayerTeamSeasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playerteamseason.Table, playerteamseason.Columns, sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt))
	if ps := ptsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptsu.mutation.PlayerTeamSeasonID(); ok {
		_spec.SetField(playerteamseason.FieldPlayerTeamSeasonID, field.TypeInt, value)
	}
	if value, ok := ptsu.mutation.AddedPlayerTeamSeasonID(); ok {
		_spec.AddField(playerteamseason.FieldPlayerTeamSeasonID, field.TypeInt, value)
	}
	if ptsu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.PlayerTable,
			Columns: []string{playerteamseason.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptsu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.PlayerTable,
			Columns: []string{playerteamseason.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptsu.mutation.TeamSeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.TeamSeasonTable,
			Columns: []string{playerteamseason.TeamSeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teamseason.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptsu.mutation.TeamSeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.TeamSeasonTable,
			Columns: []string{playerteamseason.TeamSeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teamseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerteamseason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptsu.mutation.done = true
	return n, nil
}

// PlayerTeamSeasonUpdateOne is the builder for updating a single PlayerTeamSeason entity.
type PlayerTeamSeasonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerTeamSeasonMutation
}

// SetPlayerTeamSeasonID sets the "player_team_season_id" field.
func (ptsuo *PlayerTeamSeasonUpdateOne) SetPlayerTeamSeasonID(i int) *PlayerTeamSeasonUpdateOne {
	ptsuo.mutation.ResetPlayerTeamSeasonID()
	ptsuo.mutation.SetPlayerTeamSeasonID(i)
	return ptsuo
}

// AddPlayerTeamSeasonID adds i to the "player_team_season_id" field.
func (ptsuo *PlayerTeamSeasonUpdateOne) AddPlayerTeamSeasonID(i int) *PlayerTeamSeasonUpdateOne {
	ptsuo.mutation.AddPlayerTeamSeasonID(i)
	return ptsuo
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (ptsuo *PlayerTeamSeasonUpdateOne) SetPlayerID(id int) *PlayerTeamSeasonUpdateOne {
	ptsuo.mutation.SetPlayerID(id)
	return ptsuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (ptsuo *PlayerTeamSeasonUpdateOne) SetPlayer(p *Player) *PlayerTeamSeasonUpdateOne {
	return ptsuo.SetPlayerID(p.ID)
}

// SetTeamSeasonID sets the "teamSeason" edge to the TeamSeason entity by ID.
func (ptsuo *PlayerTeamSeasonUpdateOne) SetTeamSeasonID(id int) *PlayerTeamSeasonUpdateOne {
	ptsuo.mutation.SetTeamSeasonID(id)
	return ptsuo
}

// SetTeamSeason sets the "teamSeason" edge to the TeamSeason entity.
func (ptsuo *PlayerTeamSeasonUpdateOne) SetTeamSeason(t *TeamSeason) *PlayerTeamSeasonUpdateOne {
	return ptsuo.SetTeamSeasonID(t.ID)
}

// Mutation returns the PlayerTeamSeasonMutation object of the builder.
func (ptsuo *PlayerTeamSeasonUpdateOne) Mutation() *PlayerTeamSeasonMutation {
	return ptsuo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (ptsuo *PlayerTeamSeasonUpdateOne) ClearPlayer() *PlayerTeamSeasonUpdateOne {
	ptsuo.mutation.ClearPlayer()
	return ptsuo
}

// ClearTeamSeason clears the "teamSeason" edge to the TeamSeason entity.
func (ptsuo *PlayerTeamSeasonUpdateOne) ClearTeamSeason() *PlayerTeamSeasonUpdateOne {
	ptsuo.mutation.ClearTeamSeason()
	return ptsuo
}

// Where appends a list predicates to the PlayerTeamSeasonUpdate builder.
func (ptsuo *PlayerTeamSeasonUpdateOne) Where(ps ...predicate.PlayerTeamSeason) *PlayerTeamSeasonUpdateOne {
	ptsuo.mutation.Where(ps...)
	return ptsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptsuo *PlayerTeamSeasonUpdateOne) Select(field string, fields ...string) *PlayerTeamSeasonUpdateOne {
	ptsuo.fields = append([]string{field}, fields...)
	return ptsuo
}

// Save executes the query and returns the updated PlayerTeamSeason entity.
func (ptsuo *PlayerTeamSeasonUpdateOne) Save(ctx context.Context) (*PlayerTeamSeason, error) {
	return withHooks[*PlayerTeamSeason, PlayerTeamSeasonMutation](ctx, ptsuo.sqlSave, ptsuo.mutation, ptsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptsuo *PlayerTeamSeasonUpdateOne) SaveX(ctx context.Context) *PlayerTeamSeason {
	node, err := ptsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptsuo *PlayerTeamSeasonUpdateOne) Exec(ctx context.Context) error {
	_, err := ptsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptsuo *PlayerTeamSeasonUpdateOne) ExecX(ctx context.Context) {
	if err := ptsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptsuo *PlayerTeamSeasonUpdateOne) check() error {
	if _, ok := ptsuo.mutation.PlayerID(); ptsuo.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerTeamSeason.player"`)
	}
	if _, ok := ptsuo.mutation.TeamSeasonID(); ptsuo.mutation.TeamSeasonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerTeamSeason.teamSeason"`)
	}
	return nil
}

func (ptsuo *PlayerTeamSeasonUpdateOne) sqlSave(ctx context.Context) (_node *PlayerTeamSeason, err error) {
	if err := ptsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playerteamseason.Table, playerteamseason.Columns, sqlgraph.NewFieldSpec(playerteamseason.FieldID, field.TypeInt))
	id, ok := ptsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerTeamSeason.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerteamseason.FieldID)
		for _, f := range fields {
			if !playerteamseason.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playerteamseason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptsuo.mutation.PlayerTeamSeasonID(); ok {
		_spec.SetField(playerteamseason.FieldPlayerTeamSeasonID, field.TypeInt, value)
	}
	if value, ok := ptsuo.mutation.AddedPlayerTeamSeasonID(); ok {
		_spec.AddField(playerteamseason.FieldPlayerTeamSeasonID, field.TypeInt, value)
	}
	if ptsuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.PlayerTable,
			Columns: []string{playerteamseason.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptsuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.PlayerTable,
			Columns: []string{playerteamseason.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptsuo.mutation.TeamSeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.TeamSeasonTable,
			Columns: []string{playerteamseason.TeamSeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teamseason.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptsuo.mutation.TeamSeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerteamseason.TeamSeasonTable,
			Columns: []string{playerteamseason.TeamSeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teamseason.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerTeamSeason{config: ptsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerteamseason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptsuo.mutation.done = true
	return _node, nil
}
