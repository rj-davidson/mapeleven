// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mapeleven/db/ent/club"
	"mapeleven/db/ent/playerseason"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerSeasonCreate is the builder for creating a PlayerSeason entity.
type PlayerSeasonCreate struct {
	config
	mutation *PlayerSeasonMutation
	hooks    []Hook
}

// SetSeason sets the "season" field.
func (psc *PlayerSeasonCreate) SetSeason(i int) *PlayerSeasonCreate {
	psc.mutation.SetSeason(i)
	return psc
}

// SetPID sets the "pID" field.
func (psc *PlayerSeasonCreate) SetPID(i int) *PlayerSeasonCreate {
	psc.mutation.SetPID(i)
	return psc
}

// SetNationality sets the "nationality" field.
func (psc *PlayerSeasonCreate) SetNationality(s string) *PlayerSeasonCreate {
	psc.mutation.SetNationality(s)
	return psc
}

// SetPosition sets the "position" field.
func (psc *PlayerSeasonCreate) SetPosition(s string) *PlayerSeasonCreate {
	psc.mutation.SetPosition(s)
	return psc
}

// SetTeam sets the "team" field.
func (psc *PlayerSeasonCreate) SetTeam(s string) *PlayerSeasonCreate {
	psc.mutation.SetTeam(s)
	return psc
}

// SetYear sets the "year" field.
func (psc *PlayerSeasonCreate) SetYear(i int) *PlayerSeasonCreate {
	psc.mutation.SetYear(i)
	return psc
}

// SetAppearances sets the "appearances" field.
func (psc *PlayerSeasonCreate) SetAppearances(i int) *PlayerSeasonCreate {
	psc.mutation.SetAppearances(i)
	return psc
}

// SetGoals sets the "goals" field.
func (psc *PlayerSeasonCreate) SetGoals(i int) *PlayerSeasonCreate {
	psc.mutation.SetGoals(i)
	return psc
}

// SetAssists sets the "assists" field.
func (psc *PlayerSeasonCreate) SetAssists(i int) *PlayerSeasonCreate {
	psc.mutation.SetAssists(i)
	return psc
}

// SetSaves sets the "saves" field.
func (psc *PlayerSeasonCreate) SetSaves(i int) *PlayerSeasonCreate {
	psc.mutation.SetSaves(i)
	return psc
}

// AddClubIDs adds the "club" edge to the Club entity by IDs.
func (psc *PlayerSeasonCreate) AddClubIDs(ids ...int) *PlayerSeasonCreate {
	psc.mutation.AddClubIDs(ids...)
	return psc
}

// AddClub adds the "club" edges to the Club entity.
func (psc *PlayerSeasonCreate) AddClub(c ...*Club) *PlayerSeasonCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psc.AddClubIDs(ids...)
}

// Mutation returns the PlayerSeasonMutation object of the builder.
func (psc *PlayerSeasonCreate) Mutation() *PlayerSeasonMutation {
	return psc.mutation
}

// Save creates the PlayerSeason in the database.
func (psc *PlayerSeasonCreate) Save(ctx context.Context) (*PlayerSeason, error) {
	return withHooks[*PlayerSeason, PlayerSeasonMutation](ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PlayerSeasonCreate) SaveX(ctx context.Context) *PlayerSeason {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PlayerSeasonCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PlayerSeasonCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PlayerSeasonCreate) check() error {
	if _, ok := psc.mutation.Season(); !ok {
		return &ValidationError{Name: "season", err: errors.New(`ent: missing required field "PlayerSeason.season"`)}
	}
	if _, ok := psc.mutation.PID(); !ok {
		return &ValidationError{Name: "pID", err: errors.New(`ent: missing required field "PlayerSeason.pID"`)}
	}
	if _, ok := psc.mutation.Nationality(); !ok {
		return &ValidationError{Name: "nationality", err: errors.New(`ent: missing required field "PlayerSeason.nationality"`)}
	}
	if _, ok := psc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "PlayerSeason.position"`)}
	}
	if _, ok := psc.mutation.Team(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required field "PlayerSeason.team"`)}
	}
	if _, ok := psc.mutation.Year(); !ok {
		return &ValidationError{Name: "year", err: errors.New(`ent: missing required field "PlayerSeason.year"`)}
	}
	if _, ok := psc.mutation.Appearances(); !ok {
		return &ValidationError{Name: "appearances", err: errors.New(`ent: missing required field "PlayerSeason.appearances"`)}
	}
	if _, ok := psc.mutation.Goals(); !ok {
		return &ValidationError{Name: "goals", err: errors.New(`ent: missing required field "PlayerSeason.goals"`)}
	}
	if _, ok := psc.mutation.Assists(); !ok {
		return &ValidationError{Name: "assists", err: errors.New(`ent: missing required field "PlayerSeason.assists"`)}
	}
	if _, ok := psc.mutation.Saves(); !ok {
		return &ValidationError{Name: "saves", err: errors.New(`ent: missing required field "PlayerSeason.saves"`)}
	}
	return nil
}

func (psc *PlayerSeasonCreate) sqlSave(ctx context.Context) (*PlayerSeason, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PlayerSeasonCreate) createSpec() (*PlayerSeason, *sqlgraph.CreateSpec) {
	var (
		_node = &PlayerSeason{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(playerseason.Table, sqlgraph.NewFieldSpec(playerseason.FieldID, field.TypeInt))
	)
	if value, ok := psc.mutation.Season(); ok {
		_spec.SetField(playerseason.FieldSeason, field.TypeInt, value)
		_node.Season = value
	}
	if value, ok := psc.mutation.PID(); ok {
		_spec.SetField(playerseason.FieldPID, field.TypeInt, value)
		_node.PID = value
	}
	if value, ok := psc.mutation.Nationality(); ok {
		_spec.SetField(playerseason.FieldNationality, field.TypeString, value)
		_node.Nationality = value
	}
	if value, ok := psc.mutation.Position(); ok {
		_spec.SetField(playerseason.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := psc.mutation.Team(); ok {
		_spec.SetField(playerseason.FieldTeam, field.TypeString, value)
		_node.Team = value
	}
	if value, ok := psc.mutation.Year(); ok {
		_spec.SetField(playerseason.FieldYear, field.TypeInt, value)
		_node.Year = value
	}
	if value, ok := psc.mutation.Appearances(); ok {
		_spec.SetField(playerseason.FieldAppearances, field.TypeInt, value)
		_node.Appearances = value
	}
	if value, ok := psc.mutation.Goals(); ok {
		_spec.SetField(playerseason.FieldGoals, field.TypeInt, value)
		_node.Goals = value
	}
	if value, ok := psc.mutation.Assists(); ok {
		_spec.SetField(playerseason.FieldAssists, field.TypeInt, value)
		_node.Assists = value
	}
	if value, ok := psc.mutation.Saves(); ok {
		_spec.SetField(playerseason.FieldSaves, field.TypeInt, value)
		_node.Saves = value
	}
	if nodes := psc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playerseason.ClubTable,
			Columns: playerseason.ClubPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerSeasonCreateBulk is the builder for creating many PlayerSeason entities in bulk.
type PlayerSeasonCreateBulk struct {
	config
	builders []*PlayerSeasonCreate
}

// Save creates the PlayerSeason entities in the database.
func (pscb *PlayerSeasonCreateBulk) Save(ctx context.Context) ([]*PlayerSeason, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PlayerSeason, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerSeasonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PlayerSeasonCreateBulk) SaveX(ctx context.Context) []*PlayerSeason {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PlayerSeasonCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PlayerSeasonCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
