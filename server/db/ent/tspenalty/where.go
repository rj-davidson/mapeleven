// Code generated by ent, DO NOT EDIT.

package tspenalty

import (
	"mapeleven/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLTE(FieldID, id))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldTotal, v))
}

// ScoredTotal applies equality check predicate on the "scoredTotal" field. It's identical to ScoredTotalEQ.
func ScoredTotal(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldScoredTotal, v))
}

// MissedTotal applies equality check predicate on the "missedTotal" field. It's identical to MissedTotalEQ.
func MissedTotal(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldMissedTotal, v))
}

// ScoredPercentage applies equality check predicate on the "scoredPercentage" field. It's identical to ScoredPercentageEQ.
func ScoredPercentage(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldScoredPercentage, v))
}

// MissedPercentage applies equality check predicate on the "missedPercentage" field. It's identical to MissedPercentageEQ.
func MissedPercentage(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldMissedPercentage, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldLastUpdated, v))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLTE(FieldTotal, v))
}

// TotalIsNil applies the IsNil predicate on the "total" field.
func TotalIsNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIsNull(FieldTotal))
}

// TotalNotNil applies the NotNil predicate on the "total" field.
func TotalNotNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotNull(FieldTotal))
}

// ScoredTotalEQ applies the EQ predicate on the "scoredTotal" field.
func ScoredTotalEQ(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldScoredTotal, v))
}

// ScoredTotalNEQ applies the NEQ predicate on the "scoredTotal" field.
func ScoredTotalNEQ(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNEQ(FieldScoredTotal, v))
}

// ScoredTotalIn applies the In predicate on the "scoredTotal" field.
func ScoredTotalIn(vs ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIn(FieldScoredTotal, vs...))
}

// ScoredTotalNotIn applies the NotIn predicate on the "scoredTotal" field.
func ScoredTotalNotIn(vs ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotIn(FieldScoredTotal, vs...))
}

// ScoredTotalGT applies the GT predicate on the "scoredTotal" field.
func ScoredTotalGT(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGT(FieldScoredTotal, v))
}

// ScoredTotalGTE applies the GTE predicate on the "scoredTotal" field.
func ScoredTotalGTE(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGTE(FieldScoredTotal, v))
}

// ScoredTotalLT applies the LT predicate on the "scoredTotal" field.
func ScoredTotalLT(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLT(FieldScoredTotal, v))
}

// ScoredTotalLTE applies the LTE predicate on the "scoredTotal" field.
func ScoredTotalLTE(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLTE(FieldScoredTotal, v))
}

// ScoredTotalIsNil applies the IsNil predicate on the "scoredTotal" field.
func ScoredTotalIsNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIsNull(FieldScoredTotal))
}

// ScoredTotalNotNil applies the NotNil predicate on the "scoredTotal" field.
func ScoredTotalNotNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotNull(FieldScoredTotal))
}

// MissedTotalEQ applies the EQ predicate on the "missedTotal" field.
func MissedTotalEQ(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldMissedTotal, v))
}

// MissedTotalNEQ applies the NEQ predicate on the "missedTotal" field.
func MissedTotalNEQ(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNEQ(FieldMissedTotal, v))
}

// MissedTotalIn applies the In predicate on the "missedTotal" field.
func MissedTotalIn(vs ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIn(FieldMissedTotal, vs...))
}

// MissedTotalNotIn applies the NotIn predicate on the "missedTotal" field.
func MissedTotalNotIn(vs ...int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotIn(FieldMissedTotal, vs...))
}

// MissedTotalGT applies the GT predicate on the "missedTotal" field.
func MissedTotalGT(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGT(FieldMissedTotal, v))
}

// MissedTotalGTE applies the GTE predicate on the "missedTotal" field.
func MissedTotalGTE(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGTE(FieldMissedTotal, v))
}

// MissedTotalLT applies the LT predicate on the "missedTotal" field.
func MissedTotalLT(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLT(FieldMissedTotal, v))
}

// MissedTotalLTE applies the LTE predicate on the "missedTotal" field.
func MissedTotalLTE(v int) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLTE(FieldMissedTotal, v))
}

// MissedTotalIsNil applies the IsNil predicate on the "missedTotal" field.
func MissedTotalIsNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIsNull(FieldMissedTotal))
}

// MissedTotalNotNil applies the NotNil predicate on the "missedTotal" field.
func MissedTotalNotNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotNull(FieldMissedTotal))
}

// ScoredPercentageEQ applies the EQ predicate on the "scoredPercentage" field.
func ScoredPercentageEQ(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldScoredPercentage, v))
}

// ScoredPercentageNEQ applies the NEQ predicate on the "scoredPercentage" field.
func ScoredPercentageNEQ(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNEQ(FieldScoredPercentage, v))
}

// ScoredPercentageIn applies the In predicate on the "scoredPercentage" field.
func ScoredPercentageIn(vs ...string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIn(FieldScoredPercentage, vs...))
}

// ScoredPercentageNotIn applies the NotIn predicate on the "scoredPercentage" field.
func ScoredPercentageNotIn(vs ...string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotIn(FieldScoredPercentage, vs...))
}

// ScoredPercentageGT applies the GT predicate on the "scoredPercentage" field.
func ScoredPercentageGT(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGT(FieldScoredPercentage, v))
}

// ScoredPercentageGTE applies the GTE predicate on the "scoredPercentage" field.
func ScoredPercentageGTE(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGTE(FieldScoredPercentage, v))
}

// ScoredPercentageLT applies the LT predicate on the "scoredPercentage" field.
func ScoredPercentageLT(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLT(FieldScoredPercentage, v))
}

// ScoredPercentageLTE applies the LTE predicate on the "scoredPercentage" field.
func ScoredPercentageLTE(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLTE(FieldScoredPercentage, v))
}

// ScoredPercentageContains applies the Contains predicate on the "scoredPercentage" field.
func ScoredPercentageContains(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldContains(FieldScoredPercentage, v))
}

// ScoredPercentageHasPrefix applies the HasPrefix predicate on the "scoredPercentage" field.
func ScoredPercentageHasPrefix(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldHasPrefix(FieldScoredPercentage, v))
}

// ScoredPercentageHasSuffix applies the HasSuffix predicate on the "scoredPercentage" field.
func ScoredPercentageHasSuffix(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldHasSuffix(FieldScoredPercentage, v))
}

// ScoredPercentageIsNil applies the IsNil predicate on the "scoredPercentage" field.
func ScoredPercentageIsNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIsNull(FieldScoredPercentage))
}

// ScoredPercentageNotNil applies the NotNil predicate on the "scoredPercentage" field.
func ScoredPercentageNotNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotNull(FieldScoredPercentage))
}

// ScoredPercentageEqualFold applies the EqualFold predicate on the "scoredPercentage" field.
func ScoredPercentageEqualFold(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEqualFold(FieldScoredPercentage, v))
}

// ScoredPercentageContainsFold applies the ContainsFold predicate on the "scoredPercentage" field.
func ScoredPercentageContainsFold(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldContainsFold(FieldScoredPercentage, v))
}

// MissedPercentageEQ applies the EQ predicate on the "missedPercentage" field.
func MissedPercentageEQ(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldMissedPercentage, v))
}

// MissedPercentageNEQ applies the NEQ predicate on the "missedPercentage" field.
func MissedPercentageNEQ(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNEQ(FieldMissedPercentage, v))
}

// MissedPercentageIn applies the In predicate on the "missedPercentage" field.
func MissedPercentageIn(vs ...string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIn(FieldMissedPercentage, vs...))
}

// MissedPercentageNotIn applies the NotIn predicate on the "missedPercentage" field.
func MissedPercentageNotIn(vs ...string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotIn(FieldMissedPercentage, vs...))
}

// MissedPercentageGT applies the GT predicate on the "missedPercentage" field.
func MissedPercentageGT(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGT(FieldMissedPercentage, v))
}

// MissedPercentageGTE applies the GTE predicate on the "missedPercentage" field.
func MissedPercentageGTE(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGTE(FieldMissedPercentage, v))
}

// MissedPercentageLT applies the LT predicate on the "missedPercentage" field.
func MissedPercentageLT(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLT(FieldMissedPercentage, v))
}

// MissedPercentageLTE applies the LTE predicate on the "missedPercentage" field.
func MissedPercentageLTE(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLTE(FieldMissedPercentage, v))
}

// MissedPercentageContains applies the Contains predicate on the "missedPercentage" field.
func MissedPercentageContains(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldContains(FieldMissedPercentage, v))
}

// MissedPercentageHasPrefix applies the HasPrefix predicate on the "missedPercentage" field.
func MissedPercentageHasPrefix(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldHasPrefix(FieldMissedPercentage, v))
}

// MissedPercentageHasSuffix applies the HasSuffix predicate on the "missedPercentage" field.
func MissedPercentageHasSuffix(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldHasSuffix(FieldMissedPercentage, v))
}

// MissedPercentageIsNil applies the IsNil predicate on the "missedPercentage" field.
func MissedPercentageIsNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIsNull(FieldMissedPercentage))
}

// MissedPercentageNotNil applies the NotNil predicate on the "missedPercentage" field.
func MissedPercentageNotNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotNull(FieldMissedPercentage))
}

// MissedPercentageEqualFold applies the EqualFold predicate on the "missedPercentage" field.
func MissedPercentageEqualFold(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEqualFold(FieldMissedPercentage, v))
}

// MissedPercentageContainsFold applies the ContainsFold predicate on the "missedPercentage" field.
func MissedPercentageContainsFold(v string) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldContainsFold(FieldMissedPercentage, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.TSPenalty {
	return predicate.TSPenalty(sql.FieldNotNull(FieldLastUpdated))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.TSPenalty {
	return predicate.TSPenalty(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.TSPenalty {
	return predicate.TSPenalty(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TSPenalty) predicate.TSPenalty {
	return predicate.TSPenalty(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TSPenalty) predicate.TSPenalty {
	return predicate.TSPenalty(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TSPenalty) predicate.TSPenalty {
	return predicate.TSPenalty(func(s *sql.Selector) {
		p(s.Not())
	})
}
