// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/matchplayer"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psdefense"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psfairplay"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgames"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psshooting"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pssubstitutes"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pstechnical"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/season"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerStatsQuery is the builder for querying PlayerStats entities.
type PlayerStatsQuery struct {
	config
	ctx               *QueryContext
	order             []playerstats.OrderOption
	inters            []Interceptor
	predicates        []predicate.PlayerStats
	withPlayer        *PlayerQuery
	withTeam          *TeamQuery
	withSeason        *SeasonQuery
	withPlayerEvents  *FixtureEventsQuery
	withMatchPlayer   *MatchPlayerQuery
	withAssistEvents  *FixtureEventsQuery
	withPsGames       *PSGamesQuery
	withPsShooting    *PSShootingQuery
	withPsDefense     *PSDefenseQuery
	withPsTechnical   *PSTechnicalQuery
	withPsPenalty     *PSPenaltyQuery
	withPsSubstitutes *PSSubstitutesQuery
	withPsFairplay    *PSFairplayQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlayerStatsQuery builder.
func (psq *PlayerStatsQuery) Where(ps ...predicate.PlayerStats) *PlayerStatsQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit the number of records to be returned by this query.
func (psq *PlayerStatsQuery) Limit(limit int) *PlayerStatsQuery {
	psq.ctx.Limit = &limit
	return psq
}

// Offset to start from.
func (psq *PlayerStatsQuery) Offset(offset int) *PlayerStatsQuery {
	psq.ctx.Offset = &offset
	return psq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psq *PlayerStatsQuery) Unique(unique bool) *PlayerStatsQuery {
	psq.ctx.Unique = &unique
	return psq
}

// Order specifies how the records should be ordered.
func (psq *PlayerStatsQuery) Order(o ...playerstats.OrderOption) *PlayerStatsQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryPlayer chains the current query on the "player" edge.
func (psq *PlayerStatsQuery) QueryPlayer() *PlayerQuery {
	query := (&PlayerClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playerstats.PlayerTable, playerstats.PlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeam chains the current query on the "team" edge.
func (psq *PlayerStatsQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playerstats.TeamTable, playerstats.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySeason chains the current query on the "season" edge.
func (psq *PlayerStatsQuery) QuerySeason() *SeasonQuery {
	query := (&SeasonClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(season.Table, season.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, playerstats.SeasonTable, playerstats.SeasonPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlayerEvents chains the current query on the "playerEvents" edge.
func (psq *PlayerStatsQuery) QueryPlayerEvents() *FixtureEventsQuery {
	query := (&FixtureEventsClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(fixtureevents.Table, fixtureevents.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playerstats.PlayerEventsTable, playerstats.PlayerEventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMatchPlayer chains the current query on the "matchPlayer" edge.
func (psq *PlayerStatsQuery) QueryMatchPlayer() *MatchPlayerQuery {
	query := (&MatchPlayerClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(matchplayer.Table, matchplayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playerstats.MatchPlayerTable, playerstats.MatchPlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssistEvents chains the current query on the "assistEvents" edge.
func (psq *PlayerStatsQuery) QueryAssistEvents() *FixtureEventsQuery {
	query := (&FixtureEventsClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(fixtureevents.Table, fixtureevents.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playerstats.AssistEventsTable, playerstats.AssistEventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPsGames chains the current query on the "psGames" edge.
func (psq *PlayerStatsQuery) QueryPsGames() *PSGamesQuery {
	query := (&PSGamesClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(psgames.Table, psgames.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, playerstats.PsGamesTable, playerstats.PsGamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPsShooting chains the current query on the "psShooting" edge.
func (psq *PlayerStatsQuery) QueryPsShooting() *PSShootingQuery {
	query := (&PSShootingClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(psshooting.Table, psshooting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, playerstats.PsShootingTable, playerstats.PsShootingColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPsDefense chains the current query on the "psDefense" edge.
func (psq *PlayerStatsQuery) QueryPsDefense() *PSDefenseQuery {
	query := (&PSDefenseClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(psdefense.Table, psdefense.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, playerstats.PsDefenseTable, playerstats.PsDefenseColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPsTechnical chains the current query on the "psTechnical" edge.
func (psq *PlayerStatsQuery) QueryPsTechnical() *PSTechnicalQuery {
	query := (&PSTechnicalClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(pstechnical.Table, pstechnical.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, playerstats.PsTechnicalTable, playerstats.PsTechnicalColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPsPenalty chains the current query on the "psPenalty" edge.
func (psq *PlayerStatsQuery) QueryPsPenalty() *PSPenaltyQuery {
	query := (&PSPenaltyClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(pspenalty.Table, pspenalty.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, playerstats.PsPenaltyTable, playerstats.PsPenaltyColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPsSubstitutes chains the current query on the "psSubstitutes" edge.
func (psq *PlayerStatsQuery) QueryPsSubstitutes() *PSSubstitutesQuery {
	query := (&PSSubstitutesClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(pssubstitutes.Table, pssubstitutes.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, playerstats.PsSubstitutesTable, playerstats.PsSubstitutesColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPsFairplay chains the current query on the "psFairplay" edge.
func (psq *PlayerStatsQuery) QueryPsFairplay() *PSFairplayQuery {
	query := (&PSFairplayClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstats.Table, playerstats.FieldID, selector),
			sqlgraph.To(psfairplay.Table, psfairplay.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, playerstats.PsFairplayTable, playerstats.PsFairplayColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlayerStats entity from the query.
// Returns a *NotFoundError when no PlayerStats was found.
func (psq *PlayerStatsQuery) First(ctx context.Context) (*PlayerStats, error) {
	nodes, err := psq.Limit(1).All(setContextOp(ctx, psq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{playerstats.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *PlayerStatsQuery) FirstX(ctx context.Context) *PlayerStats {
	node, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlayerStats ID from the query.
// Returns a *NotFoundError when no PlayerStats ID was found.
func (psq *PlayerStatsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(1).IDs(setContextOp(ctx, psq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{playerstats.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psq *PlayerStatsQuery) FirstIDX(ctx context.Context) int {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlayerStats entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlayerStats entity is found.
// Returns a *NotFoundError when no PlayerStats entities are found.
func (psq *PlayerStatsQuery) Only(ctx context.Context) (*PlayerStats, error) {
	nodes, err := psq.Limit(2).All(setContextOp(ctx, psq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{playerstats.Label}
	default:
		return nil, &NotSingularError{playerstats.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *PlayerStatsQuery) OnlyX(ctx context.Context) *PlayerStats {
	node, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlayerStats ID in the query.
// Returns a *NotSingularError when more than one PlayerStats ID is found.
// Returns a *NotFoundError when no entities are found.
func (psq *PlayerStatsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(2).IDs(setContextOp(ctx, psq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{playerstats.Label}
	default:
		err = &NotSingularError{playerstats.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *PlayerStatsQuery) OnlyIDX(ctx context.Context) int {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlayerStatsSlice.
func (psq *PlayerStatsQuery) All(ctx context.Context) ([]*PlayerStats, error) {
	ctx = setContextOp(ctx, psq.ctx, "All")
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlayerStats, *PlayerStatsQuery]()
	return withInterceptors[[]*PlayerStats](ctx, psq, qr, psq.inters)
}

// AllX is like All, but panics if an error occurs.
func (psq *PlayerStatsQuery) AllX(ctx context.Context) []*PlayerStats {
	nodes, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlayerStats IDs.
func (psq *PlayerStatsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if psq.ctx.Unique == nil && psq.path != nil {
		psq.Unique(true)
	}
	ctx = setContextOp(ctx, psq.ctx, "IDs")
	if err = psq.Select(playerstats.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *PlayerStatsQuery) IDsX(ctx context.Context) []int {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *PlayerStatsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, psq.ctx, "Count")
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, psq, querierCount[*PlayerStatsQuery](), psq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (psq *PlayerStatsQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *PlayerStatsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, psq.ctx, "Exist")
	switch _, err := psq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *PlayerStatsQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlayerStatsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *PlayerStatsQuery) Clone() *PlayerStatsQuery {
	if psq == nil {
		return nil
	}
	return &PlayerStatsQuery{
		config:            psq.config,
		ctx:               psq.ctx.Clone(),
		order:             append([]playerstats.OrderOption{}, psq.order...),
		inters:            append([]Interceptor{}, psq.inters...),
		predicates:        append([]predicate.PlayerStats{}, psq.predicates...),
		withPlayer:        psq.withPlayer.Clone(),
		withTeam:          psq.withTeam.Clone(),
		withSeason:        psq.withSeason.Clone(),
		withPlayerEvents:  psq.withPlayerEvents.Clone(),
		withMatchPlayer:   psq.withMatchPlayer.Clone(),
		withAssistEvents:  psq.withAssistEvents.Clone(),
		withPsGames:       psq.withPsGames.Clone(),
		withPsShooting:    psq.withPsShooting.Clone(),
		withPsDefense:     psq.withPsDefense.Clone(),
		withPsTechnical:   psq.withPsTechnical.Clone(),
		withPsPenalty:     psq.withPsPenalty.Clone(),
		withPsSubstitutes: psq.withPsSubstitutes.Clone(),
		withPsFairplay:    psq.withPsFairplay.Clone(),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPlayer(opts ...func(*PlayerQuery)) *PlayerStatsQuery {
	query := (&PlayerClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPlayer = query
	return psq
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithTeam(opts ...func(*TeamQuery)) *PlayerStatsQuery {
	query := (&TeamClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withTeam = query
	return psq
}

// WithSeason tells the query-builder to eager-load the nodes that are connected to
// the "season" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithSeason(opts ...func(*SeasonQuery)) *PlayerStatsQuery {
	query := (&SeasonClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withSeason = query
	return psq
}

// WithPlayerEvents tells the query-builder to eager-load the nodes that are connected to
// the "playerEvents" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPlayerEvents(opts ...func(*FixtureEventsQuery)) *PlayerStatsQuery {
	query := (&FixtureEventsClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPlayerEvents = query
	return psq
}

// WithMatchPlayer tells the query-builder to eager-load the nodes that are connected to
// the "matchPlayer" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithMatchPlayer(opts ...func(*MatchPlayerQuery)) *PlayerStatsQuery {
	query := (&MatchPlayerClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withMatchPlayer = query
	return psq
}

// WithAssistEvents tells the query-builder to eager-load the nodes that are connected to
// the "assistEvents" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithAssistEvents(opts ...func(*FixtureEventsQuery)) *PlayerStatsQuery {
	query := (&FixtureEventsClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withAssistEvents = query
	return psq
}

// WithPsGames tells the query-builder to eager-load the nodes that are connected to
// the "psGames" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPsGames(opts ...func(*PSGamesQuery)) *PlayerStatsQuery {
	query := (&PSGamesClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPsGames = query
	return psq
}

// WithPsShooting tells the query-builder to eager-load the nodes that are connected to
// the "psShooting" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPsShooting(opts ...func(*PSShootingQuery)) *PlayerStatsQuery {
	query := (&PSShootingClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPsShooting = query
	return psq
}

// WithPsDefense tells the query-builder to eager-load the nodes that are connected to
// the "psDefense" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPsDefense(opts ...func(*PSDefenseQuery)) *PlayerStatsQuery {
	query := (&PSDefenseClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPsDefense = query
	return psq
}

// WithPsTechnical tells the query-builder to eager-load the nodes that are connected to
// the "psTechnical" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPsTechnical(opts ...func(*PSTechnicalQuery)) *PlayerStatsQuery {
	query := (&PSTechnicalClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPsTechnical = query
	return psq
}

// WithPsPenalty tells the query-builder to eager-load the nodes that are connected to
// the "psPenalty" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPsPenalty(opts ...func(*PSPenaltyQuery)) *PlayerStatsQuery {
	query := (&PSPenaltyClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPsPenalty = query
	return psq
}

// WithPsSubstitutes tells the query-builder to eager-load the nodes that are connected to
// the "psSubstitutes" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPsSubstitutes(opts ...func(*PSSubstitutesQuery)) *PlayerStatsQuery {
	query := (&PSSubstitutesClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPsSubstitutes = query
	return psq
}

// WithPsFairplay tells the query-builder to eager-load the nodes that are connected to
// the "psFairplay" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PlayerStatsQuery) WithPsFairplay(opts ...func(*PSFairplayQuery)) *PlayerStatsQuery {
	query := (&PSFairplayClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withPsFairplay = query
	return psq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LastUpdated time.Time `json:"lastUpdated,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlayerStats.Query().
//		GroupBy(playerstats.FieldLastUpdated).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psq *PlayerStatsQuery) GroupBy(field string, fields ...string) *PlayerStatsGroupBy {
	psq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlayerStatsGroupBy{build: psq}
	grbuild.flds = &psq.ctx.Fields
	grbuild.label = playerstats.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LastUpdated time.Time `json:"lastUpdated,omitempty"`
//	}
//
//	client.PlayerStats.Query().
//		Select(playerstats.FieldLastUpdated).
//		Scan(ctx, &v)
func (psq *PlayerStatsQuery) Select(fields ...string) *PlayerStatsSelect {
	psq.ctx.Fields = append(psq.ctx.Fields, fields...)
	sbuild := &PlayerStatsSelect{PlayerStatsQuery: psq}
	sbuild.label = playerstats.Label
	sbuild.flds, sbuild.scan = &psq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlayerStatsSelect configured with the given aggregations.
func (psq *PlayerStatsQuery) Aggregate(fns ...AggregateFunc) *PlayerStatsSelect {
	return psq.Select().Aggregate(fns...)
}

func (psq *PlayerStatsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range psq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, psq); err != nil {
				return err
			}
		}
	}
	for _, f := range psq.ctx.Fields {
		if !playerstats.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *PlayerStatsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlayerStats, error) {
	var (
		nodes       = []*PlayerStats{}
		withFKs     = psq.withFKs
		_spec       = psq.querySpec()
		loadedTypes = [13]bool{
			psq.withPlayer != nil,
			psq.withTeam != nil,
			psq.withSeason != nil,
			psq.withPlayerEvents != nil,
			psq.withMatchPlayer != nil,
			psq.withAssistEvents != nil,
			psq.withPsGames != nil,
			psq.withPsShooting != nil,
			psq.withPsDefense != nil,
			psq.withPsTechnical != nil,
			psq.withPsPenalty != nil,
			psq.withPsSubstitutes != nil,
			psq.withPsFairplay != nil,
		}
	)
	if psq.withPlayer != nil || psq.withTeam != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, playerstats.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlayerStats).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlayerStats{config: psq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psq.withPlayer; query != nil {
		if err := psq.loadPlayer(ctx, query, nodes, nil,
			func(n *PlayerStats, e *Player) { n.Edges.Player = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withTeam; query != nil {
		if err := psq.loadTeam(ctx, query, nodes, nil,
			func(n *PlayerStats, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withSeason; query != nil {
		if err := psq.loadSeason(ctx, query, nodes,
			func(n *PlayerStats) { n.Edges.Season = []*Season{} },
			func(n *PlayerStats, e *Season) { n.Edges.Season = append(n.Edges.Season, e) }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPlayerEvents; query != nil {
		if err := psq.loadPlayerEvents(ctx, query, nodes,
			func(n *PlayerStats) { n.Edges.PlayerEvents = []*FixtureEvents{} },
			func(n *PlayerStats, e *FixtureEvents) { n.Edges.PlayerEvents = append(n.Edges.PlayerEvents, e) }); err != nil {
			return nil, err
		}
	}
	if query := psq.withMatchPlayer; query != nil {
		if err := psq.loadMatchPlayer(ctx, query, nodes,
			func(n *PlayerStats) { n.Edges.MatchPlayer = []*MatchPlayer{} },
			func(n *PlayerStats, e *MatchPlayer) { n.Edges.MatchPlayer = append(n.Edges.MatchPlayer, e) }); err != nil {
			return nil, err
		}
	}
	if query := psq.withAssistEvents; query != nil {
		if err := psq.loadAssistEvents(ctx, query, nodes,
			func(n *PlayerStats) { n.Edges.AssistEvents = []*FixtureEvents{} },
			func(n *PlayerStats, e *FixtureEvents) { n.Edges.AssistEvents = append(n.Edges.AssistEvents, e) }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPsGames; query != nil {
		if err := psq.loadPsGames(ctx, query, nodes, nil,
			func(n *PlayerStats, e *PSGames) { n.Edges.PsGames = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPsShooting; query != nil {
		if err := psq.loadPsShooting(ctx, query, nodes, nil,
			func(n *PlayerStats, e *PSShooting) { n.Edges.PsShooting = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPsDefense; query != nil {
		if err := psq.loadPsDefense(ctx, query, nodes, nil,
			func(n *PlayerStats, e *PSDefense) { n.Edges.PsDefense = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPsTechnical; query != nil {
		if err := psq.loadPsTechnical(ctx, query, nodes, nil,
			func(n *PlayerStats, e *PSTechnical) { n.Edges.PsTechnical = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPsPenalty; query != nil {
		if err := psq.loadPsPenalty(ctx, query, nodes, nil,
			func(n *PlayerStats, e *PSPenalty) { n.Edges.PsPenalty = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPsSubstitutes; query != nil {
		if err := psq.loadPsSubstitutes(ctx, query, nodes, nil,
			func(n *PlayerStats, e *PSSubstitutes) { n.Edges.PsSubstitutes = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withPsFairplay; query != nil {
		if err := psq.loadPsFairplay(ctx, query, nodes, nil,
			func(n *PlayerStats, e *PSFairplay) { n.Edges.PsFairplay = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psq *PlayerStatsQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *Player)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlayerStats)
	for i := range nodes {
		if nodes[i].player_player_stats == nil {
			continue
		}
		fk := *nodes[i].player_player_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_player_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *PlayerStatsQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *Team)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlayerStats)
	for i := range nodes {
		if nodes[i].team_player_stats == nil {
			continue
		}
		fk := *nodes[i].team_player_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_player_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *PlayerStatsQuery) loadSeason(ctx context.Context, query *SeasonQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *Season)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*PlayerStats)
	nids := make(map[int]map[*PlayerStats]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(playerstats.SeasonTable)
		s.Join(joinT).On(s.C(season.FieldID), joinT.C(playerstats.SeasonPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(playerstats.SeasonPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(playerstats.SeasonPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*PlayerStats]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Season](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "season" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPlayerEvents(ctx context.Context, query *FixtureEventsQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *FixtureEvents)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FixtureEvents(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PlayerEventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_player_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_player_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_player_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadMatchPlayer(ctx context.Context, query *MatchPlayerQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *MatchPlayer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MatchPlayer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.MatchPlayerColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_match_player
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_match_player" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_match_player" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadAssistEvents(ctx context.Context, query *FixtureEventsQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *FixtureEvents)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FixtureEvents(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.AssistEventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_assist_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_assist_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_assist_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPsGames(ctx context.Context, query *PSGamesQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *PSGames)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PSGames(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PsGamesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_ps_games
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_ps_games" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_ps_games" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPsShooting(ctx context.Context, query *PSShootingQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *PSShooting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PSShooting(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PsShootingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_ps_shooting
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_ps_shooting" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_ps_shooting" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPsDefense(ctx context.Context, query *PSDefenseQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *PSDefense)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PSDefense(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PsDefenseColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_ps_defense
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_ps_defense" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_ps_defense" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPsTechnical(ctx context.Context, query *PSTechnicalQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *PSTechnical)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PSTechnical(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PsTechnicalColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_ps_technical
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_ps_technical" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_ps_technical" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPsPenalty(ctx context.Context, query *PSPenaltyQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *PSPenalty)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PSPenalty(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PsPenaltyColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_ps_penalty
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_ps_penalty" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_ps_penalty" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPsSubstitutes(ctx context.Context, query *PSSubstitutesQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *PSSubstitutes)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PSSubstitutes(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PsSubstitutesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_ps_substitutes
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_ps_substitutes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_ps_substitutes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *PlayerStatsQuery) loadPsFairplay(ctx context.Context, query *PSFairplayQuery, nodes []*PlayerStats, init func(*PlayerStats), assign func(*PlayerStats, *PSFairplay)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlayerStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PSFairplay(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playerstats.PsFairplayColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_stats_ps_fairplay
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_stats_ps_fairplay" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "player_stats_ps_fairplay" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (psq *PlayerStatsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	_spec.Node.Columns = psq.ctx.Fields
	if len(psq.ctx.Fields) > 0 {
		_spec.Unique = psq.ctx.Unique != nil && *psq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *PlayerStatsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(playerstats.Table, playerstats.Columns, sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt))
	_spec.From = psq.sql
	if unique := psq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if psq.path != nil {
		_spec.Unique = true
	}
	if fields := psq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerstats.FieldID)
		for i := range fields {
			if fields[i] != playerstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *PlayerStatsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(playerstats.Table)
	columns := psq.ctx.Fields
	if len(columns) == 0 {
		columns = playerstats.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psq.ctx.Unique != nil && *psq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlayerStatsGroupBy is the group-by builder for PlayerStats entities.
type PlayerStatsGroupBy struct {
	selector
	build *PlayerStatsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *PlayerStatsGroupBy) Aggregate(fns ...AggregateFunc) *PlayerStatsGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the selector query and scans the result into the given value.
func (psgb *PlayerStatsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psgb.build.ctx, "GroupBy")
	if err := psgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlayerStatsQuery, *PlayerStatsGroupBy](ctx, psgb.build, psgb, psgb.build.inters, v)
}

func (psgb *PlayerStatsGroupBy) sqlScan(ctx context.Context, root *PlayerStatsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(psgb.fns))
	for _, fn := range psgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*psgb.flds)+len(psgb.fns))
		for _, f := range *psgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*psgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlayerStatsSelect is the builder for selecting fields of PlayerStats entities.
type PlayerStatsSelect struct {
	*PlayerStatsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pss *PlayerStatsSelect) Aggregate(fns ...AggregateFunc) *PlayerStatsSelect {
	pss.fns = append(pss.fns, fns...)
	return pss
}

// Scan applies the selector query and scans the result into the given value.
func (pss *PlayerStatsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pss.ctx, "Select")
	if err := pss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlayerStatsQuery, *PlayerStatsSelect](ctx, pss.PlayerStatsQuery, pss, pss.inters, v)
}

func (pss *PlayerStatsSelect) sqlScan(ctx context.Context, root *PlayerStatsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pss.fns))
	for _, fn := range pss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
