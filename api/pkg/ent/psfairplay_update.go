// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psfairplay"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSFairplayUpdate is the builder for updating PSFairplay entities.
type PSFairplayUpdate struct {
	config
	hooks    []Hook
	mutation *PSFairplayMutation
}

// Where appends a list predicates to the PSFairplayUpdate builder.
func (pfu *PSFairplayUpdate) Where(ps ...predicate.PSFairplay) *PSFairplayUpdate {
	pfu.mutation.Where(ps...)
	return pfu
}

// SetFoulsCommitted sets the "FoulsCommitted" field.
func (pfu *PSFairplayUpdate) SetFoulsCommitted(i int) *PSFairplayUpdate {
	pfu.mutation.ResetFoulsCommitted()
	pfu.mutation.SetFoulsCommitted(i)
	return pfu
}

// AddFoulsCommitted adds i to the "FoulsCommitted" field.
func (pfu *PSFairplayUpdate) AddFoulsCommitted(i int) *PSFairplayUpdate {
	pfu.mutation.AddFoulsCommitted(i)
	return pfu
}

// SetYellow sets the "Yellow" field.
func (pfu *PSFairplayUpdate) SetYellow(i int) *PSFairplayUpdate {
	pfu.mutation.ResetYellow()
	pfu.mutation.SetYellow(i)
	return pfu
}

// AddYellow adds i to the "Yellow" field.
func (pfu *PSFairplayUpdate) AddYellow(i int) *PSFairplayUpdate {
	pfu.mutation.AddYellow(i)
	return pfu
}

// SetYellowRed sets the "YellowRed" field.
func (pfu *PSFairplayUpdate) SetYellowRed(i int) *PSFairplayUpdate {
	pfu.mutation.ResetYellowRed()
	pfu.mutation.SetYellowRed(i)
	return pfu
}

// AddYellowRed adds i to the "YellowRed" field.
func (pfu *PSFairplayUpdate) AddYellowRed(i int) *PSFairplayUpdate {
	pfu.mutation.AddYellowRed(i)
	return pfu
}

// SetRed sets the "Red" field.
func (pfu *PSFairplayUpdate) SetRed(i int) *PSFairplayUpdate {
	pfu.mutation.ResetRed()
	pfu.mutation.SetRed(i)
	return pfu
}

// AddRed adds i to the "Red" field.
func (pfu *PSFairplayUpdate) AddRed(i int) *PSFairplayUpdate {
	pfu.mutation.AddRed(i)
	return pfu
}

// SetPenaltyConceded sets the "PenaltyConceded" field.
func (pfu *PSFairplayUpdate) SetPenaltyConceded(i int) *PSFairplayUpdate {
	pfu.mutation.ResetPenaltyConceded()
	pfu.mutation.SetPenaltyConceded(i)
	return pfu
}

// SetNillablePenaltyConceded sets the "PenaltyConceded" field if the given value is not nil.
func (pfu *PSFairplayUpdate) SetNillablePenaltyConceded(i *int) *PSFairplayUpdate {
	if i != nil {
		pfu.SetPenaltyConceded(*i)
	}
	return pfu
}

// AddPenaltyConceded adds i to the "PenaltyConceded" field.
func (pfu *PSFairplayUpdate) AddPenaltyConceded(i int) *PSFairplayUpdate {
	pfu.mutation.AddPenaltyConceded(i)
	return pfu
}

// SetLastUpdated sets the "lastUpdated" field.
func (pfu *PSFairplayUpdate) SetLastUpdated(t time.Time) *PSFairplayUpdate {
	pfu.mutation.SetLastUpdated(t)
	return pfu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (pfu *PSFairplayUpdate) ClearLastUpdated() *PSFairplayUpdate {
	pfu.mutation.ClearLastUpdated()
	return pfu
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (pfu *PSFairplayUpdate) SetPlayerStatsID(id int) *PSFairplayUpdate {
	pfu.mutation.SetPlayerStatsID(id)
	return pfu
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (pfu *PSFairplayUpdate) SetNillablePlayerStatsID(id *int) *PSFairplayUpdate {
	if id != nil {
		pfu = pfu.SetPlayerStatsID(*id)
	}
	return pfu
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (pfu *PSFairplayUpdate) SetPlayerStats(p *PlayerStats) *PSFairplayUpdate {
	return pfu.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSFairplayMutation object of the builder.
func (pfu *PSFairplayUpdate) Mutation() *PSFairplayMutation {
	return pfu.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (pfu *PSFairplayUpdate) ClearPlayerStats() *PSFairplayUpdate {
	pfu.mutation.ClearPlayerStats()
	return pfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *PSFairplayUpdate) Save(ctx context.Context) (int, error) {
	pfu.defaults()
	return withHooks(ctx, pfu.sqlSave, pfu.mutation, pfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *PSFairplayUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *PSFairplayUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *PSFairplayUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfu *PSFairplayUpdate) defaults() {
	if _, ok := pfu.mutation.LastUpdated(); !ok && !pfu.mutation.LastUpdatedCleared() {
		v := psfairplay.UpdateDefaultLastUpdated()
		pfu.mutation.SetLastUpdated(v)
	}
}

func (pfu *PSFairplayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(psfairplay.Table, psfairplay.Columns, sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt))
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.FoulsCommitted(); ok {
		_spec.SetField(psfairplay.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.AddedFoulsCommitted(); ok {
		_spec.AddField(psfairplay.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.Yellow(); ok {
		_spec.SetField(psfairplay.FieldYellow, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.AddedYellow(); ok {
		_spec.AddField(psfairplay.FieldYellow, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.YellowRed(); ok {
		_spec.SetField(psfairplay.FieldYellowRed, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.AddedYellowRed(); ok {
		_spec.AddField(psfairplay.FieldYellowRed, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.Red(); ok {
		_spec.SetField(psfairplay.FieldRed, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.AddedRed(); ok {
		_spec.AddField(psfairplay.FieldRed, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.PenaltyConceded(); ok {
		_spec.SetField(psfairplay.FieldPenaltyConceded, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.AddedPenaltyConceded(); ok {
		_spec.AddField(psfairplay.FieldPenaltyConceded, field.TypeInt, value)
	}
	if value, ok := pfu.mutation.LastUpdated(); ok {
		_spec.SetField(psfairplay.FieldLastUpdated, field.TypeTime, value)
	}
	if pfu.mutation.LastUpdatedCleared() {
		_spec.ClearField(psfairplay.FieldLastUpdated, field.TypeTime)
	}
	if pfu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   psfairplay.PlayerStatsTable,
			Columns: []string{psfairplay.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   psfairplay.PlayerStatsTable,
			Columns: []string{psfairplay.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psfairplay.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfu.mutation.done = true
	return n, nil
}

// PSFairplayUpdateOne is the builder for updating a single PSFairplay entity.
type PSFairplayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PSFairplayMutation
}

// SetFoulsCommitted sets the "FoulsCommitted" field.
func (pfuo *PSFairplayUpdateOne) SetFoulsCommitted(i int) *PSFairplayUpdateOne {
	pfuo.mutation.ResetFoulsCommitted()
	pfuo.mutation.SetFoulsCommitted(i)
	return pfuo
}

// AddFoulsCommitted adds i to the "FoulsCommitted" field.
func (pfuo *PSFairplayUpdateOne) AddFoulsCommitted(i int) *PSFairplayUpdateOne {
	pfuo.mutation.AddFoulsCommitted(i)
	return pfuo
}

// SetYellow sets the "Yellow" field.
func (pfuo *PSFairplayUpdateOne) SetYellow(i int) *PSFairplayUpdateOne {
	pfuo.mutation.ResetYellow()
	pfuo.mutation.SetYellow(i)
	return pfuo
}

// AddYellow adds i to the "Yellow" field.
func (pfuo *PSFairplayUpdateOne) AddYellow(i int) *PSFairplayUpdateOne {
	pfuo.mutation.AddYellow(i)
	return pfuo
}

// SetYellowRed sets the "YellowRed" field.
func (pfuo *PSFairplayUpdateOne) SetYellowRed(i int) *PSFairplayUpdateOne {
	pfuo.mutation.ResetYellowRed()
	pfuo.mutation.SetYellowRed(i)
	return pfuo
}

// AddYellowRed adds i to the "YellowRed" field.
func (pfuo *PSFairplayUpdateOne) AddYellowRed(i int) *PSFairplayUpdateOne {
	pfuo.mutation.AddYellowRed(i)
	return pfuo
}

// SetRed sets the "Red" field.
func (pfuo *PSFairplayUpdateOne) SetRed(i int) *PSFairplayUpdateOne {
	pfuo.mutation.ResetRed()
	pfuo.mutation.SetRed(i)
	return pfuo
}

// AddRed adds i to the "Red" field.
func (pfuo *PSFairplayUpdateOne) AddRed(i int) *PSFairplayUpdateOne {
	pfuo.mutation.AddRed(i)
	return pfuo
}

// SetPenaltyConceded sets the "PenaltyConceded" field.
func (pfuo *PSFairplayUpdateOne) SetPenaltyConceded(i int) *PSFairplayUpdateOne {
	pfuo.mutation.ResetPenaltyConceded()
	pfuo.mutation.SetPenaltyConceded(i)
	return pfuo
}

// SetNillablePenaltyConceded sets the "PenaltyConceded" field if the given value is not nil.
func (pfuo *PSFairplayUpdateOne) SetNillablePenaltyConceded(i *int) *PSFairplayUpdateOne {
	if i != nil {
		pfuo.SetPenaltyConceded(*i)
	}
	return pfuo
}

// AddPenaltyConceded adds i to the "PenaltyConceded" field.
func (pfuo *PSFairplayUpdateOne) AddPenaltyConceded(i int) *PSFairplayUpdateOne {
	pfuo.mutation.AddPenaltyConceded(i)
	return pfuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (pfuo *PSFairplayUpdateOne) SetLastUpdated(t time.Time) *PSFairplayUpdateOne {
	pfuo.mutation.SetLastUpdated(t)
	return pfuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (pfuo *PSFairplayUpdateOne) ClearLastUpdated() *PSFairplayUpdateOne {
	pfuo.mutation.ClearLastUpdated()
	return pfuo
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (pfuo *PSFairplayUpdateOne) SetPlayerStatsID(id int) *PSFairplayUpdateOne {
	pfuo.mutation.SetPlayerStatsID(id)
	return pfuo
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (pfuo *PSFairplayUpdateOne) SetNillablePlayerStatsID(id *int) *PSFairplayUpdateOne {
	if id != nil {
		pfuo = pfuo.SetPlayerStatsID(*id)
	}
	return pfuo
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (pfuo *PSFairplayUpdateOne) SetPlayerStats(p *PlayerStats) *PSFairplayUpdateOne {
	return pfuo.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSFairplayMutation object of the builder.
func (pfuo *PSFairplayUpdateOne) Mutation() *PSFairplayMutation {
	return pfuo.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (pfuo *PSFairplayUpdateOne) ClearPlayerStats() *PSFairplayUpdateOne {
	pfuo.mutation.ClearPlayerStats()
	return pfuo
}

// Where appends a list predicates to the PSFairplayUpdate builder.
func (pfuo *PSFairplayUpdateOne) Where(ps ...predicate.PSFairplay) *PSFairplayUpdateOne {
	pfuo.mutation.Where(ps...)
	return pfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *PSFairplayUpdateOne) Select(field string, fields ...string) *PSFairplayUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated PSFairplay entity.
func (pfuo *PSFairplayUpdateOne) Save(ctx context.Context) (*PSFairplay, error) {
	pfuo.defaults()
	return withHooks(ctx, pfuo.sqlSave, pfuo.mutation, pfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *PSFairplayUpdateOne) SaveX(ctx context.Context) *PSFairplay {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *PSFairplayUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *PSFairplayUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfuo *PSFairplayUpdateOne) defaults() {
	if _, ok := pfuo.mutation.LastUpdated(); !ok && !pfuo.mutation.LastUpdatedCleared() {
		v := psfairplay.UpdateDefaultLastUpdated()
		pfuo.mutation.SetLastUpdated(v)
	}
}

func (pfuo *PSFairplayUpdateOne) sqlSave(ctx context.Context) (_node *PSFairplay, err error) {
	_spec := sqlgraph.NewUpdateSpec(psfairplay.Table, psfairplay.Columns, sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt))
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PSFairplay.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, psfairplay.FieldID)
		for _, f := range fields {
			if !psfairplay.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != psfairplay.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.FoulsCommitted(); ok {
		_spec.SetField(psfairplay.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.AddedFoulsCommitted(); ok {
		_spec.AddField(psfairplay.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.Yellow(); ok {
		_spec.SetField(psfairplay.FieldYellow, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.AddedYellow(); ok {
		_spec.AddField(psfairplay.FieldYellow, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.YellowRed(); ok {
		_spec.SetField(psfairplay.FieldYellowRed, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.AddedYellowRed(); ok {
		_spec.AddField(psfairplay.FieldYellowRed, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.Red(); ok {
		_spec.SetField(psfairplay.FieldRed, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.AddedRed(); ok {
		_spec.AddField(psfairplay.FieldRed, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.PenaltyConceded(); ok {
		_spec.SetField(psfairplay.FieldPenaltyConceded, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.AddedPenaltyConceded(); ok {
		_spec.AddField(psfairplay.FieldPenaltyConceded, field.TypeInt, value)
	}
	if value, ok := pfuo.mutation.LastUpdated(); ok {
		_spec.SetField(psfairplay.FieldLastUpdated, field.TypeTime, value)
	}
	if pfuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(psfairplay.FieldLastUpdated, field.TypeTime)
	}
	if pfuo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   psfairplay.PlayerStatsTable,
			Columns: []string{psfairplay.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   psfairplay.PlayerStatsTable,
			Columns: []string{psfairplay.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PSFairplay{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psfairplay.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfuo.mutation.done = true
	return _node, nil
}
