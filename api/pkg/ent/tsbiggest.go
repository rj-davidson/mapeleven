// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsbiggest"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TSBiggest is the model entity for the TSBiggest schema.
type TSBiggest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StreakWins holds the value of the "streakWins" field.
	StreakWins int `json:"streakWins,omitempty"`
	// StreakLosses holds the value of the "streakLosses" field.
	StreakLosses int `json:"streakLosses,omitempty"`
	// StreakDraws holds the value of the "streakDraws" field.
	StreakDraws int `json:"streakDraws,omitempty"`
	// WinsHome holds the value of the "winsHome" field.
	WinsHome string `json:"winsHome,omitempty"`
	// WinsAway holds the value of the "winsAway" field.
	WinsAway string `json:"winsAway,omitempty"`
	// LossesHome holds the value of the "lossesHome" field.
	LossesHome string `json:"lossesHome,omitempty"`
	// LossesAway holds the value of the "lossesAway" field.
	LossesAway string `json:"lossesAway,omitempty"`
	// GoalsForHome holds the value of the "goalsForHome" field.
	GoalsForHome int `json:"goalsForHome,omitempty"`
	// GoalsForAway holds the value of the "goalsForAway" field.
	GoalsForAway int `json:"goalsForAway,omitempty"`
	// GoalsAgainstHome holds the value of the "goalsAgainstHome" field.
	GoalsAgainstHome int `json:"goalsAgainstHome,omitempty"`
	// GoalsAgainstAway holds the value of the "goalsAgainstAway" field.
	GoalsAgainstAway int `json:"goalsAgainstAway,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TSBiggestQuery when eager-loading is set.
	Edges              TSBiggestEdges `json:"edges"`
	team_biggest_stats *int
	selectValues       sql.SelectValues
}

// TSBiggestEdges holds the relations/edges for other nodes in the graph.
type TSBiggestEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TSBiggestEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TSBiggest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tsbiggest.FieldID, tsbiggest.FieldStreakWins, tsbiggest.FieldStreakLosses, tsbiggest.FieldStreakDraws, tsbiggest.FieldGoalsForHome, tsbiggest.FieldGoalsForAway, tsbiggest.FieldGoalsAgainstHome, tsbiggest.FieldGoalsAgainstAway:
			values[i] = new(sql.NullInt64)
		case tsbiggest.FieldWinsHome, tsbiggest.FieldWinsAway, tsbiggest.FieldLossesHome, tsbiggest.FieldLossesAway:
			values[i] = new(sql.NullString)
		case tsbiggest.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case tsbiggest.ForeignKeys[0]: // team_biggest_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TSBiggest fields.
func (tb *TSBiggest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tsbiggest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tb.ID = int(value.Int64)
		case tsbiggest.FieldStreakWins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field streakWins", values[i])
			} else if value.Valid {
				tb.StreakWins = int(value.Int64)
			}
		case tsbiggest.FieldStreakLosses:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field streakLosses", values[i])
			} else if value.Valid {
				tb.StreakLosses = int(value.Int64)
			}
		case tsbiggest.FieldStreakDraws:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field streakDraws", values[i])
			} else if value.Valid {
				tb.StreakDraws = int(value.Int64)
			}
		case tsbiggest.FieldWinsHome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field winsHome", values[i])
			} else if value.Valid {
				tb.WinsHome = value.String
			}
		case tsbiggest.FieldWinsAway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field winsAway", values[i])
			} else if value.Valid {
				tb.WinsAway = value.String
			}
		case tsbiggest.FieldLossesHome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lossesHome", values[i])
			} else if value.Valid {
				tb.LossesHome = value.String
			}
		case tsbiggest.FieldLossesAway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lossesAway", values[i])
			} else if value.Valid {
				tb.LossesAway = value.String
			}
		case tsbiggest.FieldGoalsForHome:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goalsForHome", values[i])
			} else if value.Valid {
				tb.GoalsForHome = int(value.Int64)
			}
		case tsbiggest.FieldGoalsForAway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goalsForAway", values[i])
			} else if value.Valid {
				tb.GoalsForAway = int(value.Int64)
			}
		case tsbiggest.FieldGoalsAgainstHome:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goalsAgainstHome", values[i])
			} else if value.Valid {
				tb.GoalsAgainstHome = int(value.Int64)
			}
		case tsbiggest.FieldGoalsAgainstAway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goalsAgainstAway", values[i])
			} else if value.Valid {
				tb.GoalsAgainstAway = int(value.Int64)
			}
		case tsbiggest.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				tb.LastUpdated = value.Time
			}
		case tsbiggest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_biggest_stats", value)
			} else if value.Valid {
				tb.team_biggest_stats = new(int)
				*tb.team_biggest_stats = int(value.Int64)
			}
		default:
			tb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TSBiggest.
// This includes values selected through modifiers, order, etc.
func (tb *TSBiggest) Value(name string) (ent.Value, error) {
	return tb.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the TSBiggest entity.
func (tb *TSBiggest) QueryTeam() *TeamQuery {
	return NewTSBiggestClient(tb.config).QueryTeam(tb)
}

// Update returns a builder for updating this TSBiggest.
// Note that you need to call TSBiggest.Unwrap() before calling this method if this TSBiggest
// was returned from a transaction, and the transaction was committed or rolled back.
func (tb *TSBiggest) Update() *TSBiggestUpdateOne {
	return NewTSBiggestClient(tb.config).UpdateOne(tb)
}

// Unwrap unwraps the TSBiggest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tb *TSBiggest) Unwrap() *TSBiggest {
	_tx, ok := tb.config.driver.(*txDriver)
	if !ok {
		panic("ent: TSBiggest is not a transactional entity")
	}
	tb.config.driver = _tx.drv
	return tb
}

// String implements the fmt.Stringer.
func (tb *TSBiggest) String() string {
	var builder strings.Builder
	builder.WriteString("TSBiggest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tb.ID))
	builder.WriteString("streakWins=")
	builder.WriteString(fmt.Sprintf("%v", tb.StreakWins))
	builder.WriteString(", ")
	builder.WriteString("streakLosses=")
	builder.WriteString(fmt.Sprintf("%v", tb.StreakLosses))
	builder.WriteString(", ")
	builder.WriteString("streakDraws=")
	builder.WriteString(fmt.Sprintf("%v", tb.StreakDraws))
	builder.WriteString(", ")
	builder.WriteString("winsHome=")
	builder.WriteString(tb.WinsHome)
	builder.WriteString(", ")
	builder.WriteString("winsAway=")
	builder.WriteString(tb.WinsAway)
	builder.WriteString(", ")
	builder.WriteString("lossesHome=")
	builder.WriteString(tb.LossesHome)
	builder.WriteString(", ")
	builder.WriteString("lossesAway=")
	builder.WriteString(tb.LossesAway)
	builder.WriteString(", ")
	builder.WriteString("goalsForHome=")
	builder.WriteString(fmt.Sprintf("%v", tb.GoalsForHome))
	builder.WriteString(", ")
	builder.WriteString("goalsForAway=")
	builder.WriteString(fmt.Sprintf("%v", tb.GoalsForAway))
	builder.WriteString(", ")
	builder.WriteString("goalsAgainstHome=")
	builder.WriteString(fmt.Sprintf("%v", tb.GoalsAgainstHome))
	builder.WriteString(", ")
	builder.WriteString("goalsAgainstAway=")
	builder.WriteString(fmt.Sprintf("%v", tb.GoalsAgainstAway))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(tb.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TSBiggests is a parsable slice of TSBiggest.
type TSBiggests []*TSBiggest
