// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pstechnical"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSTechnical is the model entity for the PSTechnical schema.
type PSTechnical struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FoulsDrawn holds the value of the "FoulsDrawn" field.
	FoulsDrawn int `json:"FoulsDrawn,omitempty"`
	// DribbleAttempts holds the value of the "DribbleAttempts" field.
	DribbleAttempts int `json:"DribbleAttempts,omitempty"`
	// DribbleSuccess holds the value of the "DribbleSuccess" field.
	DribbleSuccess int `json:"DribbleSuccess,omitempty"`
	// DribblePast holds the value of the "DribblePast" field.
	DribblePast int `json:"DribblePast,omitempty"`
	// PassesTotal holds the value of the "PassesTotal" field.
	PassesTotal int `json:"PassesTotal,omitempty"`
	// PassesKey holds the value of the "PassesKey" field.
	PassesKey int `json:"PassesKey,omitempty"`
	// PassesAccuracy holds the value of the "PassesAccuracy" field.
	PassesAccuracy int `json:"PassesAccuracy,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSTechnicalQuery when eager-loading is set.
	Edges                     PSTechnicalEdges `json:"edges"`
	player_stats_ps_technical *int
	selectValues              sql.SelectValues
}

// PSTechnicalEdges holds the relations/edges for other nodes in the graph.
type PSTechnicalEdges struct {
	// PlayerStats holds the value of the playerStats edge.
	PlayerStats *PlayerStats `json:"playerStats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerStatsOrErr returns the PlayerStats value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PSTechnicalEdges) PlayerStatsOrErr() (*PlayerStats, error) {
	if e.loadedTypes[0] {
		if e.PlayerStats == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playerstats.Label}
		}
		return e.PlayerStats, nil
	}
	return nil, &NotLoadedError{edge: "playerStats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSTechnical) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pstechnical.FieldID, pstechnical.FieldFoulsDrawn, pstechnical.FieldDribbleAttempts, pstechnical.FieldDribbleSuccess, pstechnical.FieldDribblePast, pstechnical.FieldPassesTotal, pstechnical.FieldPassesKey, pstechnical.FieldPassesAccuracy:
			values[i] = new(sql.NullInt64)
		case pstechnical.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case pstechnical.ForeignKeys[0]: // player_stats_ps_technical
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSTechnical fields.
func (pt *PSTechnical) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pstechnical.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case pstechnical.FieldFoulsDrawn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FoulsDrawn", values[i])
			} else if value.Valid {
				pt.FoulsDrawn = int(value.Int64)
			}
		case pstechnical.FieldDribbleAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DribbleAttempts", values[i])
			} else if value.Valid {
				pt.DribbleAttempts = int(value.Int64)
			}
		case pstechnical.FieldDribbleSuccess:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DribbleSuccess", values[i])
			} else if value.Valid {
				pt.DribbleSuccess = int(value.Int64)
			}
		case pstechnical.FieldDribblePast:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DribblePast", values[i])
			} else if value.Valid {
				pt.DribblePast = int(value.Int64)
			}
		case pstechnical.FieldPassesTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PassesTotal", values[i])
			} else if value.Valid {
				pt.PassesTotal = int(value.Int64)
			}
		case pstechnical.FieldPassesKey:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PassesKey", values[i])
			} else if value.Valid {
				pt.PassesKey = int(value.Int64)
			}
		case pstechnical.FieldPassesAccuracy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PassesAccuracy", values[i])
			} else if value.Valid {
				pt.PassesAccuracy = int(value.Int64)
			}
		case pstechnical.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				pt.LastUpdated = value.Time
			}
		case pstechnical.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_stats_ps_technical", value)
			} else if value.Valid {
				pt.player_stats_ps_technical = new(int)
				*pt.player_stats_ps_technical = int(value.Int64)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSTechnical.
// This includes values selected through modifiers, order, etc.
func (pt *PSTechnical) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryPlayerStats queries the "playerStats" edge of the PSTechnical entity.
func (pt *PSTechnical) QueryPlayerStats() *PlayerStatsQuery {
	return NewPSTechnicalClient(pt.config).QueryPlayerStats(pt)
}

// Update returns a builder for updating this PSTechnical.
// Note that you need to call PSTechnical.Unwrap() before calling this method if this PSTechnical
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PSTechnical) Update() *PSTechnicalUpdateOne {
	return NewPSTechnicalClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PSTechnical entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PSTechnical) Unwrap() *PSTechnical {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSTechnical is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PSTechnical) String() string {
	var builder strings.Builder
	builder.WriteString("PSTechnical(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("FoulsDrawn=")
	builder.WriteString(fmt.Sprintf("%v", pt.FoulsDrawn))
	builder.WriteString(", ")
	builder.WriteString("DribbleAttempts=")
	builder.WriteString(fmt.Sprintf("%v", pt.DribbleAttempts))
	builder.WriteString(", ")
	builder.WriteString("DribbleSuccess=")
	builder.WriteString(fmt.Sprintf("%v", pt.DribbleSuccess))
	builder.WriteString(", ")
	builder.WriteString("DribblePast=")
	builder.WriteString(fmt.Sprintf("%v", pt.DribblePast))
	builder.WriteString(", ")
	builder.WriteString("PassesTotal=")
	builder.WriteString(fmt.Sprintf("%v", pt.PassesTotal))
	builder.WriteString(", ")
	builder.WriteString("PassesKey=")
	builder.WriteString(fmt.Sprintf("%v", pt.PassesKey))
	builder.WriteString(", ")
	builder.WriteString("PassesAccuracy=")
	builder.WriteString(fmt.Sprintf("%v", pt.PassesAccuracy))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(pt.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PSTechnicals is a parsable slice of PSTechnical.
type PSTechnicals []*PSTechnical
