// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PlayerStats is the model entity for the PlayerStats schema.
type PlayerStats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerStatsQuery when eager-loading is set.
	Edges               PlayerStatsEdges `json:"edges"`
	player_player_stats *int
	team_player_stats   *int
	selectValues        sql.SelectValues
}

// PlayerStatsEdges holds the relations/edges for other nodes in the graph.
type PlayerStatsEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// PlayerEvents holds the value of the playerEvents edge.
	PlayerEvents []*FixtureEvents `json:"playerEvents,omitempty"`
	// MatchPlayer holds the value of the matchPlayer edge.
	MatchPlayer []*MatchPlayer `json:"matchPlayer,omitempty"`
	// AssistEvents holds the value of the assistEvents edge.
	AssistEvents []*FixtureEvents `json:"assistEvents,omitempty"`
	// Psgames holds the value of the psgames edge.
	Psgames []*PSGames `json:"psgames,omitempty"`
	// Psgoals holds the value of the psgoals edge.
	Psgoals []*PSGoals `json:"psgoals,omitempty"`
	// Psdefense holds the value of the psdefense edge.
	Psdefense []*PSDefense `json:"psdefense,omitempty"`
	// Psoffense holds the value of the psoffense edge.
	Psoffense []*PSOffense `json:"psoffense,omitempty"`
	// Pspenalty holds the value of the pspenalty edge.
	Pspenalty []*PSPenalty `json:"pspenalty,omitempty"`
	// Season holds the value of the season edge.
	Season []*Season `json:"season,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerStatsEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[0] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerStatsEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// PlayerEventsOrErr returns the PlayerEvents value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) PlayerEventsOrErr() ([]*FixtureEvents, error) {
	if e.loadedTypes[2] {
		return e.PlayerEvents, nil
	}
	return nil, &NotLoadedError{edge: "playerEvents"}
}

// MatchPlayerOrErr returns the MatchPlayer value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) MatchPlayerOrErr() ([]*MatchPlayer, error) {
	if e.loadedTypes[3] {
		return e.MatchPlayer, nil
	}
	return nil, &NotLoadedError{edge: "matchPlayer"}
}

// AssistEventsOrErr returns the AssistEvents value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) AssistEventsOrErr() ([]*FixtureEvents, error) {
	if e.loadedTypes[4] {
		return e.AssistEvents, nil
	}
	return nil, &NotLoadedError{edge: "assistEvents"}
}

// PsgamesOrErr returns the Psgames value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) PsgamesOrErr() ([]*PSGames, error) {
	if e.loadedTypes[5] {
		return e.Psgames, nil
	}
	return nil, &NotLoadedError{edge: "psgames"}
}

// PsgoalsOrErr returns the Psgoals value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) PsgoalsOrErr() ([]*PSGoals, error) {
	if e.loadedTypes[6] {
		return e.Psgoals, nil
	}
	return nil, &NotLoadedError{edge: "psgoals"}
}

// PsdefenseOrErr returns the Psdefense value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) PsdefenseOrErr() ([]*PSDefense, error) {
	if e.loadedTypes[7] {
		return e.Psdefense, nil
	}
	return nil, &NotLoadedError{edge: "psdefense"}
}

// PsoffenseOrErr returns the Psoffense value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) PsoffenseOrErr() ([]*PSOffense, error) {
	if e.loadedTypes[8] {
		return e.Psoffense, nil
	}
	return nil, &NotLoadedError{edge: "psoffense"}
}

// PspenaltyOrErr returns the Pspenalty value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) PspenaltyOrErr() ([]*PSPenalty, error) {
	if e.loadedTypes[9] {
		return e.Pspenalty, nil
	}
	return nil, &NotLoadedError{edge: "pspenalty"}
}

// SeasonOrErr returns the Season value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerStatsEdges) SeasonOrErr() ([]*Season, error) {
	if e.loadedTypes[10] {
		return e.Season, nil
	}
	return nil, &NotLoadedError{edge: "season"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlayerStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playerstats.FieldID:
			values[i] = new(sql.NullInt64)
		case playerstats.FieldSlug:
			values[i] = new(sql.NullString)
		case playerstats.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case playerstats.ForeignKeys[0]: // player_player_stats
			values[i] = new(sql.NullInt64)
		case playerstats.ForeignKeys[1]: // team_player_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlayerStats fields.
func (ps *PlayerStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playerstats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case playerstats.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				ps.Slug = value.String
			}
		case playerstats.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				ps.LastUpdated = value.Time
			}
		case playerstats.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_player_stats", value)
			} else if value.Valid {
				ps.player_player_stats = new(int)
				*ps.player_player_stats = int(value.Int64)
			}
		case playerstats.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_player_stats", value)
			} else if value.Valid {
				ps.team_player_stats = new(int)
				*ps.team_player_stats = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlayerStats.
// This includes values selected through modifiers, order, etc.
func (ps *PlayerStats) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryPlayer() *PlayerQuery {
	return NewPlayerStatsClient(ps.config).QueryPlayer(ps)
}

// QueryTeam queries the "team" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryTeam() *TeamQuery {
	return NewPlayerStatsClient(ps.config).QueryTeam(ps)
}

// QueryPlayerEvents queries the "playerEvents" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryPlayerEvents() *FixtureEventsQuery {
	return NewPlayerStatsClient(ps.config).QueryPlayerEvents(ps)
}

// QueryMatchPlayer queries the "matchPlayer" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryMatchPlayer() *MatchPlayerQuery {
	return NewPlayerStatsClient(ps.config).QueryMatchPlayer(ps)
}

// QueryAssistEvents queries the "assistEvents" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryAssistEvents() *FixtureEventsQuery {
	return NewPlayerStatsClient(ps.config).QueryAssistEvents(ps)
}

// QueryPsgames queries the "psgames" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryPsgames() *PSGamesQuery {
	return NewPlayerStatsClient(ps.config).QueryPsgames(ps)
}

// QueryPsgoals queries the "psgoals" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryPsgoals() *PSGoalsQuery {
	return NewPlayerStatsClient(ps.config).QueryPsgoals(ps)
}

// QueryPsdefense queries the "psdefense" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryPsdefense() *PSDefenseQuery {
	return NewPlayerStatsClient(ps.config).QueryPsdefense(ps)
}

// QueryPsoffense queries the "psoffense" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryPsoffense() *PSOffenseQuery {
	return NewPlayerStatsClient(ps.config).QueryPsoffense(ps)
}

// QueryPspenalty queries the "pspenalty" edge of the PlayerStats entity.
func (ps *PlayerStats) QueryPspenalty() *PSPenaltyQuery {
	return NewPlayerStatsClient(ps.config).QueryPspenalty(ps)
}

// QuerySeason queries the "season" edge of the PlayerStats entity.
func (ps *PlayerStats) QuerySeason() *SeasonQuery {
	return NewPlayerStatsClient(ps.config).QuerySeason(ps)
}

// Update returns a builder for updating this PlayerStats.
// Note that you need to call PlayerStats.Unwrap() before calling this method if this PlayerStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PlayerStats) Update() *PlayerStatsUpdateOne {
	return NewPlayerStatsClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PlayerStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PlayerStats) Unwrap() *PlayerStats {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlayerStats is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PlayerStats) String() string {
	var builder strings.Builder
	builder.WriteString("PlayerStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("slug=")
	builder.WriteString(ps.Slug)
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(ps.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlayerStatsSlice is a parsable slice of PlayerStats.
type PlayerStatsSlice []*PlayerStats
