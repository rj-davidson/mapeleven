// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psoffense"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSOffenseDelete is the builder for deleting a PSOffense entity.
type PSOffenseDelete struct {
	config
	hooks    []Hook
	mutation *PSOffenseMutation
}

// Where appends a list predicates to the PSOffenseDelete builder.
func (pod *PSOffenseDelete) Where(ps ...predicate.PSOffense) *PSOffenseDelete {
	pod.mutation.Where(ps...)
	return pod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pod *PSOffenseDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pod.sqlExec, pod.mutation, pod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pod *PSOffenseDelete) ExecX(ctx context.Context) int {
	n, err := pod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pod *PSOffenseDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(psoffense.Table, sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt))
	if ps := pod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pod.mutation.done = true
	return affected, err
}

// PSOffenseDeleteOne is the builder for deleting a single PSOffense entity.
type PSOffenseDeleteOne struct {
	pod *PSOffenseDelete
}

// Where appends a list predicates to the PSOffenseDelete builder.
func (podo *PSOffenseDeleteOne) Where(ps ...predicate.PSOffense) *PSOffenseDeleteOne {
	podo.pod.mutation.Where(ps...)
	return podo
}

// Exec executes the deletion query.
func (podo *PSOffenseDeleteOne) Exec(ctx context.Context) error {
	n, err := podo.pod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{psoffense.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (podo *PSOffenseDeleteOne) ExecX(ctx context.Context) {
	if err := podo.Exec(ctx); err != nil {
		panic(err)
	}
}
