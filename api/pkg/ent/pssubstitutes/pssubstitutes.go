// Code generated by ent, DO NOT EDIT.

package pssubstitutes

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pssubstitutes type in the database.
	Label = "ps_substitutes"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIn holds the string denoting the in field in the database.
	FieldIn = "in"
	// FieldOut holds the string denoting the out field in the database.
	FieldOut = "out"
	// FieldBench holds the string denoting the bench field in the database.
	FieldBench = "bench"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the pssubstitutes in the database.
	Table = "ps_substitutes"
	// PlayerStatsTable is the table that holds the playerStats relation/edge.
	PlayerStatsTable = "ps_substitutes"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
	// PlayerStatsColumn is the table column denoting the playerStats relation/edge.
	PlayerStatsColumn = "player_stats_ps_substitutes"
)

// Columns holds all SQL columns for pssubstitutes fields.
var Columns = []string{
	FieldID,
	FieldIn,
	FieldOut,
	FieldBench,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_substitutes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_stats_ps_substitutes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIn holds the default value on creation for the "In" field.
	DefaultIn int
	// DefaultOut holds the default value on creation for the "Out" field.
	DefaultOut int
	// DefaultBench holds the default value on creation for the "Bench" field.
	DefaultBench int
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the PSSubstitutes queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIn orders the results by the In field.
func ByIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIn, opts...).ToFunc()
}

// ByOut orders the results by the Out field.
func ByOut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOut, opts...).ToFunc()
}

// ByBench orders the results by the Bench field.
func ByBench(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBench, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerStatsField orders the results by playerStats field.
func ByPlayerStatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PlayerStatsTable, PlayerStatsColumn),
	)
}
