// Code generated by ent, DO NOT EDIT.

package pssubstitutes

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLTE(FieldID, id))
}

// In applies equality check predicate on the "In" field. It's identical to InEQ.
func In(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldIn, v))
}

// Out applies equality check predicate on the "Out" field. It's identical to OutEQ.
func Out(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldOut, v))
}

// Bench applies equality check predicate on the "Bench" field. It's identical to BenchEQ.
func Bench(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldBench, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldLastUpdated, v))
}

// InEQ applies the EQ predicate on the "In" field.
func InEQ(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldIn, v))
}

// InNEQ applies the NEQ predicate on the "In" field.
func InNEQ(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNEQ(FieldIn, v))
}

// InIn applies the In predicate on the "In" field.
func InIn(vs ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldIn(FieldIn, vs...))
}

// InNotIn applies the NotIn predicate on the "In" field.
func InNotIn(vs ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNotIn(FieldIn, vs...))
}

// InGT applies the GT predicate on the "In" field.
func InGT(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGT(FieldIn, v))
}

// InGTE applies the GTE predicate on the "In" field.
func InGTE(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGTE(FieldIn, v))
}

// InLT applies the LT predicate on the "In" field.
func InLT(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLT(FieldIn, v))
}

// InLTE applies the LTE predicate on the "In" field.
func InLTE(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLTE(FieldIn, v))
}

// OutEQ applies the EQ predicate on the "Out" field.
func OutEQ(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldOut, v))
}

// OutNEQ applies the NEQ predicate on the "Out" field.
func OutNEQ(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNEQ(FieldOut, v))
}

// OutIn applies the In predicate on the "Out" field.
func OutIn(vs ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldIn(FieldOut, vs...))
}

// OutNotIn applies the NotIn predicate on the "Out" field.
func OutNotIn(vs ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNotIn(FieldOut, vs...))
}

// OutGT applies the GT predicate on the "Out" field.
func OutGT(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGT(FieldOut, v))
}

// OutGTE applies the GTE predicate on the "Out" field.
func OutGTE(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGTE(FieldOut, v))
}

// OutLT applies the LT predicate on the "Out" field.
func OutLT(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLT(FieldOut, v))
}

// OutLTE applies the LTE predicate on the "Out" field.
func OutLTE(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLTE(FieldOut, v))
}

// BenchEQ applies the EQ predicate on the "Bench" field.
func BenchEQ(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldBench, v))
}

// BenchNEQ applies the NEQ predicate on the "Bench" field.
func BenchNEQ(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNEQ(FieldBench, v))
}

// BenchIn applies the In predicate on the "Bench" field.
func BenchIn(vs ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldIn(FieldBench, vs...))
}

// BenchNotIn applies the NotIn predicate on the "Bench" field.
func BenchNotIn(vs ...int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNotIn(FieldBench, vs...))
}

// BenchGT applies the GT predicate on the "Bench" field.
func BenchGT(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGT(FieldBench, v))
}

// BenchGTE applies the GTE predicate on the "Bench" field.
func BenchGTE(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGTE(FieldBench, v))
}

// BenchLT applies the LT predicate on the "Bench" field.
func BenchLT(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLT(FieldBench, v))
}

// BenchLTE applies the LTE predicate on the "Bench" field.
func BenchLTE(v int) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLTE(FieldBench, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.FieldNotNull(FieldLastUpdated))
}

// HasPlayerStats applies the HasEdge predicate on the "playerStats" edge.
func HasPlayerStats() predicate.PSSubstitutes {
	return predicate.PSSubstitutes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerStatsTable, PlayerStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatsWith applies the HasEdge predicate on the "playerStats" edge with a given conditions (other predicates).
func HasPlayerStatsWith(preds ...predicate.PlayerStats) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(func(s *sql.Selector) {
		step := newPlayerStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PSSubstitutes) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PSSubstitutes) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PSSubstitutes) predicate.PSSubstitutes {
	return predicate.PSSubstitutes(sql.NotPredicates(p))
}
