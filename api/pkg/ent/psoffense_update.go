// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psoffense"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSOffenseUpdate is the builder for updating PSOffense entities.
type PSOffenseUpdate struct {
	config
	hooks    []Hook
	mutation *PSOffenseMutation
}

// Where appends a list predicates to the PSOffenseUpdate builder.
func (pou *PSOffenseUpdate) Where(ps ...predicate.PSOffense) *PSOffenseUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetDribbleAttempts sets the "dribbleAttempts" field.
func (pou *PSOffenseUpdate) SetDribbleAttempts(i int) *PSOffenseUpdate {
	pou.mutation.ResetDribbleAttempts()
	pou.mutation.SetDribbleAttempts(i)
	return pou
}

// AddDribbleAttempts adds i to the "dribbleAttempts" field.
func (pou *PSOffenseUpdate) AddDribbleAttempts(i int) *PSOffenseUpdate {
	pou.mutation.AddDribbleAttempts(i)
	return pou
}

// SetDribbleSuccess sets the "dribbleSuccess" field.
func (pou *PSOffenseUpdate) SetDribbleSuccess(i int) *PSOffenseUpdate {
	pou.mutation.ResetDribbleSuccess()
	pou.mutation.SetDribbleSuccess(i)
	return pou
}

// AddDribbleSuccess adds i to the "dribbleSuccess" field.
func (pou *PSOffenseUpdate) AddDribbleSuccess(i int) *PSOffenseUpdate {
	pou.mutation.AddDribbleSuccess(i)
	return pou
}

// SetDribblePast sets the "dribblePast" field.
func (pou *PSOffenseUpdate) SetDribblePast(i int) *PSOffenseUpdate {
	pou.mutation.ResetDribblePast()
	pou.mutation.SetDribblePast(i)
	return pou
}

// SetNillableDribblePast sets the "dribblePast" field if the given value is not nil.
func (pou *PSOffenseUpdate) SetNillableDribblePast(i *int) *PSOffenseUpdate {
	if i != nil {
		pou.SetDribblePast(*i)
	}
	return pou
}

// AddDribblePast adds i to the "dribblePast" field.
func (pou *PSOffenseUpdate) AddDribblePast(i int) *PSOffenseUpdate {
	pou.mutation.AddDribblePast(i)
	return pou
}

// SetPassesTotal sets the "passesTotal" field.
func (pou *PSOffenseUpdate) SetPassesTotal(i int) *PSOffenseUpdate {
	pou.mutation.ResetPassesTotal()
	pou.mutation.SetPassesTotal(i)
	return pou
}

// AddPassesTotal adds i to the "passesTotal" field.
func (pou *PSOffenseUpdate) AddPassesTotal(i int) *PSOffenseUpdate {
	pou.mutation.AddPassesTotal(i)
	return pou
}

// SetPassesKey sets the "passesKey" field.
func (pou *PSOffenseUpdate) SetPassesKey(i int) *PSOffenseUpdate {
	pou.mutation.ResetPassesKey()
	pou.mutation.SetPassesKey(i)
	return pou
}

// AddPassesKey adds i to the "passesKey" field.
func (pou *PSOffenseUpdate) AddPassesKey(i int) *PSOffenseUpdate {
	pou.mutation.AddPassesKey(i)
	return pou
}

// SetPassesAccuracy sets the "passesAccuracy" field.
func (pou *PSOffenseUpdate) SetPassesAccuracy(i int) *PSOffenseUpdate {
	pou.mutation.ResetPassesAccuracy()
	pou.mutation.SetPassesAccuracy(i)
	return pou
}

// AddPassesAccuracy adds i to the "passesAccuracy" field.
func (pou *PSOffenseUpdate) AddPassesAccuracy(i int) *PSOffenseUpdate {
	pou.mutation.AddPassesAccuracy(i)
	return pou
}

// AddPlayerStatIDs adds the "playerStats" edge to the PlayerStats entity by IDs.
func (pou *PSOffenseUpdate) AddPlayerStatIDs(ids ...int) *PSOffenseUpdate {
	pou.mutation.AddPlayerStatIDs(ids...)
	return pou
}

// AddPlayerStats adds the "playerStats" edges to the PlayerStats entity.
func (pou *PSOffenseUpdate) AddPlayerStats(p ...*PlayerStats) *PSOffenseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pou.AddPlayerStatIDs(ids...)
}

// Mutation returns the PSOffenseMutation object of the builder.
func (pou *PSOffenseUpdate) Mutation() *PSOffenseMutation {
	return pou.mutation
}

// ClearPlayerStats clears all "playerStats" edges to the PlayerStats entity.
func (pou *PSOffenseUpdate) ClearPlayerStats() *PSOffenseUpdate {
	pou.mutation.ClearPlayerStats()
	return pou
}

// RemovePlayerStatIDs removes the "playerStats" edge to PlayerStats entities by IDs.
func (pou *PSOffenseUpdate) RemovePlayerStatIDs(ids ...int) *PSOffenseUpdate {
	pou.mutation.RemovePlayerStatIDs(ids...)
	return pou
}

// RemovePlayerStats removes "playerStats" edges to PlayerStats entities.
func (pou *PSOffenseUpdate) RemovePlayerStats(p ...*PlayerStats) *PSOffenseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pou.RemovePlayerStatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PSOffenseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pou.sqlSave, pou.mutation, pou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PSOffenseUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PSOffenseUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PSOffenseUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pou *PSOffenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(psoffense.Table, psoffense.Columns, sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt))
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.DribbleAttempts(); ok {
		_spec.SetField(psoffense.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedDribbleAttempts(); ok {
		_spec.AddField(psoffense.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := pou.mutation.DribbleSuccess(); ok {
		_spec.SetField(psoffense.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedDribbleSuccess(); ok {
		_spec.AddField(psoffense.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := pou.mutation.DribblePast(); ok {
		_spec.SetField(psoffense.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedDribblePast(); ok {
		_spec.AddField(psoffense.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := pou.mutation.PassesTotal(); ok {
		_spec.SetField(psoffense.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedPassesTotal(); ok {
		_spec.AddField(psoffense.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := pou.mutation.PassesKey(); ok {
		_spec.SetField(psoffense.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedPassesKey(); ok {
		_spec.AddField(psoffense.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := pou.mutation.PassesAccuracy(); ok {
		_spec.SetField(psoffense.FieldPassesAccuracy, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedPassesAccuracy(); ok {
		_spec.AddField(psoffense.FieldPassesAccuracy, field.TypeInt, value)
	}
	if pou.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   psoffense.PlayerStatsTable,
			Columns: psoffense.PlayerStatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.RemovedPlayerStatsIDs(); len(nodes) > 0 && !pou.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   psoffense.PlayerStatsTable,
			Columns: psoffense.PlayerStatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   psoffense.PlayerStatsTable,
			Columns: psoffense.PlayerStatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psoffense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pou.mutation.done = true
	return n, nil
}

// PSOffenseUpdateOne is the builder for updating a single PSOffense entity.
type PSOffenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PSOffenseMutation
}

// SetDribbleAttempts sets the "dribbleAttempts" field.
func (pouo *PSOffenseUpdateOne) SetDribbleAttempts(i int) *PSOffenseUpdateOne {
	pouo.mutation.ResetDribbleAttempts()
	pouo.mutation.SetDribbleAttempts(i)
	return pouo
}

// AddDribbleAttempts adds i to the "dribbleAttempts" field.
func (pouo *PSOffenseUpdateOne) AddDribbleAttempts(i int) *PSOffenseUpdateOne {
	pouo.mutation.AddDribbleAttempts(i)
	return pouo
}

// SetDribbleSuccess sets the "dribbleSuccess" field.
func (pouo *PSOffenseUpdateOne) SetDribbleSuccess(i int) *PSOffenseUpdateOne {
	pouo.mutation.ResetDribbleSuccess()
	pouo.mutation.SetDribbleSuccess(i)
	return pouo
}

// AddDribbleSuccess adds i to the "dribbleSuccess" field.
func (pouo *PSOffenseUpdateOne) AddDribbleSuccess(i int) *PSOffenseUpdateOne {
	pouo.mutation.AddDribbleSuccess(i)
	return pouo
}

// SetDribblePast sets the "dribblePast" field.
func (pouo *PSOffenseUpdateOne) SetDribblePast(i int) *PSOffenseUpdateOne {
	pouo.mutation.ResetDribblePast()
	pouo.mutation.SetDribblePast(i)
	return pouo
}

// SetNillableDribblePast sets the "dribblePast" field if the given value is not nil.
func (pouo *PSOffenseUpdateOne) SetNillableDribblePast(i *int) *PSOffenseUpdateOne {
	if i != nil {
		pouo.SetDribblePast(*i)
	}
	return pouo
}

// AddDribblePast adds i to the "dribblePast" field.
func (pouo *PSOffenseUpdateOne) AddDribblePast(i int) *PSOffenseUpdateOne {
	pouo.mutation.AddDribblePast(i)
	return pouo
}

// SetPassesTotal sets the "passesTotal" field.
func (pouo *PSOffenseUpdateOne) SetPassesTotal(i int) *PSOffenseUpdateOne {
	pouo.mutation.ResetPassesTotal()
	pouo.mutation.SetPassesTotal(i)
	return pouo
}

// AddPassesTotal adds i to the "passesTotal" field.
func (pouo *PSOffenseUpdateOne) AddPassesTotal(i int) *PSOffenseUpdateOne {
	pouo.mutation.AddPassesTotal(i)
	return pouo
}

// SetPassesKey sets the "passesKey" field.
func (pouo *PSOffenseUpdateOne) SetPassesKey(i int) *PSOffenseUpdateOne {
	pouo.mutation.ResetPassesKey()
	pouo.mutation.SetPassesKey(i)
	return pouo
}

// AddPassesKey adds i to the "passesKey" field.
func (pouo *PSOffenseUpdateOne) AddPassesKey(i int) *PSOffenseUpdateOne {
	pouo.mutation.AddPassesKey(i)
	return pouo
}

// SetPassesAccuracy sets the "passesAccuracy" field.
func (pouo *PSOffenseUpdateOne) SetPassesAccuracy(i int) *PSOffenseUpdateOne {
	pouo.mutation.ResetPassesAccuracy()
	pouo.mutation.SetPassesAccuracy(i)
	return pouo
}

// AddPassesAccuracy adds i to the "passesAccuracy" field.
func (pouo *PSOffenseUpdateOne) AddPassesAccuracy(i int) *PSOffenseUpdateOne {
	pouo.mutation.AddPassesAccuracy(i)
	return pouo
}

// AddPlayerStatIDs adds the "playerStats" edge to the PlayerStats entity by IDs.
func (pouo *PSOffenseUpdateOne) AddPlayerStatIDs(ids ...int) *PSOffenseUpdateOne {
	pouo.mutation.AddPlayerStatIDs(ids...)
	return pouo
}

// AddPlayerStats adds the "playerStats" edges to the PlayerStats entity.
func (pouo *PSOffenseUpdateOne) AddPlayerStats(p ...*PlayerStats) *PSOffenseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pouo.AddPlayerStatIDs(ids...)
}

// Mutation returns the PSOffenseMutation object of the builder.
func (pouo *PSOffenseUpdateOne) Mutation() *PSOffenseMutation {
	return pouo.mutation
}

// ClearPlayerStats clears all "playerStats" edges to the PlayerStats entity.
func (pouo *PSOffenseUpdateOne) ClearPlayerStats() *PSOffenseUpdateOne {
	pouo.mutation.ClearPlayerStats()
	return pouo
}

// RemovePlayerStatIDs removes the "playerStats" edge to PlayerStats entities by IDs.
func (pouo *PSOffenseUpdateOne) RemovePlayerStatIDs(ids ...int) *PSOffenseUpdateOne {
	pouo.mutation.RemovePlayerStatIDs(ids...)
	return pouo
}

// RemovePlayerStats removes "playerStats" edges to PlayerStats entities.
func (pouo *PSOffenseUpdateOne) RemovePlayerStats(p ...*PlayerStats) *PSOffenseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pouo.RemovePlayerStatIDs(ids...)
}

// Where appends a list predicates to the PSOffenseUpdate builder.
func (pouo *PSOffenseUpdateOne) Where(ps ...predicate.PSOffense) *PSOffenseUpdateOne {
	pouo.mutation.Where(ps...)
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PSOffenseUpdateOne) Select(field string, fields ...string) *PSOffenseUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PSOffense entity.
func (pouo *PSOffenseUpdateOne) Save(ctx context.Context) (*PSOffense, error) {
	return withHooks(ctx, pouo.sqlSave, pouo.mutation, pouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PSOffenseUpdateOne) SaveX(ctx context.Context) *PSOffense {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PSOffenseUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PSOffenseUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pouo *PSOffenseUpdateOne) sqlSave(ctx context.Context) (_node *PSOffense, err error) {
	_spec := sqlgraph.NewUpdateSpec(psoffense.Table, psoffense.Columns, sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt))
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PSOffense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, psoffense.FieldID)
		for _, f := range fields {
			if !psoffense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != psoffense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.DribbleAttempts(); ok {
		_spec.SetField(psoffense.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedDribbleAttempts(); ok {
		_spec.AddField(psoffense.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.DribbleSuccess(); ok {
		_spec.SetField(psoffense.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedDribbleSuccess(); ok {
		_spec.AddField(psoffense.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.DribblePast(); ok {
		_spec.SetField(psoffense.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedDribblePast(); ok {
		_spec.AddField(psoffense.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.PassesTotal(); ok {
		_spec.SetField(psoffense.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedPassesTotal(); ok {
		_spec.AddField(psoffense.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.PassesKey(); ok {
		_spec.SetField(psoffense.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedPassesKey(); ok {
		_spec.AddField(psoffense.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.PassesAccuracy(); ok {
		_spec.SetField(psoffense.FieldPassesAccuracy, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedPassesAccuracy(); ok {
		_spec.AddField(psoffense.FieldPassesAccuracy, field.TypeInt, value)
	}
	if pouo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   psoffense.PlayerStatsTable,
			Columns: psoffense.PlayerStatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.RemovedPlayerStatsIDs(); len(nodes) > 0 && !pouo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   psoffense.PlayerStatsTable,
			Columns: psoffense.PlayerStatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   psoffense.PlayerStatsTable,
			Columns: psoffense.PlayerStatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PSOffense{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psoffense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pouo.mutation.done = true
	return _node, nil
}
