// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psfairplay"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSFairplay is the model entity for the PSFairplay schema.
type PSFairplay struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FoulsCommitted holds the value of the "FoulsCommitted" field.
	FoulsCommitted int `json:"FoulsCommitted,omitempty"`
	// Yellow holds the value of the "Yellow" field.
	Yellow int `json:"Yellow,omitempty"`
	// YellowRed holds the value of the "YellowRed" field.
	YellowRed int `json:"YellowRed,omitempty"`
	// Red holds the value of the "Red" field.
	Red int `json:"Red,omitempty"`
	// PenaltyConceded holds the value of the "PenaltyConceded" field.
	PenaltyConceded int `json:"PenaltyConceded,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSFairplayQuery when eager-loading is set.
	Edges                    PSFairplayEdges `json:"edges"`
	player_stats_ps_fairplay *int
	selectValues             sql.SelectValues
}

// PSFairplayEdges holds the relations/edges for other nodes in the graph.
type PSFairplayEdges struct {
	// PlayerStats holds the value of the playerStats edge.
	PlayerStats *PlayerStats `json:"playerStats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerStatsOrErr returns the PlayerStats value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PSFairplayEdges) PlayerStatsOrErr() (*PlayerStats, error) {
	if e.loadedTypes[0] {
		if e.PlayerStats == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playerstats.Label}
		}
		return e.PlayerStats, nil
	}
	return nil, &NotLoadedError{edge: "playerStats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSFairplay) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case psfairplay.FieldID, psfairplay.FieldFoulsCommitted, psfairplay.FieldYellow, psfairplay.FieldYellowRed, psfairplay.FieldRed, psfairplay.FieldPenaltyConceded:
			values[i] = new(sql.NullInt64)
		case psfairplay.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case psfairplay.ForeignKeys[0]: // player_stats_ps_fairplay
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSFairplay fields.
func (pf *PSFairplay) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case psfairplay.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pf.ID = int(value.Int64)
		case psfairplay.FieldFoulsCommitted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FoulsCommitted", values[i])
			} else if value.Valid {
				pf.FoulsCommitted = int(value.Int64)
			}
		case psfairplay.FieldYellow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Yellow", values[i])
			} else if value.Valid {
				pf.Yellow = int(value.Int64)
			}
		case psfairplay.FieldYellowRed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field YellowRed", values[i])
			} else if value.Valid {
				pf.YellowRed = int(value.Int64)
			}
		case psfairplay.FieldRed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Red", values[i])
			} else if value.Valid {
				pf.Red = int(value.Int64)
			}
		case psfairplay.FieldPenaltyConceded:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PenaltyConceded", values[i])
			} else if value.Valid {
				pf.PenaltyConceded = int(value.Int64)
			}
		case psfairplay.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				pf.LastUpdated = value.Time
			}
		case psfairplay.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_stats_ps_fairplay", value)
			} else if value.Valid {
				pf.player_stats_ps_fairplay = new(int)
				*pf.player_stats_ps_fairplay = int(value.Int64)
			}
		default:
			pf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSFairplay.
// This includes values selected through modifiers, order, etc.
func (pf *PSFairplay) Value(name string) (ent.Value, error) {
	return pf.selectValues.Get(name)
}

// QueryPlayerStats queries the "playerStats" edge of the PSFairplay entity.
func (pf *PSFairplay) QueryPlayerStats() *PlayerStatsQuery {
	return NewPSFairplayClient(pf.config).QueryPlayerStats(pf)
}

// Update returns a builder for updating this PSFairplay.
// Note that you need to call PSFairplay.Unwrap() before calling this method if this PSFairplay
// was returned from a transaction, and the transaction was committed or rolled back.
func (pf *PSFairplay) Update() *PSFairplayUpdateOne {
	return NewPSFairplayClient(pf.config).UpdateOne(pf)
}

// Unwrap unwraps the PSFairplay entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pf *PSFairplay) Unwrap() *PSFairplay {
	_tx, ok := pf.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSFairplay is not a transactional entity")
	}
	pf.config.driver = _tx.drv
	return pf
}

// String implements the fmt.Stringer.
func (pf *PSFairplay) String() string {
	var builder strings.Builder
	builder.WriteString("PSFairplay(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pf.ID))
	builder.WriteString("FoulsCommitted=")
	builder.WriteString(fmt.Sprintf("%v", pf.FoulsCommitted))
	builder.WriteString(", ")
	builder.WriteString("Yellow=")
	builder.WriteString(fmt.Sprintf("%v", pf.Yellow))
	builder.WriteString(", ")
	builder.WriteString("YellowRed=")
	builder.WriteString(fmt.Sprintf("%v", pf.YellowRed))
	builder.WriteString(", ")
	builder.WriteString("Red=")
	builder.WriteString(fmt.Sprintf("%v", pf.Red))
	builder.WriteString(", ")
	builder.WriteString("PenaltyConceded=")
	builder.WriteString(fmt.Sprintf("%v", pf.PenaltyConceded))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(pf.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PSFairplays is a parsable slice of PSFairplay.
type PSFairplays []*PSFairplay
