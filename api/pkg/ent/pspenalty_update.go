// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSPenaltyUpdate is the builder for updating PSPenalty entities.
type PSPenaltyUpdate struct {
	config
	hooks    []Hook
	mutation *PSPenaltyMutation
}

// Where appends a list predicates to the PSPenaltyUpdate builder.
func (ppu *PSPenaltyUpdate) Where(ps ...predicate.PSPenalty) *PSPenaltyUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetFoulsDrawn sets the "FoulsDrawn" field.
func (ppu *PSPenaltyUpdate) SetFoulsDrawn(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetFoulsDrawn()
	ppu.mutation.SetFoulsDrawn(i)
	return ppu
}

// AddFoulsDrawn adds i to the "FoulsDrawn" field.
func (ppu *PSPenaltyUpdate) AddFoulsDrawn(i int) *PSPenaltyUpdate {
	ppu.mutation.AddFoulsDrawn(i)
	return ppu
}

// SetFoulsCommitted sets the "FoulsCommitted" field.
func (ppu *PSPenaltyUpdate) SetFoulsCommitted(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetFoulsCommitted()
	ppu.mutation.SetFoulsCommitted(i)
	return ppu
}

// AddFoulsCommitted adds i to the "FoulsCommitted" field.
func (ppu *PSPenaltyUpdate) AddFoulsCommitted(i int) *PSPenaltyUpdate {
	ppu.mutation.AddFoulsCommitted(i)
	return ppu
}

// SetCardsYellow sets the "CardsYellow" field.
func (ppu *PSPenaltyUpdate) SetCardsYellow(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetCardsYellow()
	ppu.mutation.SetCardsYellow(i)
	return ppu
}

// AddCardsYellow adds i to the "CardsYellow" field.
func (ppu *PSPenaltyUpdate) AddCardsYellow(i int) *PSPenaltyUpdate {
	ppu.mutation.AddCardsYellow(i)
	return ppu
}

// SetCardYellowRed sets the "CardYellowRed" field.
func (ppu *PSPenaltyUpdate) SetCardYellowRed(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetCardYellowRed()
	ppu.mutation.SetCardYellowRed(i)
	return ppu
}

// AddCardYellowRed adds i to the "CardYellowRed" field.
func (ppu *PSPenaltyUpdate) AddCardYellowRed(i int) *PSPenaltyUpdate {
	ppu.mutation.AddCardYellowRed(i)
	return ppu
}

// SetCardsRed sets the "CardsRed" field.
func (ppu *PSPenaltyUpdate) SetCardsRed(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetCardsRed()
	ppu.mutation.SetCardsRed(i)
	return ppu
}

// AddCardsRed adds i to the "CardsRed" field.
func (ppu *PSPenaltyUpdate) AddCardsRed(i int) *PSPenaltyUpdate {
	ppu.mutation.AddCardsRed(i)
	return ppu
}

// SetPenaltyWon sets the "PenaltyWon" field.
func (ppu *PSPenaltyUpdate) SetPenaltyWon(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetPenaltyWon()
	ppu.mutation.SetPenaltyWon(i)
	return ppu
}

// SetNillablePenaltyWon sets the "PenaltyWon" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillablePenaltyWon(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetPenaltyWon(*i)
	}
	return ppu
}

// AddPenaltyWon adds i to the "PenaltyWon" field.
func (ppu *PSPenaltyUpdate) AddPenaltyWon(i int) *PSPenaltyUpdate {
	ppu.mutation.AddPenaltyWon(i)
	return ppu
}

// SetPenaltyCommitted sets the "PenaltyCommitted" field.
func (ppu *PSPenaltyUpdate) SetPenaltyCommitted(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetPenaltyCommitted()
	ppu.mutation.SetPenaltyCommitted(i)
	return ppu
}

// SetNillablePenaltyCommitted sets the "PenaltyCommitted" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillablePenaltyCommitted(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetPenaltyCommitted(*i)
	}
	return ppu
}

// AddPenaltyCommitted adds i to the "PenaltyCommitted" field.
func (ppu *PSPenaltyUpdate) AddPenaltyCommitted(i int) *PSPenaltyUpdate {
	ppu.mutation.AddPenaltyCommitted(i)
	return ppu
}

// SetPenaltyScored sets the "PenaltyScored" field.
func (ppu *PSPenaltyUpdate) SetPenaltyScored(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetPenaltyScored()
	ppu.mutation.SetPenaltyScored(i)
	return ppu
}

// SetNillablePenaltyScored sets the "PenaltyScored" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillablePenaltyScored(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetPenaltyScored(*i)
	}
	return ppu
}

// AddPenaltyScored adds i to the "PenaltyScored" field.
func (ppu *PSPenaltyUpdate) AddPenaltyScored(i int) *PSPenaltyUpdate {
	ppu.mutation.AddPenaltyScored(i)
	return ppu
}

// SetPenaltyMissed sets the "PenaltyMissed" field.
func (ppu *PSPenaltyUpdate) SetPenaltyMissed(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetPenaltyMissed()
	ppu.mutation.SetPenaltyMissed(i)
	return ppu
}

// AddPenaltyMissed adds i to the "PenaltyMissed" field.
func (ppu *PSPenaltyUpdate) AddPenaltyMissed(i int) *PSPenaltyUpdate {
	ppu.mutation.AddPenaltyMissed(i)
	return ppu
}

// SetPenaltySaved sets the "PenaltySaved" field.
func (ppu *PSPenaltyUpdate) SetPenaltySaved(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetPenaltySaved()
	ppu.mutation.SetPenaltySaved(i)
	return ppu
}

// SetNillablePenaltySaved sets the "PenaltySaved" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillablePenaltySaved(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetPenaltySaved(*i)
	}
	return ppu
}

// AddPenaltySaved adds i to the "PenaltySaved" field.
func (ppu *PSPenaltyUpdate) AddPenaltySaved(i int) *PSPenaltyUpdate {
	ppu.mutation.AddPenaltySaved(i)
	return ppu
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ppu *PSPenaltyUpdate) SetPlayerStatsID(id int) *PSPenaltyUpdate {
	ppu.mutation.SetPlayerStatsID(id)
	return ppu
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillablePlayerStatsID(id *int) *PSPenaltyUpdate {
	if id != nil {
		ppu = ppu.SetPlayerStatsID(*id)
	}
	return ppu
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ppu *PSPenaltyUpdate) SetPlayerStats(p *PlayerStats) *PSPenaltyUpdate {
	return ppu.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSPenaltyMutation object of the builder.
func (ppu *PSPenaltyUpdate) Mutation() *PSPenaltyMutation {
	return ppu.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (ppu *PSPenaltyUpdate) ClearPlayerStats() *PSPenaltyUpdate {
	ppu.mutation.ClearPlayerStats()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PSPenaltyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PSPenaltyUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PSPenaltyUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PSPenaltyUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppu *PSPenaltyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pspenalty.Table, pspenalty.Columns, sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.FoulsDrawn(); ok {
		_spec.SetField(pspenalty.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedFoulsDrawn(); ok {
		_spec.AddField(pspenalty.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.FoulsCommitted(); ok {
		_spec.SetField(pspenalty.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedFoulsCommitted(); ok {
		_spec.AddField(pspenalty.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.CardsYellow(); ok {
		_spec.SetField(pspenalty.FieldCardsYellow, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedCardsYellow(); ok {
		_spec.AddField(pspenalty.FieldCardsYellow, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.CardYellowRed(); ok {
		_spec.SetField(pspenalty.FieldCardYellowRed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedCardYellowRed(); ok {
		_spec.AddField(pspenalty.FieldCardYellowRed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.CardsRed(); ok {
		_spec.SetField(pspenalty.FieldCardsRed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedCardsRed(); ok {
		_spec.AddField(pspenalty.FieldCardsRed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.PenaltyWon(); ok {
		_spec.SetField(pspenalty.FieldPenaltyWon, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedPenaltyWon(); ok {
		_spec.AddField(pspenalty.FieldPenaltyWon, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.PenaltyCommitted(); ok {
		_spec.SetField(pspenalty.FieldPenaltyCommitted, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedPenaltyCommitted(); ok {
		_spec.AddField(pspenalty.FieldPenaltyCommitted, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.PenaltyScored(); ok {
		_spec.SetField(pspenalty.FieldPenaltyScored, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedPenaltyScored(); ok {
		_spec.AddField(pspenalty.FieldPenaltyScored, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.PenaltyMissed(); ok {
		_spec.SetField(pspenalty.FieldPenaltyMissed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedPenaltyMissed(); ok {
		_spec.AddField(pspenalty.FieldPenaltyMissed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.PenaltySaved(); ok {
		_spec.SetField(pspenalty.FieldPenaltySaved, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedPenaltySaved(); ok {
		_spec.AddField(pspenalty.FieldPenaltySaved, field.TypeInt, value)
	}
	if ppu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pspenalty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PSPenaltyUpdateOne is the builder for updating a single PSPenalty entity.
type PSPenaltyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PSPenaltyMutation
}

// SetFoulsDrawn sets the "FoulsDrawn" field.
func (ppuo *PSPenaltyUpdateOne) SetFoulsDrawn(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetFoulsDrawn()
	ppuo.mutation.SetFoulsDrawn(i)
	return ppuo
}

// AddFoulsDrawn adds i to the "FoulsDrawn" field.
func (ppuo *PSPenaltyUpdateOne) AddFoulsDrawn(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddFoulsDrawn(i)
	return ppuo
}

// SetFoulsCommitted sets the "FoulsCommitted" field.
func (ppuo *PSPenaltyUpdateOne) SetFoulsCommitted(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetFoulsCommitted()
	ppuo.mutation.SetFoulsCommitted(i)
	return ppuo
}

// AddFoulsCommitted adds i to the "FoulsCommitted" field.
func (ppuo *PSPenaltyUpdateOne) AddFoulsCommitted(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddFoulsCommitted(i)
	return ppuo
}

// SetCardsYellow sets the "CardsYellow" field.
func (ppuo *PSPenaltyUpdateOne) SetCardsYellow(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetCardsYellow()
	ppuo.mutation.SetCardsYellow(i)
	return ppuo
}

// AddCardsYellow adds i to the "CardsYellow" field.
func (ppuo *PSPenaltyUpdateOne) AddCardsYellow(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddCardsYellow(i)
	return ppuo
}

// SetCardYellowRed sets the "CardYellowRed" field.
func (ppuo *PSPenaltyUpdateOne) SetCardYellowRed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetCardYellowRed()
	ppuo.mutation.SetCardYellowRed(i)
	return ppuo
}

// AddCardYellowRed adds i to the "CardYellowRed" field.
func (ppuo *PSPenaltyUpdateOne) AddCardYellowRed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddCardYellowRed(i)
	return ppuo
}

// SetCardsRed sets the "CardsRed" field.
func (ppuo *PSPenaltyUpdateOne) SetCardsRed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetCardsRed()
	ppuo.mutation.SetCardsRed(i)
	return ppuo
}

// AddCardsRed adds i to the "CardsRed" field.
func (ppuo *PSPenaltyUpdateOne) AddCardsRed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddCardsRed(i)
	return ppuo
}

// SetPenaltyWon sets the "PenaltyWon" field.
func (ppuo *PSPenaltyUpdateOne) SetPenaltyWon(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetPenaltyWon()
	ppuo.mutation.SetPenaltyWon(i)
	return ppuo
}

// SetNillablePenaltyWon sets the "PenaltyWon" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillablePenaltyWon(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetPenaltyWon(*i)
	}
	return ppuo
}

// AddPenaltyWon adds i to the "PenaltyWon" field.
func (ppuo *PSPenaltyUpdateOne) AddPenaltyWon(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddPenaltyWon(i)
	return ppuo
}

// SetPenaltyCommitted sets the "PenaltyCommitted" field.
func (ppuo *PSPenaltyUpdateOne) SetPenaltyCommitted(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetPenaltyCommitted()
	ppuo.mutation.SetPenaltyCommitted(i)
	return ppuo
}

// SetNillablePenaltyCommitted sets the "PenaltyCommitted" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillablePenaltyCommitted(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetPenaltyCommitted(*i)
	}
	return ppuo
}

// AddPenaltyCommitted adds i to the "PenaltyCommitted" field.
func (ppuo *PSPenaltyUpdateOne) AddPenaltyCommitted(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddPenaltyCommitted(i)
	return ppuo
}

// SetPenaltyScored sets the "PenaltyScored" field.
func (ppuo *PSPenaltyUpdateOne) SetPenaltyScored(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetPenaltyScored()
	ppuo.mutation.SetPenaltyScored(i)
	return ppuo
}

// SetNillablePenaltyScored sets the "PenaltyScored" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillablePenaltyScored(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetPenaltyScored(*i)
	}
	return ppuo
}

// AddPenaltyScored adds i to the "PenaltyScored" field.
func (ppuo *PSPenaltyUpdateOne) AddPenaltyScored(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddPenaltyScored(i)
	return ppuo
}

// SetPenaltyMissed sets the "PenaltyMissed" field.
func (ppuo *PSPenaltyUpdateOne) SetPenaltyMissed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetPenaltyMissed()
	ppuo.mutation.SetPenaltyMissed(i)
	return ppuo
}

// AddPenaltyMissed adds i to the "PenaltyMissed" field.
func (ppuo *PSPenaltyUpdateOne) AddPenaltyMissed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddPenaltyMissed(i)
	return ppuo
}

// SetPenaltySaved sets the "PenaltySaved" field.
func (ppuo *PSPenaltyUpdateOne) SetPenaltySaved(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetPenaltySaved()
	ppuo.mutation.SetPenaltySaved(i)
	return ppuo
}

// SetNillablePenaltySaved sets the "PenaltySaved" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillablePenaltySaved(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetPenaltySaved(*i)
	}
	return ppuo
}

// AddPenaltySaved adds i to the "PenaltySaved" field.
func (ppuo *PSPenaltyUpdateOne) AddPenaltySaved(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddPenaltySaved(i)
	return ppuo
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ppuo *PSPenaltyUpdateOne) SetPlayerStatsID(id int) *PSPenaltyUpdateOne {
	ppuo.mutation.SetPlayerStatsID(id)
	return ppuo
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillablePlayerStatsID(id *int) *PSPenaltyUpdateOne {
	if id != nil {
		ppuo = ppuo.SetPlayerStatsID(*id)
	}
	return ppuo
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ppuo *PSPenaltyUpdateOne) SetPlayerStats(p *PlayerStats) *PSPenaltyUpdateOne {
	return ppuo.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSPenaltyMutation object of the builder.
func (ppuo *PSPenaltyUpdateOne) Mutation() *PSPenaltyMutation {
	return ppuo.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (ppuo *PSPenaltyUpdateOne) ClearPlayerStats() *PSPenaltyUpdateOne {
	ppuo.mutation.ClearPlayerStats()
	return ppuo
}

// Where appends a list predicates to the PSPenaltyUpdate builder.
func (ppuo *PSPenaltyUpdateOne) Where(ps ...predicate.PSPenalty) *PSPenaltyUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PSPenaltyUpdateOne) Select(field string, fields ...string) *PSPenaltyUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PSPenalty entity.
func (ppuo *PSPenaltyUpdateOne) Save(ctx context.Context) (*PSPenalty, error) {
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PSPenaltyUpdateOne) SaveX(ctx context.Context) *PSPenalty {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PSPenaltyUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PSPenaltyUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppuo *PSPenaltyUpdateOne) sqlSave(ctx context.Context) (_node *PSPenalty, err error) {
	_spec := sqlgraph.NewUpdateSpec(pspenalty.Table, pspenalty.Columns, sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PSPenalty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pspenalty.FieldID)
		for _, f := range fields {
			if !pspenalty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pspenalty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.FoulsDrawn(); ok {
		_spec.SetField(pspenalty.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedFoulsDrawn(); ok {
		_spec.AddField(pspenalty.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.FoulsCommitted(); ok {
		_spec.SetField(pspenalty.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedFoulsCommitted(); ok {
		_spec.AddField(pspenalty.FieldFoulsCommitted, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.CardsYellow(); ok {
		_spec.SetField(pspenalty.FieldCardsYellow, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedCardsYellow(); ok {
		_spec.AddField(pspenalty.FieldCardsYellow, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.CardYellowRed(); ok {
		_spec.SetField(pspenalty.FieldCardYellowRed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedCardYellowRed(); ok {
		_spec.AddField(pspenalty.FieldCardYellowRed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.CardsRed(); ok {
		_spec.SetField(pspenalty.FieldCardsRed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedCardsRed(); ok {
		_spec.AddField(pspenalty.FieldCardsRed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.PenaltyWon(); ok {
		_spec.SetField(pspenalty.FieldPenaltyWon, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedPenaltyWon(); ok {
		_spec.AddField(pspenalty.FieldPenaltyWon, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.PenaltyCommitted(); ok {
		_spec.SetField(pspenalty.FieldPenaltyCommitted, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedPenaltyCommitted(); ok {
		_spec.AddField(pspenalty.FieldPenaltyCommitted, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.PenaltyScored(); ok {
		_spec.SetField(pspenalty.FieldPenaltyScored, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedPenaltyScored(); ok {
		_spec.AddField(pspenalty.FieldPenaltyScored, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.PenaltyMissed(); ok {
		_spec.SetField(pspenalty.FieldPenaltyMissed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedPenaltyMissed(); ok {
		_spec.AddField(pspenalty.FieldPenaltyMissed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.PenaltySaved(); ok {
		_spec.SetField(pspenalty.FieldPenaltySaved, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedPenaltySaved(); ok {
		_spec.AddField(pspenalty.FieldPenaltySaved, field.TypeInt, value)
	}
	if ppuo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PSPenalty{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pspenalty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
