// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSPenaltyUpdate is the builder for updating PSPenalty entities.
type PSPenaltyUpdate struct {
	config
	hooks    []Hook
	mutation *PSPenaltyMutation
}

// Where appends a list predicates to the PSPenaltyUpdate builder.
func (ppu *PSPenaltyUpdate) Where(ps ...predicate.PSPenalty) *PSPenaltyUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetWon sets the "Won" field.
func (ppu *PSPenaltyUpdate) SetWon(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetWon()
	ppu.mutation.SetWon(i)
	return ppu
}

// SetNillableWon sets the "Won" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillableWon(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetWon(*i)
	}
	return ppu
}

// AddWon adds i to the "Won" field.
func (ppu *PSPenaltyUpdate) AddWon(i int) *PSPenaltyUpdate {
	ppu.mutation.AddWon(i)
	return ppu
}

// SetScored sets the "Scored" field.
func (ppu *PSPenaltyUpdate) SetScored(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetScored()
	ppu.mutation.SetScored(i)
	return ppu
}

// SetNillableScored sets the "Scored" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillableScored(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetScored(*i)
	}
	return ppu
}

// AddScored adds i to the "Scored" field.
func (ppu *PSPenaltyUpdate) AddScored(i int) *PSPenaltyUpdate {
	ppu.mutation.AddScored(i)
	return ppu
}

// SetMissed sets the "Missed" field.
func (ppu *PSPenaltyUpdate) SetMissed(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetMissed()
	ppu.mutation.SetMissed(i)
	return ppu
}

// SetNillableMissed sets the "Missed" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillableMissed(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetMissed(*i)
	}
	return ppu
}

// AddMissed adds i to the "Missed" field.
func (ppu *PSPenaltyUpdate) AddMissed(i int) *PSPenaltyUpdate {
	ppu.mutation.AddMissed(i)
	return ppu
}

// SetSaved sets the "Saved" field.
func (ppu *PSPenaltyUpdate) SetSaved(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetSaved()
	ppu.mutation.SetSaved(i)
	return ppu
}

// SetNillableSaved sets the "Saved" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillableSaved(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetSaved(*i)
	}
	return ppu
}

// AddSaved adds i to the "Saved" field.
func (ppu *PSPenaltyUpdate) AddSaved(i int) *PSPenaltyUpdate {
	ppu.mutation.AddSaved(i)
	return ppu
}

// SetCommitted sets the "Committed" field.
func (ppu *PSPenaltyUpdate) SetCommitted(i int) *PSPenaltyUpdate {
	ppu.mutation.ResetCommitted()
	ppu.mutation.SetCommitted(i)
	return ppu
}

// SetNillableCommitted sets the "Committed" field if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillableCommitted(i *int) *PSPenaltyUpdate {
	if i != nil {
		ppu.SetCommitted(*i)
	}
	return ppu
}

// AddCommitted adds i to the "Committed" field.
func (ppu *PSPenaltyUpdate) AddCommitted(i int) *PSPenaltyUpdate {
	ppu.mutation.AddCommitted(i)
	return ppu
}

// SetLastUpdated sets the "lastUpdated" field.
func (ppu *PSPenaltyUpdate) SetLastUpdated(t time.Time) *PSPenaltyUpdate {
	ppu.mutation.SetLastUpdated(t)
	return ppu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (ppu *PSPenaltyUpdate) ClearLastUpdated() *PSPenaltyUpdate {
	ppu.mutation.ClearLastUpdated()
	return ppu
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ppu *PSPenaltyUpdate) SetPlayerStatsID(id int) *PSPenaltyUpdate {
	ppu.mutation.SetPlayerStatsID(id)
	return ppu
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ppu *PSPenaltyUpdate) SetNillablePlayerStatsID(id *int) *PSPenaltyUpdate {
	if id != nil {
		ppu = ppu.SetPlayerStatsID(*id)
	}
	return ppu
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ppu *PSPenaltyUpdate) SetPlayerStats(p *PlayerStats) *PSPenaltyUpdate {
	return ppu.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSPenaltyMutation object of the builder.
func (ppu *PSPenaltyUpdate) Mutation() *PSPenaltyMutation {
	return ppu.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (ppu *PSPenaltyUpdate) ClearPlayerStats() *PSPenaltyUpdate {
	ppu.mutation.ClearPlayerStats()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PSPenaltyUpdate) Save(ctx context.Context) (int, error) {
	ppu.defaults()
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PSPenaltyUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PSPenaltyUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PSPenaltyUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *PSPenaltyUpdate) defaults() {
	if _, ok := ppu.mutation.LastUpdated(); !ok && !ppu.mutation.LastUpdatedCleared() {
		v := pspenalty.UpdateDefaultLastUpdated()
		ppu.mutation.SetLastUpdated(v)
	}
}

func (ppu *PSPenaltyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pspenalty.Table, pspenalty.Columns, sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.Won(); ok {
		_spec.SetField(pspenalty.FieldWon, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedWon(); ok {
		_spec.AddField(pspenalty.FieldWon, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.Scored(); ok {
		_spec.SetField(pspenalty.FieldScored, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedScored(); ok {
		_spec.AddField(pspenalty.FieldScored, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.Missed(); ok {
		_spec.SetField(pspenalty.FieldMissed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedMissed(); ok {
		_spec.AddField(pspenalty.FieldMissed, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.Saved(); ok {
		_spec.SetField(pspenalty.FieldSaved, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedSaved(); ok {
		_spec.AddField(pspenalty.FieldSaved, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.Committed(); ok {
		_spec.SetField(pspenalty.FieldCommitted, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedCommitted(); ok {
		_spec.AddField(pspenalty.FieldCommitted, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.LastUpdated(); ok {
		_spec.SetField(pspenalty.FieldLastUpdated, field.TypeTime, value)
	}
	if ppu.mutation.LastUpdatedCleared() {
		_spec.ClearField(pspenalty.FieldLastUpdated, field.TypeTime)
	}
	if ppu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pspenalty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PSPenaltyUpdateOne is the builder for updating a single PSPenalty entity.
type PSPenaltyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PSPenaltyMutation
}

// SetWon sets the "Won" field.
func (ppuo *PSPenaltyUpdateOne) SetWon(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetWon()
	ppuo.mutation.SetWon(i)
	return ppuo
}

// SetNillableWon sets the "Won" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillableWon(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetWon(*i)
	}
	return ppuo
}

// AddWon adds i to the "Won" field.
func (ppuo *PSPenaltyUpdateOne) AddWon(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddWon(i)
	return ppuo
}

// SetScored sets the "Scored" field.
func (ppuo *PSPenaltyUpdateOne) SetScored(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetScored()
	ppuo.mutation.SetScored(i)
	return ppuo
}

// SetNillableScored sets the "Scored" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillableScored(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetScored(*i)
	}
	return ppuo
}

// AddScored adds i to the "Scored" field.
func (ppuo *PSPenaltyUpdateOne) AddScored(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddScored(i)
	return ppuo
}

// SetMissed sets the "Missed" field.
func (ppuo *PSPenaltyUpdateOne) SetMissed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetMissed()
	ppuo.mutation.SetMissed(i)
	return ppuo
}

// SetNillableMissed sets the "Missed" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillableMissed(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetMissed(*i)
	}
	return ppuo
}

// AddMissed adds i to the "Missed" field.
func (ppuo *PSPenaltyUpdateOne) AddMissed(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddMissed(i)
	return ppuo
}

// SetSaved sets the "Saved" field.
func (ppuo *PSPenaltyUpdateOne) SetSaved(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetSaved()
	ppuo.mutation.SetSaved(i)
	return ppuo
}

// SetNillableSaved sets the "Saved" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillableSaved(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetSaved(*i)
	}
	return ppuo
}

// AddSaved adds i to the "Saved" field.
func (ppuo *PSPenaltyUpdateOne) AddSaved(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddSaved(i)
	return ppuo
}

// SetCommitted sets the "Committed" field.
func (ppuo *PSPenaltyUpdateOne) SetCommitted(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.ResetCommitted()
	ppuo.mutation.SetCommitted(i)
	return ppuo
}

// SetNillableCommitted sets the "Committed" field if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillableCommitted(i *int) *PSPenaltyUpdateOne {
	if i != nil {
		ppuo.SetCommitted(*i)
	}
	return ppuo
}

// AddCommitted adds i to the "Committed" field.
func (ppuo *PSPenaltyUpdateOne) AddCommitted(i int) *PSPenaltyUpdateOne {
	ppuo.mutation.AddCommitted(i)
	return ppuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (ppuo *PSPenaltyUpdateOne) SetLastUpdated(t time.Time) *PSPenaltyUpdateOne {
	ppuo.mutation.SetLastUpdated(t)
	return ppuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (ppuo *PSPenaltyUpdateOne) ClearLastUpdated() *PSPenaltyUpdateOne {
	ppuo.mutation.ClearLastUpdated()
	return ppuo
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ppuo *PSPenaltyUpdateOne) SetPlayerStatsID(id int) *PSPenaltyUpdateOne {
	ppuo.mutation.SetPlayerStatsID(id)
	return ppuo
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ppuo *PSPenaltyUpdateOne) SetNillablePlayerStatsID(id *int) *PSPenaltyUpdateOne {
	if id != nil {
		ppuo = ppuo.SetPlayerStatsID(*id)
	}
	return ppuo
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ppuo *PSPenaltyUpdateOne) SetPlayerStats(p *PlayerStats) *PSPenaltyUpdateOne {
	return ppuo.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSPenaltyMutation object of the builder.
func (ppuo *PSPenaltyUpdateOne) Mutation() *PSPenaltyMutation {
	return ppuo.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (ppuo *PSPenaltyUpdateOne) ClearPlayerStats() *PSPenaltyUpdateOne {
	ppuo.mutation.ClearPlayerStats()
	return ppuo
}

// Where appends a list predicates to the PSPenaltyUpdate builder.
func (ppuo *PSPenaltyUpdateOne) Where(ps ...predicate.PSPenalty) *PSPenaltyUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PSPenaltyUpdateOne) Select(field string, fields ...string) *PSPenaltyUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PSPenalty entity.
func (ppuo *PSPenaltyUpdateOne) Save(ctx context.Context) (*PSPenalty, error) {
	ppuo.defaults()
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PSPenaltyUpdateOne) SaveX(ctx context.Context) *PSPenalty {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PSPenaltyUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PSPenaltyUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *PSPenaltyUpdateOne) defaults() {
	if _, ok := ppuo.mutation.LastUpdated(); !ok && !ppuo.mutation.LastUpdatedCleared() {
		v := pspenalty.UpdateDefaultLastUpdated()
		ppuo.mutation.SetLastUpdated(v)
	}
}

func (ppuo *PSPenaltyUpdateOne) sqlSave(ctx context.Context) (_node *PSPenalty, err error) {
	_spec := sqlgraph.NewUpdateSpec(pspenalty.Table, pspenalty.Columns, sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PSPenalty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pspenalty.FieldID)
		for _, f := range fields {
			if !pspenalty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pspenalty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.Won(); ok {
		_spec.SetField(pspenalty.FieldWon, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedWon(); ok {
		_spec.AddField(pspenalty.FieldWon, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.Scored(); ok {
		_spec.SetField(pspenalty.FieldScored, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedScored(); ok {
		_spec.AddField(pspenalty.FieldScored, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.Missed(); ok {
		_spec.SetField(pspenalty.FieldMissed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedMissed(); ok {
		_spec.AddField(pspenalty.FieldMissed, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.Saved(); ok {
		_spec.SetField(pspenalty.FieldSaved, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedSaved(); ok {
		_spec.AddField(pspenalty.FieldSaved, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.Committed(); ok {
		_spec.SetField(pspenalty.FieldCommitted, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedCommitted(); ok {
		_spec.AddField(pspenalty.FieldCommitted, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.LastUpdated(); ok {
		_spec.SetField(pspenalty.FieldLastUpdated, field.TypeTime, value)
	}
	if ppuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(pspenalty.FieldLastUpdated, field.TypeTime)
	}
	if ppuo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PSPenalty{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pspenalty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
