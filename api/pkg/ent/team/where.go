// Code generated by ent, DO NOT EDIT.

package team

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldID, id))
}

// Form applies equality check predicate on the "form" field. It's identical to FormEQ.
func Form(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldForm, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldLastUpdated, v))
}

// FormEQ applies the EQ predicate on the "form" field.
func FormEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldForm, v))
}

// FormNEQ applies the NEQ predicate on the "form" field.
func FormNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldForm, v))
}

// FormIn applies the In predicate on the "form" field.
func FormIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldForm, vs...))
}

// FormNotIn applies the NotIn predicate on the "form" field.
func FormNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldForm, vs...))
}

// FormGT applies the GT predicate on the "form" field.
func FormGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldForm, v))
}

// FormGTE applies the GTE predicate on the "form" field.
func FormGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldForm, v))
}

// FormLT applies the LT predicate on the "form" field.
func FormLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldForm, v))
}

// FormLTE applies the LTE predicate on the "form" field.
func FormLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldForm, v))
}

// FormContains applies the Contains predicate on the "form" field.
func FormContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldForm, v))
}

// FormHasPrefix applies the HasPrefix predicate on the "form" field.
func FormHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldForm, v))
}

// FormHasSuffix applies the HasSuffix predicate on the "form" field.
func FormHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldForm, v))
}

// FormIsNil applies the IsNil predicate on the "form" field.
func FormIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldForm))
}

// FormNotNil applies the NotNil predicate on the "form" field.
func FormNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldForm))
}

// FormEqualFold applies the EqualFold predicate on the "form" field.
func FormEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldForm, v))
}

// FormContainsFold applies the ContainsFold predicate on the "form" field.
func FormContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldForm, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldLastUpdated))
}

// HasSeason applies the HasEdge predicate on the "season" edge.
func HasSeason() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonWith applies the HasEdge predicate on the "season" edge with a given conditions (other predicates).
func HasSeasonWith(preds ...predicate.Season) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newSeasonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClub applies the HasEdge predicate on the "club" edge.
func HasClub() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubTable, ClubColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubWith applies the HasEdge predicate on the "club" edge with a given conditions (other predicates).
func HasClubWith(preds ...predicate.Club) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newClubStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerStats applies the HasEdge predicate on the "playerStats" edge.
func HasPlayerStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayerStatsTable, PlayerStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatsWith applies the HasEdge predicate on the "playerStats" edge with a given conditions (other predicates).
func HasPlayerStatsWith(preds ...predicate.PlayerStats) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newPlayerStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStandings applies the HasEdge predicate on the "standings" edge.
func HasStandings() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StandingsTable, StandingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStandingsWith applies the HasEdge predicate on the "standings" edge with a given conditions (other predicates).
func HasStandingsWith(preds ...predicate.Standings) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newStandingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHomeFixtures applies the HasEdge predicate on the "homeFixtures" edge.
func HasHomeFixtures() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HomeFixturesTable, HomeFixturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHomeFixturesWith applies the HasEdge predicate on the "homeFixtures" edge with a given conditions (other predicates).
func HasHomeFixturesWith(preds ...predicate.Fixture) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newHomeFixturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAwayFixtures applies the HasEdge predicate on the "awayFixtures" edge.
func HasAwayFixtures() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AwayFixturesTable, AwayFixturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAwayFixturesWith applies the HasEdge predicate on the "awayFixtures" edge with a given conditions (other predicates).
func HasAwayFixturesWith(preds ...predicate.Fixture) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newAwayFixturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeamFixtureEvents applies the HasEdge predicate on the "teamFixtureEvents" edge.
func HasTeamFixtureEvents() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeamFixtureEventsTable, TeamFixtureEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamFixtureEventsWith applies the HasEdge predicate on the "teamFixtureEvents" edge with a given conditions (other predicates).
func HasTeamFixtureEventsWith(preds ...predicate.FixtureEvents) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newTeamFixtureEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixtureLineups applies the HasEdge predicate on the "fixtureLineups" edge.
func HasFixtureLineups() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixtureLineupsTable, FixtureLineupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixtureLineupsWith applies the HasEdge predicate on the "fixtureLineups" edge with a given conditions (other predicates).
func HasFixtureLineupsWith(preds ...predicate.FixtureLineups) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newFixtureLineupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSquad applies the HasEdge predicate on the "squad" edge.
func HasSquad() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SquadTable, SquadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSquadWith applies the HasEdge predicate on the "squad" edge with a given conditions (other predicates).
func HasSquadWith(preds ...predicate.Squad) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newSquadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBiggestStats applies the HasEdge predicate on the "biggest_stats" edge.
func HasBiggestStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BiggestStatsTable, BiggestStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBiggestStatsWith applies the HasEdge predicate on the "biggest_stats" edge with a given conditions (other predicates).
func HasBiggestStatsWith(preds ...predicate.TSBiggest) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newBiggestStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCardsStats applies the HasEdge predicate on the "cards_stats" edge.
func HasCardsStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CardsStatsTable, CardsStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardsStatsWith applies the HasEdge predicate on the "cards_stats" edge with a given conditions (other predicates).
func HasCardsStatsWith(preds ...predicate.TSCards) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newCardsStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCleanSheetStats applies the HasEdge predicate on the "clean_sheet_stats" edge.
func HasCleanSheetStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CleanSheetStatsTable, CleanSheetStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCleanSheetStatsWith applies the HasEdge predicate on the "clean_sheet_stats" edge with a given conditions (other predicates).
func HasCleanSheetStatsWith(preds ...predicate.TSCleanSheet) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newCleanSheetStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFailedToScoreStats applies the HasEdge predicate on the "failed_to_score_stats" edge.
func HasFailedToScoreStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, FailedToScoreStatsTable, FailedToScoreStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFailedToScoreStatsWith applies the HasEdge predicate on the "failed_to_score_stats" edge with a given conditions (other predicates).
func HasFailedToScoreStatsWith(preds ...predicate.TSFailedToScore) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newFailedToScoreStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixturesStats applies the HasEdge predicate on the "fixtures_stats" edge.
func HasFixturesStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, FixturesStatsTable, FixturesStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixturesStatsWith applies the HasEdge predicate on the "fixtures_stats" edge with a given conditions (other predicates).
func HasFixturesStatsWith(preds ...predicate.TSFixtures) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newFixturesStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGoalsStats applies the HasEdge predicate on the "goals_stats" edge.
func HasGoalsStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GoalsStatsTable, GoalsStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoalsStatsWith applies the HasEdge predicate on the "goals_stats" edge with a given conditions (other predicates).
func HasGoalsStatsWith(preds ...predicate.TSGoals) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newGoalsStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLineups applies the HasEdge predicate on the "lineups" edge.
func HasLineups() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LineupsTable, LineupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineupsWith applies the HasEdge predicate on the "lineups" edge with a given conditions (other predicates).
func HasLineupsWith(preds ...predicate.TSLineups) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newLineupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPenaltyStats applies the HasEdge predicate on the "penalty_stats" edge.
func HasPenaltyStats() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PenaltyStatsTable, PenaltyStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPenaltyStatsWith applies the HasEdge predicate on the "penalty_stats" edge with a given conditions (other predicates).
func HasPenaltyStatsWith(preds ...predicate.TSPenalty) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newPenaltyStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(sql.NotPredicates(p))
}
