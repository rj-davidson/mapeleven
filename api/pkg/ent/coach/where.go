// Code generated by ent, DO NOT EDIT.

package coach

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Coach {
	return predicate.Coach(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Coach {
	return predicate.Coach(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Coach {
	return predicate.Coach(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Coach {
	return predicate.Coach(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Coach {
	return predicate.Coach(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Coach {
	return predicate.Coach(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Coach {
	return predicate.Coach(sql.FieldLTE(FieldID, id))
}

// FootballApiId applies equality check predicate on the "footballApiId" field. It's identical to FootballApiIdEQ.
func FootballApiId(v int) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldFootballApiId, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldName, v))
}

// Photo applies equality check predicate on the "photo" field. It's identical to PhotoEQ.
func Photo(v string) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldPhoto, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldLastUpdated, v))
}

// FootballApiIdEQ applies the EQ predicate on the "footballApiId" field.
func FootballApiIdEQ(v int) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldFootballApiId, v))
}

// FootballApiIdNEQ applies the NEQ predicate on the "footballApiId" field.
func FootballApiIdNEQ(v int) predicate.Coach {
	return predicate.Coach(sql.FieldNEQ(FieldFootballApiId, v))
}

// FootballApiIdIn applies the In predicate on the "footballApiId" field.
func FootballApiIdIn(vs ...int) predicate.Coach {
	return predicate.Coach(sql.FieldIn(FieldFootballApiId, vs...))
}

// FootballApiIdNotIn applies the NotIn predicate on the "footballApiId" field.
func FootballApiIdNotIn(vs ...int) predicate.Coach {
	return predicate.Coach(sql.FieldNotIn(FieldFootballApiId, vs...))
}

// FootballApiIdGT applies the GT predicate on the "footballApiId" field.
func FootballApiIdGT(v int) predicate.Coach {
	return predicate.Coach(sql.FieldGT(FieldFootballApiId, v))
}

// FootballApiIdGTE applies the GTE predicate on the "footballApiId" field.
func FootballApiIdGTE(v int) predicate.Coach {
	return predicate.Coach(sql.FieldGTE(FieldFootballApiId, v))
}

// FootballApiIdLT applies the LT predicate on the "footballApiId" field.
func FootballApiIdLT(v int) predicate.Coach {
	return predicate.Coach(sql.FieldLT(FieldFootballApiId, v))
}

// FootballApiIdLTE applies the LTE predicate on the "footballApiId" field.
func FootballApiIdLTE(v int) predicate.Coach {
	return predicate.Coach(sql.FieldLTE(FieldFootballApiId, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Coach {
	return predicate.Coach(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Coach {
	return predicate.Coach(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Coach {
	return predicate.Coach(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Coach {
	return predicate.Coach(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Coach {
	return predicate.Coach(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Coach {
	return predicate.Coach(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Coach {
	return predicate.Coach(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Coach {
	return predicate.Coach(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Coach {
	return predicate.Coach(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Coach {
	return predicate.Coach(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Coach {
	return predicate.Coach(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Coach {
	return predicate.Coach(sql.FieldContainsFold(FieldName, v))
}

// PhotoEQ applies the EQ predicate on the "photo" field.
func PhotoEQ(v string) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldPhoto, v))
}

// PhotoNEQ applies the NEQ predicate on the "photo" field.
func PhotoNEQ(v string) predicate.Coach {
	return predicate.Coach(sql.FieldNEQ(FieldPhoto, v))
}

// PhotoIn applies the In predicate on the "photo" field.
func PhotoIn(vs ...string) predicate.Coach {
	return predicate.Coach(sql.FieldIn(FieldPhoto, vs...))
}

// PhotoNotIn applies the NotIn predicate on the "photo" field.
func PhotoNotIn(vs ...string) predicate.Coach {
	return predicate.Coach(sql.FieldNotIn(FieldPhoto, vs...))
}

// PhotoGT applies the GT predicate on the "photo" field.
func PhotoGT(v string) predicate.Coach {
	return predicate.Coach(sql.FieldGT(FieldPhoto, v))
}

// PhotoGTE applies the GTE predicate on the "photo" field.
func PhotoGTE(v string) predicate.Coach {
	return predicate.Coach(sql.FieldGTE(FieldPhoto, v))
}

// PhotoLT applies the LT predicate on the "photo" field.
func PhotoLT(v string) predicate.Coach {
	return predicate.Coach(sql.FieldLT(FieldPhoto, v))
}

// PhotoLTE applies the LTE predicate on the "photo" field.
func PhotoLTE(v string) predicate.Coach {
	return predicate.Coach(sql.FieldLTE(FieldPhoto, v))
}

// PhotoContains applies the Contains predicate on the "photo" field.
func PhotoContains(v string) predicate.Coach {
	return predicate.Coach(sql.FieldContains(FieldPhoto, v))
}

// PhotoHasPrefix applies the HasPrefix predicate on the "photo" field.
func PhotoHasPrefix(v string) predicate.Coach {
	return predicate.Coach(sql.FieldHasPrefix(FieldPhoto, v))
}

// PhotoHasSuffix applies the HasSuffix predicate on the "photo" field.
func PhotoHasSuffix(v string) predicate.Coach {
	return predicate.Coach(sql.FieldHasSuffix(FieldPhoto, v))
}

// PhotoEqualFold applies the EqualFold predicate on the "photo" field.
func PhotoEqualFold(v string) predicate.Coach {
	return predicate.Coach(sql.FieldEqualFold(FieldPhoto, v))
}

// PhotoContainsFold applies the ContainsFold predicate on the "photo" field.
func PhotoContainsFold(v string) predicate.Coach {
	return predicate.Coach(sql.FieldContainsFold(FieldPhoto, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.Coach {
	return predicate.Coach(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.Coach {
	return predicate.Coach(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.Coach {
	return predicate.Coach(sql.FieldNotNull(FieldLastUpdated))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Coach) predicate.Coach {
	return predicate.Coach(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Coach) predicate.Coach {
	return predicate.Coach(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Coach) predicate.Coach {
	return predicate.Coach(sql.NotPredicates(p))
}
