// Code generated by ent, DO NOT EDIT.

package tscleansheet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tscleansheet type in the database.
	Label = "ts_clean_sheet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHome holds the string denoting the home field in the database.
	FieldHome = "home"
	// FieldAway holds the string denoting the away field in the database.
	FieldAway = "away"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the tscleansheet in the database.
	Table = "ts_clean_sheets"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "ts_clean_sheets"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_clean_sheet_stats"
)

// Columns holds all SQL columns for tscleansheet fields.
var Columns = []string{
	FieldID,
	FieldHome,
	FieldAway,
	FieldTotal,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ts_clean_sheets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_clean_sheet_stats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHome holds the default value on creation for the "home" field.
	DefaultHome int
	// DefaultAway holds the default value on creation for the "away" field.
	DefaultAway int
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal int
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the TSCleanSheet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHome orders the results by the home field.
func ByHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHome, opts...).ToFunc()
}

// ByAway orders the results by the away field.
func ByAway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAway, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TeamTable, TeamColumn),
	)
}
