// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tscleansheet"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSCleanSheetUpdate is the builder for updating TSCleanSheet entities.
type TSCleanSheetUpdate struct {
	config
	hooks    []Hook
	mutation *TSCleanSheetMutation
}

// Where appends a list predicates to the TSCleanSheetUpdate builder.
func (tcsu *TSCleanSheetUpdate) Where(ps ...predicate.TSCleanSheet) *TSCleanSheetUpdate {
	tcsu.mutation.Where(ps...)
	return tcsu
}

// SetHome sets the "home" field.
func (tcsu *TSCleanSheetUpdate) SetHome(i int) *TSCleanSheetUpdate {
	tcsu.mutation.ResetHome()
	tcsu.mutation.SetHome(i)
	return tcsu
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (tcsu *TSCleanSheetUpdate) SetNillableHome(i *int) *TSCleanSheetUpdate {
	if i != nil {
		tcsu.SetHome(*i)
	}
	return tcsu
}

// AddHome adds i to the "home" field.
func (tcsu *TSCleanSheetUpdate) AddHome(i int) *TSCleanSheetUpdate {
	tcsu.mutation.AddHome(i)
	return tcsu
}

// ClearHome clears the value of the "home" field.
func (tcsu *TSCleanSheetUpdate) ClearHome() *TSCleanSheetUpdate {
	tcsu.mutation.ClearHome()
	return tcsu
}

// SetAway sets the "away" field.
func (tcsu *TSCleanSheetUpdate) SetAway(i int) *TSCleanSheetUpdate {
	tcsu.mutation.ResetAway()
	tcsu.mutation.SetAway(i)
	return tcsu
}

// SetNillableAway sets the "away" field if the given value is not nil.
func (tcsu *TSCleanSheetUpdate) SetNillableAway(i *int) *TSCleanSheetUpdate {
	if i != nil {
		tcsu.SetAway(*i)
	}
	return tcsu
}

// AddAway adds i to the "away" field.
func (tcsu *TSCleanSheetUpdate) AddAway(i int) *TSCleanSheetUpdate {
	tcsu.mutation.AddAway(i)
	return tcsu
}

// ClearAway clears the value of the "away" field.
func (tcsu *TSCleanSheetUpdate) ClearAway() *TSCleanSheetUpdate {
	tcsu.mutation.ClearAway()
	return tcsu
}

// SetTotal sets the "total" field.
func (tcsu *TSCleanSheetUpdate) SetTotal(i int) *TSCleanSheetUpdate {
	tcsu.mutation.ResetTotal()
	tcsu.mutation.SetTotal(i)
	return tcsu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tcsu *TSCleanSheetUpdate) SetNillableTotal(i *int) *TSCleanSheetUpdate {
	if i != nil {
		tcsu.SetTotal(*i)
	}
	return tcsu
}

// AddTotal adds i to the "total" field.
func (tcsu *TSCleanSheetUpdate) AddTotal(i int) *TSCleanSheetUpdate {
	tcsu.mutation.AddTotal(i)
	return tcsu
}

// ClearTotal clears the value of the "total" field.
func (tcsu *TSCleanSheetUpdate) ClearTotal() *TSCleanSheetUpdate {
	tcsu.mutation.ClearTotal()
	return tcsu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tcsu *TSCleanSheetUpdate) SetLastUpdated(t time.Time) *TSCleanSheetUpdate {
	tcsu.mutation.SetLastUpdated(t)
	return tcsu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tcsu *TSCleanSheetUpdate) ClearLastUpdated() *TSCleanSheetUpdate {
	tcsu.mutation.ClearLastUpdated()
	return tcsu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tcsu *TSCleanSheetUpdate) SetTeamID(id int) *TSCleanSheetUpdate {
	tcsu.mutation.SetTeamID(id)
	return tcsu
}

// SetTeam sets the "team" edge to the Team entity.
func (tcsu *TSCleanSheetUpdate) SetTeam(t *Team) *TSCleanSheetUpdate {
	return tcsu.SetTeamID(t.ID)
}

// Mutation returns the TSCleanSheetMutation object of the builder.
func (tcsu *TSCleanSheetUpdate) Mutation() *TSCleanSheetMutation {
	return tcsu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tcsu *TSCleanSheetUpdate) ClearTeam() *TSCleanSheetUpdate {
	tcsu.mutation.ClearTeam()
	return tcsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcsu *TSCleanSheetUpdate) Save(ctx context.Context) (int, error) {
	tcsu.defaults()
	return withHooks(ctx, tcsu.sqlSave, tcsu.mutation, tcsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcsu *TSCleanSheetUpdate) SaveX(ctx context.Context) int {
	affected, err := tcsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcsu *TSCleanSheetUpdate) Exec(ctx context.Context) error {
	_, err := tcsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcsu *TSCleanSheetUpdate) ExecX(ctx context.Context) {
	if err := tcsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcsu *TSCleanSheetUpdate) defaults() {
	if _, ok := tcsu.mutation.LastUpdated(); !ok && !tcsu.mutation.LastUpdatedCleared() {
		v := tscleansheet.UpdateDefaultLastUpdated()
		tcsu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcsu *TSCleanSheetUpdate) check() error {
	if _, ok := tcsu.mutation.TeamID(); tcsu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSCleanSheet.team"`)
	}
	return nil
}

func (tcsu *TSCleanSheetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tscleansheet.Table, tscleansheet.Columns, sqlgraph.NewFieldSpec(tscleansheet.FieldID, field.TypeInt))
	if ps := tcsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcsu.mutation.Home(); ok {
		_spec.SetField(tscleansheet.FieldHome, field.TypeInt, value)
	}
	if value, ok := tcsu.mutation.AddedHome(); ok {
		_spec.AddField(tscleansheet.FieldHome, field.TypeInt, value)
	}
	if tcsu.mutation.HomeCleared() {
		_spec.ClearField(tscleansheet.FieldHome, field.TypeInt)
	}
	if value, ok := tcsu.mutation.Away(); ok {
		_spec.SetField(tscleansheet.FieldAway, field.TypeInt, value)
	}
	if value, ok := tcsu.mutation.AddedAway(); ok {
		_spec.AddField(tscleansheet.FieldAway, field.TypeInt, value)
	}
	if tcsu.mutation.AwayCleared() {
		_spec.ClearField(tscleansheet.FieldAway, field.TypeInt)
	}
	if value, ok := tcsu.mutation.Total(); ok {
		_spec.SetField(tscleansheet.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tcsu.mutation.AddedTotal(); ok {
		_spec.AddField(tscleansheet.FieldTotal, field.TypeInt, value)
	}
	if tcsu.mutation.TotalCleared() {
		_spec.ClearField(tscleansheet.FieldTotal, field.TypeInt)
	}
	if value, ok := tcsu.mutation.LastUpdated(); ok {
		_spec.SetField(tscleansheet.FieldLastUpdated, field.TypeTime, value)
	}
	if tcsu.mutation.LastUpdatedCleared() {
		_spec.ClearField(tscleansheet.FieldLastUpdated, field.TypeTime)
	}
	if tcsu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tscleansheet.TeamTable,
			Columns: []string{tscleansheet.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tscleansheet.TeamTable,
			Columns: []string{tscleansheet.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tscleansheet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcsu.mutation.done = true
	return n, nil
}

// TSCleanSheetUpdateOne is the builder for updating a single TSCleanSheet entity.
type TSCleanSheetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSCleanSheetMutation
}

// SetHome sets the "home" field.
func (tcsuo *TSCleanSheetUpdateOne) SetHome(i int) *TSCleanSheetUpdateOne {
	tcsuo.mutation.ResetHome()
	tcsuo.mutation.SetHome(i)
	return tcsuo
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (tcsuo *TSCleanSheetUpdateOne) SetNillableHome(i *int) *TSCleanSheetUpdateOne {
	if i != nil {
		tcsuo.SetHome(*i)
	}
	return tcsuo
}

// AddHome adds i to the "home" field.
func (tcsuo *TSCleanSheetUpdateOne) AddHome(i int) *TSCleanSheetUpdateOne {
	tcsuo.mutation.AddHome(i)
	return tcsuo
}

// ClearHome clears the value of the "home" field.
func (tcsuo *TSCleanSheetUpdateOne) ClearHome() *TSCleanSheetUpdateOne {
	tcsuo.mutation.ClearHome()
	return tcsuo
}

// SetAway sets the "away" field.
func (tcsuo *TSCleanSheetUpdateOne) SetAway(i int) *TSCleanSheetUpdateOne {
	tcsuo.mutation.ResetAway()
	tcsuo.mutation.SetAway(i)
	return tcsuo
}

// SetNillableAway sets the "away" field if the given value is not nil.
func (tcsuo *TSCleanSheetUpdateOne) SetNillableAway(i *int) *TSCleanSheetUpdateOne {
	if i != nil {
		tcsuo.SetAway(*i)
	}
	return tcsuo
}

// AddAway adds i to the "away" field.
func (tcsuo *TSCleanSheetUpdateOne) AddAway(i int) *TSCleanSheetUpdateOne {
	tcsuo.mutation.AddAway(i)
	return tcsuo
}

// ClearAway clears the value of the "away" field.
func (tcsuo *TSCleanSheetUpdateOne) ClearAway() *TSCleanSheetUpdateOne {
	tcsuo.mutation.ClearAway()
	return tcsuo
}

// SetTotal sets the "total" field.
func (tcsuo *TSCleanSheetUpdateOne) SetTotal(i int) *TSCleanSheetUpdateOne {
	tcsuo.mutation.ResetTotal()
	tcsuo.mutation.SetTotal(i)
	return tcsuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tcsuo *TSCleanSheetUpdateOne) SetNillableTotal(i *int) *TSCleanSheetUpdateOne {
	if i != nil {
		tcsuo.SetTotal(*i)
	}
	return tcsuo
}

// AddTotal adds i to the "total" field.
func (tcsuo *TSCleanSheetUpdateOne) AddTotal(i int) *TSCleanSheetUpdateOne {
	tcsuo.mutation.AddTotal(i)
	return tcsuo
}

// ClearTotal clears the value of the "total" field.
func (tcsuo *TSCleanSheetUpdateOne) ClearTotal() *TSCleanSheetUpdateOne {
	tcsuo.mutation.ClearTotal()
	return tcsuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tcsuo *TSCleanSheetUpdateOne) SetLastUpdated(t time.Time) *TSCleanSheetUpdateOne {
	tcsuo.mutation.SetLastUpdated(t)
	return tcsuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tcsuo *TSCleanSheetUpdateOne) ClearLastUpdated() *TSCleanSheetUpdateOne {
	tcsuo.mutation.ClearLastUpdated()
	return tcsuo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tcsuo *TSCleanSheetUpdateOne) SetTeamID(id int) *TSCleanSheetUpdateOne {
	tcsuo.mutation.SetTeamID(id)
	return tcsuo
}

// SetTeam sets the "team" edge to the Team entity.
func (tcsuo *TSCleanSheetUpdateOne) SetTeam(t *Team) *TSCleanSheetUpdateOne {
	return tcsuo.SetTeamID(t.ID)
}

// Mutation returns the TSCleanSheetMutation object of the builder.
func (tcsuo *TSCleanSheetUpdateOne) Mutation() *TSCleanSheetMutation {
	return tcsuo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tcsuo *TSCleanSheetUpdateOne) ClearTeam() *TSCleanSheetUpdateOne {
	tcsuo.mutation.ClearTeam()
	return tcsuo
}

// Where appends a list predicates to the TSCleanSheetUpdate builder.
func (tcsuo *TSCleanSheetUpdateOne) Where(ps ...predicate.TSCleanSheet) *TSCleanSheetUpdateOne {
	tcsuo.mutation.Where(ps...)
	return tcsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcsuo *TSCleanSheetUpdateOne) Select(field string, fields ...string) *TSCleanSheetUpdateOne {
	tcsuo.fields = append([]string{field}, fields...)
	return tcsuo
}

// Save executes the query and returns the updated TSCleanSheet entity.
func (tcsuo *TSCleanSheetUpdateOne) Save(ctx context.Context) (*TSCleanSheet, error) {
	tcsuo.defaults()
	return withHooks(ctx, tcsuo.sqlSave, tcsuo.mutation, tcsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcsuo *TSCleanSheetUpdateOne) SaveX(ctx context.Context) *TSCleanSheet {
	node, err := tcsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcsuo *TSCleanSheetUpdateOne) Exec(ctx context.Context) error {
	_, err := tcsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcsuo *TSCleanSheetUpdateOne) ExecX(ctx context.Context) {
	if err := tcsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcsuo *TSCleanSheetUpdateOne) defaults() {
	if _, ok := tcsuo.mutation.LastUpdated(); !ok && !tcsuo.mutation.LastUpdatedCleared() {
		v := tscleansheet.UpdateDefaultLastUpdated()
		tcsuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcsuo *TSCleanSheetUpdateOne) check() error {
	if _, ok := tcsuo.mutation.TeamID(); tcsuo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSCleanSheet.team"`)
	}
	return nil
}

func (tcsuo *TSCleanSheetUpdateOne) sqlSave(ctx context.Context) (_node *TSCleanSheet, err error) {
	if err := tcsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tscleansheet.Table, tscleansheet.Columns, sqlgraph.NewFieldSpec(tscleansheet.FieldID, field.TypeInt))
	id, ok := tcsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSCleanSheet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tscleansheet.FieldID)
		for _, f := range fields {
			if !tscleansheet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tscleansheet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcsuo.mutation.Home(); ok {
		_spec.SetField(tscleansheet.FieldHome, field.TypeInt, value)
	}
	if value, ok := tcsuo.mutation.AddedHome(); ok {
		_spec.AddField(tscleansheet.FieldHome, field.TypeInt, value)
	}
	if tcsuo.mutation.HomeCleared() {
		_spec.ClearField(tscleansheet.FieldHome, field.TypeInt)
	}
	if value, ok := tcsuo.mutation.Away(); ok {
		_spec.SetField(tscleansheet.FieldAway, field.TypeInt, value)
	}
	if value, ok := tcsuo.mutation.AddedAway(); ok {
		_spec.AddField(tscleansheet.FieldAway, field.TypeInt, value)
	}
	if tcsuo.mutation.AwayCleared() {
		_spec.ClearField(tscleansheet.FieldAway, field.TypeInt)
	}
	if value, ok := tcsuo.mutation.Total(); ok {
		_spec.SetField(tscleansheet.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tcsuo.mutation.AddedTotal(); ok {
		_spec.AddField(tscleansheet.FieldTotal, field.TypeInt, value)
	}
	if tcsuo.mutation.TotalCleared() {
		_spec.ClearField(tscleansheet.FieldTotal, field.TypeInt)
	}
	if value, ok := tcsuo.mutation.LastUpdated(); ok {
		_spec.SetField(tscleansheet.FieldLastUpdated, field.TypeTime, value)
	}
	if tcsuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(tscleansheet.FieldLastUpdated, field.TypeTime)
	}
	if tcsuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tscleansheet.TeamTable,
			Columns: []string{tscleansheet.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tscleansheet.TeamTable,
			Columns: []string{tscleansheet.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TSCleanSheet{config: tcsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tscleansheet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcsuo.mutation.done = true
	return _node, nil
}
