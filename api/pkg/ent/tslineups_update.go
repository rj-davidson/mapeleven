// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tslineups"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSLineupsUpdate is the builder for updating TSLineups entities.
type TSLineupsUpdate struct {
	config
	hooks    []Hook
	mutation *TSLineupsMutation
}

// Where appends a list predicates to the TSLineupsUpdate builder.
func (tlu *TSLineupsUpdate) Where(ps ...predicate.TSLineups) *TSLineupsUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetPlayed sets the "played" field.
func (tlu *TSLineupsUpdate) SetPlayed(i int) *TSLineupsUpdate {
	tlu.mutation.ResetPlayed()
	tlu.mutation.SetPlayed(i)
	return tlu
}

// AddPlayed adds i to the "played" field.
func (tlu *TSLineupsUpdate) AddPlayed(i int) *TSLineupsUpdate {
	tlu.mutation.AddPlayed(i)
	return tlu
}

// SetTeamID sets the "team_id" field.
func (tlu *TSLineupsUpdate) SetTeamID(i int) *TSLineupsUpdate {
	tlu.mutation.SetTeamID(i)
	return tlu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tlu *TSLineupsUpdate) SetLastUpdated(t time.Time) *TSLineupsUpdate {
	tlu.mutation.SetLastUpdated(t)
	return tlu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tlu *TSLineupsUpdate) ClearLastUpdated() *TSLineupsUpdate {
	tlu.mutation.ClearLastUpdated()
	return tlu
}

// SetTeam sets the "team" edge to the Team entity.
func (tlu *TSLineupsUpdate) SetTeam(t *Team) *TSLineupsUpdate {
	return tlu.SetTeamID(t.ID)
}

// Mutation returns the TSLineupsMutation object of the builder.
func (tlu *TSLineupsUpdate) Mutation() *TSLineupsMutation {
	return tlu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tlu *TSLineupsUpdate) ClearTeam() *TSLineupsUpdate {
	tlu.mutation.ClearTeam()
	return tlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TSLineupsUpdate) Save(ctx context.Context) (int, error) {
	tlu.defaults()
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TSLineupsUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TSLineupsUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TSLineupsUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlu *TSLineupsUpdate) defaults() {
	if _, ok := tlu.mutation.LastUpdated(); !ok && !tlu.mutation.LastUpdatedCleared() {
		v := tslineups.UpdateDefaultLastUpdated()
		tlu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TSLineupsUpdate) check() error {
	if _, ok := tlu.mutation.TeamID(); tlu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSLineups.team"`)
	}
	return nil
}

func (tlu *TSLineupsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tslineups.Table, tslineups.Columns, sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.Played(); ok {
		_spec.SetField(tslineups.FieldPlayed, field.TypeInt, value)
	}
	if value, ok := tlu.mutation.AddedPlayed(); ok {
		_spec.AddField(tslineups.FieldPlayed, field.TypeInt, value)
	}
	if value, ok := tlu.mutation.LastUpdated(); ok {
		_spec.SetField(tslineups.FieldLastUpdated, field.TypeTime, value)
	}
	if tlu.mutation.LastUpdatedCleared() {
		_spec.ClearField(tslineups.FieldLastUpdated, field.TypeTime)
	}
	if tlu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tslineups.TeamTable,
			Columns: []string{tslineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tslineups.TeamTable,
			Columns: []string{tslineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tslineups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TSLineupsUpdateOne is the builder for updating a single TSLineups entity.
type TSLineupsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSLineupsMutation
}

// SetPlayed sets the "played" field.
func (tluo *TSLineupsUpdateOne) SetPlayed(i int) *TSLineupsUpdateOne {
	tluo.mutation.ResetPlayed()
	tluo.mutation.SetPlayed(i)
	return tluo
}

// AddPlayed adds i to the "played" field.
func (tluo *TSLineupsUpdateOne) AddPlayed(i int) *TSLineupsUpdateOne {
	tluo.mutation.AddPlayed(i)
	return tluo
}

// SetTeamID sets the "team_id" field.
func (tluo *TSLineupsUpdateOne) SetTeamID(i int) *TSLineupsUpdateOne {
	tluo.mutation.SetTeamID(i)
	return tluo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tluo *TSLineupsUpdateOne) SetLastUpdated(t time.Time) *TSLineupsUpdateOne {
	tluo.mutation.SetLastUpdated(t)
	return tluo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tluo *TSLineupsUpdateOne) ClearLastUpdated() *TSLineupsUpdateOne {
	tluo.mutation.ClearLastUpdated()
	return tluo
}

// SetTeam sets the "team" edge to the Team entity.
func (tluo *TSLineupsUpdateOne) SetTeam(t *Team) *TSLineupsUpdateOne {
	return tluo.SetTeamID(t.ID)
}

// Mutation returns the TSLineupsMutation object of the builder.
func (tluo *TSLineupsUpdateOne) Mutation() *TSLineupsMutation {
	return tluo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tluo *TSLineupsUpdateOne) ClearTeam() *TSLineupsUpdateOne {
	tluo.mutation.ClearTeam()
	return tluo
}

// Where appends a list predicates to the TSLineupsUpdate builder.
func (tluo *TSLineupsUpdateOne) Where(ps ...predicate.TSLineups) *TSLineupsUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TSLineupsUpdateOne) Select(field string, fields ...string) *TSLineupsUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TSLineups entity.
func (tluo *TSLineupsUpdateOne) Save(ctx context.Context) (*TSLineups, error) {
	tluo.defaults()
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TSLineupsUpdateOne) SaveX(ctx context.Context) *TSLineups {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TSLineupsUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TSLineupsUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tluo *TSLineupsUpdateOne) defaults() {
	if _, ok := tluo.mutation.LastUpdated(); !ok && !tluo.mutation.LastUpdatedCleared() {
		v := tslineups.UpdateDefaultLastUpdated()
		tluo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TSLineupsUpdateOne) check() error {
	if _, ok := tluo.mutation.TeamID(); tluo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSLineups.team"`)
	}
	return nil
}

func (tluo *TSLineupsUpdateOne) sqlSave(ctx context.Context) (_node *TSLineups, err error) {
	if err := tluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tslineups.Table, tslineups.Columns, sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSLineups.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tslineups.FieldID)
		for _, f := range fields {
			if !tslineups.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tslineups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.Played(); ok {
		_spec.SetField(tslineups.FieldPlayed, field.TypeInt, value)
	}
	if value, ok := tluo.mutation.AddedPlayed(); ok {
		_spec.AddField(tslineups.FieldPlayed, field.TypeInt, value)
	}
	if value, ok := tluo.mutation.LastUpdated(); ok {
		_spec.SetField(tslineups.FieldLastUpdated, field.TypeTime, value)
	}
	if tluo.mutation.LastUpdatedCleared() {
		_spec.ClearField(tslineups.FieldLastUpdated, field.TypeTime)
	}
	if tluo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tslineups.TeamTable,
			Columns: []string{tslineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tslineups.TeamTable,
			Columns: []string{tslineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TSLineups{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tslineups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
