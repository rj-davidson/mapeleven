// Code generated by ent, DO NOT EDIT.

package playerstats

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the playerstats type in the database.
	Label = "player_stats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgePlayerEvents holds the string denoting the playerevents edge name in mutations.
	EdgePlayerEvents = "playerEvents"
	// EdgeMatchPlayer holds the string denoting the matchplayer edge name in mutations.
	EdgeMatchPlayer = "matchPlayer"
	// EdgeAssistEvents holds the string denoting the assistevents edge name in mutations.
	EdgeAssistEvents = "assistEvents"
	// EdgePsGames holds the string denoting the psgames edge name in mutations.
	EdgePsGames = "psGames"
	// EdgePsShooting holds the string denoting the psshooting edge name in mutations.
	EdgePsShooting = "psShooting"
	// EdgePsDefense holds the string denoting the psdefense edge name in mutations.
	EdgePsDefense = "psDefense"
	// EdgePsTechnical holds the string denoting the pstechnical edge name in mutations.
	EdgePsTechnical = "psTechnical"
	// EdgePsPenalty holds the string denoting the pspenalty edge name in mutations.
	EdgePsPenalty = "psPenalty"
	// EdgePsSubstitutes holds the string denoting the pssubstitutes edge name in mutations.
	EdgePsSubstitutes = "psSubstitutes"
	// EdgeSeason holds the string denoting the season edge name in mutations.
	EdgeSeason = "season"
	// EdgePsFairplay holds the string denoting the psfairplay edge name in mutations.
	EdgePsFairplay = "psFairplay"
	// Table holds the table name of the playerstats in the database.
	Table = "player_stats"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "player_stats"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_player_stats"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "player_stats"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_player_stats"
	// PlayerEventsTable is the table that holds the playerEvents relation/edge.
	PlayerEventsTable = "fixture_events"
	// PlayerEventsInverseTable is the table name for the FixtureEvents entity.
	// It exists in this package in order to avoid circular dependency with the "fixtureevents" package.
	PlayerEventsInverseTable = "fixture_events"
	// PlayerEventsColumn is the table column denoting the playerEvents relation/edge.
	PlayerEventsColumn = "player_stats_player_events"
	// MatchPlayerTable is the table that holds the matchPlayer relation/edge.
	MatchPlayerTable = "match_players"
	// MatchPlayerInverseTable is the table name for the MatchPlayer entity.
	// It exists in this package in order to avoid circular dependency with the "matchplayer" package.
	MatchPlayerInverseTable = "match_players"
	// MatchPlayerColumn is the table column denoting the matchPlayer relation/edge.
	MatchPlayerColumn = "player_stats_match_player"
	// AssistEventsTable is the table that holds the assistEvents relation/edge.
	AssistEventsTable = "fixture_events"
	// AssistEventsInverseTable is the table name for the FixtureEvents entity.
	// It exists in this package in order to avoid circular dependency with the "fixtureevents" package.
	AssistEventsInverseTable = "fixture_events"
	// AssistEventsColumn is the table column denoting the assistEvents relation/edge.
	AssistEventsColumn = "player_stats_assist_events"
	// PsGamesTable is the table that holds the psGames relation/edge.
	PsGamesTable = "ps_games"
	// PsGamesInverseTable is the table name for the PSGames entity.
	// It exists in this package in order to avoid circular dependency with the "psgames" package.
	PsGamesInverseTable = "ps_games"
	// PsGamesColumn is the table column denoting the psGames relation/edge.
	PsGamesColumn = "player_stats_ps_games"
	// PsShootingTable is the table that holds the psShooting relation/edge.
	PsShootingTable = "ps_shootings"
	// PsShootingInverseTable is the table name for the PSShooting entity.
	// It exists in this package in order to avoid circular dependency with the "psshooting" package.
	PsShootingInverseTable = "ps_shootings"
	// PsShootingColumn is the table column denoting the psShooting relation/edge.
	PsShootingColumn = "player_stats_ps_shooting"
	// PsDefenseTable is the table that holds the psDefense relation/edge.
	PsDefenseTable = "ps_defenses"
	// PsDefenseInverseTable is the table name for the PSDefense entity.
	// It exists in this package in order to avoid circular dependency with the "psdefense" package.
	PsDefenseInverseTable = "ps_defenses"
	// PsDefenseColumn is the table column denoting the psDefense relation/edge.
	PsDefenseColumn = "player_stats_ps_defense"
	// PsTechnicalTable is the table that holds the psTechnical relation/edge.
	PsTechnicalTable = "ps_technicals"
	// PsTechnicalInverseTable is the table name for the PSTechnical entity.
	// It exists in this package in order to avoid circular dependency with the "pstechnical" package.
	PsTechnicalInverseTable = "ps_technicals"
	// PsTechnicalColumn is the table column denoting the psTechnical relation/edge.
	PsTechnicalColumn = "player_stats_ps_technical"
	// PsPenaltyTable is the table that holds the psPenalty relation/edge.
	PsPenaltyTable = "ps_penalties"
	// PsPenaltyInverseTable is the table name for the PSPenalty entity.
	// It exists in this package in order to avoid circular dependency with the "pspenalty" package.
	PsPenaltyInverseTable = "ps_penalties"
	// PsPenaltyColumn is the table column denoting the psPenalty relation/edge.
	PsPenaltyColumn = "player_stats_ps_penalty"
	// PsSubstitutesTable is the table that holds the psSubstitutes relation/edge.
	PsSubstitutesTable = "ps_substitutes"
	// PsSubstitutesInverseTable is the table name for the PSSubstitutes entity.
	// It exists in this package in order to avoid circular dependency with the "pssubstitutes" package.
	PsSubstitutesInverseTable = "ps_substitutes"
	// PsSubstitutesColumn is the table column denoting the psSubstitutes relation/edge.
	PsSubstitutesColumn = "player_stats_ps_substitutes"
	// SeasonTable is the table that holds the season relation/edge. The primary key declared below.
	SeasonTable = "player_stats_season"
	// SeasonInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonInverseTable = "seasons"
	// PsFairplayTable is the table that holds the psFairplay relation/edge.
	PsFairplayTable = "ps_fairplays"
	// PsFairplayInverseTable is the table name for the PSFairplay entity.
	// It exists in this package in order to avoid circular dependency with the "psfairplay" package.
	PsFairplayInverseTable = "ps_fairplays"
	// PsFairplayColumn is the table column denoting the psFairplay relation/edge.
	PsFairplayColumn = "player_stats_ps_fairplay"
)

// Columns holds all SQL columns for playerstats fields.
var Columns = []string{
	FieldID,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "player_stats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_player_stats",
	"team_player_stats",
}

var (
	// SeasonPrimaryKey and SeasonColumn2 are the table columns denoting the
	// primary key for the season relation (M2M).
	SeasonPrimaryKey = []string{"player_stats_id", "season_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the PlayerStats queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayerEventsCount orders the results by playerEvents count.
func ByPlayerEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerEventsStep(), opts...)
	}
}

// ByPlayerEvents orders the results by playerEvents terms.
func ByPlayerEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMatchPlayerCount orders the results by matchPlayer count.
func ByMatchPlayerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchPlayerStep(), opts...)
	}
}

// ByMatchPlayer orders the results by matchPlayer terms.
func ByMatchPlayer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchPlayerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssistEventsCount orders the results by assistEvents count.
func ByAssistEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssistEventsStep(), opts...)
	}
}

// ByAssistEvents orders the results by assistEvents terms.
func ByAssistEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssistEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsGamesCount orders the results by psGames count.
func ByPsGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsGamesStep(), opts...)
	}
}

// ByPsGames orders the results by psGames terms.
func ByPsGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsShootingCount orders the results by psShooting count.
func ByPsShootingCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsShootingStep(), opts...)
	}
}

// ByPsShooting orders the results by psShooting terms.
func ByPsShooting(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsShootingStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsDefenseCount orders the results by psDefense count.
func ByPsDefenseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsDefenseStep(), opts...)
	}
}

// ByPsDefense orders the results by psDefense terms.
func ByPsDefense(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsDefenseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsTechnicalCount orders the results by psTechnical count.
func ByPsTechnicalCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsTechnicalStep(), opts...)
	}
}

// ByPsTechnical orders the results by psTechnical terms.
func ByPsTechnical(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsTechnicalStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsPenaltyCount orders the results by psPenalty count.
func ByPsPenaltyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsPenaltyStep(), opts...)
	}
}

// ByPsPenalty orders the results by psPenalty terms.
func ByPsPenalty(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsPenaltyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsSubstitutesCount orders the results by psSubstitutes count.
func ByPsSubstitutesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsSubstitutesStep(), opts...)
	}
}

// ByPsSubstitutes orders the results by psSubstitutes terms.
func ByPsSubstitutes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsSubstitutesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySeasonCount orders the results by season count.
func BySeasonCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeasonStep(), opts...)
	}
}

// BySeason orders the results by season terms.
func BySeason(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsFairplayCount orders the results by psFairplay count.
func ByPsFairplayCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsFairplayStep(), opts...)
	}
}

// ByPsFairplay orders the results by psFairplay terms.
func ByPsFairplay(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsFairplayStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newPlayerEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlayerEventsTable, PlayerEventsColumn),
	)
}
func newMatchPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchPlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayerTable, MatchPlayerColumn),
	)
}
func newAssistEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssistEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssistEventsTable, AssistEventsColumn),
	)
}
func newPsGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsGamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsGamesTable, PsGamesColumn),
	)
}
func newPsShootingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsShootingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsShootingTable, PsShootingColumn),
	)
}
func newPsDefenseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsDefenseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsDefenseTable, PsDefenseColumn),
	)
}
func newPsTechnicalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsTechnicalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsTechnicalTable, PsTechnicalColumn),
	)
}
func newPsPenaltyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsPenaltyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsPenaltyTable, PsPenaltyColumn),
	)
}
func newPsSubstitutesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsSubstitutesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsSubstitutesTable, PsSubstitutesColumn),
	)
}
func newSeasonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SeasonTable, SeasonPrimaryKey...),
	)
}
func newPsFairplayStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsFairplayInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsFairplayTable, PsFairplayColumn),
	)
}
