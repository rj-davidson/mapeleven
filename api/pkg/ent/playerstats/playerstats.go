// Code generated by ent, DO NOT EDIT.

package playerstats

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the playerstats type in the database.
	Label = "player_stats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgePlayerEvents holds the string denoting the playerevents edge name in mutations.
	EdgePlayerEvents = "playerEvents"
	// EdgeMatchPlayer holds the string denoting the matchplayer edge name in mutations.
	EdgeMatchPlayer = "matchPlayer"
	// EdgeAssistEvents holds the string denoting the assistevents edge name in mutations.
	EdgeAssistEvents = "assistEvents"
	// EdgePsgames holds the string denoting the psgames edge name in mutations.
	EdgePsgames = "psgames"
	// EdgePsgoals holds the string denoting the psgoals edge name in mutations.
	EdgePsgoals = "psgoals"
	// EdgePsdefense holds the string denoting the psdefense edge name in mutations.
	EdgePsdefense = "psdefense"
	// EdgePsoffense holds the string denoting the psoffense edge name in mutations.
	EdgePsoffense = "psoffense"
	// EdgePspenalty holds the string denoting the pspenalty edge name in mutations.
	EdgePspenalty = "pspenalty"
	// EdgeSeason holds the string denoting the season edge name in mutations.
	EdgeSeason = "season"
	// Table holds the table name of the playerstats in the database.
	Table = "player_stats"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "player_stats"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_player_stats"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "player_stats"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_player_stats"
	// PlayerEventsTable is the table that holds the playerEvents relation/edge.
	PlayerEventsTable = "fixture_events"
	// PlayerEventsInverseTable is the table name for the FixtureEvents entity.
	// It exists in this package in order to avoid circular dependency with the "fixtureevents" package.
	PlayerEventsInverseTable = "fixture_events"
	// PlayerEventsColumn is the table column denoting the playerEvents relation/edge.
	PlayerEventsColumn = "player_stats_player_events"
	// MatchPlayerTable is the table that holds the matchPlayer relation/edge.
	MatchPlayerTable = "match_players"
	// MatchPlayerInverseTable is the table name for the MatchPlayer entity.
	// It exists in this package in order to avoid circular dependency with the "matchplayer" package.
	MatchPlayerInverseTable = "match_players"
	// MatchPlayerColumn is the table column denoting the matchPlayer relation/edge.
	MatchPlayerColumn = "player_stats_match_player"
	// AssistEventsTable is the table that holds the assistEvents relation/edge.
	AssistEventsTable = "fixture_events"
	// AssistEventsInverseTable is the table name for the FixtureEvents entity.
	// It exists in this package in order to avoid circular dependency with the "fixtureevents" package.
	AssistEventsInverseTable = "fixture_events"
	// AssistEventsColumn is the table column denoting the assistEvents relation/edge.
	AssistEventsColumn = "player_stats_assist_events"
	// PsgamesTable is the table that holds the psgames relation/edge.
	PsgamesTable = "ps_games"
	// PsgamesInverseTable is the table name for the PSGames entity.
	// It exists in this package in order to avoid circular dependency with the "psgames" package.
	PsgamesInverseTable = "ps_games"
	// PsgamesColumn is the table column denoting the psgames relation/edge.
	PsgamesColumn = "player_stats_psgames"
	// PsgoalsTable is the table that holds the psgoals relation/edge.
	PsgoalsTable = "ps_goals"
	// PsgoalsInverseTable is the table name for the PSGoals entity.
	// It exists in this package in order to avoid circular dependency with the "psgoals" package.
	PsgoalsInverseTable = "ps_goals"
	// PsgoalsColumn is the table column denoting the psgoals relation/edge.
	PsgoalsColumn = "player_stats_psgoals"
	// PsdefenseTable is the table that holds the psdefense relation/edge.
	PsdefenseTable = "ps_defenses"
	// PsdefenseInverseTable is the table name for the PSDefense entity.
	// It exists in this package in order to avoid circular dependency with the "psdefense" package.
	PsdefenseInverseTable = "ps_defenses"
	// PsdefenseColumn is the table column denoting the psdefense relation/edge.
	PsdefenseColumn = "player_stats_psdefense"
	// PsoffenseTable is the table that holds the psoffense relation/edge.
	PsoffenseTable = "ps_offenses"
	// PsoffenseInverseTable is the table name for the PSOffense entity.
	// It exists in this package in order to avoid circular dependency with the "psoffense" package.
	PsoffenseInverseTable = "ps_offenses"
	// PsoffenseColumn is the table column denoting the psoffense relation/edge.
	PsoffenseColumn = "player_stats_psoffense"
	// PspenaltyTable is the table that holds the pspenalty relation/edge.
	PspenaltyTable = "ps_penalties"
	// PspenaltyInverseTable is the table name for the PSPenalty entity.
	// It exists in this package in order to avoid circular dependency with the "pspenalty" package.
	PspenaltyInverseTable = "ps_penalties"
	// PspenaltyColumn is the table column denoting the pspenalty relation/edge.
	PspenaltyColumn = "player_stats_pspenalty"
	// SeasonTable is the table that holds the season relation/edge. The primary key declared below.
	SeasonTable = "player_stats_season"
	// SeasonInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonInverseTable = "seasons"
)

// Columns holds all SQL columns for playerstats fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "player_stats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_player_stats",
	"team_player_stats",
}

var (
	// SeasonPrimaryKey and SeasonColumn2 are the table columns denoting the
	// primary key for the season relation (M2M).
	SeasonPrimaryKey = []string{"player_stats_id", "season_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the PlayerStats queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayerEventsCount orders the results by playerEvents count.
func ByPlayerEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerEventsStep(), opts...)
	}
}

// ByPlayerEvents orders the results by playerEvents terms.
func ByPlayerEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMatchPlayerCount orders the results by matchPlayer count.
func ByMatchPlayerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchPlayerStep(), opts...)
	}
}

// ByMatchPlayer orders the results by matchPlayer terms.
func ByMatchPlayer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchPlayerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssistEventsCount orders the results by assistEvents count.
func ByAssistEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssistEventsStep(), opts...)
	}
}

// ByAssistEvents orders the results by assistEvents terms.
func ByAssistEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssistEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsgamesCount orders the results by psgames count.
func ByPsgamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsgamesStep(), opts...)
	}
}

// ByPsgames orders the results by psgames terms.
func ByPsgames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsgamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsgoalsCount orders the results by psgoals count.
func ByPsgoalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsgoalsStep(), opts...)
	}
}

// ByPsgoals orders the results by psgoals terms.
func ByPsgoals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsgoalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsdefenseCount orders the results by psdefense count.
func ByPsdefenseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsdefenseStep(), opts...)
	}
}

// ByPsdefense orders the results by psdefense terms.
func ByPsdefense(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsdefenseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPsoffenseCount orders the results by psoffense count.
func ByPsoffenseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPsoffenseStep(), opts...)
	}
}

// ByPsoffense orders the results by psoffense terms.
func ByPsoffense(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPsoffenseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPspenaltyCount orders the results by pspenalty count.
func ByPspenaltyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPspenaltyStep(), opts...)
	}
}

// ByPspenalty orders the results by pspenalty terms.
func ByPspenalty(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPspenaltyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySeasonCount orders the results by season count.
func BySeasonCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeasonStep(), opts...)
	}
}

// BySeason orders the results by season terms.
func BySeason(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newPlayerEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlayerEventsTable, PlayerEventsColumn),
	)
}
func newMatchPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchPlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayerTable, MatchPlayerColumn),
	)
}
func newAssistEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssistEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssistEventsTable, AssistEventsColumn),
	)
}
func newPsgamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsgamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsgamesTable, PsgamesColumn),
	)
}
func newPsgoalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsgoalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsgoalsTable, PsgoalsColumn),
	)
}
func newPsdefenseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsdefenseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsdefenseTable, PsdefenseColumn),
	)
}
func newPsoffenseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PsoffenseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PsoffenseTable, PsoffenseColumn),
	)
}
func newPspenaltyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PspenaltyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PspenaltyTable, PspenaltyColumn),
	)
}
func newSeasonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SeasonTable, SeasonPrimaryKey...),
	)
}
