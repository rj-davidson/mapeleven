// Code generated by ent, DO NOT EDIT.

package playerstats

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldEQ(FieldSlug, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldEQ(FieldLastUpdated, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldContainsFold(FieldSlug, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.PlayerStats {
	return predicate.PlayerStats(sql.FieldNotNull(FieldLastUpdated))
}

// HasPlayer applies the HasEdge predicate on the "player" edge.
func HasPlayer() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerWith applies the HasEdge predicate on the "player" edge with a given conditions (other predicates).
func HasPlayerWith(preds ...predicate.Player) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerEvents applies the HasEdge predicate on the "playerEvents" edge.
func HasPlayerEvents() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayerEventsTable, PlayerEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerEventsWith applies the HasEdge predicate on the "playerEvents" edge with a given conditions (other predicates).
func HasPlayerEventsWith(preds ...predicate.FixtureEvents) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newPlayerEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMatchPlayer applies the HasEdge predicate on the "matchPlayer" edge.
func HasMatchPlayer() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayerTable, MatchPlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchPlayerWith applies the HasEdge predicate on the "matchPlayer" edge with a given conditions (other predicates).
func HasMatchPlayerWith(preds ...predicate.MatchPlayer) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newMatchPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssistEvents applies the HasEdge predicate on the "assistEvents" edge.
func HasAssistEvents() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssistEventsTable, AssistEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssistEventsWith applies the HasEdge predicate on the "assistEvents" edge with a given conditions (other predicates).
func HasAssistEventsWith(preds ...predicate.FixtureEvents) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newAssistEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPsgames applies the HasEdge predicate on the "psgames" edge.
func HasPsgames() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PsgamesTable, PsgamesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPsgamesWith applies the HasEdge predicate on the "psgames" edge with a given conditions (other predicates).
func HasPsgamesWith(preds ...predicate.PSGames) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newPsgamesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPsgoals applies the HasEdge predicate on the "psgoals" edge.
func HasPsgoals() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PsgoalsTable, PsgoalsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPsgoalsWith applies the HasEdge predicate on the "psgoals" edge with a given conditions (other predicates).
func HasPsgoalsWith(preds ...predicate.PSGoals) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newPsgoalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPsdefense applies the HasEdge predicate on the "psdefense" edge.
func HasPsdefense() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PsdefenseTable, PsdefensePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPsdefenseWith applies the HasEdge predicate on the "psdefense" edge with a given conditions (other predicates).
func HasPsdefenseWith(preds ...predicate.PSDefense) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newPsdefenseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPsoffense applies the HasEdge predicate on the "psoffense" edge.
func HasPsoffense() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PsoffenseTable, PsoffensePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPsoffenseWith applies the HasEdge predicate on the "psoffense" edge with a given conditions (other predicates).
func HasPsoffenseWith(preds ...predicate.PSOffense) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newPsoffenseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPspenalty applies the HasEdge predicate on the "pspenalty" edge.
func HasPspenalty() predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PspenaltyTable, PspenaltyPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPspenaltyWith applies the HasEdge predicate on the "pspenalty" edge with a given conditions (other predicates).
func HasPspenaltyWith(preds ...predicate.PSPenalty) predicate.PlayerStats {
	return predicate.PlayerStats(func(s *sql.Selector) {
		step := newPspenaltyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlayerStats) predicate.PlayerStats {
	return predicate.PlayerStats(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlayerStats) predicate.PlayerStats {
	return predicate.PlayerStats(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlayerStats) predicate.PlayerStats {
	return predicate.PlayerStats(sql.NotPredicates(p))
}
