// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/matchplayer"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psdefense"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psfairplay"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgames"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psshooting"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pssubstitutes"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pstechnical"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/season"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerStatsUpdate is the builder for updating PlayerStats entities.
type PlayerStatsUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerStatsMutation
}

// Where appends a list predicates to the PlayerStatsUpdate builder.
func (psu *PlayerStatsUpdate) Where(ps ...predicate.PlayerStats) *PlayerStatsUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetLastUpdated sets the "lastUpdated" field.
func (psu *PlayerStatsUpdate) SetLastUpdated(t time.Time) *PlayerStatsUpdate {
	psu.mutation.SetLastUpdated(t)
	return psu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psu *PlayerStatsUpdate) ClearLastUpdated() *PlayerStatsUpdate {
	psu.mutation.ClearLastUpdated()
	return psu
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (psu *PlayerStatsUpdate) SetPlayerID(id int) *PlayerStatsUpdate {
	psu.mutation.SetPlayerID(id)
	return psu
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (psu *PlayerStatsUpdate) SetNillablePlayerID(id *int) *PlayerStatsUpdate {
	if id != nil {
		psu = psu.SetPlayerID(*id)
	}
	return psu
}

// SetPlayer sets the "player" edge to the Player entity.
func (psu *PlayerStatsUpdate) SetPlayer(p *Player) *PlayerStatsUpdate {
	return psu.SetPlayerID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (psu *PlayerStatsUpdate) SetTeamID(id int) *PlayerStatsUpdate {
	psu.mutation.SetTeamID(id)
	return psu
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (psu *PlayerStatsUpdate) SetNillableTeamID(id *int) *PlayerStatsUpdate {
	if id != nil {
		psu = psu.SetTeamID(*id)
	}
	return psu
}

// SetTeam sets the "team" edge to the Team entity.
func (psu *PlayerStatsUpdate) SetTeam(t *Team) *PlayerStatsUpdate {
	return psu.SetTeamID(t.ID)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (psu *PlayerStatsUpdate) AddPlayerEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPlayerEventIDs(ids...)
	return psu
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) AddPlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (psu *PlayerStatsUpdate) AddMatchPlayerIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddMatchPlayerIDs(ids...)
	return psu
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (psu *PlayerStatsUpdate) AddMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psu.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (psu *PlayerStatsUpdate) AddAssistEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddAssistEventIDs(ids...)
	return psu
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) AddAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.AddAssistEventIDs(ids...)
}

// AddPsGameIDs adds the "psGames" edge to the PSGames entity by IDs.
func (psu *PlayerStatsUpdate) AddPsGameIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsGameIDs(ids...)
	return psu
}

// AddPsGames adds the "psGames" edges to the PSGames entity.
func (psu *PlayerStatsUpdate) AddPsGames(p ...*PSGames) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsGameIDs(ids...)
}

// AddPsShootingIDs adds the "psShooting" edge to the PSShooting entity by IDs.
func (psu *PlayerStatsUpdate) AddPsShootingIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsShootingIDs(ids...)
	return psu
}

// AddPsShooting adds the "psShooting" edges to the PSShooting entity.
func (psu *PlayerStatsUpdate) AddPsShooting(p ...*PSShooting) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsShootingIDs(ids...)
}

// AddPsDefenseIDs adds the "psDefense" edge to the PSDefense entity by IDs.
func (psu *PlayerStatsUpdate) AddPsDefenseIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsDefenseIDs(ids...)
	return psu
}

// AddPsDefense adds the "psDefense" edges to the PSDefense entity.
func (psu *PlayerStatsUpdate) AddPsDefense(p ...*PSDefense) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsDefenseIDs(ids...)
}

// AddPsTechnicalIDs adds the "psTechnical" edge to the PSTechnical entity by IDs.
func (psu *PlayerStatsUpdate) AddPsTechnicalIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsTechnicalIDs(ids...)
	return psu
}

// AddPsTechnical adds the "psTechnical" edges to the PSTechnical entity.
func (psu *PlayerStatsUpdate) AddPsTechnical(p ...*PSTechnical) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsTechnicalIDs(ids...)
}

// AddPsPenaltyIDs adds the "psPenalty" edge to the PSPenalty entity by IDs.
func (psu *PlayerStatsUpdate) AddPsPenaltyIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsPenaltyIDs(ids...)
	return psu
}

// AddPsPenalty adds the "psPenalty" edges to the PSPenalty entity.
func (psu *PlayerStatsUpdate) AddPsPenalty(p ...*PSPenalty) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsPenaltyIDs(ids...)
}

// AddPsSubstituteIDs adds the "psSubstitutes" edge to the PSSubstitutes entity by IDs.
func (psu *PlayerStatsUpdate) AddPsSubstituteIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsSubstituteIDs(ids...)
	return psu
}

// AddPsSubstitutes adds the "psSubstitutes" edges to the PSSubstitutes entity.
func (psu *PlayerStatsUpdate) AddPsSubstitutes(p ...*PSSubstitutes) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsSubstituteIDs(ids...)
}

// AddSeasonIDs adds the "season" edge to the Season entity by IDs.
func (psu *PlayerStatsUpdate) AddSeasonIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddSeasonIDs(ids...)
	return psu
}

// AddSeason adds the "season" edges to the Season entity.
func (psu *PlayerStatsUpdate) AddSeason(s ...*Season) *PlayerStatsUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.AddSeasonIDs(ids...)
}

// AddPsFairplayIDs adds the "psFairplay" edge to the PSFairplay entity by IDs.
func (psu *PlayerStatsUpdate) AddPsFairplayIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsFairplayIDs(ids...)
	return psu
}

// AddPsFairplay adds the "psFairplay" edges to the PSFairplay entity.
func (psu *PlayerStatsUpdate) AddPsFairplay(p ...*PSFairplay) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsFairplayIDs(ids...)
}

// Mutation returns the PlayerStatsMutation object of the builder.
func (psu *PlayerStatsUpdate) Mutation() *PlayerStatsMutation {
	return psu.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (psu *PlayerStatsUpdate) ClearPlayer() *PlayerStatsUpdate {
	psu.mutation.ClearPlayer()
	return psu
}

// ClearTeam clears the "team" edge to the Team entity.
func (psu *PlayerStatsUpdate) ClearTeam() *PlayerStatsUpdate {
	psu.mutation.ClearTeam()
	return psu
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) ClearPlayerEvents() *PlayerStatsUpdate {
	psu.mutation.ClearPlayerEvents()
	return psu
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (psu *PlayerStatsUpdate) RemovePlayerEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePlayerEventIDs(ids...)
	return psu
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (psu *PlayerStatsUpdate) RemovePlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (psu *PlayerStatsUpdate) ClearMatchPlayer() *PlayerStatsUpdate {
	psu.mutation.ClearMatchPlayer()
	return psu
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (psu *PlayerStatsUpdate) RemoveMatchPlayerIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemoveMatchPlayerIDs(ids...)
	return psu
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (psu *PlayerStatsUpdate) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psu.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) ClearAssistEvents() *PlayerStatsUpdate {
	psu.mutation.ClearAssistEvents()
	return psu
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (psu *PlayerStatsUpdate) RemoveAssistEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemoveAssistEventIDs(ids...)
	return psu
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (psu *PlayerStatsUpdate) RemoveAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.RemoveAssistEventIDs(ids...)
}

// ClearPsGames clears all "psGames" edges to the PSGames entity.
func (psu *PlayerStatsUpdate) ClearPsGames() *PlayerStatsUpdate {
	psu.mutation.ClearPsGames()
	return psu
}

// RemovePsGameIDs removes the "psGames" edge to PSGames entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsGameIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsGameIDs(ids...)
	return psu
}

// RemovePsGames removes "psGames" edges to PSGames entities.
func (psu *PlayerStatsUpdate) RemovePsGames(p ...*PSGames) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsGameIDs(ids...)
}

// ClearPsShooting clears all "psShooting" edges to the PSShooting entity.
func (psu *PlayerStatsUpdate) ClearPsShooting() *PlayerStatsUpdate {
	psu.mutation.ClearPsShooting()
	return psu
}

// RemovePsShootingIDs removes the "psShooting" edge to PSShooting entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsShootingIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsShootingIDs(ids...)
	return psu
}

// RemovePsShooting removes "psShooting" edges to PSShooting entities.
func (psu *PlayerStatsUpdate) RemovePsShooting(p ...*PSShooting) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsShootingIDs(ids...)
}

// ClearPsDefense clears all "psDefense" edges to the PSDefense entity.
func (psu *PlayerStatsUpdate) ClearPsDefense() *PlayerStatsUpdate {
	psu.mutation.ClearPsDefense()
	return psu
}

// RemovePsDefenseIDs removes the "psDefense" edge to PSDefense entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsDefenseIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsDefenseIDs(ids...)
	return psu
}

// RemovePsDefense removes "psDefense" edges to PSDefense entities.
func (psu *PlayerStatsUpdate) RemovePsDefense(p ...*PSDefense) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsDefenseIDs(ids...)
}

// ClearPsTechnical clears all "psTechnical" edges to the PSTechnical entity.
func (psu *PlayerStatsUpdate) ClearPsTechnical() *PlayerStatsUpdate {
	psu.mutation.ClearPsTechnical()
	return psu
}

// RemovePsTechnicalIDs removes the "psTechnical" edge to PSTechnical entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsTechnicalIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsTechnicalIDs(ids...)
	return psu
}

// RemovePsTechnical removes "psTechnical" edges to PSTechnical entities.
func (psu *PlayerStatsUpdate) RemovePsTechnical(p ...*PSTechnical) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsTechnicalIDs(ids...)
}

// ClearPsPenalty clears all "psPenalty" edges to the PSPenalty entity.
func (psu *PlayerStatsUpdate) ClearPsPenalty() *PlayerStatsUpdate {
	psu.mutation.ClearPsPenalty()
	return psu
}

// RemovePsPenaltyIDs removes the "psPenalty" edge to PSPenalty entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsPenaltyIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsPenaltyIDs(ids...)
	return psu
}

// RemovePsPenalty removes "psPenalty" edges to PSPenalty entities.
func (psu *PlayerStatsUpdate) RemovePsPenalty(p ...*PSPenalty) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsPenaltyIDs(ids...)
}

// ClearPsSubstitutes clears all "psSubstitutes" edges to the PSSubstitutes entity.
func (psu *PlayerStatsUpdate) ClearPsSubstitutes() *PlayerStatsUpdate {
	psu.mutation.ClearPsSubstitutes()
	return psu
}

// RemovePsSubstituteIDs removes the "psSubstitutes" edge to PSSubstitutes entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsSubstituteIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsSubstituteIDs(ids...)
	return psu
}

// RemovePsSubstitutes removes "psSubstitutes" edges to PSSubstitutes entities.
func (psu *PlayerStatsUpdate) RemovePsSubstitutes(p ...*PSSubstitutes) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsSubstituteIDs(ids...)
}

// ClearSeason clears all "season" edges to the Season entity.
func (psu *PlayerStatsUpdate) ClearSeason() *PlayerStatsUpdate {
	psu.mutation.ClearSeason()
	return psu
}

// RemoveSeasonIDs removes the "season" edge to Season entities by IDs.
func (psu *PlayerStatsUpdate) RemoveSeasonIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemoveSeasonIDs(ids...)
	return psu
}

// RemoveSeason removes "season" edges to Season entities.
func (psu *PlayerStatsUpdate) RemoveSeason(s ...*Season) *PlayerStatsUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.RemoveSeasonIDs(ids...)
}

// ClearPsFairplay clears all "psFairplay" edges to the PSFairplay entity.
func (psu *PlayerStatsUpdate) ClearPsFairplay() *PlayerStatsUpdate {
	psu.mutation.ClearPsFairplay()
	return psu
}

// RemovePsFairplayIDs removes the "psFairplay" edge to PSFairplay entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsFairplayIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsFairplayIDs(ids...)
	return psu
}

// RemovePsFairplay removes "psFairplay" edges to PSFairplay entities.
func (psu *PlayerStatsUpdate) RemovePsFairplay(p ...*PSFairplay) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsFairplayIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PlayerStatsUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PlayerStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PlayerStatsUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PlayerStatsUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PlayerStatsUpdate) defaults() {
	if _, ok := psu.mutation.LastUpdated(); !ok && !psu.mutation.LastUpdatedCleared() {
		v := playerstats.UpdateDefaultLastUpdated()
		psu.mutation.SetLastUpdated(v)
	}
}

func (psu *PlayerStatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerstats.Table, playerstats.Columns, sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.LastUpdated(); ok {
		_spec.SetField(playerstats.FieldLastUpdated, field.TypeTime, value)
	}
	if psu.mutation.LastUpdatedCleared() {
		_spec.ClearField(playerstats.FieldLastUpdated, field.TypeTime)
	}
	if psu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !psu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !psu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !psu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsGamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsGamesTable,
			Columns: []string{playerstats.PsGamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsGamesIDs(); len(nodes) > 0 && !psu.mutation.PsGamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsGamesTable,
			Columns: []string{playerstats.PsGamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsGamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsGamesTable,
			Columns: []string{playerstats.PsGamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsShootingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsShootingTable,
			Columns: []string{playerstats.PsShootingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsShootingIDs(); len(nodes) > 0 && !psu.mutation.PsShootingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsShootingTable,
			Columns: []string{playerstats.PsShootingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsShootingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsShootingTable,
			Columns: []string{playerstats.PsShootingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsDefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsDefenseTable,
			Columns: []string{playerstats.PsDefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsDefenseIDs(); len(nodes) > 0 && !psu.mutation.PsDefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsDefenseTable,
			Columns: []string{playerstats.PsDefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsDefenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsDefenseTable,
			Columns: []string{playerstats.PsDefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsTechnicalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsTechnicalTable,
			Columns: []string{playerstats.PsTechnicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsTechnicalIDs(); len(nodes) > 0 && !psu.mutation.PsTechnicalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsTechnicalTable,
			Columns: []string{playerstats.PsTechnicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsTechnicalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsTechnicalTable,
			Columns: []string{playerstats.PsTechnicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsPenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsPenaltyTable,
			Columns: []string{playerstats.PsPenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsPenaltyIDs(); len(nodes) > 0 && !psu.mutation.PsPenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsPenaltyTable,
			Columns: []string{playerstats.PsPenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsPenaltyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsPenaltyTable,
			Columns: []string{playerstats.PsPenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsSubstitutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsSubstitutesTable,
			Columns: []string{playerstats.PsSubstitutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsSubstitutesIDs(); len(nodes) > 0 && !psu.mutation.PsSubstitutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsSubstitutesTable,
			Columns: []string{playerstats.PsSubstitutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsSubstitutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsSubstitutesTable,
			Columns: []string{playerstats.PsSubstitutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.SeasonTable,
			Columns: playerstats.SeasonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedSeasonIDs(); len(nodes) > 0 && !psu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.SeasonTable,
			Columns: playerstats.SeasonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.SeasonTable,
			Columns: playerstats.SeasonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsFairplayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsFairplayTable,
			Columns: []string{playerstats.PsFairplayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsFairplayIDs(); len(nodes) > 0 && !psu.mutation.PsFairplayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsFairplayTable,
			Columns: []string{playerstats.PsFairplayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsFairplayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsFairplayTable,
			Columns: []string{playerstats.PsFairplayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PlayerStatsUpdateOne is the builder for updating a single PlayerStats entity.
type PlayerStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerStatsMutation
}

// SetLastUpdated sets the "lastUpdated" field.
func (psuo *PlayerStatsUpdateOne) SetLastUpdated(t time.Time) *PlayerStatsUpdateOne {
	psuo.mutation.SetLastUpdated(t)
	return psuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psuo *PlayerStatsUpdateOne) ClearLastUpdated() *PlayerStatsUpdateOne {
	psuo.mutation.ClearLastUpdated()
	return psuo
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (psuo *PlayerStatsUpdateOne) SetPlayerID(id int) *PlayerStatsUpdateOne {
	psuo.mutation.SetPlayerID(id)
	return psuo
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (psuo *PlayerStatsUpdateOne) SetNillablePlayerID(id *int) *PlayerStatsUpdateOne {
	if id != nil {
		psuo = psuo.SetPlayerID(*id)
	}
	return psuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (psuo *PlayerStatsUpdateOne) SetPlayer(p *Player) *PlayerStatsUpdateOne {
	return psuo.SetPlayerID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (psuo *PlayerStatsUpdateOne) SetTeamID(id int) *PlayerStatsUpdateOne {
	psuo.mutation.SetTeamID(id)
	return psuo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (psuo *PlayerStatsUpdateOne) SetNillableTeamID(id *int) *PlayerStatsUpdateOne {
	if id != nil {
		psuo = psuo.SetTeamID(*id)
	}
	return psuo
}

// SetTeam sets the "team" edge to the Team entity.
func (psuo *PlayerStatsUpdateOne) SetTeam(t *Team) *PlayerStatsUpdateOne {
	return psuo.SetTeamID(t.ID)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPlayerEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPlayerEventIDs(ids...)
	return psuo
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) AddPlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddMatchPlayerIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddMatchPlayerIDs(ids...)
	return psuo
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (psuo *PlayerStatsUpdateOne) AddMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psuo.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddAssistEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddAssistEventIDs(ids...)
	return psuo
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) AddAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.AddAssistEventIDs(ids...)
}

// AddPsGameIDs adds the "psGames" edge to the PSGames entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsGameIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsGameIDs(ids...)
	return psuo
}

// AddPsGames adds the "psGames" edges to the PSGames entity.
func (psuo *PlayerStatsUpdateOne) AddPsGames(p ...*PSGames) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsGameIDs(ids...)
}

// AddPsShootingIDs adds the "psShooting" edge to the PSShooting entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsShootingIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsShootingIDs(ids...)
	return psuo
}

// AddPsShooting adds the "psShooting" edges to the PSShooting entity.
func (psuo *PlayerStatsUpdateOne) AddPsShooting(p ...*PSShooting) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsShootingIDs(ids...)
}

// AddPsDefenseIDs adds the "psDefense" edge to the PSDefense entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsDefenseIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsDefenseIDs(ids...)
	return psuo
}

// AddPsDefense adds the "psDefense" edges to the PSDefense entity.
func (psuo *PlayerStatsUpdateOne) AddPsDefense(p ...*PSDefense) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsDefenseIDs(ids...)
}

// AddPsTechnicalIDs adds the "psTechnical" edge to the PSTechnical entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsTechnicalIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsTechnicalIDs(ids...)
	return psuo
}

// AddPsTechnical adds the "psTechnical" edges to the PSTechnical entity.
func (psuo *PlayerStatsUpdateOne) AddPsTechnical(p ...*PSTechnical) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsTechnicalIDs(ids...)
}

// AddPsPenaltyIDs adds the "psPenalty" edge to the PSPenalty entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsPenaltyIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsPenaltyIDs(ids...)
	return psuo
}

// AddPsPenalty adds the "psPenalty" edges to the PSPenalty entity.
func (psuo *PlayerStatsUpdateOne) AddPsPenalty(p ...*PSPenalty) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsPenaltyIDs(ids...)
}

// AddPsSubstituteIDs adds the "psSubstitutes" edge to the PSSubstitutes entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsSubstituteIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsSubstituteIDs(ids...)
	return psuo
}

// AddPsSubstitutes adds the "psSubstitutes" edges to the PSSubstitutes entity.
func (psuo *PlayerStatsUpdateOne) AddPsSubstitutes(p ...*PSSubstitutes) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsSubstituteIDs(ids...)
}

// AddSeasonIDs adds the "season" edge to the Season entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddSeasonIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddSeasonIDs(ids...)
	return psuo
}

// AddSeason adds the "season" edges to the Season entity.
func (psuo *PlayerStatsUpdateOne) AddSeason(s ...*Season) *PlayerStatsUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.AddSeasonIDs(ids...)
}

// AddPsFairplayIDs adds the "psFairplay" edge to the PSFairplay entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsFairplayIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsFairplayIDs(ids...)
	return psuo
}

// AddPsFairplay adds the "psFairplay" edges to the PSFairplay entity.
func (psuo *PlayerStatsUpdateOne) AddPsFairplay(p ...*PSFairplay) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsFairplayIDs(ids...)
}

// Mutation returns the PlayerStatsMutation object of the builder.
func (psuo *PlayerStatsUpdateOne) Mutation() *PlayerStatsMutation {
	return psuo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (psuo *PlayerStatsUpdateOne) ClearPlayer() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPlayer()
	return psuo
}

// ClearTeam clears the "team" edge to the Team entity.
func (psuo *PlayerStatsUpdateOne) ClearTeam() *PlayerStatsUpdateOne {
	psuo.mutation.ClearTeam()
	return psuo
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) ClearPlayerEvents() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPlayerEvents()
	return psuo
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePlayerEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePlayerEventIDs(ids...)
	return psuo
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (psuo *PlayerStatsUpdateOne) RemovePlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (psuo *PlayerStatsUpdateOne) ClearMatchPlayer() *PlayerStatsUpdateOne {
	psuo.mutation.ClearMatchPlayer()
	return psuo
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemoveMatchPlayerIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemoveMatchPlayerIDs(ids...)
	return psuo
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (psuo *PlayerStatsUpdateOne) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psuo.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) ClearAssistEvents() *PlayerStatsUpdateOne {
	psuo.mutation.ClearAssistEvents()
	return psuo
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemoveAssistEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemoveAssistEventIDs(ids...)
	return psuo
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (psuo *PlayerStatsUpdateOne) RemoveAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.RemoveAssistEventIDs(ids...)
}

// ClearPsGames clears all "psGames" edges to the PSGames entity.
func (psuo *PlayerStatsUpdateOne) ClearPsGames() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsGames()
	return psuo
}

// RemovePsGameIDs removes the "psGames" edge to PSGames entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsGameIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsGameIDs(ids...)
	return psuo
}

// RemovePsGames removes "psGames" edges to PSGames entities.
func (psuo *PlayerStatsUpdateOne) RemovePsGames(p ...*PSGames) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsGameIDs(ids...)
}

// ClearPsShooting clears all "psShooting" edges to the PSShooting entity.
func (psuo *PlayerStatsUpdateOne) ClearPsShooting() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsShooting()
	return psuo
}

// RemovePsShootingIDs removes the "psShooting" edge to PSShooting entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsShootingIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsShootingIDs(ids...)
	return psuo
}

// RemovePsShooting removes "psShooting" edges to PSShooting entities.
func (psuo *PlayerStatsUpdateOne) RemovePsShooting(p ...*PSShooting) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsShootingIDs(ids...)
}

// ClearPsDefense clears all "psDefense" edges to the PSDefense entity.
func (psuo *PlayerStatsUpdateOne) ClearPsDefense() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsDefense()
	return psuo
}

// RemovePsDefenseIDs removes the "psDefense" edge to PSDefense entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsDefenseIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsDefenseIDs(ids...)
	return psuo
}

// RemovePsDefense removes "psDefense" edges to PSDefense entities.
func (psuo *PlayerStatsUpdateOne) RemovePsDefense(p ...*PSDefense) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsDefenseIDs(ids...)
}

// ClearPsTechnical clears all "psTechnical" edges to the PSTechnical entity.
func (psuo *PlayerStatsUpdateOne) ClearPsTechnical() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsTechnical()
	return psuo
}

// RemovePsTechnicalIDs removes the "psTechnical" edge to PSTechnical entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsTechnicalIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsTechnicalIDs(ids...)
	return psuo
}

// RemovePsTechnical removes "psTechnical" edges to PSTechnical entities.
func (psuo *PlayerStatsUpdateOne) RemovePsTechnical(p ...*PSTechnical) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsTechnicalIDs(ids...)
}

// ClearPsPenalty clears all "psPenalty" edges to the PSPenalty entity.
func (psuo *PlayerStatsUpdateOne) ClearPsPenalty() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsPenalty()
	return psuo
}

// RemovePsPenaltyIDs removes the "psPenalty" edge to PSPenalty entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsPenaltyIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsPenaltyIDs(ids...)
	return psuo
}

// RemovePsPenalty removes "psPenalty" edges to PSPenalty entities.
func (psuo *PlayerStatsUpdateOne) RemovePsPenalty(p ...*PSPenalty) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsPenaltyIDs(ids...)
}

// ClearPsSubstitutes clears all "psSubstitutes" edges to the PSSubstitutes entity.
func (psuo *PlayerStatsUpdateOne) ClearPsSubstitutes() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsSubstitutes()
	return psuo
}

// RemovePsSubstituteIDs removes the "psSubstitutes" edge to PSSubstitutes entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsSubstituteIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsSubstituteIDs(ids...)
	return psuo
}

// RemovePsSubstitutes removes "psSubstitutes" edges to PSSubstitutes entities.
func (psuo *PlayerStatsUpdateOne) RemovePsSubstitutes(p ...*PSSubstitutes) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsSubstituteIDs(ids...)
}

// ClearSeason clears all "season" edges to the Season entity.
func (psuo *PlayerStatsUpdateOne) ClearSeason() *PlayerStatsUpdateOne {
	psuo.mutation.ClearSeason()
	return psuo
}

// RemoveSeasonIDs removes the "season" edge to Season entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemoveSeasonIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemoveSeasonIDs(ids...)
	return psuo
}

// RemoveSeason removes "season" edges to Season entities.
func (psuo *PlayerStatsUpdateOne) RemoveSeason(s ...*Season) *PlayerStatsUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.RemoveSeasonIDs(ids...)
}

// ClearPsFairplay clears all "psFairplay" edges to the PSFairplay entity.
func (psuo *PlayerStatsUpdateOne) ClearPsFairplay() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsFairplay()
	return psuo
}

// RemovePsFairplayIDs removes the "psFairplay" edge to PSFairplay entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsFairplayIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsFairplayIDs(ids...)
	return psuo
}

// RemovePsFairplay removes "psFairplay" edges to PSFairplay entities.
func (psuo *PlayerStatsUpdateOne) RemovePsFairplay(p ...*PSFairplay) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsFairplayIDs(ids...)
}

// Where appends a list predicates to the PlayerStatsUpdate builder.
func (psuo *PlayerStatsUpdateOne) Where(ps ...predicate.PlayerStats) *PlayerStatsUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PlayerStatsUpdateOne) Select(field string, fields ...string) *PlayerStatsUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PlayerStats entity.
func (psuo *PlayerStatsUpdateOne) Save(ctx context.Context) (*PlayerStats, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PlayerStatsUpdateOne) SaveX(ctx context.Context) *PlayerStats {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PlayerStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PlayerStatsUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PlayerStatsUpdateOne) defaults() {
	if _, ok := psuo.mutation.LastUpdated(); !ok && !psuo.mutation.LastUpdatedCleared() {
		v := playerstats.UpdateDefaultLastUpdated()
		psuo.mutation.SetLastUpdated(v)
	}
}

func (psuo *PlayerStatsUpdateOne) sqlSave(ctx context.Context) (_node *PlayerStats, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerstats.Table, playerstats.Columns, sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerstats.FieldID)
		for _, f := range fields {
			if !playerstats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playerstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.LastUpdated(); ok {
		_spec.SetField(playerstats.FieldLastUpdated, field.TypeTime, value)
	}
	if psuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(playerstats.FieldLastUpdated, field.TypeTime)
	}
	if psuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !psuo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !psuo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !psuo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsGamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsGamesTable,
			Columns: []string{playerstats.PsGamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsGamesIDs(); len(nodes) > 0 && !psuo.mutation.PsGamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsGamesTable,
			Columns: []string{playerstats.PsGamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsGamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsGamesTable,
			Columns: []string{playerstats.PsGamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsShootingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsShootingTable,
			Columns: []string{playerstats.PsShootingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsShootingIDs(); len(nodes) > 0 && !psuo.mutation.PsShootingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsShootingTable,
			Columns: []string{playerstats.PsShootingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsShootingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsShootingTable,
			Columns: []string{playerstats.PsShootingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsDefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsDefenseTable,
			Columns: []string{playerstats.PsDefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsDefenseIDs(); len(nodes) > 0 && !psuo.mutation.PsDefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsDefenseTable,
			Columns: []string{playerstats.PsDefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsDefenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsDefenseTable,
			Columns: []string{playerstats.PsDefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsTechnicalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsTechnicalTable,
			Columns: []string{playerstats.PsTechnicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsTechnicalIDs(); len(nodes) > 0 && !psuo.mutation.PsTechnicalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsTechnicalTable,
			Columns: []string{playerstats.PsTechnicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsTechnicalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsTechnicalTable,
			Columns: []string{playerstats.PsTechnicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsPenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsPenaltyTable,
			Columns: []string{playerstats.PsPenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsPenaltyIDs(); len(nodes) > 0 && !psuo.mutation.PsPenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsPenaltyTable,
			Columns: []string{playerstats.PsPenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsPenaltyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsPenaltyTable,
			Columns: []string{playerstats.PsPenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsSubstitutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsSubstitutesTable,
			Columns: []string{playerstats.PsSubstitutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsSubstitutesIDs(); len(nodes) > 0 && !psuo.mutation.PsSubstitutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsSubstitutesTable,
			Columns: []string{playerstats.PsSubstitutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsSubstitutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsSubstitutesTable,
			Columns: []string{playerstats.PsSubstitutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.SeasonTable,
			Columns: playerstats.SeasonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedSeasonIDs(); len(nodes) > 0 && !psuo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.SeasonTable,
			Columns: playerstats.SeasonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.SeasonTable,
			Columns: playerstats.SeasonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsFairplayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsFairplayTable,
			Columns: []string{playerstats.PsFairplayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsFairplayIDs(); len(nodes) > 0 && !psuo.mutation.PsFairplayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsFairplayTable,
			Columns: []string{playerstats.PsFairplayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsFairplayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PsFairplayTable,
			Columns: []string{playerstats.PsFairplayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerStats{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
