// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/matchplayer"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psdefense"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgames"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgoals"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psoffense"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerStatsUpdate is the builder for updating PlayerStats entities.
type PlayerStatsUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerStatsMutation
}

// Where appends a list predicates to the PlayerStatsUpdate builder.
func (psu *PlayerStatsUpdate) Where(ps ...predicate.PlayerStats) *PlayerStatsUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetLastUpdated sets the "lastUpdated" field.
func (psu *PlayerStatsUpdate) SetLastUpdated(t time.Time) *PlayerStatsUpdate {
	psu.mutation.SetLastUpdated(t)
	return psu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psu *PlayerStatsUpdate) ClearLastUpdated() *PlayerStatsUpdate {
	psu.mutation.ClearLastUpdated()
	return psu
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (psu *PlayerStatsUpdate) SetPlayerID(id int) *PlayerStatsUpdate {
	psu.mutation.SetPlayerID(id)
	return psu
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (psu *PlayerStatsUpdate) SetNillablePlayerID(id *int) *PlayerStatsUpdate {
	if id != nil {
		psu = psu.SetPlayerID(*id)
	}
	return psu
}

// SetPlayer sets the "player" edge to the Player entity.
func (psu *PlayerStatsUpdate) SetPlayer(p *Player) *PlayerStatsUpdate {
	return psu.SetPlayerID(p.ID)
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (psu *PlayerStatsUpdate) AddTeamIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddTeamIDs(ids...)
	return psu
}

// AddTeam adds the "team" edges to the Team entity.
func (psu *PlayerStatsUpdate) AddTeam(t ...*Team) *PlayerStatsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psu.AddTeamIDs(ids...)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (psu *PlayerStatsUpdate) AddPlayerEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPlayerEventIDs(ids...)
	return psu
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) AddPlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (psu *PlayerStatsUpdate) AddMatchPlayerIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddMatchPlayerIDs(ids...)
	return psu
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (psu *PlayerStatsUpdate) AddMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psu.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (psu *PlayerStatsUpdate) AddAssistEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddAssistEventIDs(ids...)
	return psu
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) AddAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.AddAssistEventIDs(ids...)
}

// AddPsgameIDs adds the "psgames" edge to the PSGames entity by IDs.
func (psu *PlayerStatsUpdate) AddPsgameIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsgameIDs(ids...)
	return psu
}

// AddPsgames adds the "psgames" edges to the PSGames entity.
func (psu *PlayerStatsUpdate) AddPsgames(p ...*PSGames) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsgameIDs(ids...)
}

// AddPsgoalIDs adds the "psgoals" edge to the PSGoals entity by IDs.
func (psu *PlayerStatsUpdate) AddPsgoalIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsgoalIDs(ids...)
	return psu
}

// AddPsgoals adds the "psgoals" edges to the PSGoals entity.
func (psu *PlayerStatsUpdate) AddPsgoals(p ...*PSGoals) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsgoalIDs(ids...)
}

// AddPsdefenseIDs adds the "psdefense" edge to the PSDefense entity by IDs.
func (psu *PlayerStatsUpdate) AddPsdefenseIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsdefenseIDs(ids...)
	return psu
}

// AddPsdefense adds the "psdefense" edges to the PSDefense entity.
func (psu *PlayerStatsUpdate) AddPsdefense(p ...*PSDefense) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsdefenseIDs(ids...)
}

// AddPsoffenseIDs adds the "psoffense" edge to the PSOffense entity by IDs.
func (psu *PlayerStatsUpdate) AddPsoffenseIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPsoffenseIDs(ids...)
	return psu
}

// AddPsoffense adds the "psoffense" edges to the PSOffense entity.
func (psu *PlayerStatsUpdate) AddPsoffense(p ...*PSOffense) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPsoffenseIDs(ids...)
}

// AddPspenaltyIDs adds the "pspenalty" edge to the PSPenalty entity by IDs.
func (psu *PlayerStatsUpdate) AddPspenaltyIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.AddPspenaltyIDs(ids...)
	return psu
}

// AddPspenalty adds the "pspenalty" edges to the PSPenalty entity.
func (psu *PlayerStatsUpdate) AddPspenalty(p ...*PSPenalty) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPspenaltyIDs(ids...)
}

// Mutation returns the PlayerStatsMutation object of the builder.
func (psu *PlayerStatsUpdate) Mutation() *PlayerStatsMutation {
	return psu.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (psu *PlayerStatsUpdate) ClearPlayer() *PlayerStatsUpdate {
	psu.mutation.ClearPlayer()
	return psu
}

// ClearTeam clears all "team" edges to the Team entity.
func (psu *PlayerStatsUpdate) ClearTeam() *PlayerStatsUpdate {
	psu.mutation.ClearTeam()
	return psu
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (psu *PlayerStatsUpdate) RemoveTeamIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemoveTeamIDs(ids...)
	return psu
}

// RemoveTeam removes "team" edges to Team entities.
func (psu *PlayerStatsUpdate) RemoveTeam(t ...*Team) *PlayerStatsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psu.RemoveTeamIDs(ids...)
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) ClearPlayerEvents() *PlayerStatsUpdate {
	psu.mutation.ClearPlayerEvents()
	return psu
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (psu *PlayerStatsUpdate) RemovePlayerEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePlayerEventIDs(ids...)
	return psu
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (psu *PlayerStatsUpdate) RemovePlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (psu *PlayerStatsUpdate) ClearMatchPlayer() *PlayerStatsUpdate {
	psu.mutation.ClearMatchPlayer()
	return psu
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (psu *PlayerStatsUpdate) RemoveMatchPlayerIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemoveMatchPlayerIDs(ids...)
	return psu
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (psu *PlayerStatsUpdate) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psu.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (psu *PlayerStatsUpdate) ClearAssistEvents() *PlayerStatsUpdate {
	psu.mutation.ClearAssistEvents()
	return psu
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (psu *PlayerStatsUpdate) RemoveAssistEventIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemoveAssistEventIDs(ids...)
	return psu
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (psu *PlayerStatsUpdate) RemoveAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.RemoveAssistEventIDs(ids...)
}

// ClearPsgames clears all "psgames" edges to the PSGames entity.
func (psu *PlayerStatsUpdate) ClearPsgames() *PlayerStatsUpdate {
	psu.mutation.ClearPsgames()
	return psu
}

// RemovePsgameIDs removes the "psgames" edge to PSGames entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsgameIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsgameIDs(ids...)
	return psu
}

// RemovePsgames removes "psgames" edges to PSGames entities.
func (psu *PlayerStatsUpdate) RemovePsgames(p ...*PSGames) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsgameIDs(ids...)
}

// ClearPsgoals clears all "psgoals" edges to the PSGoals entity.
func (psu *PlayerStatsUpdate) ClearPsgoals() *PlayerStatsUpdate {
	psu.mutation.ClearPsgoals()
	return psu
}

// RemovePsgoalIDs removes the "psgoals" edge to PSGoals entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsgoalIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsgoalIDs(ids...)
	return psu
}

// RemovePsgoals removes "psgoals" edges to PSGoals entities.
func (psu *PlayerStatsUpdate) RemovePsgoals(p ...*PSGoals) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsgoalIDs(ids...)
}

// ClearPsdefense clears all "psdefense" edges to the PSDefense entity.
func (psu *PlayerStatsUpdate) ClearPsdefense() *PlayerStatsUpdate {
	psu.mutation.ClearPsdefense()
	return psu
}

// RemovePsdefenseIDs removes the "psdefense" edge to PSDefense entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsdefenseIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsdefenseIDs(ids...)
	return psu
}

// RemovePsdefense removes "psdefense" edges to PSDefense entities.
func (psu *PlayerStatsUpdate) RemovePsdefense(p ...*PSDefense) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsdefenseIDs(ids...)
}

// ClearPsoffense clears all "psoffense" edges to the PSOffense entity.
func (psu *PlayerStatsUpdate) ClearPsoffense() *PlayerStatsUpdate {
	psu.mutation.ClearPsoffense()
	return psu
}

// RemovePsoffenseIDs removes the "psoffense" edge to PSOffense entities by IDs.
func (psu *PlayerStatsUpdate) RemovePsoffenseIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePsoffenseIDs(ids...)
	return psu
}

// RemovePsoffense removes "psoffense" edges to PSOffense entities.
func (psu *PlayerStatsUpdate) RemovePsoffense(p ...*PSOffense) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePsoffenseIDs(ids...)
}

// ClearPspenalty clears all "pspenalty" edges to the PSPenalty entity.
func (psu *PlayerStatsUpdate) ClearPspenalty() *PlayerStatsUpdate {
	psu.mutation.ClearPspenalty()
	return psu
}

// RemovePspenaltyIDs removes the "pspenalty" edge to PSPenalty entities by IDs.
func (psu *PlayerStatsUpdate) RemovePspenaltyIDs(ids ...int) *PlayerStatsUpdate {
	psu.mutation.RemovePspenaltyIDs(ids...)
	return psu
}

// RemovePspenalty removes "pspenalty" edges to PSPenalty entities.
func (psu *PlayerStatsUpdate) RemovePspenalty(p ...*PSPenalty) *PlayerStatsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePspenaltyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PlayerStatsUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PlayerStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PlayerStatsUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PlayerStatsUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PlayerStatsUpdate) defaults() {
	if _, ok := psu.mutation.LastUpdated(); !ok && !psu.mutation.LastUpdatedCleared() {
		v := playerstats.UpdateDefaultLastUpdated()
		psu.mutation.SetLastUpdated(v)
	}
}

func (psu *PlayerStatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerstats.Table, playerstats.Columns, sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.LastUpdated(); ok {
		_spec.SetField(playerstats.FieldLastUpdated, field.TypeTime, value)
	}
	if psu.mutation.LastUpdatedCleared() {
		_spec.ClearField(playerstats.FieldLastUpdated, field.TypeTime)
	}
	if psu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedTeamIDs(); len(nodes) > 0 && !psu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !psu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !psu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !psu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgamesTable,
			Columns: playerstats.PsgamesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsgamesIDs(); len(nodes) > 0 && !psu.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgamesTable,
			Columns: playerstats.PsgamesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsgamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgamesTable,
			Columns: playerstats.PsgamesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgoalsTable,
			Columns: playerstats.PsgoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsgoalsIDs(); len(nodes) > 0 && !psu.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgoalsTable,
			Columns: playerstats.PsgoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgoalsTable,
			Columns: playerstats.PsgoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsdefenseTable,
			Columns: playerstats.PsdefensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsdefenseIDs(); len(nodes) > 0 && !psu.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsdefenseTable,
			Columns: playerstats.PsdefensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsdefenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsdefenseTable,
			Columns: playerstats.PsdefensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsoffenseTable,
			Columns: playerstats.PsoffensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPsoffenseIDs(); len(nodes) > 0 && !psu.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsoffenseTable,
			Columns: playerstats.PsoffensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PsoffenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsoffenseTable,
			Columns: playerstats.PsoffensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PspenaltyTable,
			Columns: playerstats.PspenaltyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedPspenaltyIDs(); len(nodes) > 0 && !psu.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PspenaltyTable,
			Columns: playerstats.PspenaltyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PspenaltyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PspenaltyTable,
			Columns: playerstats.PspenaltyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PlayerStatsUpdateOne is the builder for updating a single PlayerStats entity.
type PlayerStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerStatsMutation
}

// SetLastUpdated sets the "lastUpdated" field.
func (psuo *PlayerStatsUpdateOne) SetLastUpdated(t time.Time) *PlayerStatsUpdateOne {
	psuo.mutation.SetLastUpdated(t)
	return psuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psuo *PlayerStatsUpdateOne) ClearLastUpdated() *PlayerStatsUpdateOne {
	psuo.mutation.ClearLastUpdated()
	return psuo
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (psuo *PlayerStatsUpdateOne) SetPlayerID(id int) *PlayerStatsUpdateOne {
	psuo.mutation.SetPlayerID(id)
	return psuo
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (psuo *PlayerStatsUpdateOne) SetNillablePlayerID(id *int) *PlayerStatsUpdateOne {
	if id != nil {
		psuo = psuo.SetPlayerID(*id)
	}
	return psuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (psuo *PlayerStatsUpdateOne) SetPlayer(p *Player) *PlayerStatsUpdateOne {
	return psuo.SetPlayerID(p.ID)
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddTeamIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddTeamIDs(ids...)
	return psuo
}

// AddTeam adds the "team" edges to the Team entity.
func (psuo *PlayerStatsUpdateOne) AddTeam(t ...*Team) *PlayerStatsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psuo.AddTeamIDs(ids...)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPlayerEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPlayerEventIDs(ids...)
	return psuo
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) AddPlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddMatchPlayerIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddMatchPlayerIDs(ids...)
	return psuo
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (psuo *PlayerStatsUpdateOne) AddMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psuo.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddAssistEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddAssistEventIDs(ids...)
	return psuo
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) AddAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.AddAssistEventIDs(ids...)
}

// AddPsgameIDs adds the "psgames" edge to the PSGames entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsgameIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsgameIDs(ids...)
	return psuo
}

// AddPsgames adds the "psgames" edges to the PSGames entity.
func (psuo *PlayerStatsUpdateOne) AddPsgames(p ...*PSGames) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsgameIDs(ids...)
}

// AddPsgoalIDs adds the "psgoals" edge to the PSGoals entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsgoalIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsgoalIDs(ids...)
	return psuo
}

// AddPsgoals adds the "psgoals" edges to the PSGoals entity.
func (psuo *PlayerStatsUpdateOne) AddPsgoals(p ...*PSGoals) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsgoalIDs(ids...)
}

// AddPsdefenseIDs adds the "psdefense" edge to the PSDefense entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsdefenseIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsdefenseIDs(ids...)
	return psuo
}

// AddPsdefense adds the "psdefense" edges to the PSDefense entity.
func (psuo *PlayerStatsUpdateOne) AddPsdefense(p ...*PSDefense) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsdefenseIDs(ids...)
}

// AddPsoffenseIDs adds the "psoffense" edge to the PSOffense entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPsoffenseIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPsoffenseIDs(ids...)
	return psuo
}

// AddPsoffense adds the "psoffense" edges to the PSOffense entity.
func (psuo *PlayerStatsUpdateOne) AddPsoffense(p ...*PSOffense) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPsoffenseIDs(ids...)
}

// AddPspenaltyIDs adds the "pspenalty" edge to the PSPenalty entity by IDs.
func (psuo *PlayerStatsUpdateOne) AddPspenaltyIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.AddPspenaltyIDs(ids...)
	return psuo
}

// AddPspenalty adds the "pspenalty" edges to the PSPenalty entity.
func (psuo *PlayerStatsUpdateOne) AddPspenalty(p ...*PSPenalty) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPspenaltyIDs(ids...)
}

// Mutation returns the PlayerStatsMutation object of the builder.
func (psuo *PlayerStatsUpdateOne) Mutation() *PlayerStatsMutation {
	return psuo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (psuo *PlayerStatsUpdateOne) ClearPlayer() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPlayer()
	return psuo
}

// ClearTeam clears all "team" edges to the Team entity.
func (psuo *PlayerStatsUpdateOne) ClearTeam() *PlayerStatsUpdateOne {
	psuo.mutation.ClearTeam()
	return psuo
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemoveTeamIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemoveTeamIDs(ids...)
	return psuo
}

// RemoveTeam removes "team" edges to Team entities.
func (psuo *PlayerStatsUpdateOne) RemoveTeam(t ...*Team) *PlayerStatsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psuo.RemoveTeamIDs(ids...)
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) ClearPlayerEvents() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPlayerEvents()
	return psuo
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePlayerEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePlayerEventIDs(ids...)
	return psuo
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (psuo *PlayerStatsUpdateOne) RemovePlayerEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (psuo *PlayerStatsUpdateOne) ClearMatchPlayer() *PlayerStatsUpdateOne {
	psuo.mutation.ClearMatchPlayer()
	return psuo
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemoveMatchPlayerIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemoveMatchPlayerIDs(ids...)
	return psuo
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (psuo *PlayerStatsUpdateOne) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerStatsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psuo.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (psuo *PlayerStatsUpdateOne) ClearAssistEvents() *PlayerStatsUpdateOne {
	psuo.mutation.ClearAssistEvents()
	return psuo
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemoveAssistEventIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemoveAssistEventIDs(ids...)
	return psuo
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (psuo *PlayerStatsUpdateOne) RemoveAssistEvents(f ...*FixtureEvents) *PlayerStatsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.RemoveAssistEventIDs(ids...)
}

// ClearPsgames clears all "psgames" edges to the PSGames entity.
func (psuo *PlayerStatsUpdateOne) ClearPsgames() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsgames()
	return psuo
}

// RemovePsgameIDs removes the "psgames" edge to PSGames entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsgameIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsgameIDs(ids...)
	return psuo
}

// RemovePsgames removes "psgames" edges to PSGames entities.
func (psuo *PlayerStatsUpdateOne) RemovePsgames(p ...*PSGames) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsgameIDs(ids...)
}

// ClearPsgoals clears all "psgoals" edges to the PSGoals entity.
func (psuo *PlayerStatsUpdateOne) ClearPsgoals() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsgoals()
	return psuo
}

// RemovePsgoalIDs removes the "psgoals" edge to PSGoals entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsgoalIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsgoalIDs(ids...)
	return psuo
}

// RemovePsgoals removes "psgoals" edges to PSGoals entities.
func (psuo *PlayerStatsUpdateOne) RemovePsgoals(p ...*PSGoals) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsgoalIDs(ids...)
}

// ClearPsdefense clears all "psdefense" edges to the PSDefense entity.
func (psuo *PlayerStatsUpdateOne) ClearPsdefense() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsdefense()
	return psuo
}

// RemovePsdefenseIDs removes the "psdefense" edge to PSDefense entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsdefenseIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsdefenseIDs(ids...)
	return psuo
}

// RemovePsdefense removes "psdefense" edges to PSDefense entities.
func (psuo *PlayerStatsUpdateOne) RemovePsdefense(p ...*PSDefense) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsdefenseIDs(ids...)
}

// ClearPsoffense clears all "psoffense" edges to the PSOffense entity.
func (psuo *PlayerStatsUpdateOne) ClearPsoffense() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPsoffense()
	return psuo
}

// RemovePsoffenseIDs removes the "psoffense" edge to PSOffense entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePsoffenseIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePsoffenseIDs(ids...)
	return psuo
}

// RemovePsoffense removes "psoffense" edges to PSOffense entities.
func (psuo *PlayerStatsUpdateOne) RemovePsoffense(p ...*PSOffense) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePsoffenseIDs(ids...)
}

// ClearPspenalty clears all "pspenalty" edges to the PSPenalty entity.
func (psuo *PlayerStatsUpdateOne) ClearPspenalty() *PlayerStatsUpdateOne {
	psuo.mutation.ClearPspenalty()
	return psuo
}

// RemovePspenaltyIDs removes the "pspenalty" edge to PSPenalty entities by IDs.
func (psuo *PlayerStatsUpdateOne) RemovePspenaltyIDs(ids ...int) *PlayerStatsUpdateOne {
	psuo.mutation.RemovePspenaltyIDs(ids...)
	return psuo
}

// RemovePspenalty removes "pspenalty" edges to PSPenalty entities.
func (psuo *PlayerStatsUpdateOne) RemovePspenalty(p ...*PSPenalty) *PlayerStatsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePspenaltyIDs(ids...)
}

// Where appends a list predicates to the PlayerStatsUpdate builder.
func (psuo *PlayerStatsUpdateOne) Where(ps ...predicate.PlayerStats) *PlayerStatsUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PlayerStatsUpdateOne) Select(field string, fields ...string) *PlayerStatsUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PlayerStats entity.
func (psuo *PlayerStatsUpdateOne) Save(ctx context.Context) (*PlayerStats, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PlayerStatsUpdateOne) SaveX(ctx context.Context) *PlayerStats {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PlayerStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PlayerStatsUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PlayerStatsUpdateOne) defaults() {
	if _, ok := psuo.mutation.LastUpdated(); !ok && !psuo.mutation.LastUpdatedCleared() {
		v := playerstats.UpdateDefaultLastUpdated()
		psuo.mutation.SetLastUpdated(v)
	}
}

func (psuo *PlayerStatsUpdateOne) sqlSave(ctx context.Context) (_node *PlayerStats, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerstats.Table, playerstats.Columns, sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerstats.FieldID)
		for _, f := range fields {
			if !playerstats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playerstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.LastUpdated(); ok {
		_spec.SetField(playerstats.FieldLastUpdated, field.TypeTime, value)
	}
	if psuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(playerstats.FieldLastUpdated, field.TypeTime)
	}
	if psuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !psuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !psuo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !psuo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !psuo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgamesTable,
			Columns: playerstats.PsgamesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsgamesIDs(); len(nodes) > 0 && !psuo.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgamesTable,
			Columns: playerstats.PsgamesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsgamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgamesTable,
			Columns: playerstats.PsgamesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgoalsTable,
			Columns: playerstats.PsgoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsgoalsIDs(); len(nodes) > 0 && !psuo.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgoalsTable,
			Columns: playerstats.PsgoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsgoalsTable,
			Columns: playerstats.PsgoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsdefenseTable,
			Columns: playerstats.PsdefensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsdefenseIDs(); len(nodes) > 0 && !psuo.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsdefenseTable,
			Columns: playerstats.PsdefensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsdefenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsdefenseTable,
			Columns: playerstats.PsdefensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsoffenseTable,
			Columns: playerstats.PsoffensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPsoffenseIDs(); len(nodes) > 0 && !psuo.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsoffenseTable,
			Columns: playerstats.PsoffensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PsoffenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PsoffenseTable,
			Columns: playerstats.PsoffensePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PspenaltyTable,
			Columns: playerstats.PspenaltyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedPspenaltyIDs(); len(nodes) > 0 && !psuo.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PspenaltyTable,
			Columns: playerstats.PspenaltyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PspenaltyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.PspenaltyTable,
			Columns: playerstats.PspenaltyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerStats{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
