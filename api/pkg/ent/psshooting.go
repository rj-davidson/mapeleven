// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psshooting"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSShooting is the model entity for the PSShooting schema.
type PSShooting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Goals holds the value of the "Goals" field.
	Goals int `json:"Goals,omitempty"`
	// Conceded holds the value of the "Conceded" field.
	Conceded int `json:"Conceded,omitempty"`
	// Assists holds the value of the "Assists" field.
	Assists int `json:"Assists,omitempty"`
	// Saves holds the value of the "Saves" field.
	Saves int `json:"Saves,omitempty"`
	// Shots holds the value of the "Shots" field.
	Shots int `json:"Shots,omitempty"`
	// OnTarget holds the value of the "OnTarget" field.
	OnTarget int `json:"OnTarget,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSShootingQuery when eager-loading is set.
	Edges                    PSShootingEdges `json:"edges"`
	player_stats_ps_shooting *int
	selectValues             sql.SelectValues
}

// PSShootingEdges holds the relations/edges for other nodes in the graph.
type PSShootingEdges struct {
	// PlayerStats holds the value of the playerStats edge.
	PlayerStats *PlayerStats `json:"playerStats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerStatsOrErr returns the PlayerStats value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PSShootingEdges) PlayerStatsOrErr() (*PlayerStats, error) {
	if e.loadedTypes[0] {
		if e.PlayerStats == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playerstats.Label}
		}
		return e.PlayerStats, nil
	}
	return nil, &NotLoadedError{edge: "playerStats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSShooting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case psshooting.FieldID, psshooting.FieldGoals, psshooting.FieldConceded, psshooting.FieldAssists, psshooting.FieldSaves, psshooting.FieldShots, psshooting.FieldOnTarget:
			values[i] = new(sql.NullInt64)
		case psshooting.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case psshooting.ForeignKeys[0]: // player_stats_ps_shooting
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSShooting fields.
func (ps *PSShooting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case psshooting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case psshooting.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Goals", values[i])
			} else if value.Valid {
				ps.Goals = int(value.Int64)
			}
		case psshooting.FieldConceded:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Conceded", values[i])
			} else if value.Valid {
				ps.Conceded = int(value.Int64)
			}
		case psshooting.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Assists", values[i])
			} else if value.Valid {
				ps.Assists = int(value.Int64)
			}
		case psshooting.FieldSaves:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Saves", values[i])
			} else if value.Valid {
				ps.Saves = int(value.Int64)
			}
		case psshooting.FieldShots:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Shots", values[i])
			} else if value.Valid {
				ps.Shots = int(value.Int64)
			}
		case psshooting.FieldOnTarget:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OnTarget", values[i])
			} else if value.Valid {
				ps.OnTarget = int(value.Int64)
			}
		case psshooting.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				ps.LastUpdated = value.Time
			}
		case psshooting.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_stats_ps_shooting", value)
			} else if value.Valid {
				ps.player_stats_ps_shooting = new(int)
				*ps.player_stats_ps_shooting = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSShooting.
// This includes values selected through modifiers, order, etc.
func (ps *PSShooting) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryPlayerStats queries the "playerStats" edge of the PSShooting entity.
func (ps *PSShooting) QueryPlayerStats() *PlayerStatsQuery {
	return NewPSShootingClient(ps.config).QueryPlayerStats(ps)
}

// Update returns a builder for updating this PSShooting.
// Note that you need to call PSShooting.Unwrap() before calling this method if this PSShooting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PSShooting) Update() *PSShootingUpdateOne {
	return NewPSShootingClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PSShooting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PSShooting) Unwrap() *PSShooting {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSShooting is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PSShooting) String() string {
	var builder strings.Builder
	builder.WriteString("PSShooting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("Goals=")
	builder.WriteString(fmt.Sprintf("%v", ps.Goals))
	builder.WriteString(", ")
	builder.WriteString("Conceded=")
	builder.WriteString(fmt.Sprintf("%v", ps.Conceded))
	builder.WriteString(", ")
	builder.WriteString("Assists=")
	builder.WriteString(fmt.Sprintf("%v", ps.Assists))
	builder.WriteString(", ")
	builder.WriteString("Saves=")
	builder.WriteString(fmt.Sprintf("%v", ps.Saves))
	builder.WriteString(", ")
	builder.WriteString("Shots=")
	builder.WriteString(fmt.Sprintf("%v", ps.Shots))
	builder.WriteString(", ")
	builder.WriteString("OnTarget=")
	builder.WriteString(fmt.Sprintf("%v", ps.OnTarget))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(ps.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PSShootings is a parsable slice of PSShooting.
type PSShootings []*PSShooting
