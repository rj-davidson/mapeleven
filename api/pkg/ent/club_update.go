// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/club"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/country"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClubUpdate is the builder for updating Club entities.
type ClubUpdate struct {
	config
	hooks    []Hook
	mutation *ClubMutation
}

// Where appends a list predicates to the ClubUpdate builder.
func (cu *ClubUpdate) Where(ps ...predicate.Club) *ClubUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ClubUpdate) SetName(s string) *ClubUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetCode sets the "code" field.
func (cu *ClubUpdate) SetCode(s string) *ClubUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetFounded sets the "founded" field.
func (cu *ClubUpdate) SetFounded(i int) *ClubUpdate {
	cu.mutation.ResetFounded()
	cu.mutation.SetFounded(i)
	return cu
}

// AddFounded adds i to the "founded" field.
func (cu *ClubUpdate) AddFounded(i int) *ClubUpdate {
	cu.mutation.AddFounded(i)
	return cu
}

// SetNational sets the "national" field.
func (cu *ClubUpdate) SetNational(b bool) *ClubUpdate {
	cu.mutation.SetNational(b)
	return cu
}

// SetLogo sets the "logo" field.
func (cu *ClubUpdate) SetLogo(s string) *ClubUpdate {
	cu.mutation.SetLogo(s)
	return cu
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (cu *ClubUpdate) SetCountryID(id int) *ClubUpdate {
	cu.mutation.SetCountryID(id)
	return cu
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (cu *ClubUpdate) SetNillableCountryID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetCountryID(*id)
	}
	return cu
}

// SetCountry sets the "country" edge to the Country entity.
func (cu *ClubUpdate) SetCountry(c *Country) *ClubUpdate {
	return cu.SetCountryID(c.ID)
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (cu *ClubUpdate) AddTeamIDs(ids ...int) *ClubUpdate {
	cu.mutation.AddTeamIDs(ids...)
	return cu
}

// AddTeam adds the "team" edges to the Team entity.
func (cu *ClubUpdate) AddTeam(t ...*Team) *ClubUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTeamIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cu *ClubUpdate) Mutation() *ClubMutation {
	return cu.mutation
}

// ClearCountry clears the "country" edge to the Country entity.
func (cu *ClubUpdate) ClearCountry() *ClubUpdate {
	cu.mutation.ClearCountry()
	return cu
}

// ClearTeam clears all "team" edges to the Team entity.
func (cu *ClubUpdate) ClearTeam() *ClubUpdate {
	cu.mutation.ClearTeam()
	return cu
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (cu *ClubUpdate) RemoveTeamIDs(ids ...int) *ClubUpdate {
	cu.mutation.RemoveTeamIDs(ids...)
	return cu
}

// RemoveTeam removes "team" edges to Team entities.
func (cu *ClubUpdate) RemoveTeam(t ...*Team) *ClubUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClubUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClubUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClubUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClubUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClubUpdate) check() error {
	if v, ok := cu.mutation.Code(); ok {
		if err := club.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Club.code": %w`, err)}
		}
	}
	return nil
}

func (cu *ClubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(club.Table, club.Columns, sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(club.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(club.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Founded(); ok {
		_spec.SetField(club.FieldFounded, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedFounded(); ok {
		_spec.AddField(club.FieldFounded, field.TypeInt, value)
	}
	if value, ok := cu.mutation.National(); ok {
		_spec.SetField(club.FieldNational, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Logo(); ok {
		_spec.SetField(club.FieldLogo, field.TypeString, value)
	}
	if cu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.CountryTable,
			Columns: []string{club.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.CountryTable,
			Columns: []string{club.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.TeamTable,
			Columns: []string{club.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTeamIDs(); len(nodes) > 0 && !cu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.TeamTable,
			Columns: []string{club.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.TeamTable,
			Columns: []string{club.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClubUpdateOne is the builder for updating a single Club entity.
type ClubUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClubMutation
}

// SetName sets the "name" field.
func (cuo *ClubUpdateOne) SetName(s string) *ClubUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetCode sets the "code" field.
func (cuo *ClubUpdateOne) SetCode(s string) *ClubUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetFounded sets the "founded" field.
func (cuo *ClubUpdateOne) SetFounded(i int) *ClubUpdateOne {
	cuo.mutation.ResetFounded()
	cuo.mutation.SetFounded(i)
	return cuo
}

// AddFounded adds i to the "founded" field.
func (cuo *ClubUpdateOne) AddFounded(i int) *ClubUpdateOne {
	cuo.mutation.AddFounded(i)
	return cuo
}

// SetNational sets the "national" field.
func (cuo *ClubUpdateOne) SetNational(b bool) *ClubUpdateOne {
	cuo.mutation.SetNational(b)
	return cuo
}

// SetLogo sets the "logo" field.
func (cuo *ClubUpdateOne) SetLogo(s string) *ClubUpdateOne {
	cuo.mutation.SetLogo(s)
	return cuo
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (cuo *ClubUpdateOne) SetCountryID(id int) *ClubUpdateOne {
	cuo.mutation.SetCountryID(id)
	return cuo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableCountryID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetCountryID(*id)
	}
	return cuo
}

// SetCountry sets the "country" edge to the Country entity.
func (cuo *ClubUpdateOne) SetCountry(c *Country) *ClubUpdateOne {
	return cuo.SetCountryID(c.ID)
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (cuo *ClubUpdateOne) AddTeamIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.AddTeamIDs(ids...)
	return cuo
}

// AddTeam adds the "team" edges to the Team entity.
func (cuo *ClubUpdateOne) AddTeam(t ...*Team) *ClubUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTeamIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cuo *ClubUpdateOne) Mutation() *ClubMutation {
	return cuo.mutation
}

// ClearCountry clears the "country" edge to the Country entity.
func (cuo *ClubUpdateOne) ClearCountry() *ClubUpdateOne {
	cuo.mutation.ClearCountry()
	return cuo
}

// ClearTeam clears all "team" edges to the Team entity.
func (cuo *ClubUpdateOne) ClearTeam() *ClubUpdateOne {
	cuo.mutation.ClearTeam()
	return cuo
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (cuo *ClubUpdateOne) RemoveTeamIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.RemoveTeamIDs(ids...)
	return cuo
}

// RemoveTeam removes "team" edges to Team entities.
func (cuo *ClubUpdateOne) RemoveTeam(t ...*Team) *ClubUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the ClubUpdate builder.
func (cuo *ClubUpdateOne) Where(ps ...predicate.Club) *ClubUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClubUpdateOne) Select(field string, fields ...string) *ClubUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Club entity.
func (cuo *ClubUpdateOne) Save(ctx context.Context) (*Club, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClubUpdateOne) SaveX(ctx context.Context) *Club {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClubUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClubUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClubUpdateOne) check() error {
	if v, ok := cuo.mutation.Code(); ok {
		if err := club.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Club.code": %w`, err)}
		}
	}
	return nil
}

func (cuo *ClubUpdateOne) sqlSave(ctx context.Context) (_node *Club, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(club.Table, club.Columns, sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Club.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, club.FieldID)
		for _, f := range fields {
			if !club.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != club.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(club.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(club.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Founded(); ok {
		_spec.SetField(club.FieldFounded, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedFounded(); ok {
		_spec.AddField(club.FieldFounded, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.National(); ok {
		_spec.SetField(club.FieldNational, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Logo(); ok {
		_spec.SetField(club.FieldLogo, field.TypeString, value)
	}
	if cuo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.CountryTable,
			Columns: []string{club.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.CountryTable,
			Columns: []string{club.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.TeamTable,
			Columns: []string{club.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !cuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.TeamTable,
			Columns: []string{club.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.TeamTable,
			Columns: []string{club.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Club{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
