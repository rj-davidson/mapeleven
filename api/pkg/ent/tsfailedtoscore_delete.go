// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsfailedtoscore"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSFailedToScoreDelete is the builder for deleting a TSFailedToScore entity.
type TSFailedToScoreDelete struct {
	config
	hooks    []Hook
	mutation *TSFailedToScoreMutation
}

// Where appends a list predicates to the TSFailedToScoreDelete builder.
func (tftsd *TSFailedToScoreDelete) Where(ps ...predicate.TSFailedToScore) *TSFailedToScoreDelete {
	tftsd.mutation.Where(ps...)
	return tftsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tftsd *TSFailedToScoreDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tftsd.sqlExec, tftsd.mutation, tftsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tftsd *TSFailedToScoreDelete) ExecX(ctx context.Context) int {
	n, err := tftsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tftsd *TSFailedToScoreDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tsfailedtoscore.Table, sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt))
	if ps := tftsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tftsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tftsd.mutation.done = true
	return affected, err
}

// TSFailedToScoreDeleteOne is the builder for deleting a single TSFailedToScore entity.
type TSFailedToScoreDeleteOne struct {
	tftsd *TSFailedToScoreDelete
}

// Where appends a list predicates to the TSFailedToScoreDelete builder.
func (tftsdo *TSFailedToScoreDeleteOne) Where(ps ...predicate.TSFailedToScore) *TSFailedToScoreDeleteOne {
	tftsdo.tftsd.mutation.Where(ps...)
	return tftsdo
}

// Exec executes the deletion query.
func (tftsdo *TSFailedToScoreDeleteOne) Exec(ctx context.Context) error {
	n, err := tftsdo.tftsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tsfailedtoscore.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tftsdo *TSFailedToScoreDeleteOne) ExecX(ctx context.Context) {
	if err := tftsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
