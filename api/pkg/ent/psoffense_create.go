// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psoffense"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSOffenseCreate is the builder for creating a PSOffense entity.
type PSOffenseCreate struct {
	config
	mutation *PSOffenseMutation
	hooks    []Hook
}

// SetDribbleAttempts sets the "dribbleAttempts" field.
func (poc *PSOffenseCreate) SetDribbleAttempts(i int) *PSOffenseCreate {
	poc.mutation.SetDribbleAttempts(i)
	return poc
}

// SetDribbleSuccess sets the "dribbleSuccess" field.
func (poc *PSOffenseCreate) SetDribbleSuccess(i int) *PSOffenseCreate {
	poc.mutation.SetDribbleSuccess(i)
	return poc
}

// SetDribblePast sets the "dribblePast" field.
func (poc *PSOffenseCreate) SetDribblePast(i int) *PSOffenseCreate {
	poc.mutation.SetDribblePast(i)
	return poc
}

// SetNillableDribblePast sets the "dribblePast" field if the given value is not nil.
func (poc *PSOffenseCreate) SetNillableDribblePast(i *int) *PSOffenseCreate {
	if i != nil {
		poc.SetDribblePast(*i)
	}
	return poc
}

// SetPassesTotal sets the "passesTotal" field.
func (poc *PSOffenseCreate) SetPassesTotal(i int) *PSOffenseCreate {
	poc.mutation.SetPassesTotal(i)
	return poc
}

// SetPassesKey sets the "passesKey" field.
func (poc *PSOffenseCreate) SetPassesKey(i int) *PSOffenseCreate {
	poc.mutation.SetPassesKey(i)
	return poc
}

// SetPassesAccuracy sets the "passesAccuracy" field.
func (poc *PSOffenseCreate) SetPassesAccuracy(i int) *PSOffenseCreate {
	poc.mutation.SetPassesAccuracy(i)
	return poc
}

// AddPlayerStatIDs adds the "playerStats" edge to the PlayerStats entity by IDs.
func (poc *PSOffenseCreate) AddPlayerStatIDs(ids ...int) *PSOffenseCreate {
	poc.mutation.AddPlayerStatIDs(ids...)
	return poc
}

// AddPlayerStats adds the "playerStats" edges to the PlayerStats entity.
func (poc *PSOffenseCreate) AddPlayerStats(p ...*PlayerStats) *PSOffenseCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return poc.AddPlayerStatIDs(ids...)
}

// Mutation returns the PSOffenseMutation object of the builder.
func (poc *PSOffenseCreate) Mutation() *PSOffenseMutation {
	return poc.mutation
}

// Save creates the PSOffense in the database.
func (poc *PSOffenseCreate) Save(ctx context.Context) (*PSOffense, error) {
	poc.defaults()
	return withHooks(ctx, poc.sqlSave, poc.mutation, poc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PSOffenseCreate) SaveX(ctx context.Context) *PSOffense {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PSOffenseCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PSOffenseCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poc *PSOffenseCreate) defaults() {
	if _, ok := poc.mutation.DribblePast(); !ok {
		v := psoffense.DefaultDribblePast
		poc.mutation.SetDribblePast(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poc *PSOffenseCreate) check() error {
	if _, ok := poc.mutation.DribbleAttempts(); !ok {
		return &ValidationError{Name: "dribbleAttempts", err: errors.New(`ent: missing required field "PSOffense.dribbleAttempts"`)}
	}
	if _, ok := poc.mutation.DribbleSuccess(); !ok {
		return &ValidationError{Name: "dribbleSuccess", err: errors.New(`ent: missing required field "PSOffense.dribbleSuccess"`)}
	}
	if _, ok := poc.mutation.DribblePast(); !ok {
		return &ValidationError{Name: "dribblePast", err: errors.New(`ent: missing required field "PSOffense.dribblePast"`)}
	}
	if _, ok := poc.mutation.PassesTotal(); !ok {
		return &ValidationError{Name: "passesTotal", err: errors.New(`ent: missing required field "PSOffense.passesTotal"`)}
	}
	if _, ok := poc.mutation.PassesKey(); !ok {
		return &ValidationError{Name: "passesKey", err: errors.New(`ent: missing required field "PSOffense.passesKey"`)}
	}
	if _, ok := poc.mutation.PassesAccuracy(); !ok {
		return &ValidationError{Name: "passesAccuracy", err: errors.New(`ent: missing required field "PSOffense.passesAccuracy"`)}
	}
	return nil
}

func (poc *PSOffenseCreate) sqlSave(ctx context.Context) (*PSOffense, error) {
	if err := poc.check(); err != nil {
		return nil, err
	}
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	poc.mutation.id = &_node.ID
	poc.mutation.done = true
	return _node, nil
}

func (poc *PSOffenseCreate) createSpec() (*PSOffense, *sqlgraph.CreateSpec) {
	var (
		_node = &PSOffense{config: poc.config}
		_spec = sqlgraph.NewCreateSpec(psoffense.Table, sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt))
	)
	if value, ok := poc.mutation.DribbleAttempts(); ok {
		_spec.SetField(psoffense.FieldDribbleAttempts, field.TypeInt, value)
		_node.DribbleAttempts = value
	}
	if value, ok := poc.mutation.DribbleSuccess(); ok {
		_spec.SetField(psoffense.FieldDribbleSuccess, field.TypeInt, value)
		_node.DribbleSuccess = value
	}
	if value, ok := poc.mutation.DribblePast(); ok {
		_spec.SetField(psoffense.FieldDribblePast, field.TypeInt, value)
		_node.DribblePast = value
	}
	if value, ok := poc.mutation.PassesTotal(); ok {
		_spec.SetField(psoffense.FieldPassesTotal, field.TypeInt, value)
		_node.PassesTotal = value
	}
	if value, ok := poc.mutation.PassesKey(); ok {
		_spec.SetField(psoffense.FieldPassesKey, field.TypeInt, value)
		_node.PassesKey = value
	}
	if value, ok := poc.mutation.PassesAccuracy(); ok {
		_spec.SetField(psoffense.FieldPassesAccuracy, field.TypeInt, value)
		_node.PassesAccuracy = value
	}
	if nodes := poc.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   psoffense.PlayerStatsTable,
			Columns: psoffense.PlayerStatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PSOffenseCreateBulk is the builder for creating many PSOffense entities in bulk.
type PSOffenseCreateBulk struct {
	config
	err      error
	builders []*PSOffenseCreate
}

// Save creates the PSOffense entities in the database.
func (pocb *PSOffenseCreateBulk) Save(ctx context.Context) ([]*PSOffense, error) {
	if pocb.err != nil {
		return nil, pocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PSOffense, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PSOffenseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PSOffenseCreateBulk) SaveX(ctx context.Context) []*PSOffense {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PSOffenseCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PSOffenseCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}
