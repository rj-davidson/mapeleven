// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/club"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/country"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Club is the model entity for the Club schema.
type Club struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ApiFootballId holds the value of the "apiFootballId" field.
	ApiFootballId int `json:"apiFootballId,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Founded holds the value of the "founded" field.
	Founded int `json:"founded,omitempty"`
	// National holds the value of the "national" field.
	National bool `json:"national,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClubQuery when eager-loading is set.
	Edges         ClubEdges `json:"edges"`
	country_clubs *int
	selectValues  sql.SelectValues
}

// ClubEdges holds the relations/edges for other nodes in the graph.
type ClubEdges struct {
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// Team holds the value of the team edge.
	Team []*Team `json:"team,omitempty"`
	// Player holds the value of the player edge.
	Player []*Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) CountryOrErr() (*Country, error) {
	if e.loadedTypes[0] {
		if e.Country == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) TeamOrErr() ([]*Team, error) {
	if e.loadedTypes[1] {
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) PlayerOrErr() ([]*Player, error) {
	if e.loadedTypes[2] {
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Club) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case club.FieldNational:
			values[i] = new(sql.NullBool)
		case club.FieldID, club.FieldApiFootballId, club.FieldFounded:
			values[i] = new(sql.NullInt64)
		case club.FieldSlug, club.FieldName, club.FieldCode, club.FieldLogo:
			values[i] = new(sql.NullString)
		case club.ForeignKeys[0]: // country_clubs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Club fields.
func (c *Club) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case club.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case club.FieldApiFootballId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field apiFootballId", values[i])
			} else if value.Valid {
				c.ApiFootballId = int(value.Int64)
			}
		case club.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				c.Slug = value.String
			}
		case club.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case club.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case club.FieldFounded:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field founded", values[i])
			} else if value.Valid {
				c.Founded = int(value.Int64)
			}
		case club.FieldNational:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field national", values[i])
			} else if value.Valid {
				c.National = value.Bool
			}
		case club.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				c.Logo = value.String
			}
		case club.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field country_clubs", value)
			} else if value.Valid {
				c.country_clubs = new(int)
				*c.country_clubs = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Club.
// This includes values selected through modifiers, order, etc.
func (c *Club) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCountry queries the "country" edge of the Club entity.
func (c *Club) QueryCountry() *CountryQuery {
	return NewClubClient(c.config).QueryCountry(c)
}

// QueryTeam queries the "team" edge of the Club entity.
func (c *Club) QueryTeam() *TeamQuery {
	return NewClubClient(c.config).QueryTeam(c)
}

// QueryPlayer queries the "player" edge of the Club entity.
func (c *Club) QueryPlayer() *PlayerQuery {
	return NewClubClient(c.config).QueryPlayer(c)
}

// Update returns a builder for updating this Club.
// Note that you need to call Club.Unwrap() before calling this method if this Club
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Club) Update() *ClubUpdateOne {
	return NewClubClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Club entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Club) Unwrap() *Club {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Club is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Club) String() string {
	var builder strings.Builder
	builder.WriteString("Club(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("apiFootballId=")
	builder.WriteString(fmt.Sprintf("%v", c.ApiFootballId))
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(c.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("founded=")
	builder.WriteString(fmt.Sprintf("%v", c.Founded))
	builder.WriteString(", ")
	builder.WriteString("national=")
	builder.WriteString(fmt.Sprintf("%v", c.National))
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(c.Logo)
	builder.WriteByte(')')
	return builder.String()
}

// Clubs is a parsable slice of Club.
type Clubs []*Club
