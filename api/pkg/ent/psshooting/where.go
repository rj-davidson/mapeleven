// Code generated by ent, DO NOT EDIT.

package psshooting

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldID, id))
}

// Goals applies equality check predicate on the "Goals" field. It's identical to GoalsEQ.
func Goals(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldGoals, v))
}

// Conceded applies equality check predicate on the "Conceded" field. It's identical to ConcededEQ.
func Conceded(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldConceded, v))
}

// Assists applies equality check predicate on the "Assists" field. It's identical to AssistsEQ.
func Assists(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldAssists, v))
}

// Saves applies equality check predicate on the "Saves" field. It's identical to SavesEQ.
func Saves(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldSaves, v))
}

// Shots applies equality check predicate on the "Shots" field. It's identical to ShotsEQ.
func Shots(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldShots, v))
}

// OnTarget applies equality check predicate on the "OnTarget" field. It's identical to OnTargetEQ.
func OnTarget(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldOnTarget, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldLastUpdated, v))
}

// GoalsEQ applies the EQ predicate on the "Goals" field.
func GoalsEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldGoals, v))
}

// GoalsNEQ applies the NEQ predicate on the "Goals" field.
func GoalsNEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldGoals, v))
}

// GoalsIn applies the In predicate on the "Goals" field.
func GoalsIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldGoals, vs...))
}

// GoalsNotIn applies the NotIn predicate on the "Goals" field.
func GoalsNotIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldGoals, vs...))
}

// GoalsGT applies the GT predicate on the "Goals" field.
func GoalsGT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldGoals, v))
}

// GoalsGTE applies the GTE predicate on the "Goals" field.
func GoalsGTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldGoals, v))
}

// GoalsLT applies the LT predicate on the "Goals" field.
func GoalsLT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldGoals, v))
}

// GoalsLTE applies the LTE predicate on the "Goals" field.
func GoalsLTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldGoals, v))
}

// ConcededEQ applies the EQ predicate on the "Conceded" field.
func ConcededEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldConceded, v))
}

// ConcededNEQ applies the NEQ predicate on the "Conceded" field.
func ConcededNEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldConceded, v))
}

// ConcededIn applies the In predicate on the "Conceded" field.
func ConcededIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldConceded, vs...))
}

// ConcededNotIn applies the NotIn predicate on the "Conceded" field.
func ConcededNotIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldConceded, vs...))
}

// ConcededGT applies the GT predicate on the "Conceded" field.
func ConcededGT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldConceded, v))
}

// ConcededGTE applies the GTE predicate on the "Conceded" field.
func ConcededGTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldConceded, v))
}

// ConcededLT applies the LT predicate on the "Conceded" field.
func ConcededLT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldConceded, v))
}

// ConcededLTE applies the LTE predicate on the "Conceded" field.
func ConcededLTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldConceded, v))
}

// AssistsEQ applies the EQ predicate on the "Assists" field.
func AssistsEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldAssists, v))
}

// AssistsNEQ applies the NEQ predicate on the "Assists" field.
func AssistsNEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldAssists, v))
}

// AssistsIn applies the In predicate on the "Assists" field.
func AssistsIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldAssists, vs...))
}

// AssistsNotIn applies the NotIn predicate on the "Assists" field.
func AssistsNotIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldAssists, vs...))
}

// AssistsGT applies the GT predicate on the "Assists" field.
func AssistsGT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldAssists, v))
}

// AssistsGTE applies the GTE predicate on the "Assists" field.
func AssistsGTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldAssists, v))
}

// AssistsLT applies the LT predicate on the "Assists" field.
func AssistsLT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldAssists, v))
}

// AssistsLTE applies the LTE predicate on the "Assists" field.
func AssistsLTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldAssists, v))
}

// SavesEQ applies the EQ predicate on the "Saves" field.
func SavesEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldSaves, v))
}

// SavesNEQ applies the NEQ predicate on the "Saves" field.
func SavesNEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldSaves, v))
}

// SavesIn applies the In predicate on the "Saves" field.
func SavesIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldSaves, vs...))
}

// SavesNotIn applies the NotIn predicate on the "Saves" field.
func SavesNotIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldSaves, vs...))
}

// SavesGT applies the GT predicate on the "Saves" field.
func SavesGT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldSaves, v))
}

// SavesGTE applies the GTE predicate on the "Saves" field.
func SavesGTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldSaves, v))
}

// SavesLT applies the LT predicate on the "Saves" field.
func SavesLT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldSaves, v))
}

// SavesLTE applies the LTE predicate on the "Saves" field.
func SavesLTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldSaves, v))
}

// ShotsEQ applies the EQ predicate on the "Shots" field.
func ShotsEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldShots, v))
}

// ShotsNEQ applies the NEQ predicate on the "Shots" field.
func ShotsNEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldShots, v))
}

// ShotsIn applies the In predicate on the "Shots" field.
func ShotsIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldShots, vs...))
}

// ShotsNotIn applies the NotIn predicate on the "Shots" field.
func ShotsNotIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldShots, vs...))
}

// ShotsGT applies the GT predicate on the "Shots" field.
func ShotsGT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldShots, v))
}

// ShotsGTE applies the GTE predicate on the "Shots" field.
func ShotsGTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldShots, v))
}

// ShotsLT applies the LT predicate on the "Shots" field.
func ShotsLT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldShots, v))
}

// ShotsLTE applies the LTE predicate on the "Shots" field.
func ShotsLTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldShots, v))
}

// OnTargetEQ applies the EQ predicate on the "OnTarget" field.
func OnTargetEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldOnTarget, v))
}

// OnTargetNEQ applies the NEQ predicate on the "OnTarget" field.
func OnTargetNEQ(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldOnTarget, v))
}

// OnTargetIn applies the In predicate on the "OnTarget" field.
func OnTargetIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldOnTarget, vs...))
}

// OnTargetNotIn applies the NotIn predicate on the "OnTarget" field.
func OnTargetNotIn(vs ...int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldOnTarget, vs...))
}

// OnTargetGT applies the GT predicate on the "OnTarget" field.
func OnTargetGT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldOnTarget, v))
}

// OnTargetGTE applies the GTE predicate on the "OnTarget" field.
func OnTargetGTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldOnTarget, v))
}

// OnTargetLT applies the LT predicate on the "OnTarget" field.
func OnTargetLT(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldOnTarget, v))
}

// OnTargetLTE applies the LTE predicate on the "OnTarget" field.
func OnTargetLTE(v int) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldOnTarget, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.PSShooting {
	return predicate.PSShooting(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.PSShooting {
	return predicate.PSShooting(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.PSShooting {
	return predicate.PSShooting(sql.FieldNotNull(FieldLastUpdated))
}

// HasPlayerStats applies the HasEdge predicate on the "playerStats" edge.
func HasPlayerStats() predicate.PSShooting {
	return predicate.PSShooting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PlayerStatsTable, PlayerStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatsWith applies the HasEdge predicate on the "playerStats" edge with a given conditions (other predicates).
func HasPlayerStatsWith(preds ...predicate.PlayerStats) predicate.PSShooting {
	return predicate.PSShooting(func(s *sql.Selector) {
		step := newPlayerStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PSShooting) predicate.PSShooting {
	return predicate.PSShooting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PSShooting) predicate.PSShooting {
	return predicate.PSShooting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PSShooting) predicate.PSShooting {
	return predicate.PSShooting(sql.NotPredicates(p))
}
