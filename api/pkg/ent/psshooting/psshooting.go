// Code generated by ent, DO NOT EDIT.

package psshooting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psshooting type in the database.
	Label = "ps_shooting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldConceded holds the string denoting the conceded field in the database.
	FieldConceded = "conceded"
	// FieldAssists holds the string denoting the assists field in the database.
	FieldAssists = "assists"
	// FieldSaves holds the string denoting the saves field in the database.
	FieldSaves = "saves"
	// FieldShots holds the string denoting the shots field in the database.
	FieldShots = "shots"
	// FieldOnTarget holds the string denoting the ontarget field in the database.
	FieldOnTarget = "on_target"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the psshooting in the database.
	Table = "ps_shootings"
	// PlayerStatsTable is the table that holds the playerStats relation/edge.
	PlayerStatsTable = "ps_shootings"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
	// PlayerStatsColumn is the table column denoting the playerStats relation/edge.
	PlayerStatsColumn = "player_stats_ps_shooting"
)

// Columns holds all SQL columns for psshooting fields.
var Columns = []string{
	FieldID,
	FieldGoals,
	FieldConceded,
	FieldAssists,
	FieldSaves,
	FieldShots,
	FieldOnTarget,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_shootings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_stats_ps_shooting",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGoals holds the default value on creation for the "Goals" field.
	DefaultGoals int
	// DefaultConceded holds the default value on creation for the "Conceded" field.
	DefaultConceded int
	// DefaultAssists holds the default value on creation for the "Assists" field.
	DefaultAssists int
	// DefaultSaves holds the default value on creation for the "Saves" field.
	DefaultSaves int
	// DefaultShots holds the default value on creation for the "Shots" field.
	DefaultShots int
	// DefaultOnTarget holds the default value on creation for the "OnTarget" field.
	DefaultOnTarget int
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the PSShooting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGoals orders the results by the Goals field.
func ByGoals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoals, opts...).ToFunc()
}

// ByConceded orders the results by the Conceded field.
func ByConceded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConceded, opts...).ToFunc()
}

// ByAssists orders the results by the Assists field.
func ByAssists(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssists, opts...).ToFunc()
}

// BySaves orders the results by the Saves field.
func BySaves(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSaves, opts...).ToFunc()
}

// ByShots orders the results by the Shots field.
func ByShots(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShots, opts...).ToFunc()
}

// ByOnTarget orders the results by the OnTarget field.
func ByOnTarget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnTarget, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerStatsField orders the results by playerStats field.
func ByPlayerStatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerStatsTable, PlayerStatsColumn),
	)
}
