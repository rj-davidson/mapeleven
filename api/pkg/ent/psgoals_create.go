// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgoals"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSGoalsCreate is the builder for creating a PSGoals entity.
type PSGoalsCreate struct {
	config
	mutation *PSGoalsMutation
	hooks    []Hook
}

// SetTotalGoals sets the "totalGoals" field.
func (pgc *PSGoalsCreate) SetTotalGoals(i int) *PSGoalsCreate {
	pgc.mutation.SetTotalGoals(i)
	return pgc
}

// SetConcededGoals sets the "concededGoals" field.
func (pgc *PSGoalsCreate) SetConcededGoals(i int) *PSGoalsCreate {
	pgc.mutation.SetConcededGoals(i)
	return pgc
}

// SetAssistGoals sets the "assistGoals" field.
func (pgc *PSGoalsCreate) SetAssistGoals(i int) *PSGoalsCreate {
	pgc.mutation.SetAssistGoals(i)
	return pgc
}

// SetSaveGoals sets the "saveGoals" field.
func (pgc *PSGoalsCreate) SetSaveGoals(i int) *PSGoalsCreate {
	pgc.mutation.SetSaveGoals(i)
	return pgc
}

// SetNillableSaveGoals sets the "saveGoals" field if the given value is not nil.
func (pgc *PSGoalsCreate) SetNillableSaveGoals(i *int) *PSGoalsCreate {
	if i != nil {
		pgc.SetSaveGoals(*i)
	}
	return pgc
}

// SetShotsTotal sets the "shotsTotal" field.
func (pgc *PSGoalsCreate) SetShotsTotal(i int) *PSGoalsCreate {
	pgc.mutation.SetShotsTotal(i)
	return pgc
}

// SetShotsOn sets the "shotsOn" field.
func (pgc *PSGoalsCreate) SetShotsOn(i int) *PSGoalsCreate {
	pgc.mutation.SetShotsOn(i)
	return pgc
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (pgc *PSGoalsCreate) SetPlayerID(id int) *PSGoalsCreate {
	pgc.mutation.SetPlayerID(id)
	return pgc
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (pgc *PSGoalsCreate) SetNillablePlayerID(id *int) *PSGoalsCreate {
	if id != nil {
		pgc = pgc.SetPlayerID(*id)
	}
	return pgc
}

// SetPlayer sets the "player" edge to the Player entity.
func (pgc *PSGoalsCreate) SetPlayer(p *Player) *PSGoalsCreate {
	return pgc.SetPlayerID(p.ID)
}

// Mutation returns the PSGoalsMutation object of the builder.
func (pgc *PSGoalsCreate) Mutation() *PSGoalsMutation {
	return pgc.mutation
}

// Save creates the PSGoals in the database.
func (pgc *PSGoalsCreate) Save(ctx context.Context) (*PSGoals, error) {
	pgc.defaults()
	return withHooks(ctx, pgc.sqlSave, pgc.mutation, pgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pgc *PSGoalsCreate) SaveX(ctx context.Context) *PSGoals {
	v, err := pgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgc *PSGoalsCreate) Exec(ctx context.Context) error {
	_, err := pgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgc *PSGoalsCreate) ExecX(ctx context.Context) {
	if err := pgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgc *PSGoalsCreate) defaults() {
	if _, ok := pgc.mutation.SaveGoals(); !ok {
		v := psgoals.DefaultSaveGoals
		pgc.mutation.SetSaveGoals(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgc *PSGoalsCreate) check() error {
	if _, ok := pgc.mutation.TotalGoals(); !ok {
		return &ValidationError{Name: "totalGoals", err: errors.New(`ent: missing required field "PSGoals.totalGoals"`)}
	}
	if _, ok := pgc.mutation.ConcededGoals(); !ok {
		return &ValidationError{Name: "concededGoals", err: errors.New(`ent: missing required field "PSGoals.concededGoals"`)}
	}
	if _, ok := pgc.mutation.AssistGoals(); !ok {
		return &ValidationError{Name: "assistGoals", err: errors.New(`ent: missing required field "PSGoals.assistGoals"`)}
	}
	if _, ok := pgc.mutation.SaveGoals(); !ok {
		return &ValidationError{Name: "saveGoals", err: errors.New(`ent: missing required field "PSGoals.saveGoals"`)}
	}
	if _, ok := pgc.mutation.ShotsTotal(); !ok {
		return &ValidationError{Name: "shotsTotal", err: errors.New(`ent: missing required field "PSGoals.shotsTotal"`)}
	}
	if _, ok := pgc.mutation.ShotsOn(); !ok {
		return &ValidationError{Name: "shotsOn", err: errors.New(`ent: missing required field "PSGoals.shotsOn"`)}
	}
	return nil
}

func (pgc *PSGoalsCreate) sqlSave(ctx context.Context) (*PSGoals, error) {
	if err := pgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pgc.mutation.id = &_node.ID
	pgc.mutation.done = true
	return _node, nil
}

func (pgc *PSGoalsCreate) createSpec() (*PSGoals, *sqlgraph.CreateSpec) {
	var (
		_node = &PSGoals{config: pgc.config}
		_spec = sqlgraph.NewCreateSpec(psgoals.Table, sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt))
	)
	if value, ok := pgc.mutation.TotalGoals(); ok {
		_spec.SetField(psgoals.FieldTotalGoals, field.TypeInt, value)
		_node.TotalGoals = value
	}
	if value, ok := pgc.mutation.ConcededGoals(); ok {
		_spec.SetField(psgoals.FieldConcededGoals, field.TypeInt, value)
		_node.ConcededGoals = value
	}
	if value, ok := pgc.mutation.AssistGoals(); ok {
		_spec.SetField(psgoals.FieldAssistGoals, field.TypeInt, value)
		_node.AssistGoals = value
	}
	if value, ok := pgc.mutation.SaveGoals(); ok {
		_spec.SetField(psgoals.FieldSaveGoals, field.TypeInt, value)
		_node.SaveGoals = value
	}
	if value, ok := pgc.mutation.ShotsTotal(); ok {
		_spec.SetField(psgoals.FieldShotsTotal, field.TypeInt, value)
		_node.ShotsTotal = value
	}
	if value, ok := pgc.mutation.ShotsOn(); ok {
		_spec.SetField(psgoals.FieldShotsOn, field.TypeInt, value)
		_node.ShotsOn = value
	}
	if nodes := pgc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   psgoals.PlayerTable,
			Columns: []string{psgoals.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_psgoals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PSGoalsCreateBulk is the builder for creating many PSGoals entities in bulk.
type PSGoalsCreateBulk struct {
	config
	err      error
	builders []*PSGoalsCreate
}

// Save creates the PSGoals entities in the database.
func (pgcb *PSGoalsCreateBulk) Save(ctx context.Context) ([]*PSGoals, error) {
	if pgcb.err != nil {
		return nil, pgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pgcb.builders))
	nodes := make([]*PSGoals, len(pgcb.builders))
	mutators := make([]Mutator, len(pgcb.builders))
	for i := range pgcb.builders {
		func(i int, root context.Context) {
			builder := pgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PSGoalsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgcb *PSGoalsCreateBulk) SaveX(ctx context.Context) []*PSGoals {
	v, err := pgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgcb *PSGoalsCreateBulk) Exec(ctx context.Context) error {
	_, err := pgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgcb *PSGoalsCreateBulk) ExecX(ctx context.Context) {
	if err := pgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
