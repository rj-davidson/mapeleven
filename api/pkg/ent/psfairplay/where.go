// Code generated by ent, DO NOT EDIT.

package psfairplay

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLTE(FieldID, id))
}

// FoulsCommitted applies equality check predicate on the "FoulsCommitted" field. It's identical to FoulsCommittedEQ.
func FoulsCommitted(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldFoulsCommitted, v))
}

// Yellow applies equality check predicate on the "Yellow" field. It's identical to YellowEQ.
func Yellow(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldYellow, v))
}

// YellowRed applies equality check predicate on the "YellowRed" field. It's identical to YellowRedEQ.
func YellowRed(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldYellowRed, v))
}

// Red applies equality check predicate on the "Red" field. It's identical to RedEQ.
func Red(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldRed, v))
}

// PenaltyConceded applies equality check predicate on the "PenaltyConceded" field. It's identical to PenaltyConcededEQ.
func PenaltyConceded(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldPenaltyConceded, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldLastUpdated, v))
}

// FoulsCommittedEQ applies the EQ predicate on the "FoulsCommitted" field.
func FoulsCommittedEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldFoulsCommitted, v))
}

// FoulsCommittedNEQ applies the NEQ predicate on the "FoulsCommitted" field.
func FoulsCommittedNEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNEQ(FieldFoulsCommitted, v))
}

// FoulsCommittedIn applies the In predicate on the "FoulsCommitted" field.
func FoulsCommittedIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIn(FieldFoulsCommitted, vs...))
}

// FoulsCommittedNotIn applies the NotIn predicate on the "FoulsCommitted" field.
func FoulsCommittedNotIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotIn(FieldFoulsCommitted, vs...))
}

// FoulsCommittedGT applies the GT predicate on the "FoulsCommitted" field.
func FoulsCommittedGT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGT(FieldFoulsCommitted, v))
}

// FoulsCommittedGTE applies the GTE predicate on the "FoulsCommitted" field.
func FoulsCommittedGTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGTE(FieldFoulsCommitted, v))
}

// FoulsCommittedLT applies the LT predicate on the "FoulsCommitted" field.
func FoulsCommittedLT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLT(FieldFoulsCommitted, v))
}

// FoulsCommittedLTE applies the LTE predicate on the "FoulsCommitted" field.
func FoulsCommittedLTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLTE(FieldFoulsCommitted, v))
}

// YellowEQ applies the EQ predicate on the "Yellow" field.
func YellowEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldYellow, v))
}

// YellowNEQ applies the NEQ predicate on the "Yellow" field.
func YellowNEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNEQ(FieldYellow, v))
}

// YellowIn applies the In predicate on the "Yellow" field.
func YellowIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIn(FieldYellow, vs...))
}

// YellowNotIn applies the NotIn predicate on the "Yellow" field.
func YellowNotIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotIn(FieldYellow, vs...))
}

// YellowGT applies the GT predicate on the "Yellow" field.
func YellowGT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGT(FieldYellow, v))
}

// YellowGTE applies the GTE predicate on the "Yellow" field.
func YellowGTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGTE(FieldYellow, v))
}

// YellowLT applies the LT predicate on the "Yellow" field.
func YellowLT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLT(FieldYellow, v))
}

// YellowLTE applies the LTE predicate on the "Yellow" field.
func YellowLTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLTE(FieldYellow, v))
}

// YellowRedEQ applies the EQ predicate on the "YellowRed" field.
func YellowRedEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldYellowRed, v))
}

// YellowRedNEQ applies the NEQ predicate on the "YellowRed" field.
func YellowRedNEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNEQ(FieldYellowRed, v))
}

// YellowRedIn applies the In predicate on the "YellowRed" field.
func YellowRedIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIn(FieldYellowRed, vs...))
}

// YellowRedNotIn applies the NotIn predicate on the "YellowRed" field.
func YellowRedNotIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotIn(FieldYellowRed, vs...))
}

// YellowRedGT applies the GT predicate on the "YellowRed" field.
func YellowRedGT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGT(FieldYellowRed, v))
}

// YellowRedGTE applies the GTE predicate on the "YellowRed" field.
func YellowRedGTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGTE(FieldYellowRed, v))
}

// YellowRedLT applies the LT predicate on the "YellowRed" field.
func YellowRedLT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLT(FieldYellowRed, v))
}

// YellowRedLTE applies the LTE predicate on the "YellowRed" field.
func YellowRedLTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLTE(FieldYellowRed, v))
}

// RedEQ applies the EQ predicate on the "Red" field.
func RedEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldRed, v))
}

// RedNEQ applies the NEQ predicate on the "Red" field.
func RedNEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNEQ(FieldRed, v))
}

// RedIn applies the In predicate on the "Red" field.
func RedIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIn(FieldRed, vs...))
}

// RedNotIn applies the NotIn predicate on the "Red" field.
func RedNotIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotIn(FieldRed, vs...))
}

// RedGT applies the GT predicate on the "Red" field.
func RedGT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGT(FieldRed, v))
}

// RedGTE applies the GTE predicate on the "Red" field.
func RedGTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGTE(FieldRed, v))
}

// RedLT applies the LT predicate on the "Red" field.
func RedLT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLT(FieldRed, v))
}

// RedLTE applies the LTE predicate on the "Red" field.
func RedLTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLTE(FieldRed, v))
}

// PenaltyConcededEQ applies the EQ predicate on the "PenaltyConceded" field.
func PenaltyConcededEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldPenaltyConceded, v))
}

// PenaltyConcededNEQ applies the NEQ predicate on the "PenaltyConceded" field.
func PenaltyConcededNEQ(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNEQ(FieldPenaltyConceded, v))
}

// PenaltyConcededIn applies the In predicate on the "PenaltyConceded" field.
func PenaltyConcededIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIn(FieldPenaltyConceded, vs...))
}

// PenaltyConcededNotIn applies the NotIn predicate on the "PenaltyConceded" field.
func PenaltyConcededNotIn(vs ...int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotIn(FieldPenaltyConceded, vs...))
}

// PenaltyConcededGT applies the GT predicate on the "PenaltyConceded" field.
func PenaltyConcededGT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGT(FieldPenaltyConceded, v))
}

// PenaltyConcededGTE applies the GTE predicate on the "PenaltyConceded" field.
func PenaltyConcededGTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGTE(FieldPenaltyConceded, v))
}

// PenaltyConcededLT applies the LT predicate on the "PenaltyConceded" field.
func PenaltyConcededLT(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLT(FieldPenaltyConceded, v))
}

// PenaltyConcededLTE applies the LTE predicate on the "PenaltyConceded" field.
func PenaltyConcededLTE(v int) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLTE(FieldPenaltyConceded, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.PSFairplay {
	return predicate.PSFairplay(sql.FieldNotNull(FieldLastUpdated))
}

// HasPlayerStats applies the HasEdge predicate on the "playerStats" edge.
func HasPlayerStats() predicate.PSFairplay {
	return predicate.PSFairplay(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerStatsTable, PlayerStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatsWith applies the HasEdge predicate on the "playerStats" edge with a given conditions (other predicates).
func HasPlayerStatsWith(preds ...predicate.PlayerStats) predicate.PSFairplay {
	return predicate.PSFairplay(func(s *sql.Selector) {
		step := newPlayerStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PSFairplay) predicate.PSFairplay {
	return predicate.PSFairplay(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PSFairplay) predicate.PSFairplay {
	return predicate.PSFairplay(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PSFairplay) predicate.PSFairplay {
	return predicate.PSFairplay(sql.NotPredicates(p))
}
