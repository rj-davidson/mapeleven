// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSPenalty is the model entity for the PSPenalty schema.
type PSPenalty struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FoulsDrawn holds the value of the "FoulsDrawn" field.
	FoulsDrawn int `json:"FoulsDrawn,omitempty"`
	// FoulsCommitted holds the value of the "FoulsCommitted" field.
	FoulsCommitted int `json:"FoulsCommitted,omitempty"`
	// CardsYellow holds the value of the "CardsYellow" field.
	CardsYellow int `json:"CardsYellow,omitempty"`
	// CardYellowRed holds the value of the "CardYellowRed" field.
	CardYellowRed int `json:"CardYellowRed,omitempty"`
	// CardsRed holds the value of the "CardsRed" field.
	CardsRed int `json:"CardsRed,omitempty"`
	// PenaltyWon holds the value of the "PenaltyWon" field.
	PenaltyWon int `json:"PenaltyWon,omitempty"`
	// PenaltyCommitted holds the value of the "PenaltyCommitted" field.
	PenaltyCommitted int `json:"PenaltyCommitted,omitempty"`
	// PenaltyScored holds the value of the "PenaltyScored" field.
	PenaltyScored int `json:"PenaltyScored,omitempty"`
	// PenaltyMissed holds the value of the "PenaltyMissed" field.
	PenaltyMissed int `json:"PenaltyMissed,omitempty"`
	// PenaltySaved holds the value of the "PenaltySaved" field.
	PenaltySaved int `json:"PenaltySaved,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSPenaltyQuery when eager-loading is set.
	Edges                  PSPenaltyEdges `json:"edges"`
	player_stats_pspenalty *int
	selectValues           sql.SelectValues
}

// PSPenaltyEdges holds the relations/edges for other nodes in the graph.
type PSPenaltyEdges struct {
	// PlayerStats holds the value of the playerStats edge.
	PlayerStats *PlayerStats `json:"playerStats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerStatsOrErr returns the PlayerStats value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PSPenaltyEdges) PlayerStatsOrErr() (*PlayerStats, error) {
	if e.loadedTypes[0] {
		if e.PlayerStats == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playerstats.Label}
		}
		return e.PlayerStats, nil
	}
	return nil, &NotLoadedError{edge: "playerStats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSPenalty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pspenalty.FieldID, pspenalty.FieldFoulsDrawn, pspenalty.FieldFoulsCommitted, pspenalty.FieldCardsYellow, pspenalty.FieldCardYellowRed, pspenalty.FieldCardsRed, pspenalty.FieldPenaltyWon, pspenalty.FieldPenaltyCommitted, pspenalty.FieldPenaltyScored, pspenalty.FieldPenaltyMissed, pspenalty.FieldPenaltySaved:
			values[i] = new(sql.NullInt64)
		case pspenalty.ForeignKeys[0]: // player_stats_pspenalty
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSPenalty fields.
func (pp *PSPenalty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pspenalty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case pspenalty.FieldFoulsDrawn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FoulsDrawn", values[i])
			} else if value.Valid {
				pp.FoulsDrawn = int(value.Int64)
			}
		case pspenalty.FieldFoulsCommitted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FoulsCommitted", values[i])
			} else if value.Valid {
				pp.FoulsCommitted = int(value.Int64)
			}
		case pspenalty.FieldCardsYellow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CardsYellow", values[i])
			} else if value.Valid {
				pp.CardsYellow = int(value.Int64)
			}
		case pspenalty.FieldCardYellowRed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CardYellowRed", values[i])
			} else if value.Valid {
				pp.CardYellowRed = int(value.Int64)
			}
		case pspenalty.FieldCardsRed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CardsRed", values[i])
			} else if value.Valid {
				pp.CardsRed = int(value.Int64)
			}
		case pspenalty.FieldPenaltyWon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PenaltyWon", values[i])
			} else if value.Valid {
				pp.PenaltyWon = int(value.Int64)
			}
		case pspenalty.FieldPenaltyCommitted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PenaltyCommitted", values[i])
			} else if value.Valid {
				pp.PenaltyCommitted = int(value.Int64)
			}
		case pspenalty.FieldPenaltyScored:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PenaltyScored", values[i])
			} else if value.Valid {
				pp.PenaltyScored = int(value.Int64)
			}
		case pspenalty.FieldPenaltyMissed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PenaltyMissed", values[i])
			} else if value.Valid {
				pp.PenaltyMissed = int(value.Int64)
			}
		case pspenalty.FieldPenaltySaved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PenaltySaved", values[i])
			} else if value.Valid {
				pp.PenaltySaved = int(value.Int64)
			}
		case pspenalty.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_stats_pspenalty", value)
			} else if value.Valid {
				pp.player_stats_pspenalty = new(int)
				*pp.player_stats_pspenalty = int(value.Int64)
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSPenalty.
// This includes values selected through modifiers, order, etc.
func (pp *PSPenalty) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryPlayerStats queries the "playerStats" edge of the PSPenalty entity.
func (pp *PSPenalty) QueryPlayerStats() *PlayerStatsQuery {
	return NewPSPenaltyClient(pp.config).QueryPlayerStats(pp)
}

// Update returns a builder for updating this PSPenalty.
// Note that you need to call PSPenalty.Unwrap() before calling this method if this PSPenalty
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PSPenalty) Update() *PSPenaltyUpdateOne {
	return NewPSPenaltyClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the PSPenalty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PSPenalty) Unwrap() *PSPenalty {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSPenalty is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PSPenalty) String() string {
	var builder strings.Builder
	builder.WriteString("PSPenalty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("FoulsDrawn=")
	builder.WriteString(fmt.Sprintf("%v", pp.FoulsDrawn))
	builder.WriteString(", ")
	builder.WriteString("FoulsCommitted=")
	builder.WriteString(fmt.Sprintf("%v", pp.FoulsCommitted))
	builder.WriteString(", ")
	builder.WriteString("CardsYellow=")
	builder.WriteString(fmt.Sprintf("%v", pp.CardsYellow))
	builder.WriteString(", ")
	builder.WriteString("CardYellowRed=")
	builder.WriteString(fmt.Sprintf("%v", pp.CardYellowRed))
	builder.WriteString(", ")
	builder.WriteString("CardsRed=")
	builder.WriteString(fmt.Sprintf("%v", pp.CardsRed))
	builder.WriteString(", ")
	builder.WriteString("PenaltyWon=")
	builder.WriteString(fmt.Sprintf("%v", pp.PenaltyWon))
	builder.WriteString(", ")
	builder.WriteString("PenaltyCommitted=")
	builder.WriteString(fmt.Sprintf("%v", pp.PenaltyCommitted))
	builder.WriteString(", ")
	builder.WriteString("PenaltyScored=")
	builder.WriteString(fmt.Sprintf("%v", pp.PenaltyScored))
	builder.WriteString(", ")
	builder.WriteString("PenaltyMissed=")
	builder.WriteString(fmt.Sprintf("%v", pp.PenaltyMissed))
	builder.WriteString(", ")
	builder.WriteString("PenaltySaved=")
	builder.WriteString(fmt.Sprintf("%v", pp.PenaltySaved))
	builder.WriteByte(')')
	return builder.String()
}

// PSPenalties is a parsable slice of PSPenalty.
type PSPenalties []*PSPenalty
