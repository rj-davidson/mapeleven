// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgames"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSGamesCreate is the builder for creating a PSGames entity.
type PSGamesCreate struct {
	config
	mutation *PSGamesMutation
	hooks    []Hook
}

// SetAppearances sets the "Appearances" field.
func (pgc *PSGamesCreate) SetAppearances(i int) *PSGamesCreate {
	pgc.mutation.SetAppearances(i)
	return pgc
}

// SetLineups sets the "Lineups" field.
func (pgc *PSGamesCreate) SetLineups(i int) *PSGamesCreate {
	pgc.mutation.SetLineups(i)
	return pgc
}

// SetMinutes sets the "Minutes" field.
func (pgc *PSGamesCreate) SetMinutes(i int) *PSGamesCreate {
	pgc.mutation.SetMinutes(i)
	return pgc
}

// SetNumber sets the "Number" field.
func (pgc *PSGamesCreate) SetNumber(i int) *PSGamesCreate {
	pgc.mutation.SetNumber(i)
	return pgc
}

// SetNillableNumber sets the "Number" field if the given value is not nil.
func (pgc *PSGamesCreate) SetNillableNumber(i *int) *PSGamesCreate {
	if i != nil {
		pgc.SetNumber(*i)
	}
	return pgc
}

// SetPosition sets the "Position" field.
func (pgc *PSGamesCreate) SetPosition(s string) *PSGamesCreate {
	pgc.mutation.SetPosition(s)
	return pgc
}

// SetNillablePosition sets the "Position" field if the given value is not nil.
func (pgc *PSGamesCreate) SetNillablePosition(s *string) *PSGamesCreate {
	if s != nil {
		pgc.SetPosition(*s)
	}
	return pgc
}

// SetRating sets the "Rating" field.
func (pgc *PSGamesCreate) SetRating(s string) *PSGamesCreate {
	pgc.mutation.SetRating(s)
	return pgc
}

// SetNillableRating sets the "Rating" field if the given value is not nil.
func (pgc *PSGamesCreate) SetNillableRating(s *string) *PSGamesCreate {
	if s != nil {
		pgc.SetRating(*s)
	}
	return pgc
}

// SetCaptain sets the "Captain" field.
func (pgc *PSGamesCreate) SetCaptain(b bool) *PSGamesCreate {
	pgc.mutation.SetCaptain(b)
	return pgc
}

// SetNillableCaptain sets the "Captain" field if the given value is not nil.
func (pgc *PSGamesCreate) SetNillableCaptain(b *bool) *PSGamesCreate {
	if b != nil {
		pgc.SetCaptain(*b)
	}
	return pgc
}

// SetLastUpdated sets the "lastUpdated" field.
func (pgc *PSGamesCreate) SetLastUpdated(t time.Time) *PSGamesCreate {
	pgc.mutation.SetLastUpdated(t)
	return pgc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (pgc *PSGamesCreate) SetNillableLastUpdated(t *time.Time) *PSGamesCreate {
	if t != nil {
		pgc.SetLastUpdated(*t)
	}
	return pgc
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (pgc *PSGamesCreate) SetPlayerStatsID(id int) *PSGamesCreate {
	pgc.mutation.SetPlayerStatsID(id)
	return pgc
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (pgc *PSGamesCreate) SetNillablePlayerStatsID(id *int) *PSGamesCreate {
	if id != nil {
		pgc = pgc.SetPlayerStatsID(*id)
	}
	return pgc
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (pgc *PSGamesCreate) SetPlayerStats(p *PlayerStats) *PSGamesCreate {
	return pgc.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSGamesMutation object of the builder.
func (pgc *PSGamesCreate) Mutation() *PSGamesMutation {
	return pgc.mutation
}

// Save creates the PSGames in the database.
func (pgc *PSGamesCreate) Save(ctx context.Context) (*PSGames, error) {
	pgc.defaults()
	return withHooks(ctx, pgc.sqlSave, pgc.mutation, pgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pgc *PSGamesCreate) SaveX(ctx context.Context) *PSGames {
	v, err := pgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgc *PSGamesCreate) Exec(ctx context.Context) error {
	_, err := pgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgc *PSGamesCreate) ExecX(ctx context.Context) {
	if err := pgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgc *PSGamesCreate) defaults() {
	if _, ok := pgc.mutation.Number(); !ok {
		v := psgames.DefaultNumber
		pgc.mutation.SetNumber(v)
	}
	if _, ok := pgc.mutation.Position(); !ok {
		v := psgames.DefaultPosition
		pgc.mutation.SetPosition(v)
	}
	if _, ok := pgc.mutation.Rating(); !ok {
		v := psgames.DefaultRating
		pgc.mutation.SetRating(v)
	}
	if _, ok := pgc.mutation.Captain(); !ok {
		v := psgames.DefaultCaptain
		pgc.mutation.SetCaptain(v)
	}
	if _, ok := pgc.mutation.LastUpdated(); !ok {
		v := psgames.DefaultLastUpdated()
		pgc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgc *PSGamesCreate) check() error {
	if _, ok := pgc.mutation.Appearances(); !ok {
		return &ValidationError{Name: "Appearances", err: errors.New(`ent: missing required field "PSGames.Appearances"`)}
	}
	if _, ok := pgc.mutation.Lineups(); !ok {
		return &ValidationError{Name: "Lineups", err: errors.New(`ent: missing required field "PSGames.Lineups"`)}
	}
	if _, ok := pgc.mutation.Minutes(); !ok {
		return &ValidationError{Name: "Minutes", err: errors.New(`ent: missing required field "PSGames.Minutes"`)}
	}
	if _, ok := pgc.mutation.Number(); !ok {
		return &ValidationError{Name: "Number", err: errors.New(`ent: missing required field "PSGames.Number"`)}
	}
	if _, ok := pgc.mutation.Position(); !ok {
		return &ValidationError{Name: "Position", err: errors.New(`ent: missing required field "PSGames.Position"`)}
	}
	if _, ok := pgc.mutation.Rating(); !ok {
		return &ValidationError{Name: "Rating", err: errors.New(`ent: missing required field "PSGames.Rating"`)}
	}
	if _, ok := pgc.mutation.Captain(); !ok {
		return &ValidationError{Name: "Captain", err: errors.New(`ent: missing required field "PSGames.Captain"`)}
	}
	return nil
}

func (pgc *PSGamesCreate) sqlSave(ctx context.Context) (*PSGames, error) {
	if err := pgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pgc.mutation.id = &_node.ID
	pgc.mutation.done = true
	return _node, nil
}

func (pgc *PSGamesCreate) createSpec() (*PSGames, *sqlgraph.CreateSpec) {
	var (
		_node = &PSGames{config: pgc.config}
		_spec = sqlgraph.NewCreateSpec(psgames.Table, sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt))
	)
	if value, ok := pgc.mutation.Appearances(); ok {
		_spec.SetField(psgames.FieldAppearances, field.TypeInt, value)
		_node.Appearances = value
	}
	if value, ok := pgc.mutation.Lineups(); ok {
		_spec.SetField(psgames.FieldLineups, field.TypeInt, value)
		_node.Lineups = value
	}
	if value, ok := pgc.mutation.Minutes(); ok {
		_spec.SetField(psgames.FieldMinutes, field.TypeInt, value)
		_node.Minutes = value
	}
	if value, ok := pgc.mutation.Number(); ok {
		_spec.SetField(psgames.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := pgc.mutation.Position(); ok {
		_spec.SetField(psgames.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := pgc.mutation.Rating(); ok {
		_spec.SetField(psgames.FieldRating, field.TypeString, value)
		_node.Rating = value
	}
	if value, ok := pgc.mutation.Captain(); ok {
		_spec.SetField(psgames.FieldCaptain, field.TypeBool, value)
		_node.Captain = value
	}
	if value, ok := pgc.mutation.LastUpdated(); ok {
		_spec.SetField(psgames.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := pgc.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   psgames.PlayerStatsTable,
			Columns: []string{psgames.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_stats_ps_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PSGamesCreateBulk is the builder for creating many PSGames entities in bulk.
type PSGamesCreateBulk struct {
	config
	err      error
	builders []*PSGamesCreate
}

// Save creates the PSGames entities in the database.
func (pgcb *PSGamesCreateBulk) Save(ctx context.Context) ([]*PSGames, error) {
	if pgcb.err != nil {
		return nil, pgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pgcb.builders))
	nodes := make([]*PSGames, len(pgcb.builders))
	mutators := make([]Mutator, len(pgcb.builders))
	for i := range pgcb.builders {
		func(i int, root context.Context) {
			builder := pgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PSGamesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgcb *PSGamesCreateBulk) SaveX(ctx context.Context) []*PSGames {
	v, err := pgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgcb *PSGamesCreateBulk) Exec(ctx context.Context) error {
	_, err := pgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgcb *PSGamesCreateBulk) ExecX(ctx context.Context) {
	if err := pgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
