// Code generated by ent, DO NOT EDIT.

package tspenalty

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tspenalty type in the database.
	Label = "ts_penalty"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldScoredTotal holds the string denoting the scoredtotal field in the database.
	FieldScoredTotal = "scored_total"
	// FieldMissedTotal holds the string denoting the missedtotal field in the database.
	FieldMissedTotal = "missed_total"
	// FieldScoredPercentage holds the string denoting the scoredpercentage field in the database.
	FieldScoredPercentage = "scored_percentage"
	// FieldMissedPercentage holds the string denoting the missedpercentage field in the database.
	FieldMissedPercentage = "missed_percentage"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the tspenalty in the database.
	Table = "ts_penalties"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "ts_penalties"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_penalty_stats"
)

// Columns holds all SQL columns for tspenalty fields.
var Columns = []string{
	FieldID,
	FieldTotal,
	FieldScoredTotal,
	FieldMissedTotal,
	FieldScoredPercentage,
	FieldMissedPercentage,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ts_penalties"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_penalty_stats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal int
	// DefaultScoredTotal holds the default value on creation for the "scoredTotal" field.
	DefaultScoredTotal int
	// DefaultMissedTotal holds the default value on creation for the "missedTotal" field.
	DefaultMissedTotal int
	// DefaultScoredPercentage holds the default value on creation for the "scoredPercentage" field.
	DefaultScoredPercentage string
	// DefaultMissedPercentage holds the default value on creation for the "missedPercentage" field.
	DefaultMissedPercentage string
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the TSPenalty queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByScoredTotal orders the results by the scoredTotal field.
func ByScoredTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScoredTotal, opts...).ToFunc()
}

// ByMissedTotal orders the results by the missedTotal field.
func ByMissedTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissedTotal, opts...).ToFunc()
}

// ByScoredPercentage orders the results by the scoredPercentage field.
func ByScoredPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScoredPercentage, opts...).ToFunc()
}

// ByMissedPercentage orders the results by the missedPercentage field.
func ByMissedPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissedPercentage, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TeamTable, TeamColumn),
	)
}
