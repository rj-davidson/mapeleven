// Code generated by ent, DO NOT EDIT.

package pspenalty

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pspenalty type in the database.
	Label = "ps_penalty"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFoulsDrawn holds the string denoting the foulsdrawn field in the database.
	FieldFoulsDrawn = "fouls_drawn"
	// FieldFoulsCommitted holds the string denoting the foulscommitted field in the database.
	FieldFoulsCommitted = "fouls_committed"
	// FieldCardsYellow holds the string denoting the cardsyellow field in the database.
	FieldCardsYellow = "cards_yellow"
	// FieldCardYellowred holds the string denoting the cardyellowred field in the database.
	FieldCardYellowred = "card_yellowred"
	// FieldCardsRed holds the string denoting the cardsred field in the database.
	FieldCardsRed = "cards_red"
	// FieldPenaltyWon holds the string denoting the penaltywon field in the database.
	FieldPenaltyWon = "penalty_won"
	// FieldPenaltyCommited holds the string denoting the penaltycommited field in the database.
	FieldPenaltyCommited = "penalty_commited"
	// FieldPenaltyScored holds the string denoting the penaltyscored field in the database.
	FieldPenaltyScored = "penalty_scored"
	// FieldPenaltyMissed holds the string denoting the penaltymissed field in the database.
	FieldPenaltyMissed = "penalty_missed"
	// FieldPenaltySaved holds the string denoting the penaltysaved field in the database.
	FieldPenaltySaved = "penalty_saved"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the pspenalty in the database.
	Table = "ps_penalties"
	// PlayerStatsTable is the table that holds the playerStats relation/edge. The primary key declared below.
	PlayerStatsTable = "player_stats_pspenalty"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
)

// Columns holds all SQL columns for pspenalty fields.
var Columns = []string{
	FieldID,
	FieldFoulsDrawn,
	FieldFoulsCommitted,
	FieldCardsYellow,
	FieldCardYellowred,
	FieldCardsRed,
	FieldPenaltyWon,
	FieldPenaltyCommited,
	FieldPenaltyScored,
	FieldPenaltyMissed,
	FieldPenaltySaved,
}

var (
	// PlayerStatsPrimaryKey and PlayerStatsColumn2 are the table columns denoting the
	// primary key for the playerStats relation (M2M).
	PlayerStatsPrimaryKey = []string{"player_stats_id", "ps_penalty_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPenaltyWon holds the default value on creation for the "penaltyWon" field.
	DefaultPenaltyWon int
	// DefaultPenaltyCommited holds the default value on creation for the "penaltyCommited" field.
	DefaultPenaltyCommited int
	// DefaultPenaltyScored holds the default value on creation for the "penaltyScored" field.
	DefaultPenaltyScored int
	// DefaultPenaltySaved holds the default value on creation for the "penaltySaved" field.
	DefaultPenaltySaved int
)

// OrderOption defines the ordering options for the PSPenalty queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFoulsDrawn orders the results by the foulsDrawn field.
func ByFoulsDrawn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFoulsDrawn, opts...).ToFunc()
}

// ByFoulsCommitted orders the results by the foulsCommitted field.
func ByFoulsCommitted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFoulsCommitted, opts...).ToFunc()
}

// ByCardsYellow orders the results by the cardsYellow field.
func ByCardsYellow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardsYellow, opts...).ToFunc()
}

// ByCardYellowred orders the results by the cardYellowred field.
func ByCardYellowred(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardYellowred, opts...).ToFunc()
}

// ByCardsRed orders the results by the cardsRed field.
func ByCardsRed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardsRed, opts...).ToFunc()
}

// ByPenaltyWon orders the results by the penaltyWon field.
func ByPenaltyWon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPenaltyWon, opts...).ToFunc()
}

// ByPenaltyCommited orders the results by the penaltyCommited field.
func ByPenaltyCommited(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPenaltyCommited, opts...).ToFunc()
}

// ByPenaltyScored orders the results by the penaltyScored field.
func ByPenaltyScored(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPenaltyScored, opts...).ToFunc()
}

// ByPenaltyMissed orders the results by the penaltyMissed field.
func ByPenaltyMissed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPenaltyMissed, opts...).ToFunc()
}

// ByPenaltySaved orders the results by the penaltySaved field.
func ByPenaltySaved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPenaltySaved, opts...).ToFunc()
}

// ByPlayerStatsCount orders the results by playerStats count.
func ByPlayerStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerStatsStep(), opts...)
	}
}

// ByPlayerStats orders the results by playerStats terms.
func ByPlayerStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PlayerStatsTable, PlayerStatsPrimaryKey...),
	)
}
