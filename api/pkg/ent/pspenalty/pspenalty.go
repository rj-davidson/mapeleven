// Code generated by ent, DO NOT EDIT.

package pspenalty

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pspenalty type in the database.
	Label = "ps_penalty"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWon holds the string denoting the won field in the database.
	FieldWon = "won"
	// FieldScored holds the string denoting the scored field in the database.
	FieldScored = "scored"
	// FieldMissed holds the string denoting the missed field in the database.
	FieldMissed = "missed"
	// FieldSaved holds the string denoting the saved field in the database.
	FieldSaved = "saved"
	// FieldCommitted holds the string denoting the committed field in the database.
	FieldCommitted = "committed"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the pspenalty in the database.
	Table = "ps_penalties"
	// PlayerStatsTable is the table that holds the playerStats relation/edge.
	PlayerStatsTable = "ps_penalties"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
	// PlayerStatsColumn is the table column denoting the playerStats relation/edge.
	PlayerStatsColumn = "player_stats_ps_penalty"
)

// Columns holds all SQL columns for pspenalty fields.
var Columns = []string{
	FieldID,
	FieldWon,
	FieldScored,
	FieldMissed,
	FieldSaved,
	FieldCommitted,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_penalties"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_stats_ps_penalty",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultWon holds the default value on creation for the "Won" field.
	DefaultWon int
	// DefaultScored holds the default value on creation for the "Scored" field.
	DefaultScored int
	// DefaultMissed holds the default value on creation for the "Missed" field.
	DefaultMissed int
	// DefaultSaved holds the default value on creation for the "Saved" field.
	DefaultSaved int
	// DefaultCommitted holds the default value on creation for the "Committed" field.
	DefaultCommitted int
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the PSPenalty queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWon orders the results by the Won field.
func ByWon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWon, opts...).ToFunc()
}

// ByScored orders the results by the Scored field.
func ByScored(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScored, opts...).ToFunc()
}

// ByMissed orders the results by the Missed field.
func ByMissed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissed, opts...).ToFunc()
}

// BySaved orders the results by the Saved field.
func BySaved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSaved, opts...).ToFunc()
}

// ByCommitted orders the results by the Committed field.
func ByCommitted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitted, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerStatsField orders the results by playerStats field.
func ByPlayerStatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerStatsTable, PlayerStatsColumn),
	)
}
