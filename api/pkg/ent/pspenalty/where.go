// Code generated by ent, DO NOT EDIT.

package pspenalty

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLTE(FieldID, id))
}

// Won applies equality check predicate on the "Won" field. It's identical to WonEQ.
func Won(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldWon, v))
}

// Scored applies equality check predicate on the "Scored" field. It's identical to ScoredEQ.
func Scored(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldScored, v))
}

// Missed applies equality check predicate on the "Missed" field. It's identical to MissedEQ.
func Missed(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldMissed, v))
}

// Saved applies equality check predicate on the "Saved" field. It's identical to SavedEQ.
func Saved(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldSaved, v))
}

// Committed applies equality check predicate on the "Committed" field. It's identical to CommittedEQ.
func Committed(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldCommitted, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldLastUpdated, v))
}

// WonEQ applies the EQ predicate on the "Won" field.
func WonEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldWon, v))
}

// WonNEQ applies the NEQ predicate on the "Won" field.
func WonNEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNEQ(FieldWon, v))
}

// WonIn applies the In predicate on the "Won" field.
func WonIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIn(FieldWon, vs...))
}

// WonNotIn applies the NotIn predicate on the "Won" field.
func WonNotIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotIn(FieldWon, vs...))
}

// WonGT applies the GT predicate on the "Won" field.
func WonGT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGT(FieldWon, v))
}

// WonGTE applies the GTE predicate on the "Won" field.
func WonGTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGTE(FieldWon, v))
}

// WonLT applies the LT predicate on the "Won" field.
func WonLT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLT(FieldWon, v))
}

// WonLTE applies the LTE predicate on the "Won" field.
func WonLTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLTE(FieldWon, v))
}

// ScoredEQ applies the EQ predicate on the "Scored" field.
func ScoredEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldScored, v))
}

// ScoredNEQ applies the NEQ predicate on the "Scored" field.
func ScoredNEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNEQ(FieldScored, v))
}

// ScoredIn applies the In predicate on the "Scored" field.
func ScoredIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIn(FieldScored, vs...))
}

// ScoredNotIn applies the NotIn predicate on the "Scored" field.
func ScoredNotIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotIn(FieldScored, vs...))
}

// ScoredGT applies the GT predicate on the "Scored" field.
func ScoredGT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGT(FieldScored, v))
}

// ScoredGTE applies the GTE predicate on the "Scored" field.
func ScoredGTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGTE(FieldScored, v))
}

// ScoredLT applies the LT predicate on the "Scored" field.
func ScoredLT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLT(FieldScored, v))
}

// ScoredLTE applies the LTE predicate on the "Scored" field.
func ScoredLTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLTE(FieldScored, v))
}

// MissedEQ applies the EQ predicate on the "Missed" field.
func MissedEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldMissed, v))
}

// MissedNEQ applies the NEQ predicate on the "Missed" field.
func MissedNEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNEQ(FieldMissed, v))
}

// MissedIn applies the In predicate on the "Missed" field.
func MissedIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIn(FieldMissed, vs...))
}

// MissedNotIn applies the NotIn predicate on the "Missed" field.
func MissedNotIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotIn(FieldMissed, vs...))
}

// MissedGT applies the GT predicate on the "Missed" field.
func MissedGT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGT(FieldMissed, v))
}

// MissedGTE applies the GTE predicate on the "Missed" field.
func MissedGTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGTE(FieldMissed, v))
}

// MissedLT applies the LT predicate on the "Missed" field.
func MissedLT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLT(FieldMissed, v))
}

// MissedLTE applies the LTE predicate on the "Missed" field.
func MissedLTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLTE(FieldMissed, v))
}

// SavedEQ applies the EQ predicate on the "Saved" field.
func SavedEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldSaved, v))
}

// SavedNEQ applies the NEQ predicate on the "Saved" field.
func SavedNEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNEQ(FieldSaved, v))
}

// SavedIn applies the In predicate on the "Saved" field.
func SavedIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIn(FieldSaved, vs...))
}

// SavedNotIn applies the NotIn predicate on the "Saved" field.
func SavedNotIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotIn(FieldSaved, vs...))
}

// SavedGT applies the GT predicate on the "Saved" field.
func SavedGT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGT(FieldSaved, v))
}

// SavedGTE applies the GTE predicate on the "Saved" field.
func SavedGTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGTE(FieldSaved, v))
}

// SavedLT applies the LT predicate on the "Saved" field.
func SavedLT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLT(FieldSaved, v))
}

// SavedLTE applies the LTE predicate on the "Saved" field.
func SavedLTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLTE(FieldSaved, v))
}

// CommittedEQ applies the EQ predicate on the "Committed" field.
func CommittedEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldCommitted, v))
}

// CommittedNEQ applies the NEQ predicate on the "Committed" field.
func CommittedNEQ(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNEQ(FieldCommitted, v))
}

// CommittedIn applies the In predicate on the "Committed" field.
func CommittedIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIn(FieldCommitted, vs...))
}

// CommittedNotIn applies the NotIn predicate on the "Committed" field.
func CommittedNotIn(vs ...int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotIn(FieldCommitted, vs...))
}

// CommittedGT applies the GT predicate on the "Committed" field.
func CommittedGT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGT(FieldCommitted, v))
}

// CommittedGTE applies the GTE predicate on the "Committed" field.
func CommittedGTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGTE(FieldCommitted, v))
}

// CommittedLT applies the LT predicate on the "Committed" field.
func CommittedLT(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLT(FieldCommitted, v))
}

// CommittedLTE applies the LTE predicate on the "Committed" field.
func CommittedLTE(v int) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLTE(FieldCommitted, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.PSPenalty {
	return predicate.PSPenalty(sql.FieldNotNull(FieldLastUpdated))
}

// HasPlayerStats applies the HasEdge predicate on the "playerStats" edge.
func HasPlayerStats() predicate.PSPenalty {
	return predicate.PSPenalty(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerStatsTable, PlayerStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatsWith applies the HasEdge predicate on the "playerStats" edge with a given conditions (other predicates).
func HasPlayerStatsWith(preds ...predicate.PlayerStats) predicate.PSPenalty {
	return predicate.PSPenalty(func(s *sql.Selector) {
		step := newPlayerStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PSPenalty) predicate.PSPenalty {
	return predicate.PSPenalty(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PSPenalty) predicate.PSPenalty {
	return predicate.PSPenalty(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PSPenalty) predicate.PSPenalty {
	return predicate.PSPenalty(sql.NotPredicates(p))
}
