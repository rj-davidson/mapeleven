// Code generated by ent, DO NOT EDIT.

package pstechnical

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pstechnical type in the database.
	Label = "ps_technical"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFoulsDrawn holds the string denoting the foulsdrawn field in the database.
	FieldFoulsDrawn = "fouls_drawn"
	// FieldDribbleAttempts holds the string denoting the dribbleattempts field in the database.
	FieldDribbleAttempts = "dribble_attempts"
	// FieldDribbleSuccess holds the string denoting the dribblesuccess field in the database.
	FieldDribbleSuccess = "dribble_success"
	// FieldDribblePast holds the string denoting the dribblepast field in the database.
	FieldDribblePast = "dribble_past"
	// FieldPassesTotal holds the string denoting the passestotal field in the database.
	FieldPassesTotal = "passes_total"
	// FieldPassesKey holds the string denoting the passeskey field in the database.
	FieldPassesKey = "passes_key"
	// FieldPassesAccuracy holds the string denoting the passesaccuracy field in the database.
	FieldPassesAccuracy = "passes_accuracy"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the pstechnical in the database.
	Table = "ps_technicals"
	// PlayerStatsTable is the table that holds the playerStats relation/edge.
	PlayerStatsTable = "ps_technicals"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
	// PlayerStatsColumn is the table column denoting the playerStats relation/edge.
	PlayerStatsColumn = "player_stats_ps_technical"
)

// Columns holds all SQL columns for pstechnical fields.
var Columns = []string{
	FieldID,
	FieldFoulsDrawn,
	FieldDribbleAttempts,
	FieldDribbleSuccess,
	FieldDribblePast,
	FieldPassesTotal,
	FieldPassesKey,
	FieldPassesAccuracy,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_technicals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_stats_ps_technical",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDribblePast holds the default value on creation for the "DribblePast" field.
	DefaultDribblePast int
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the PSTechnical queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFoulsDrawn orders the results by the FoulsDrawn field.
func ByFoulsDrawn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFoulsDrawn, opts...).ToFunc()
}

// ByDribbleAttempts orders the results by the DribbleAttempts field.
func ByDribbleAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribbleAttempts, opts...).ToFunc()
}

// ByDribbleSuccess orders the results by the DribbleSuccess field.
func ByDribbleSuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribbleSuccess, opts...).ToFunc()
}

// ByDribblePast orders the results by the DribblePast field.
func ByDribblePast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribblePast, opts...).ToFunc()
}

// ByPassesTotal orders the results by the PassesTotal field.
func ByPassesTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesTotal, opts...).ToFunc()
}

// ByPassesKey orders the results by the PassesKey field.
func ByPassesKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesKey, opts...).ToFunc()
}

// ByPassesAccuracy orders the results by the PassesAccuracy field.
func ByPassesAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesAccuracy, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerStatsField orders the results by playerStats field.
func ByPlayerStatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerStatsTable, PlayerStatsColumn),
	)
}
