// Code generated by ent, DO NOT EDIT.

package tsbiggest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tsbiggest type in the database.
	Label = "ts_biggest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStreakWins holds the string denoting the streakwins field in the database.
	FieldStreakWins = "streak_wins"
	// FieldStreakLosses holds the string denoting the streaklosses field in the database.
	FieldStreakLosses = "streak_losses"
	// FieldStreakDraws holds the string denoting the streakdraws field in the database.
	FieldStreakDraws = "streak_draws"
	// FieldWinsHome holds the string denoting the winshome field in the database.
	FieldWinsHome = "wins_home"
	// FieldWinsAway holds the string denoting the winsaway field in the database.
	FieldWinsAway = "wins_away"
	// FieldLossesHome holds the string denoting the losseshome field in the database.
	FieldLossesHome = "losses_home"
	// FieldLossesAway holds the string denoting the lossesaway field in the database.
	FieldLossesAway = "losses_away"
	// FieldGoalsForHome holds the string denoting the goalsforhome field in the database.
	FieldGoalsForHome = "goals_for_home"
	// FieldGoalsForAway holds the string denoting the goalsforaway field in the database.
	FieldGoalsForAway = "goals_for_away"
	// FieldGoalsAgainstHome holds the string denoting the goalsagainsthome field in the database.
	FieldGoalsAgainstHome = "goals_against_home"
	// FieldGoalsAgainstAway holds the string denoting the goalsagainstaway field in the database.
	FieldGoalsAgainstAway = "goals_against_away"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the tsbiggest in the database.
	Table = "ts_biggests"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "ts_biggests"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_biggest_stats"
)

// Columns holds all SQL columns for tsbiggest fields.
var Columns = []string{
	FieldID,
	FieldStreakWins,
	FieldStreakLosses,
	FieldStreakDraws,
	FieldWinsHome,
	FieldWinsAway,
	FieldLossesHome,
	FieldLossesAway,
	FieldGoalsForHome,
	FieldGoalsForAway,
	FieldGoalsAgainstHome,
	FieldGoalsAgainstAway,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ts_biggests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_biggest_stats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the TSBiggest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStreakWins orders the results by the streakWins field.
func ByStreakWins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreakWins, opts...).ToFunc()
}

// ByStreakLosses orders the results by the streakLosses field.
func ByStreakLosses(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreakLosses, opts...).ToFunc()
}

// ByStreakDraws orders the results by the streakDraws field.
func ByStreakDraws(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreakDraws, opts...).ToFunc()
}

// ByWinsHome orders the results by the winsHome field.
func ByWinsHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWinsHome, opts...).ToFunc()
}

// ByWinsAway orders the results by the winsAway field.
func ByWinsAway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWinsAway, opts...).ToFunc()
}

// ByLossesHome orders the results by the lossesHome field.
func ByLossesHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLossesHome, opts...).ToFunc()
}

// ByLossesAway orders the results by the lossesAway field.
func ByLossesAway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLossesAway, opts...).ToFunc()
}

// ByGoalsForHome orders the results by the goalsForHome field.
func ByGoalsForHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoalsForHome, opts...).ToFunc()
}

// ByGoalsForAway orders the results by the goalsForAway field.
func ByGoalsForAway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoalsForAway, opts...).ToFunc()
}

// ByGoalsAgainstHome orders the results by the goalsAgainstHome field.
func ByGoalsAgainstHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoalsAgainstHome, opts...).ToFunc()
}

// ByGoalsAgainstAway orders the results by the goalsAgainstAway field.
func ByGoalsAgainstAway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoalsAgainstAway, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TeamTable, TeamColumn),
	)
}
