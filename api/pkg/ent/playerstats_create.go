// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/matchplayer"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psdefense"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psfairplay"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgames"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psshooting"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pssubstitutes"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pstechnical"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/season"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerStatsCreate is the builder for creating a PlayerStats entity.
type PlayerStatsCreate struct {
	config
	mutation *PlayerStatsMutation
	hooks    []Hook
}

// SetLastUpdated sets the "lastUpdated" field.
func (psc *PlayerStatsCreate) SetLastUpdated(t time.Time) *PlayerStatsCreate {
	psc.mutation.SetLastUpdated(t)
	return psc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillableLastUpdated(t *time.Time) *PlayerStatsCreate {
	if t != nil {
		psc.SetLastUpdated(*t)
	}
	return psc
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (psc *PlayerStatsCreate) SetPlayerID(id int) *PlayerStatsCreate {
	psc.mutation.SetPlayerID(id)
	return psc
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePlayerID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPlayerID(*id)
	}
	return psc
}

// SetPlayer sets the "player" edge to the Player entity.
func (psc *PlayerStatsCreate) SetPlayer(p *Player) *PlayerStatsCreate {
	return psc.SetPlayerID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (psc *PlayerStatsCreate) SetTeamID(id int) *PlayerStatsCreate {
	psc.mutation.SetTeamID(id)
	return psc
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillableTeamID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetTeamID(*id)
	}
	return psc
}

// SetTeam sets the "team" edge to the Team entity.
func (psc *PlayerStatsCreate) SetTeam(t *Team) *PlayerStatsCreate {
	return psc.SetTeamID(t.ID)
}

// AddSeasonIDs adds the "season" edge to the Season entity by IDs.
func (psc *PlayerStatsCreate) AddSeasonIDs(ids ...int) *PlayerStatsCreate {
	psc.mutation.AddSeasonIDs(ids...)
	return psc
}

// AddSeason adds the "season" edges to the Season entity.
func (psc *PlayerStatsCreate) AddSeason(s ...*Season) *PlayerStatsCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psc.AddSeasonIDs(ids...)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (psc *PlayerStatsCreate) AddPlayerEventIDs(ids ...int) *PlayerStatsCreate {
	psc.mutation.AddPlayerEventIDs(ids...)
	return psc
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (psc *PlayerStatsCreate) AddPlayerEvents(f ...*FixtureEvents) *PlayerStatsCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psc.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (psc *PlayerStatsCreate) AddMatchPlayerIDs(ids ...int) *PlayerStatsCreate {
	psc.mutation.AddMatchPlayerIDs(ids...)
	return psc
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (psc *PlayerStatsCreate) AddMatchPlayer(m ...*MatchPlayer) *PlayerStatsCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return psc.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (psc *PlayerStatsCreate) AddAssistEventIDs(ids ...int) *PlayerStatsCreate {
	psc.mutation.AddAssistEventIDs(ids...)
	return psc
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (psc *PlayerStatsCreate) AddAssistEvents(f ...*FixtureEvents) *PlayerStatsCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psc.AddAssistEventIDs(ids...)
}

// SetPsGamesID sets the "psGames" edge to the PSGames entity by ID.
func (psc *PlayerStatsCreate) SetPsGamesID(id int) *PlayerStatsCreate {
	psc.mutation.SetPsGamesID(id)
	return psc
}

// SetNillablePsGamesID sets the "psGames" edge to the PSGames entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePsGamesID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPsGamesID(*id)
	}
	return psc
}

// SetPsGames sets the "psGames" edge to the PSGames entity.
func (psc *PlayerStatsCreate) SetPsGames(p *PSGames) *PlayerStatsCreate {
	return psc.SetPsGamesID(p.ID)
}

// SetPsShootingID sets the "psShooting" edge to the PSShooting entity by ID.
func (psc *PlayerStatsCreate) SetPsShootingID(id int) *PlayerStatsCreate {
	psc.mutation.SetPsShootingID(id)
	return psc
}

// SetNillablePsShootingID sets the "psShooting" edge to the PSShooting entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePsShootingID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPsShootingID(*id)
	}
	return psc
}

// SetPsShooting sets the "psShooting" edge to the PSShooting entity.
func (psc *PlayerStatsCreate) SetPsShooting(p *PSShooting) *PlayerStatsCreate {
	return psc.SetPsShootingID(p.ID)
}

// SetPsDefenseID sets the "psDefense" edge to the PSDefense entity by ID.
func (psc *PlayerStatsCreate) SetPsDefenseID(id int) *PlayerStatsCreate {
	psc.mutation.SetPsDefenseID(id)
	return psc
}

// SetNillablePsDefenseID sets the "psDefense" edge to the PSDefense entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePsDefenseID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPsDefenseID(*id)
	}
	return psc
}

// SetPsDefense sets the "psDefense" edge to the PSDefense entity.
func (psc *PlayerStatsCreate) SetPsDefense(p *PSDefense) *PlayerStatsCreate {
	return psc.SetPsDefenseID(p.ID)
}

// SetPsTechnicalID sets the "psTechnical" edge to the PSTechnical entity by ID.
func (psc *PlayerStatsCreate) SetPsTechnicalID(id int) *PlayerStatsCreate {
	psc.mutation.SetPsTechnicalID(id)
	return psc
}

// SetNillablePsTechnicalID sets the "psTechnical" edge to the PSTechnical entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePsTechnicalID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPsTechnicalID(*id)
	}
	return psc
}

// SetPsTechnical sets the "psTechnical" edge to the PSTechnical entity.
func (psc *PlayerStatsCreate) SetPsTechnical(p *PSTechnical) *PlayerStatsCreate {
	return psc.SetPsTechnicalID(p.ID)
}

// SetPsPenaltyID sets the "psPenalty" edge to the PSPenalty entity by ID.
func (psc *PlayerStatsCreate) SetPsPenaltyID(id int) *PlayerStatsCreate {
	psc.mutation.SetPsPenaltyID(id)
	return psc
}

// SetNillablePsPenaltyID sets the "psPenalty" edge to the PSPenalty entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePsPenaltyID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPsPenaltyID(*id)
	}
	return psc
}

// SetPsPenalty sets the "psPenalty" edge to the PSPenalty entity.
func (psc *PlayerStatsCreate) SetPsPenalty(p *PSPenalty) *PlayerStatsCreate {
	return psc.SetPsPenaltyID(p.ID)
}

// SetPsSubstitutesID sets the "psSubstitutes" edge to the PSSubstitutes entity by ID.
func (psc *PlayerStatsCreate) SetPsSubstitutesID(id int) *PlayerStatsCreate {
	psc.mutation.SetPsSubstitutesID(id)
	return psc
}

// SetNillablePsSubstitutesID sets the "psSubstitutes" edge to the PSSubstitutes entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePsSubstitutesID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPsSubstitutesID(*id)
	}
	return psc
}

// SetPsSubstitutes sets the "psSubstitutes" edge to the PSSubstitutes entity.
func (psc *PlayerStatsCreate) SetPsSubstitutes(p *PSSubstitutes) *PlayerStatsCreate {
	return psc.SetPsSubstitutesID(p.ID)
}

// SetPsFairplayID sets the "psFairplay" edge to the PSFairplay entity by ID.
func (psc *PlayerStatsCreate) SetPsFairplayID(id int) *PlayerStatsCreate {
	psc.mutation.SetPsFairplayID(id)
	return psc
}

// SetNillablePsFairplayID sets the "psFairplay" edge to the PSFairplay entity by ID if the given value is not nil.
func (psc *PlayerStatsCreate) SetNillablePsFairplayID(id *int) *PlayerStatsCreate {
	if id != nil {
		psc = psc.SetPsFairplayID(*id)
	}
	return psc
}

// SetPsFairplay sets the "psFairplay" edge to the PSFairplay entity.
func (psc *PlayerStatsCreate) SetPsFairplay(p *PSFairplay) *PlayerStatsCreate {
	return psc.SetPsFairplayID(p.ID)
}

// Mutation returns the PlayerStatsMutation object of the builder.
func (psc *PlayerStatsCreate) Mutation() *PlayerStatsMutation {
	return psc.mutation
}

// Save creates the PlayerStats in the database.
func (psc *PlayerStatsCreate) Save(ctx context.Context) (*PlayerStats, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PlayerStatsCreate) SaveX(ctx context.Context) *PlayerStats {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PlayerStatsCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PlayerStatsCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PlayerStatsCreate) defaults() {
	if _, ok := psc.mutation.LastUpdated(); !ok {
		v := playerstats.DefaultLastUpdated()
		psc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PlayerStatsCreate) check() error {
	return nil
}

func (psc *PlayerStatsCreate) sqlSave(ctx context.Context) (*PlayerStats, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PlayerStatsCreate) createSpec() (*PlayerStats, *sqlgraph.CreateSpec) {
	var (
		_node = &PlayerStats{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(playerstats.Table, sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt))
	)
	if value, ok := psc.mutation.LastUpdated(); ok {
		_spec.SetField(playerstats.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := psc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.PlayerTable,
			Columns: []string{playerstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_player_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playerstats.TeamTable,
			Columns: []string{playerstats.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_player_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerstats.SeasonTable,
			Columns: playerstats.SeasonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.PlayerEventsTable,
			Columns: []string{playerstats.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.MatchPlayerTable,
			Columns: []string{playerstats.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playerstats.AssistEventsTable,
			Columns: []string{playerstats.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PsGamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playerstats.PsGamesTable,
			Columns: []string{playerstats.PsGamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PsShootingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playerstats.PsShootingTable,
			Columns: []string{playerstats.PsShootingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PsDefenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playerstats.PsDefenseTable,
			Columns: []string{playerstats.PsDefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PsTechnicalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playerstats.PsTechnicalTable,
			Columns: []string{playerstats.PsTechnicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PsPenaltyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playerstats.PsPenaltyTable,
			Columns: []string{playerstats.PsPenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PsSubstitutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playerstats.PsSubstitutesTable,
			Columns: []string{playerstats.PsSubstitutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PsFairplayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playerstats.PsFairplayTable,
			Columns: []string{playerstats.PsFairplayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerStatsCreateBulk is the builder for creating many PlayerStats entities in bulk.
type PlayerStatsCreateBulk struct {
	config
	err      error
	builders []*PlayerStatsCreate
}

// Save creates the PlayerStats entities in the database.
func (pscb *PlayerStatsCreateBulk) Save(ctx context.Context) ([]*PlayerStats, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PlayerStats, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PlayerStatsCreateBulk) SaveX(ctx context.Context) []*PlayerStats {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PlayerStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PlayerStatsCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
