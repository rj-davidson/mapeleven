// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixture"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FixtureEvents is the model entity for the FixtureEvents schema.
type FixtureEvents struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ElapsedTime holds the value of the "elapsedTime" field.
	ElapsedTime int `json:"elapsedTime,omitempty"`
	// ExtraTime holds the value of the "extraTime" field.
	ExtraTime int `json:"extraTime,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FixtureEventsQuery when eager-loading is set.
	Edges                    FixtureEventsEdges `json:"edges"`
	fixture_fixture_events   *int
	player_player_events     *int
	player_assist_events     *int
	team_team_fixture_events *int
	selectValues             sql.SelectValues
}

// FixtureEventsEdges holds the relations/edges for other nodes in the graph.
type FixtureEventsEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// Assist holds the value of the assist edge.
	Assist *Player `json:"assist,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// Fixture holds the value of the fixture edge.
	Fixture *Fixture `json:"fixture,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureEventsEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[0] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// AssistOrErr returns the Assist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureEventsEdges) AssistOrErr() (*Player, error) {
	if e.loadedTypes[1] {
		if e.Assist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Assist, nil
	}
	return nil, &NotLoadedError{edge: "assist"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureEventsEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[2] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// FixtureOrErr returns the Fixture value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixtureEventsEdges) FixtureOrErr() (*Fixture, error) {
	if e.loadedTypes[3] {
		if e.Fixture == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fixture.Label}
		}
		return e.Fixture, nil
	}
	return nil, &NotLoadedError{edge: "fixture"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FixtureEvents) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fixtureevents.FieldID, fixtureevents.FieldElapsedTime, fixtureevents.FieldExtraTime:
			values[i] = new(sql.NullInt64)
		case fixtureevents.FieldType, fixtureevents.FieldDetail, fixtureevents.FieldComments:
			values[i] = new(sql.NullString)
		case fixtureevents.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case fixtureevents.ForeignKeys[0]: // fixture_fixture_events
			values[i] = new(sql.NullInt64)
		case fixtureevents.ForeignKeys[1]: // player_player_events
			values[i] = new(sql.NullInt64)
		case fixtureevents.ForeignKeys[2]: // player_assist_events
			values[i] = new(sql.NullInt64)
		case fixtureevents.ForeignKeys[3]: // team_team_fixture_events
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FixtureEvents fields.
func (fe *FixtureEvents) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fixtureevents.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fe.ID = int(value.Int64)
		case fixtureevents.FieldElapsedTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field elapsedTime", values[i])
			} else if value.Valid {
				fe.ElapsedTime = int(value.Int64)
			}
		case fixtureevents.FieldExtraTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extraTime", values[i])
			} else if value.Valid {
				fe.ExtraTime = int(value.Int64)
			}
		case fixtureevents.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fe.Type = value.String
			}
		case fixtureevents.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				fe.Detail = value.String
			}
		case fixtureevents.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				fe.Comments = value.String
			}
		case fixtureevents.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				fe.LastUpdated = value.Time
			}
		case fixtureevents.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fixture_fixture_events", value)
			} else if value.Valid {
				fe.fixture_fixture_events = new(int)
				*fe.fixture_fixture_events = int(value.Int64)
			}
		case fixtureevents.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_player_events", value)
			} else if value.Valid {
				fe.player_player_events = new(int)
				*fe.player_player_events = int(value.Int64)
			}
		case fixtureevents.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_assist_events", value)
			} else if value.Valid {
				fe.player_assist_events = new(int)
				*fe.player_assist_events = int(value.Int64)
			}
		case fixtureevents.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_team_fixture_events", value)
			} else if value.Valid {
				fe.team_team_fixture_events = new(int)
				*fe.team_team_fixture_events = int(value.Int64)
			}
		default:
			fe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FixtureEvents.
// This includes values selected through modifiers, order, etc.
func (fe *FixtureEvents) Value(name string) (ent.Value, error) {
	return fe.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the FixtureEvents entity.
func (fe *FixtureEvents) QueryPlayer() *PlayerQuery {
	return NewFixtureEventsClient(fe.config).QueryPlayer(fe)
}

// QueryAssist queries the "assist" edge of the FixtureEvents entity.
func (fe *FixtureEvents) QueryAssist() *PlayerQuery {
	return NewFixtureEventsClient(fe.config).QueryAssist(fe)
}

// QueryTeam queries the "team" edge of the FixtureEvents entity.
func (fe *FixtureEvents) QueryTeam() *TeamQuery {
	return NewFixtureEventsClient(fe.config).QueryTeam(fe)
}

// QueryFixture queries the "fixture" edge of the FixtureEvents entity.
func (fe *FixtureEvents) QueryFixture() *FixtureQuery {
	return NewFixtureEventsClient(fe.config).QueryFixture(fe)
}

// Update returns a builder for updating this FixtureEvents.
// Note that you need to call FixtureEvents.Unwrap() before calling this method if this FixtureEvents
// was returned from a transaction, and the transaction was committed or rolled back.
func (fe *FixtureEvents) Update() *FixtureEventsUpdateOne {
	return NewFixtureEventsClient(fe.config).UpdateOne(fe)
}

// Unwrap unwraps the FixtureEvents entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fe *FixtureEvents) Unwrap() *FixtureEvents {
	_tx, ok := fe.config.driver.(*txDriver)
	if !ok {
		panic("ent: FixtureEvents is not a transactional entity")
	}
	fe.config.driver = _tx.drv
	return fe
}

// String implements the fmt.Stringer.
func (fe *FixtureEvents) String() string {
	var builder strings.Builder
	builder.WriteString("FixtureEvents(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fe.ID))
	builder.WriteString("elapsedTime=")
	builder.WriteString(fmt.Sprintf("%v", fe.ElapsedTime))
	builder.WriteString(", ")
	builder.WriteString("extraTime=")
	builder.WriteString(fmt.Sprintf("%v", fe.ExtraTime))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fe.Type)
	builder.WriteString(", ")
	builder.WriteString("detail=")
	builder.WriteString(fe.Detail)
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(fe.Comments)
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(fe.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FixtureEventsSlice is a parsable slice of FixtureEvents.
type FixtureEventsSlice []*FixtureEvents
