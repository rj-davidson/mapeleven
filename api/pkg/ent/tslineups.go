// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tslineups"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TSLineups is the model entity for the TSLineups schema.
type TSLineups struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Formation holds the value of the "formation" field.
	Formation string `json:"formation,omitempty"`
	// Played holds the value of the "played" field.
	Played int `json:"played,omitempty"`
	// This field is a foreign key which refers to the team this lineup belongs to
	TeamID int `json:"team_id,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TSLineupsQuery when eager-loading is set.
	Edges        TSLineupsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TSLineupsEdges holds the relations/edges for other nodes in the graph.
type TSLineupsEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TSLineupsEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TSLineups) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tslineups.FieldID, tslineups.FieldPlayed, tslineups.FieldTeamID:
			values[i] = new(sql.NullInt64)
		case tslineups.FieldFormation:
			values[i] = new(sql.NullString)
		case tslineups.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TSLineups fields.
func (tl *TSLineups) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tslineups.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case tslineups.FieldFormation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field formation", values[i])
			} else if value.Valid {
				tl.Formation = value.String
			}
		case tslineups.FieldPlayed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field played", values[i])
			} else if value.Valid {
				tl.Played = int(value.Int64)
			}
		case tslineups.FieldTeamID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				tl.TeamID = int(value.Int64)
			}
		case tslineups.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				tl.LastUpdated = value.Time
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TSLineups.
// This includes values selected through modifiers, order, etc.
func (tl *TSLineups) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the TSLineups entity.
func (tl *TSLineups) QueryTeam() *TeamQuery {
	return NewTSLineupsClient(tl.config).QueryTeam(tl)
}

// Update returns a builder for updating this TSLineups.
// Note that you need to call TSLineups.Unwrap() before calling this method if this TSLineups
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TSLineups) Update() *TSLineupsUpdateOne {
	return NewTSLineupsClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TSLineups entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TSLineups) Unwrap() *TSLineups {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TSLineups is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TSLineups) String() string {
	var builder strings.Builder
	builder.WriteString("TSLineups(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("formation=")
	builder.WriteString(tl.Formation)
	builder.WriteString(", ")
	builder.WriteString("played=")
	builder.WriteString(fmt.Sprintf("%v", tl.Played))
	builder.WriteString(", ")
	builder.WriteString("team_id=")
	builder.WriteString(fmt.Sprintf("%v", tl.TeamID))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(tl.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TSLineupsSlice is a parsable slice of TSLineups.
type TSLineupsSlice []*TSLineups
