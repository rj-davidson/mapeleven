// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psfairplay"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSFairplayQuery is the builder for querying PSFairplay entities.
type PSFairplayQuery struct {
	config
	ctx             *QueryContext
	order           []psfairplay.OrderOption
	inters          []Interceptor
	predicates      []predicate.PSFairplay
	withPlayerStats *PlayerStatsQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PSFairplayQuery builder.
func (pfq *PSFairplayQuery) Where(ps ...predicate.PSFairplay) *PSFairplayQuery {
	pfq.predicates = append(pfq.predicates, ps...)
	return pfq
}

// Limit the number of records to be returned by this query.
func (pfq *PSFairplayQuery) Limit(limit int) *PSFairplayQuery {
	pfq.ctx.Limit = &limit
	return pfq
}

// Offset to start from.
func (pfq *PSFairplayQuery) Offset(offset int) *PSFairplayQuery {
	pfq.ctx.Offset = &offset
	return pfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pfq *PSFairplayQuery) Unique(unique bool) *PSFairplayQuery {
	pfq.ctx.Unique = &unique
	return pfq
}

// Order specifies how the records should be ordered.
func (pfq *PSFairplayQuery) Order(o ...psfairplay.OrderOption) *PSFairplayQuery {
	pfq.order = append(pfq.order, o...)
	return pfq
}

// QueryPlayerStats chains the current query on the "playerStats" edge.
func (pfq *PSFairplayQuery) QueryPlayerStats() *PlayerStatsQuery {
	query := (&PlayerStatsClient{config: pfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(psfairplay.Table, psfairplay.FieldID, selector),
			sqlgraph.To(playerstats.Table, playerstats.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, psfairplay.PlayerStatsTable, psfairplay.PlayerStatsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PSFairplay entity from the query.
// Returns a *NotFoundError when no PSFairplay was found.
func (pfq *PSFairplayQuery) First(ctx context.Context) (*PSFairplay, error) {
	nodes, err := pfq.Limit(1).All(setContextOp(ctx, pfq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{psfairplay.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pfq *PSFairplayQuery) FirstX(ctx context.Context) *PSFairplay {
	node, err := pfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PSFairplay ID from the query.
// Returns a *NotFoundError when no PSFairplay ID was found.
func (pfq *PSFairplayQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfq.Limit(1).IDs(setContextOp(ctx, pfq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{psfairplay.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pfq *PSFairplayQuery) FirstIDX(ctx context.Context) int {
	id, err := pfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PSFairplay entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PSFairplay entity is found.
// Returns a *NotFoundError when no PSFairplay entities are found.
func (pfq *PSFairplayQuery) Only(ctx context.Context) (*PSFairplay, error) {
	nodes, err := pfq.Limit(2).All(setContextOp(ctx, pfq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{psfairplay.Label}
	default:
		return nil, &NotSingularError{psfairplay.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pfq *PSFairplayQuery) OnlyX(ctx context.Context) *PSFairplay {
	node, err := pfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PSFairplay ID in the query.
// Returns a *NotSingularError when more than one PSFairplay ID is found.
// Returns a *NotFoundError when no entities are found.
func (pfq *PSFairplayQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfq.Limit(2).IDs(setContextOp(ctx, pfq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{psfairplay.Label}
	default:
		err = &NotSingularError{psfairplay.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pfq *PSFairplayQuery) OnlyIDX(ctx context.Context) int {
	id, err := pfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PSFairplays.
func (pfq *PSFairplayQuery) All(ctx context.Context) ([]*PSFairplay, error) {
	ctx = setContextOp(ctx, pfq.ctx, "All")
	if err := pfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PSFairplay, *PSFairplayQuery]()
	return withInterceptors[[]*PSFairplay](ctx, pfq, qr, pfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pfq *PSFairplayQuery) AllX(ctx context.Context) []*PSFairplay {
	nodes, err := pfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PSFairplay IDs.
func (pfq *PSFairplayQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pfq.ctx.Unique == nil && pfq.path != nil {
		pfq.Unique(true)
	}
	ctx = setContextOp(ctx, pfq.ctx, "IDs")
	if err = pfq.Select(psfairplay.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pfq *PSFairplayQuery) IDsX(ctx context.Context) []int {
	ids, err := pfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pfq *PSFairplayQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pfq.ctx, "Count")
	if err := pfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pfq, querierCount[*PSFairplayQuery](), pfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pfq *PSFairplayQuery) CountX(ctx context.Context) int {
	count, err := pfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pfq *PSFairplayQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pfq.ctx, "Exist")
	switch _, err := pfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pfq *PSFairplayQuery) ExistX(ctx context.Context) bool {
	exist, err := pfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PSFairplayQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pfq *PSFairplayQuery) Clone() *PSFairplayQuery {
	if pfq == nil {
		return nil
	}
	return &PSFairplayQuery{
		config:          pfq.config,
		ctx:             pfq.ctx.Clone(),
		order:           append([]psfairplay.OrderOption{}, pfq.order...),
		inters:          append([]Interceptor{}, pfq.inters...),
		predicates:      append([]predicate.PSFairplay{}, pfq.predicates...),
		withPlayerStats: pfq.withPlayerStats.Clone(),
		// clone intermediate query.
		sql:  pfq.sql.Clone(),
		path: pfq.path,
	}
}

// WithPlayerStats tells the query-builder to eager-load the nodes that are connected to
// the "playerStats" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *PSFairplayQuery) WithPlayerStats(opts ...func(*PlayerStatsQuery)) *PSFairplayQuery {
	query := (&PlayerStatsClient{config: pfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfq.withPlayerStats = query
	return pfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FoulsCommitted int `json:"FoulsCommitted,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PSFairplay.Query().
//		GroupBy(psfairplay.FieldFoulsCommitted).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pfq *PSFairplayQuery) GroupBy(field string, fields ...string) *PSFairplayGroupBy {
	pfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PSFairplayGroupBy{build: pfq}
	grbuild.flds = &pfq.ctx.Fields
	grbuild.label = psfairplay.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FoulsCommitted int `json:"FoulsCommitted,omitempty"`
//	}
//
//	client.PSFairplay.Query().
//		Select(psfairplay.FieldFoulsCommitted).
//		Scan(ctx, &v)
func (pfq *PSFairplayQuery) Select(fields ...string) *PSFairplaySelect {
	pfq.ctx.Fields = append(pfq.ctx.Fields, fields...)
	sbuild := &PSFairplaySelect{PSFairplayQuery: pfq}
	sbuild.label = psfairplay.Label
	sbuild.flds, sbuild.scan = &pfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PSFairplaySelect configured with the given aggregations.
func (pfq *PSFairplayQuery) Aggregate(fns ...AggregateFunc) *PSFairplaySelect {
	return pfq.Select().Aggregate(fns...)
}

func (pfq *PSFairplayQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pfq); err != nil {
				return err
			}
		}
	}
	for _, f := range pfq.ctx.Fields {
		if !psfairplay.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pfq.path != nil {
		prev, err := pfq.path(ctx)
		if err != nil {
			return err
		}
		pfq.sql = prev
	}
	return nil
}

func (pfq *PSFairplayQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PSFairplay, error) {
	var (
		nodes       = []*PSFairplay{}
		withFKs     = pfq.withFKs
		_spec       = pfq.querySpec()
		loadedTypes = [1]bool{
			pfq.withPlayerStats != nil,
		}
	)
	if pfq.withPlayerStats != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, psfairplay.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PSFairplay).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PSFairplay{config: pfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pfq.withPlayerStats; query != nil {
		if err := pfq.loadPlayerStats(ctx, query, nodes, nil,
			func(n *PSFairplay, e *PlayerStats) { n.Edges.PlayerStats = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pfq *PSFairplayQuery) loadPlayerStats(ctx context.Context, query *PlayerStatsQuery, nodes []*PSFairplay, init func(*PSFairplay), assign func(*PSFairplay, *PlayerStats)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PSFairplay)
	for i := range nodes {
		if nodes[i].player_stats_ps_fairplay == nil {
			continue
		}
		fk := *nodes[i].player_stats_ps_fairplay
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(playerstats.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_stats_ps_fairplay" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pfq *PSFairplayQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pfq.querySpec()
	_spec.Node.Columns = pfq.ctx.Fields
	if len(pfq.ctx.Fields) > 0 {
		_spec.Unique = pfq.ctx.Unique != nil && *pfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pfq.driver, _spec)
}

func (pfq *PSFairplayQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(psfairplay.Table, psfairplay.Columns, sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt))
	_spec.From = pfq.sql
	if unique := pfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pfq.path != nil {
		_spec.Unique = true
	}
	if fields := pfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, psfairplay.FieldID)
		for i := range fields {
			if fields[i] != psfairplay.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pfq *PSFairplayQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pfq.driver.Dialect())
	t1 := builder.Table(psfairplay.Table)
	columns := pfq.ctx.Fields
	if len(columns) == 0 {
		columns = psfairplay.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pfq.sql != nil {
		selector = pfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pfq.ctx.Unique != nil && *pfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pfq.predicates {
		p(selector)
	}
	for _, p := range pfq.order {
		p(selector)
	}
	if offset := pfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PSFairplayGroupBy is the group-by builder for PSFairplay entities.
type PSFairplayGroupBy struct {
	selector
	build *PSFairplayQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pfgb *PSFairplayGroupBy) Aggregate(fns ...AggregateFunc) *PSFairplayGroupBy {
	pfgb.fns = append(pfgb.fns, fns...)
	return pfgb
}

// Scan applies the selector query and scans the result into the given value.
func (pfgb *PSFairplayGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfgb.build.ctx, "GroupBy")
	if err := pfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PSFairplayQuery, *PSFairplayGroupBy](ctx, pfgb.build, pfgb, pfgb.build.inters, v)
}

func (pfgb *PSFairplayGroupBy) sqlScan(ctx context.Context, root *PSFairplayQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pfgb.fns))
	for _, fn := range pfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pfgb.flds)+len(pfgb.fns))
		for _, f := range *pfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PSFairplaySelect is the builder for selecting fields of PSFairplay entities.
type PSFairplaySelect struct {
	*PSFairplayQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pfs *PSFairplaySelect) Aggregate(fns ...AggregateFunc) *PSFairplaySelect {
	pfs.fns = append(pfs.fns, fns...)
	return pfs
}

// Scan applies the selector query and scans the result into the given value.
func (pfs *PSFairplaySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfs.ctx, "Select")
	if err := pfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PSFairplayQuery, *PSFairplaySelect](ctx, pfs.PSFairplayQuery, pfs, pfs.inters, v)
}

func (pfs *PSFairplaySelect) sqlScan(ctx context.Context, root *PSFairplayQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pfs.fns))
	for _, fn := range pfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
