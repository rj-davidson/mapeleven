// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psdefense"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSDefense is the model entity for the PSDefense schema.
type PSDefense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TacklesTotal holds the value of the "tacklesTotal" field.
	TacklesTotal int `json:"tacklesTotal,omitempty"`
	// Blocks holds the value of the "blocks" field.
	Blocks int `json:"blocks,omitempty"`
	// Interceptions holds the value of the "interceptions" field.
	Interceptions int `json:"interceptions,omitempty"`
	// TotalDuels holds the value of the "totalDuels" field.
	TotalDuels int `json:"totalDuels,omitempty"`
	// WonDuels holds the value of the "wonDuels" field.
	WonDuels int `json:"wonDuels,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSDefenseQuery when eager-loading is set.
	Edges            PSDefenseEdges `json:"edges"`
	player_psdefense *int
	selectValues     sql.SelectValues
}

// PSDefenseEdges holds the relations/edges for other nodes in the graph.
type PSDefenseEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PSDefenseEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[0] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSDefense) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case psdefense.FieldID, psdefense.FieldTacklesTotal, psdefense.FieldBlocks, psdefense.FieldInterceptions, psdefense.FieldTotalDuels, psdefense.FieldWonDuels:
			values[i] = new(sql.NullInt64)
		case psdefense.ForeignKeys[0]: // player_psdefense
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSDefense fields.
func (pd *PSDefense) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case psdefense.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case psdefense.FieldTacklesTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tacklesTotal", values[i])
			} else if value.Valid {
				pd.TacklesTotal = int(value.Int64)
			}
		case psdefense.FieldBlocks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field blocks", values[i])
			} else if value.Valid {
				pd.Blocks = int(value.Int64)
			}
		case psdefense.FieldInterceptions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interceptions", values[i])
			} else if value.Valid {
				pd.Interceptions = int(value.Int64)
			}
		case psdefense.FieldTotalDuels:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field totalDuels", values[i])
			} else if value.Valid {
				pd.TotalDuels = int(value.Int64)
			}
		case psdefense.FieldWonDuels:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wonDuels", values[i])
			} else if value.Valid {
				pd.WonDuels = int(value.Int64)
			}
		case psdefense.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_psdefense", value)
			} else if value.Valid {
				pd.player_psdefense = new(int)
				*pd.player_psdefense = int(value.Int64)
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSDefense.
// This includes values selected through modifiers, order, etc.
func (pd *PSDefense) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the PSDefense entity.
func (pd *PSDefense) QueryPlayer() *PlayerQuery {
	return NewPSDefenseClient(pd.config).QueryPlayer(pd)
}

// Update returns a builder for updating this PSDefense.
// Note that you need to call PSDefense.Unwrap() before calling this method if this PSDefense
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PSDefense) Update() *PSDefenseUpdateOne {
	return NewPSDefenseClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PSDefense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PSDefense) Unwrap() *PSDefense {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSDefense is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PSDefense) String() string {
	var builder strings.Builder
	builder.WriteString("PSDefense(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("tacklesTotal=")
	builder.WriteString(fmt.Sprintf("%v", pd.TacklesTotal))
	builder.WriteString(", ")
	builder.WriteString("blocks=")
	builder.WriteString(fmt.Sprintf("%v", pd.Blocks))
	builder.WriteString(", ")
	builder.WriteString("interceptions=")
	builder.WriteString(fmt.Sprintf("%v", pd.Interceptions))
	builder.WriteString(", ")
	builder.WriteString("totalDuels=")
	builder.WriteString(fmt.Sprintf("%v", pd.TotalDuels))
	builder.WriteString(", ")
	builder.WriteString("wonDuels=")
	builder.WriteString(fmt.Sprintf("%v", pd.WonDuels))
	builder.WriteByte(')')
	return builder.String()
}

// PSDefenses is a parsable slice of PSDefense.
type PSDefenses []*PSDefense
