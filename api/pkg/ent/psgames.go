// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgames"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSGames is the model entity for the PSGames schema.
type PSGames struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Appearences holds the value of the "appearences" field.
	Appearences int `json:"appearences,omitempty"`
	// Lineups holds the value of the "lineups" field.
	Lineups int `json:"lineups,omitempty"`
	// Minutes holds the value of the "minutes" field.
	Minutes int `json:"minutes,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating string `json:"rating,omitempty"`
	// Captain holds the value of the "captain" field.
	Captain bool `json:"captain,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSGamesQuery when eager-loading is set.
	Edges        PSGamesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PSGamesEdges holds the relations/edges for other nodes in the graph.
type PSGamesEdges struct {
	// PlayerStats holds the value of the playerStats edge.
	PlayerStats []*PlayerStats `json:"playerStats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerStatsOrErr returns the PlayerStats value or an error if the edge
// was not loaded in eager-loading.
func (e PSGamesEdges) PlayerStatsOrErr() ([]*PlayerStats, error) {
	if e.loadedTypes[0] {
		return e.PlayerStats, nil
	}
	return nil, &NotLoadedError{edge: "playerStats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSGames) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case psgames.FieldCaptain:
			values[i] = new(sql.NullBool)
		case psgames.FieldID, psgames.FieldAppearences, psgames.FieldLineups, psgames.FieldMinutes, psgames.FieldNumber:
			values[i] = new(sql.NullInt64)
		case psgames.FieldPosition, psgames.FieldRating:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSGames fields.
func (pg *PSGames) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case psgames.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pg.ID = int(value.Int64)
		case psgames.FieldAppearences:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field appearences", values[i])
			} else if value.Valid {
				pg.Appearences = int(value.Int64)
			}
		case psgames.FieldLineups:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lineups", values[i])
			} else if value.Valid {
				pg.Lineups = int(value.Int64)
			}
		case psgames.FieldMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minutes", values[i])
			} else if value.Valid {
				pg.Minutes = int(value.Int64)
			}
		case psgames.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				pg.Number = int(value.Int64)
			}
		case psgames.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				pg.Position = value.String
			}
		case psgames.FieldRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				pg.Rating = value.String
			}
		case psgames.FieldCaptain:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field captain", values[i])
			} else if value.Valid {
				pg.Captain = value.Bool
			}
		default:
			pg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSGames.
// This includes values selected through modifiers, order, etc.
func (pg *PSGames) Value(name string) (ent.Value, error) {
	return pg.selectValues.Get(name)
}

// QueryPlayerStats queries the "playerStats" edge of the PSGames entity.
func (pg *PSGames) QueryPlayerStats() *PlayerStatsQuery {
	return NewPSGamesClient(pg.config).QueryPlayerStats(pg)
}

// Update returns a builder for updating this PSGames.
// Note that you need to call PSGames.Unwrap() before calling this method if this PSGames
// was returned from a transaction, and the transaction was committed or rolled back.
func (pg *PSGames) Update() *PSGamesUpdateOne {
	return NewPSGamesClient(pg.config).UpdateOne(pg)
}

// Unwrap unwraps the PSGames entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pg *PSGames) Unwrap() *PSGames {
	_tx, ok := pg.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSGames is not a transactional entity")
	}
	pg.config.driver = _tx.drv
	return pg
}

// String implements the fmt.Stringer.
func (pg *PSGames) String() string {
	var builder strings.Builder
	builder.WriteString("PSGames(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pg.ID))
	builder.WriteString("appearences=")
	builder.WriteString(fmt.Sprintf("%v", pg.Appearences))
	builder.WriteString(", ")
	builder.WriteString("lineups=")
	builder.WriteString(fmt.Sprintf("%v", pg.Lineups))
	builder.WriteString(", ")
	builder.WriteString("minutes=")
	builder.WriteString(fmt.Sprintf("%v", pg.Minutes))
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", pg.Number))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(pg.Position)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(pg.Rating)
	builder.WriteString(", ")
	builder.WriteString("captain=")
	builder.WriteString(fmt.Sprintf("%v", pg.Captain))
	builder.WriteByte(')')
	return builder.String()
}

// PSGamesSlice is a parsable slice of PSGames.
type PSGamesSlice []*PSGames
