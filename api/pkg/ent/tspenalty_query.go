// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tspenalty"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSPenaltyQuery is the builder for querying TSPenalty entities.
type TSPenaltyQuery struct {
	config
	ctx        *QueryContext
	order      []tspenalty.OrderOption
	inters     []Interceptor
	predicates []predicate.TSPenalty
	withTeam   *TeamQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TSPenaltyQuery builder.
func (tpq *TSPenaltyQuery) Where(ps ...predicate.TSPenalty) *TSPenaltyQuery {
	tpq.predicates = append(tpq.predicates, ps...)
	return tpq
}

// Limit the number of records to be returned by this query.
func (tpq *TSPenaltyQuery) Limit(limit int) *TSPenaltyQuery {
	tpq.ctx.Limit = &limit
	return tpq
}

// Offset to start from.
func (tpq *TSPenaltyQuery) Offset(offset int) *TSPenaltyQuery {
	tpq.ctx.Offset = &offset
	return tpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tpq *TSPenaltyQuery) Unique(unique bool) *TSPenaltyQuery {
	tpq.ctx.Unique = &unique
	return tpq
}

// Order specifies how the records should be ordered.
func (tpq *TSPenaltyQuery) Order(o ...tspenalty.OrderOption) *TSPenaltyQuery {
	tpq.order = append(tpq.order, o...)
	return tpq
}

// QueryTeam chains the current query on the "team" edge.
func (tpq *TSPenaltyQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tspenalty.Table, tspenalty.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, tspenalty.TeamTable, tspenalty.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TSPenalty entity from the query.
// Returns a *NotFoundError when no TSPenalty was found.
func (tpq *TSPenaltyQuery) First(ctx context.Context) (*TSPenalty, error) {
	nodes, err := tpq.Limit(1).All(setContextOp(ctx, tpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tspenalty.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tpq *TSPenaltyQuery) FirstX(ctx context.Context) *TSPenalty {
	node, err := tpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TSPenalty ID from the query.
// Returns a *NotFoundError when no TSPenalty ID was found.
func (tpq *TSPenaltyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpq.Limit(1).IDs(setContextOp(ctx, tpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tspenalty.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tpq *TSPenaltyQuery) FirstIDX(ctx context.Context) int {
	id, err := tpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TSPenalty entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TSPenalty entity is found.
// Returns a *NotFoundError when no TSPenalty entities are found.
func (tpq *TSPenaltyQuery) Only(ctx context.Context) (*TSPenalty, error) {
	nodes, err := tpq.Limit(2).All(setContextOp(ctx, tpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tspenalty.Label}
	default:
		return nil, &NotSingularError{tspenalty.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tpq *TSPenaltyQuery) OnlyX(ctx context.Context) *TSPenalty {
	node, err := tpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TSPenalty ID in the query.
// Returns a *NotSingularError when more than one TSPenalty ID is found.
// Returns a *NotFoundError when no entities are found.
func (tpq *TSPenaltyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpq.Limit(2).IDs(setContextOp(ctx, tpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tspenalty.Label}
	default:
		err = &NotSingularError{tspenalty.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tpq *TSPenaltyQuery) OnlyIDX(ctx context.Context) int {
	id, err := tpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TSPenalties.
func (tpq *TSPenaltyQuery) All(ctx context.Context) ([]*TSPenalty, error) {
	ctx = setContextOp(ctx, tpq.ctx, "All")
	if err := tpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TSPenalty, *TSPenaltyQuery]()
	return withInterceptors[[]*TSPenalty](ctx, tpq, qr, tpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tpq *TSPenaltyQuery) AllX(ctx context.Context) []*TSPenalty {
	nodes, err := tpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TSPenalty IDs.
func (tpq *TSPenaltyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tpq.ctx.Unique == nil && tpq.path != nil {
		tpq.Unique(true)
	}
	ctx = setContextOp(ctx, tpq.ctx, "IDs")
	if err = tpq.Select(tspenalty.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tpq *TSPenaltyQuery) IDsX(ctx context.Context) []int {
	ids, err := tpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tpq *TSPenaltyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tpq.ctx, "Count")
	if err := tpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tpq, querierCount[*TSPenaltyQuery](), tpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tpq *TSPenaltyQuery) CountX(ctx context.Context) int {
	count, err := tpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tpq *TSPenaltyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tpq.ctx, "Exist")
	switch _, err := tpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tpq *TSPenaltyQuery) ExistX(ctx context.Context) bool {
	exist, err := tpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TSPenaltyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tpq *TSPenaltyQuery) Clone() *TSPenaltyQuery {
	if tpq == nil {
		return nil
	}
	return &TSPenaltyQuery{
		config:     tpq.config,
		ctx:        tpq.ctx.Clone(),
		order:      append([]tspenalty.OrderOption{}, tpq.order...),
		inters:     append([]Interceptor{}, tpq.inters...),
		predicates: append([]predicate.TSPenalty{}, tpq.predicates...),
		withTeam:   tpq.withTeam.Clone(),
		// clone intermediate query.
		sql:  tpq.sql.Clone(),
		path: tpq.path,
	}
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TSPenaltyQuery) WithTeam(opts ...func(*TeamQuery)) *TSPenaltyQuery {
	query := (&TeamClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withTeam = query
	return tpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Total int `json:"total,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TSPenalty.Query().
//		GroupBy(tspenalty.FieldTotal).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tpq *TSPenaltyQuery) GroupBy(field string, fields ...string) *TSPenaltyGroupBy {
	tpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TSPenaltyGroupBy{build: tpq}
	grbuild.flds = &tpq.ctx.Fields
	grbuild.label = tspenalty.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Total int `json:"total,omitempty"`
//	}
//
//	client.TSPenalty.Query().
//		Select(tspenalty.FieldTotal).
//		Scan(ctx, &v)
func (tpq *TSPenaltyQuery) Select(fields ...string) *TSPenaltySelect {
	tpq.ctx.Fields = append(tpq.ctx.Fields, fields...)
	sbuild := &TSPenaltySelect{TSPenaltyQuery: tpq}
	sbuild.label = tspenalty.Label
	sbuild.flds, sbuild.scan = &tpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TSPenaltySelect configured with the given aggregations.
func (tpq *TSPenaltyQuery) Aggregate(fns ...AggregateFunc) *TSPenaltySelect {
	return tpq.Select().Aggregate(fns...)
}

func (tpq *TSPenaltyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tpq); err != nil {
				return err
			}
		}
	}
	for _, f := range tpq.ctx.Fields {
		if !tspenalty.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tpq.path != nil {
		prev, err := tpq.path(ctx)
		if err != nil {
			return err
		}
		tpq.sql = prev
	}
	return nil
}

func (tpq *TSPenaltyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TSPenalty, error) {
	var (
		nodes       = []*TSPenalty{}
		withFKs     = tpq.withFKs
		_spec       = tpq.querySpec()
		loadedTypes = [1]bool{
			tpq.withTeam != nil,
		}
	)
	if tpq.withTeam != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, tspenalty.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TSPenalty).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TSPenalty{config: tpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tpq.withTeam; query != nil {
		if err := tpq.loadTeam(ctx, query, nodes, nil,
			func(n *TSPenalty, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tpq *TSPenaltyQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*TSPenalty, init func(*TSPenalty), assign func(*TSPenalty, *Team)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TSPenalty)
	for i := range nodes {
		if nodes[i].team_penalty_stats == nil {
			continue
		}
		fk := *nodes[i].team_penalty_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_penalty_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tpq *TSPenaltyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tpq.querySpec()
	_spec.Node.Columns = tpq.ctx.Fields
	if len(tpq.ctx.Fields) > 0 {
		_spec.Unique = tpq.ctx.Unique != nil && *tpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tpq.driver, _spec)
}

func (tpq *TSPenaltyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tspenalty.Table, tspenalty.Columns, sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt))
	_spec.From = tpq.sql
	if unique := tpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tpq.path != nil {
		_spec.Unique = true
	}
	if fields := tpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tspenalty.FieldID)
		for i := range fields {
			if fields[i] != tspenalty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tpq *TSPenaltyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tpq.driver.Dialect())
	t1 := builder.Table(tspenalty.Table)
	columns := tpq.ctx.Fields
	if len(columns) == 0 {
		columns = tspenalty.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tpq.sql != nil {
		selector = tpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tpq.ctx.Unique != nil && *tpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tpq.predicates {
		p(selector)
	}
	for _, p := range tpq.order {
		p(selector)
	}
	if offset := tpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TSPenaltyGroupBy is the group-by builder for TSPenalty entities.
type TSPenaltyGroupBy struct {
	selector
	build *TSPenaltyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tpgb *TSPenaltyGroupBy) Aggregate(fns ...AggregateFunc) *TSPenaltyGroupBy {
	tpgb.fns = append(tpgb.fns, fns...)
	return tpgb
}

// Scan applies the selector query and scans the result into the given value.
func (tpgb *TSPenaltyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tpgb.build.ctx, "GroupBy")
	if err := tpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TSPenaltyQuery, *TSPenaltyGroupBy](ctx, tpgb.build, tpgb, tpgb.build.inters, v)
}

func (tpgb *TSPenaltyGroupBy) sqlScan(ctx context.Context, root *TSPenaltyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tpgb.fns))
	for _, fn := range tpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tpgb.flds)+len(tpgb.fns))
		for _, f := range *tpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TSPenaltySelect is the builder for selecting fields of TSPenalty entities.
type TSPenaltySelect struct {
	*TSPenaltyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tps *TSPenaltySelect) Aggregate(fns ...AggregateFunc) *TSPenaltySelect {
	tps.fns = append(tps.fns, fns...)
	return tps
}

// Scan applies the selector query and scans the result into the given value.
func (tps *TSPenaltySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tps.ctx, "Select")
	if err := tps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TSPenaltyQuery, *TSPenaltySelect](ctx, tps.TSPenaltyQuery, tps, tps.inters, v)
}

func (tps *TSPenaltySelect) sqlScan(ctx context.Context, root *TSPenaltyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tps.fns))
	for _, fn := range tps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
