// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psfairplay"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSFairplayDelete is the builder for deleting a PSFairplay entity.
type PSFairplayDelete struct {
	config
	hooks    []Hook
	mutation *PSFairplayMutation
}

// Where appends a list predicates to the PSFairplayDelete builder.
func (pfd *PSFairplayDelete) Where(ps ...predicate.PSFairplay) *PSFairplayDelete {
	pfd.mutation.Where(ps...)
	return pfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pfd *PSFairplayDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pfd.sqlExec, pfd.mutation, pfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pfd *PSFairplayDelete) ExecX(ctx context.Context) int {
	n, err := pfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pfd *PSFairplayDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(psfairplay.Table, sqlgraph.NewFieldSpec(psfairplay.FieldID, field.TypeInt))
	if ps := pfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pfd.mutation.done = true
	return affected, err
}

// PSFairplayDeleteOne is the builder for deleting a single PSFairplay entity.
type PSFairplayDeleteOne struct {
	pfd *PSFairplayDelete
}

// Where appends a list predicates to the PSFairplayDelete builder.
func (pfdo *PSFairplayDeleteOne) Where(ps ...predicate.PSFairplay) *PSFairplayDeleteOne {
	pfdo.pfd.mutation.Where(ps...)
	return pfdo
}

// Exec executes the deletion query.
func (pfdo *PSFairplayDeleteOne) Exec(ctx context.Context) error {
	n, err := pfdo.pfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{psfairplay.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pfdo *PSFairplayDeleteOne) ExecX(ctx context.Context) {
	if err := pfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
