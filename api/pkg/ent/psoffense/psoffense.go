// Code generated by ent, DO NOT EDIT.

package psoffense

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psoffense type in the database.
	Label = "ps_offense"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDribbleAttempts holds the string denoting the dribbleattempts field in the database.
	FieldDribbleAttempts = "dribble_attempts"
	// FieldDribbleSuccess holds the string denoting the dribblesuccess field in the database.
	FieldDribbleSuccess = "dribble_success"
	// FieldDribblePast holds the string denoting the dribblepast field in the database.
	FieldDribblePast = "dribble_past"
	// FieldPassesTotal holds the string denoting the passestotal field in the database.
	FieldPassesTotal = "passes_total"
	// FieldPassesKey holds the string denoting the passeskey field in the database.
	FieldPassesKey = "passes_key"
	// FieldPassesAccuracy holds the string denoting the passesaccuracy field in the database.
	FieldPassesAccuracy = "passes_accuracy"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the psoffense in the database.
	Table = "ps_offenses"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "ps_offenses"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_psoffense"
)

// Columns holds all SQL columns for psoffense fields.
var Columns = []string{
	FieldID,
	FieldDribbleAttempts,
	FieldDribbleSuccess,
	FieldDribblePast,
	FieldPassesTotal,
	FieldPassesKey,
	FieldPassesAccuracy,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_offenses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_psoffense",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDribblePast holds the default value on creation for the "dribblePast" field.
	DefaultDribblePast int
)

// OrderOption defines the ordering options for the PSOffense queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDribbleAttempts orders the results by the dribbleAttempts field.
func ByDribbleAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribbleAttempts, opts...).ToFunc()
}

// ByDribbleSuccess orders the results by the dribbleSuccess field.
func ByDribbleSuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribbleSuccess, opts...).ToFunc()
}

// ByDribblePast orders the results by the dribblePast field.
func ByDribblePast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribblePast, opts...).ToFunc()
}

// ByPassesTotal orders the results by the passesTotal field.
func ByPassesTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesTotal, opts...).ToFunc()
}

// ByPassesKey orders the results by the passesKey field.
func ByPassesKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesKey, opts...).ToFunc()
}

// ByPassesAccuracy orders the results by the passesAccuracy field.
func ByPassesAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesAccuracy, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
	)
}
