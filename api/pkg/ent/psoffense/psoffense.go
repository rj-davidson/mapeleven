// Code generated by ent, DO NOT EDIT.

package psoffense

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psoffense type in the database.
	Label = "ps_offense"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDribbleAttempts holds the string denoting the dribbleattempts field in the database.
	FieldDribbleAttempts = "dribble_attempts"
	// FieldDribbleSuccess holds the string denoting the dribblesuccess field in the database.
	FieldDribbleSuccess = "dribble_success"
	// FieldDribblePast holds the string denoting the dribblepast field in the database.
	FieldDribblePast = "dribble_past"
	// FieldPassesTotal holds the string denoting the passestotal field in the database.
	FieldPassesTotal = "passes_total"
	// FieldPassesKey holds the string denoting the passeskey field in the database.
	FieldPassesKey = "passes_key"
	// FieldPassesAccuracy holds the string denoting the passesaccuracy field in the database.
	FieldPassesAccuracy = "passes_accuracy"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the psoffense in the database.
	Table = "ps_offenses"
	// PlayerStatsTable is the table that holds the playerStats relation/edge. The primary key declared below.
	PlayerStatsTable = "player_stats_psoffense"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
)

// Columns holds all SQL columns for psoffense fields.
var Columns = []string{
	FieldID,
	FieldDribbleAttempts,
	FieldDribbleSuccess,
	FieldDribblePast,
	FieldPassesTotal,
	FieldPassesKey,
	FieldPassesAccuracy,
}

var (
	// PlayerStatsPrimaryKey and PlayerStatsColumn2 are the table columns denoting the
	// primary key for the playerStats relation (M2M).
	PlayerStatsPrimaryKey = []string{"player_stats_id", "ps_offense_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDribblePast holds the default value on creation for the "dribblePast" field.
	DefaultDribblePast int
)

// OrderOption defines the ordering options for the PSOffense queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDribbleAttempts orders the results by the dribbleAttempts field.
func ByDribbleAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribbleAttempts, opts...).ToFunc()
}

// ByDribbleSuccess orders the results by the dribbleSuccess field.
func ByDribbleSuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribbleSuccess, opts...).ToFunc()
}

// ByDribblePast orders the results by the dribblePast field.
func ByDribblePast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDribblePast, opts...).ToFunc()
}

// ByPassesTotal orders the results by the passesTotal field.
func ByPassesTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesTotal, opts...).ToFunc()
}

// ByPassesKey orders the results by the passesKey field.
func ByPassesKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesKey, opts...).ToFunc()
}

// ByPassesAccuracy orders the results by the passesAccuracy field.
func ByPassesAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassesAccuracy, opts...).ToFunc()
}

// ByPlayerStatsCount orders the results by playerStats count.
func ByPlayerStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerStatsStep(), opts...)
	}
}

// ByPlayerStats orders the results by playerStats terms.
func ByPlayerStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PlayerStatsTable, PlayerStatsPrimaryKey...),
	)
}
