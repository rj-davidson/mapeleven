// Code generated by ent, DO NOT EDIT.

package psoffense

import (
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLTE(FieldID, id))
}

// DribbleAttempts applies equality check predicate on the "DribbleAttempts" field. It's identical to DribbleAttemptsEQ.
func DribbleAttempts(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldDribbleAttempts, v))
}

// DribbleSuccess applies equality check predicate on the "DribbleSuccess" field. It's identical to DribbleSuccessEQ.
func DribbleSuccess(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldDribbleSuccess, v))
}

// DribblePast applies equality check predicate on the "DribblePast" field. It's identical to DribblePastEQ.
func DribblePast(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldDribblePast, v))
}

// PassesTotal applies equality check predicate on the "PassesTotal" field. It's identical to PassesTotalEQ.
func PassesTotal(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldPassesTotal, v))
}

// PassesKey applies equality check predicate on the "PassesKey" field. It's identical to PassesKeyEQ.
func PassesKey(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldPassesKey, v))
}

// PassesAccuracy applies equality check predicate on the "PassesAccuracy" field. It's identical to PassesAccuracyEQ.
func PassesAccuracy(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldPassesAccuracy, v))
}

// DribbleAttemptsEQ applies the EQ predicate on the "DribbleAttempts" field.
func DribbleAttemptsEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldDribbleAttempts, v))
}

// DribbleAttemptsNEQ applies the NEQ predicate on the "DribbleAttempts" field.
func DribbleAttemptsNEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNEQ(FieldDribbleAttempts, v))
}

// DribbleAttemptsIn applies the In predicate on the "DribbleAttempts" field.
func DribbleAttemptsIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldIn(FieldDribbleAttempts, vs...))
}

// DribbleAttemptsNotIn applies the NotIn predicate on the "DribbleAttempts" field.
func DribbleAttemptsNotIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNotIn(FieldDribbleAttempts, vs...))
}

// DribbleAttemptsGT applies the GT predicate on the "DribbleAttempts" field.
func DribbleAttemptsGT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGT(FieldDribbleAttempts, v))
}

// DribbleAttemptsGTE applies the GTE predicate on the "DribbleAttempts" field.
func DribbleAttemptsGTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGTE(FieldDribbleAttempts, v))
}

// DribbleAttemptsLT applies the LT predicate on the "DribbleAttempts" field.
func DribbleAttemptsLT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLT(FieldDribbleAttempts, v))
}

// DribbleAttemptsLTE applies the LTE predicate on the "DribbleAttempts" field.
func DribbleAttemptsLTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLTE(FieldDribbleAttempts, v))
}

// DribbleSuccessEQ applies the EQ predicate on the "DribbleSuccess" field.
func DribbleSuccessEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldDribbleSuccess, v))
}

// DribbleSuccessNEQ applies the NEQ predicate on the "DribbleSuccess" field.
func DribbleSuccessNEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNEQ(FieldDribbleSuccess, v))
}

// DribbleSuccessIn applies the In predicate on the "DribbleSuccess" field.
func DribbleSuccessIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldIn(FieldDribbleSuccess, vs...))
}

// DribbleSuccessNotIn applies the NotIn predicate on the "DribbleSuccess" field.
func DribbleSuccessNotIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNotIn(FieldDribbleSuccess, vs...))
}

// DribbleSuccessGT applies the GT predicate on the "DribbleSuccess" field.
func DribbleSuccessGT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGT(FieldDribbleSuccess, v))
}

// DribbleSuccessGTE applies the GTE predicate on the "DribbleSuccess" field.
func DribbleSuccessGTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGTE(FieldDribbleSuccess, v))
}

// DribbleSuccessLT applies the LT predicate on the "DribbleSuccess" field.
func DribbleSuccessLT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLT(FieldDribbleSuccess, v))
}

// DribbleSuccessLTE applies the LTE predicate on the "DribbleSuccess" field.
func DribbleSuccessLTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLTE(FieldDribbleSuccess, v))
}

// DribblePastEQ applies the EQ predicate on the "DribblePast" field.
func DribblePastEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldDribblePast, v))
}

// DribblePastNEQ applies the NEQ predicate on the "DribblePast" field.
func DribblePastNEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNEQ(FieldDribblePast, v))
}

// DribblePastIn applies the In predicate on the "DribblePast" field.
func DribblePastIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldIn(FieldDribblePast, vs...))
}

// DribblePastNotIn applies the NotIn predicate on the "DribblePast" field.
func DribblePastNotIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNotIn(FieldDribblePast, vs...))
}

// DribblePastGT applies the GT predicate on the "DribblePast" field.
func DribblePastGT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGT(FieldDribblePast, v))
}

// DribblePastGTE applies the GTE predicate on the "DribblePast" field.
func DribblePastGTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGTE(FieldDribblePast, v))
}

// DribblePastLT applies the LT predicate on the "DribblePast" field.
func DribblePastLT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLT(FieldDribblePast, v))
}

// DribblePastLTE applies the LTE predicate on the "DribblePast" field.
func DribblePastLTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLTE(FieldDribblePast, v))
}

// PassesTotalEQ applies the EQ predicate on the "PassesTotal" field.
func PassesTotalEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldPassesTotal, v))
}

// PassesTotalNEQ applies the NEQ predicate on the "PassesTotal" field.
func PassesTotalNEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNEQ(FieldPassesTotal, v))
}

// PassesTotalIn applies the In predicate on the "PassesTotal" field.
func PassesTotalIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldIn(FieldPassesTotal, vs...))
}

// PassesTotalNotIn applies the NotIn predicate on the "PassesTotal" field.
func PassesTotalNotIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNotIn(FieldPassesTotal, vs...))
}

// PassesTotalGT applies the GT predicate on the "PassesTotal" field.
func PassesTotalGT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGT(FieldPassesTotal, v))
}

// PassesTotalGTE applies the GTE predicate on the "PassesTotal" field.
func PassesTotalGTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGTE(FieldPassesTotal, v))
}

// PassesTotalLT applies the LT predicate on the "PassesTotal" field.
func PassesTotalLT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLT(FieldPassesTotal, v))
}

// PassesTotalLTE applies the LTE predicate on the "PassesTotal" field.
func PassesTotalLTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLTE(FieldPassesTotal, v))
}

// PassesKeyEQ applies the EQ predicate on the "PassesKey" field.
func PassesKeyEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldPassesKey, v))
}

// PassesKeyNEQ applies the NEQ predicate on the "PassesKey" field.
func PassesKeyNEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNEQ(FieldPassesKey, v))
}

// PassesKeyIn applies the In predicate on the "PassesKey" field.
func PassesKeyIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldIn(FieldPassesKey, vs...))
}

// PassesKeyNotIn applies the NotIn predicate on the "PassesKey" field.
func PassesKeyNotIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNotIn(FieldPassesKey, vs...))
}

// PassesKeyGT applies the GT predicate on the "PassesKey" field.
func PassesKeyGT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGT(FieldPassesKey, v))
}

// PassesKeyGTE applies the GTE predicate on the "PassesKey" field.
func PassesKeyGTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGTE(FieldPassesKey, v))
}

// PassesKeyLT applies the LT predicate on the "PassesKey" field.
func PassesKeyLT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLT(FieldPassesKey, v))
}

// PassesKeyLTE applies the LTE predicate on the "PassesKey" field.
func PassesKeyLTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLTE(FieldPassesKey, v))
}

// PassesAccuracyEQ applies the EQ predicate on the "PassesAccuracy" field.
func PassesAccuracyEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldEQ(FieldPassesAccuracy, v))
}

// PassesAccuracyNEQ applies the NEQ predicate on the "PassesAccuracy" field.
func PassesAccuracyNEQ(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNEQ(FieldPassesAccuracy, v))
}

// PassesAccuracyIn applies the In predicate on the "PassesAccuracy" field.
func PassesAccuracyIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldIn(FieldPassesAccuracy, vs...))
}

// PassesAccuracyNotIn applies the NotIn predicate on the "PassesAccuracy" field.
func PassesAccuracyNotIn(vs ...int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldNotIn(FieldPassesAccuracy, vs...))
}

// PassesAccuracyGT applies the GT predicate on the "PassesAccuracy" field.
func PassesAccuracyGT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGT(FieldPassesAccuracy, v))
}

// PassesAccuracyGTE applies the GTE predicate on the "PassesAccuracy" field.
func PassesAccuracyGTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldGTE(FieldPassesAccuracy, v))
}

// PassesAccuracyLT applies the LT predicate on the "PassesAccuracy" field.
func PassesAccuracyLT(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLT(FieldPassesAccuracy, v))
}

// PassesAccuracyLTE applies the LTE predicate on the "PassesAccuracy" field.
func PassesAccuracyLTE(v int) predicate.PSOffense {
	return predicate.PSOffense(sql.FieldLTE(FieldPassesAccuracy, v))
}

// HasPlayerStats applies the HasEdge predicate on the "playerStats" edge.
func HasPlayerStats() predicate.PSOffense {
	return predicate.PSOffense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerStatsTable, PlayerStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatsWith applies the HasEdge predicate on the "playerStats" edge with a given conditions (other predicates).
func HasPlayerStatsWith(preds ...predicate.PlayerStats) predicate.PSOffense {
	return predicate.PSOffense(func(s *sql.Selector) {
		step := newPlayerStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PSOffense) predicate.PSOffense {
	return predicate.PSOffense(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PSOffense) predicate.PSOffense {
	return predicate.PSOffense(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PSOffense) predicate.PSOffense {
	return predicate.PSOffense(sql.NotPredicates(p))
}
