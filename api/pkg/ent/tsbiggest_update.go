// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsbiggest"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSBiggestUpdate is the builder for updating TSBiggest entities.
type TSBiggestUpdate struct {
	config
	hooks    []Hook
	mutation *TSBiggestMutation
}

// Where appends a list predicates to the TSBiggestUpdate builder.
func (tbu *TSBiggestUpdate) Where(ps ...predicate.TSBiggest) *TSBiggestUpdate {
	tbu.mutation.Where(ps...)
	return tbu
}

// SetStreakWins sets the "streakWins" field.
func (tbu *TSBiggestUpdate) SetStreakWins(i int) *TSBiggestUpdate {
	tbu.mutation.ResetStreakWins()
	tbu.mutation.SetStreakWins(i)
	return tbu
}

// SetNillableStreakWins sets the "streakWins" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableStreakWins(i *int) *TSBiggestUpdate {
	if i != nil {
		tbu.SetStreakWins(*i)
	}
	return tbu
}

// AddStreakWins adds i to the "streakWins" field.
func (tbu *TSBiggestUpdate) AddStreakWins(i int) *TSBiggestUpdate {
	tbu.mutation.AddStreakWins(i)
	return tbu
}

// ClearStreakWins clears the value of the "streakWins" field.
func (tbu *TSBiggestUpdate) ClearStreakWins() *TSBiggestUpdate {
	tbu.mutation.ClearStreakWins()
	return tbu
}

// SetStreakLosses sets the "streakLosses" field.
func (tbu *TSBiggestUpdate) SetStreakLosses(i int) *TSBiggestUpdate {
	tbu.mutation.ResetStreakLosses()
	tbu.mutation.SetStreakLosses(i)
	return tbu
}

// SetNillableStreakLosses sets the "streakLosses" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableStreakLosses(i *int) *TSBiggestUpdate {
	if i != nil {
		tbu.SetStreakLosses(*i)
	}
	return tbu
}

// AddStreakLosses adds i to the "streakLosses" field.
func (tbu *TSBiggestUpdate) AddStreakLosses(i int) *TSBiggestUpdate {
	tbu.mutation.AddStreakLosses(i)
	return tbu
}

// ClearStreakLosses clears the value of the "streakLosses" field.
func (tbu *TSBiggestUpdate) ClearStreakLosses() *TSBiggestUpdate {
	tbu.mutation.ClearStreakLosses()
	return tbu
}

// SetStreakDraws sets the "streakDraws" field.
func (tbu *TSBiggestUpdate) SetStreakDraws(i int) *TSBiggestUpdate {
	tbu.mutation.ResetStreakDraws()
	tbu.mutation.SetStreakDraws(i)
	return tbu
}

// SetNillableStreakDraws sets the "streakDraws" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableStreakDraws(i *int) *TSBiggestUpdate {
	if i != nil {
		tbu.SetStreakDraws(*i)
	}
	return tbu
}

// AddStreakDraws adds i to the "streakDraws" field.
func (tbu *TSBiggestUpdate) AddStreakDraws(i int) *TSBiggestUpdate {
	tbu.mutation.AddStreakDraws(i)
	return tbu
}

// ClearStreakDraws clears the value of the "streakDraws" field.
func (tbu *TSBiggestUpdate) ClearStreakDraws() *TSBiggestUpdate {
	tbu.mutation.ClearStreakDraws()
	return tbu
}

// SetWinsHome sets the "winsHome" field.
func (tbu *TSBiggestUpdate) SetWinsHome(s string) *TSBiggestUpdate {
	tbu.mutation.SetWinsHome(s)
	return tbu
}

// SetNillableWinsHome sets the "winsHome" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableWinsHome(s *string) *TSBiggestUpdate {
	if s != nil {
		tbu.SetWinsHome(*s)
	}
	return tbu
}

// ClearWinsHome clears the value of the "winsHome" field.
func (tbu *TSBiggestUpdate) ClearWinsHome() *TSBiggestUpdate {
	tbu.mutation.ClearWinsHome()
	return tbu
}

// SetWinsAway sets the "winsAway" field.
func (tbu *TSBiggestUpdate) SetWinsAway(s string) *TSBiggestUpdate {
	tbu.mutation.SetWinsAway(s)
	return tbu
}

// SetNillableWinsAway sets the "winsAway" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableWinsAway(s *string) *TSBiggestUpdate {
	if s != nil {
		tbu.SetWinsAway(*s)
	}
	return tbu
}

// ClearWinsAway clears the value of the "winsAway" field.
func (tbu *TSBiggestUpdate) ClearWinsAway() *TSBiggestUpdate {
	tbu.mutation.ClearWinsAway()
	return tbu
}

// SetLossesHome sets the "lossesHome" field.
func (tbu *TSBiggestUpdate) SetLossesHome(s string) *TSBiggestUpdate {
	tbu.mutation.SetLossesHome(s)
	return tbu
}

// SetNillableLossesHome sets the "lossesHome" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableLossesHome(s *string) *TSBiggestUpdate {
	if s != nil {
		tbu.SetLossesHome(*s)
	}
	return tbu
}

// ClearLossesHome clears the value of the "lossesHome" field.
func (tbu *TSBiggestUpdate) ClearLossesHome() *TSBiggestUpdate {
	tbu.mutation.ClearLossesHome()
	return tbu
}

// SetLossesAway sets the "lossesAway" field.
func (tbu *TSBiggestUpdate) SetLossesAway(s string) *TSBiggestUpdate {
	tbu.mutation.SetLossesAway(s)
	return tbu
}

// SetNillableLossesAway sets the "lossesAway" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableLossesAway(s *string) *TSBiggestUpdate {
	if s != nil {
		tbu.SetLossesAway(*s)
	}
	return tbu
}

// ClearLossesAway clears the value of the "lossesAway" field.
func (tbu *TSBiggestUpdate) ClearLossesAway() *TSBiggestUpdate {
	tbu.mutation.ClearLossesAway()
	return tbu
}

// SetGoalsForHome sets the "goalsForHome" field.
func (tbu *TSBiggestUpdate) SetGoalsForHome(i int) *TSBiggestUpdate {
	tbu.mutation.ResetGoalsForHome()
	tbu.mutation.SetGoalsForHome(i)
	return tbu
}

// SetNillableGoalsForHome sets the "goalsForHome" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableGoalsForHome(i *int) *TSBiggestUpdate {
	if i != nil {
		tbu.SetGoalsForHome(*i)
	}
	return tbu
}

// AddGoalsForHome adds i to the "goalsForHome" field.
func (tbu *TSBiggestUpdate) AddGoalsForHome(i int) *TSBiggestUpdate {
	tbu.mutation.AddGoalsForHome(i)
	return tbu
}

// ClearGoalsForHome clears the value of the "goalsForHome" field.
func (tbu *TSBiggestUpdate) ClearGoalsForHome() *TSBiggestUpdate {
	tbu.mutation.ClearGoalsForHome()
	return tbu
}

// SetGoalsForAway sets the "goalsForAway" field.
func (tbu *TSBiggestUpdate) SetGoalsForAway(i int) *TSBiggestUpdate {
	tbu.mutation.ResetGoalsForAway()
	tbu.mutation.SetGoalsForAway(i)
	return tbu
}

// SetNillableGoalsForAway sets the "goalsForAway" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableGoalsForAway(i *int) *TSBiggestUpdate {
	if i != nil {
		tbu.SetGoalsForAway(*i)
	}
	return tbu
}

// AddGoalsForAway adds i to the "goalsForAway" field.
func (tbu *TSBiggestUpdate) AddGoalsForAway(i int) *TSBiggestUpdate {
	tbu.mutation.AddGoalsForAway(i)
	return tbu
}

// ClearGoalsForAway clears the value of the "goalsForAway" field.
func (tbu *TSBiggestUpdate) ClearGoalsForAway() *TSBiggestUpdate {
	tbu.mutation.ClearGoalsForAway()
	return tbu
}

// SetGoalsAgainstHome sets the "goalsAgainstHome" field.
func (tbu *TSBiggestUpdate) SetGoalsAgainstHome(i int) *TSBiggestUpdate {
	tbu.mutation.ResetGoalsAgainstHome()
	tbu.mutation.SetGoalsAgainstHome(i)
	return tbu
}

// SetNillableGoalsAgainstHome sets the "goalsAgainstHome" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableGoalsAgainstHome(i *int) *TSBiggestUpdate {
	if i != nil {
		tbu.SetGoalsAgainstHome(*i)
	}
	return tbu
}

// AddGoalsAgainstHome adds i to the "goalsAgainstHome" field.
func (tbu *TSBiggestUpdate) AddGoalsAgainstHome(i int) *TSBiggestUpdate {
	tbu.mutation.AddGoalsAgainstHome(i)
	return tbu
}

// ClearGoalsAgainstHome clears the value of the "goalsAgainstHome" field.
func (tbu *TSBiggestUpdate) ClearGoalsAgainstHome() *TSBiggestUpdate {
	tbu.mutation.ClearGoalsAgainstHome()
	return tbu
}

// SetGoalsAgainstAway sets the "goalsAgainstAway" field.
func (tbu *TSBiggestUpdate) SetGoalsAgainstAway(i int) *TSBiggestUpdate {
	tbu.mutation.ResetGoalsAgainstAway()
	tbu.mutation.SetGoalsAgainstAway(i)
	return tbu
}

// SetNillableGoalsAgainstAway sets the "goalsAgainstAway" field if the given value is not nil.
func (tbu *TSBiggestUpdate) SetNillableGoalsAgainstAway(i *int) *TSBiggestUpdate {
	if i != nil {
		tbu.SetGoalsAgainstAway(*i)
	}
	return tbu
}

// AddGoalsAgainstAway adds i to the "goalsAgainstAway" field.
func (tbu *TSBiggestUpdate) AddGoalsAgainstAway(i int) *TSBiggestUpdate {
	tbu.mutation.AddGoalsAgainstAway(i)
	return tbu
}

// ClearGoalsAgainstAway clears the value of the "goalsAgainstAway" field.
func (tbu *TSBiggestUpdate) ClearGoalsAgainstAway() *TSBiggestUpdate {
	tbu.mutation.ClearGoalsAgainstAway()
	return tbu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tbu *TSBiggestUpdate) SetLastUpdated(t time.Time) *TSBiggestUpdate {
	tbu.mutation.SetLastUpdated(t)
	return tbu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tbu *TSBiggestUpdate) ClearLastUpdated() *TSBiggestUpdate {
	tbu.mutation.ClearLastUpdated()
	return tbu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tbu *TSBiggestUpdate) SetTeamID(id int) *TSBiggestUpdate {
	tbu.mutation.SetTeamID(id)
	return tbu
}

// SetTeam sets the "team" edge to the Team entity.
func (tbu *TSBiggestUpdate) SetTeam(t *Team) *TSBiggestUpdate {
	return tbu.SetTeamID(t.ID)
}

// Mutation returns the TSBiggestMutation object of the builder.
func (tbu *TSBiggestUpdate) Mutation() *TSBiggestMutation {
	return tbu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tbu *TSBiggestUpdate) ClearTeam() *TSBiggestUpdate {
	tbu.mutation.ClearTeam()
	return tbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tbu *TSBiggestUpdate) Save(ctx context.Context) (int, error) {
	tbu.defaults()
	return withHooks(ctx, tbu.sqlSave, tbu.mutation, tbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbu *TSBiggestUpdate) SaveX(ctx context.Context) int {
	affected, err := tbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tbu *TSBiggestUpdate) Exec(ctx context.Context) error {
	_, err := tbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbu *TSBiggestUpdate) ExecX(ctx context.Context) {
	if err := tbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tbu *TSBiggestUpdate) defaults() {
	if _, ok := tbu.mutation.LastUpdated(); !ok && !tbu.mutation.LastUpdatedCleared() {
		v := tsbiggest.UpdateDefaultLastUpdated()
		tbu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tbu *TSBiggestUpdate) check() error {
	if _, ok := tbu.mutation.TeamID(); tbu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSBiggest.team"`)
	}
	return nil
}

func (tbu *TSBiggestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsbiggest.Table, tsbiggest.Columns, sqlgraph.NewFieldSpec(tsbiggest.FieldID, field.TypeInt))
	if ps := tbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tbu.mutation.StreakWins(); ok {
		_spec.SetField(tsbiggest.FieldStreakWins, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedStreakWins(); ok {
		_spec.AddField(tsbiggest.FieldStreakWins, field.TypeInt, value)
	}
	if tbu.mutation.StreakWinsCleared() {
		_spec.ClearField(tsbiggest.FieldStreakWins, field.TypeInt)
	}
	if value, ok := tbu.mutation.StreakLosses(); ok {
		_spec.SetField(tsbiggest.FieldStreakLosses, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedStreakLosses(); ok {
		_spec.AddField(tsbiggest.FieldStreakLosses, field.TypeInt, value)
	}
	if tbu.mutation.StreakLossesCleared() {
		_spec.ClearField(tsbiggest.FieldStreakLosses, field.TypeInt)
	}
	if value, ok := tbu.mutation.StreakDraws(); ok {
		_spec.SetField(tsbiggest.FieldStreakDraws, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedStreakDraws(); ok {
		_spec.AddField(tsbiggest.FieldStreakDraws, field.TypeInt, value)
	}
	if tbu.mutation.StreakDrawsCleared() {
		_spec.ClearField(tsbiggest.FieldStreakDraws, field.TypeInt)
	}
	if value, ok := tbu.mutation.WinsHome(); ok {
		_spec.SetField(tsbiggest.FieldWinsHome, field.TypeString, value)
	}
	if tbu.mutation.WinsHomeCleared() {
		_spec.ClearField(tsbiggest.FieldWinsHome, field.TypeString)
	}
	if value, ok := tbu.mutation.WinsAway(); ok {
		_spec.SetField(tsbiggest.FieldWinsAway, field.TypeString, value)
	}
	if tbu.mutation.WinsAwayCleared() {
		_spec.ClearField(tsbiggest.FieldWinsAway, field.TypeString)
	}
	if value, ok := tbu.mutation.LossesHome(); ok {
		_spec.SetField(tsbiggest.FieldLossesHome, field.TypeString, value)
	}
	if tbu.mutation.LossesHomeCleared() {
		_spec.ClearField(tsbiggest.FieldLossesHome, field.TypeString)
	}
	if value, ok := tbu.mutation.LossesAway(); ok {
		_spec.SetField(tsbiggest.FieldLossesAway, field.TypeString, value)
	}
	if tbu.mutation.LossesAwayCleared() {
		_spec.ClearField(tsbiggest.FieldLossesAway, field.TypeString)
	}
	if value, ok := tbu.mutation.GoalsForHome(); ok {
		_spec.SetField(tsbiggest.FieldGoalsForHome, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedGoalsForHome(); ok {
		_spec.AddField(tsbiggest.FieldGoalsForHome, field.TypeInt, value)
	}
	if tbu.mutation.GoalsForHomeCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsForHome, field.TypeInt)
	}
	if value, ok := tbu.mutation.GoalsForAway(); ok {
		_spec.SetField(tsbiggest.FieldGoalsForAway, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedGoalsForAway(); ok {
		_spec.AddField(tsbiggest.FieldGoalsForAway, field.TypeInt, value)
	}
	if tbu.mutation.GoalsForAwayCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsForAway, field.TypeInt)
	}
	if value, ok := tbu.mutation.GoalsAgainstHome(); ok {
		_spec.SetField(tsbiggest.FieldGoalsAgainstHome, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedGoalsAgainstHome(); ok {
		_spec.AddField(tsbiggest.FieldGoalsAgainstHome, field.TypeInt, value)
	}
	if tbu.mutation.GoalsAgainstHomeCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsAgainstHome, field.TypeInt)
	}
	if value, ok := tbu.mutation.GoalsAgainstAway(); ok {
		_spec.SetField(tsbiggest.FieldGoalsAgainstAway, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedGoalsAgainstAway(); ok {
		_spec.AddField(tsbiggest.FieldGoalsAgainstAway, field.TypeInt, value)
	}
	if tbu.mutation.GoalsAgainstAwayCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsAgainstAway, field.TypeInt)
	}
	if value, ok := tbu.mutation.LastUpdated(); ok {
		_spec.SetField(tsbiggest.FieldLastUpdated, field.TypeTime, value)
	}
	if tbu.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsbiggest.FieldLastUpdated, field.TypeTime)
	}
	if tbu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsbiggest.TeamTable,
			Columns: []string{tsbiggest.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tbu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsbiggest.TeamTable,
			Columns: []string{tsbiggest.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsbiggest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tbu.mutation.done = true
	return n, nil
}

// TSBiggestUpdateOne is the builder for updating a single TSBiggest entity.
type TSBiggestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSBiggestMutation
}

// SetStreakWins sets the "streakWins" field.
func (tbuo *TSBiggestUpdateOne) SetStreakWins(i int) *TSBiggestUpdateOne {
	tbuo.mutation.ResetStreakWins()
	tbuo.mutation.SetStreakWins(i)
	return tbuo
}

// SetNillableStreakWins sets the "streakWins" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableStreakWins(i *int) *TSBiggestUpdateOne {
	if i != nil {
		tbuo.SetStreakWins(*i)
	}
	return tbuo
}

// AddStreakWins adds i to the "streakWins" field.
func (tbuo *TSBiggestUpdateOne) AddStreakWins(i int) *TSBiggestUpdateOne {
	tbuo.mutation.AddStreakWins(i)
	return tbuo
}

// ClearStreakWins clears the value of the "streakWins" field.
func (tbuo *TSBiggestUpdateOne) ClearStreakWins() *TSBiggestUpdateOne {
	tbuo.mutation.ClearStreakWins()
	return tbuo
}

// SetStreakLosses sets the "streakLosses" field.
func (tbuo *TSBiggestUpdateOne) SetStreakLosses(i int) *TSBiggestUpdateOne {
	tbuo.mutation.ResetStreakLosses()
	tbuo.mutation.SetStreakLosses(i)
	return tbuo
}

// SetNillableStreakLosses sets the "streakLosses" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableStreakLosses(i *int) *TSBiggestUpdateOne {
	if i != nil {
		tbuo.SetStreakLosses(*i)
	}
	return tbuo
}

// AddStreakLosses adds i to the "streakLosses" field.
func (tbuo *TSBiggestUpdateOne) AddStreakLosses(i int) *TSBiggestUpdateOne {
	tbuo.mutation.AddStreakLosses(i)
	return tbuo
}

// ClearStreakLosses clears the value of the "streakLosses" field.
func (tbuo *TSBiggestUpdateOne) ClearStreakLosses() *TSBiggestUpdateOne {
	tbuo.mutation.ClearStreakLosses()
	return tbuo
}

// SetStreakDraws sets the "streakDraws" field.
func (tbuo *TSBiggestUpdateOne) SetStreakDraws(i int) *TSBiggestUpdateOne {
	tbuo.mutation.ResetStreakDraws()
	tbuo.mutation.SetStreakDraws(i)
	return tbuo
}

// SetNillableStreakDraws sets the "streakDraws" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableStreakDraws(i *int) *TSBiggestUpdateOne {
	if i != nil {
		tbuo.SetStreakDraws(*i)
	}
	return tbuo
}

// AddStreakDraws adds i to the "streakDraws" field.
func (tbuo *TSBiggestUpdateOne) AddStreakDraws(i int) *TSBiggestUpdateOne {
	tbuo.mutation.AddStreakDraws(i)
	return tbuo
}

// ClearStreakDraws clears the value of the "streakDraws" field.
func (tbuo *TSBiggestUpdateOne) ClearStreakDraws() *TSBiggestUpdateOne {
	tbuo.mutation.ClearStreakDraws()
	return tbuo
}

// SetWinsHome sets the "winsHome" field.
func (tbuo *TSBiggestUpdateOne) SetWinsHome(s string) *TSBiggestUpdateOne {
	tbuo.mutation.SetWinsHome(s)
	return tbuo
}

// SetNillableWinsHome sets the "winsHome" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableWinsHome(s *string) *TSBiggestUpdateOne {
	if s != nil {
		tbuo.SetWinsHome(*s)
	}
	return tbuo
}

// ClearWinsHome clears the value of the "winsHome" field.
func (tbuo *TSBiggestUpdateOne) ClearWinsHome() *TSBiggestUpdateOne {
	tbuo.mutation.ClearWinsHome()
	return tbuo
}

// SetWinsAway sets the "winsAway" field.
func (tbuo *TSBiggestUpdateOne) SetWinsAway(s string) *TSBiggestUpdateOne {
	tbuo.mutation.SetWinsAway(s)
	return tbuo
}

// SetNillableWinsAway sets the "winsAway" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableWinsAway(s *string) *TSBiggestUpdateOne {
	if s != nil {
		tbuo.SetWinsAway(*s)
	}
	return tbuo
}

// ClearWinsAway clears the value of the "winsAway" field.
func (tbuo *TSBiggestUpdateOne) ClearWinsAway() *TSBiggestUpdateOne {
	tbuo.mutation.ClearWinsAway()
	return tbuo
}

// SetLossesHome sets the "lossesHome" field.
func (tbuo *TSBiggestUpdateOne) SetLossesHome(s string) *TSBiggestUpdateOne {
	tbuo.mutation.SetLossesHome(s)
	return tbuo
}

// SetNillableLossesHome sets the "lossesHome" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableLossesHome(s *string) *TSBiggestUpdateOne {
	if s != nil {
		tbuo.SetLossesHome(*s)
	}
	return tbuo
}

// ClearLossesHome clears the value of the "lossesHome" field.
func (tbuo *TSBiggestUpdateOne) ClearLossesHome() *TSBiggestUpdateOne {
	tbuo.mutation.ClearLossesHome()
	return tbuo
}

// SetLossesAway sets the "lossesAway" field.
func (tbuo *TSBiggestUpdateOne) SetLossesAway(s string) *TSBiggestUpdateOne {
	tbuo.mutation.SetLossesAway(s)
	return tbuo
}

// SetNillableLossesAway sets the "lossesAway" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableLossesAway(s *string) *TSBiggestUpdateOne {
	if s != nil {
		tbuo.SetLossesAway(*s)
	}
	return tbuo
}

// ClearLossesAway clears the value of the "lossesAway" field.
func (tbuo *TSBiggestUpdateOne) ClearLossesAway() *TSBiggestUpdateOne {
	tbuo.mutation.ClearLossesAway()
	return tbuo
}

// SetGoalsForHome sets the "goalsForHome" field.
func (tbuo *TSBiggestUpdateOne) SetGoalsForHome(i int) *TSBiggestUpdateOne {
	tbuo.mutation.ResetGoalsForHome()
	tbuo.mutation.SetGoalsForHome(i)
	return tbuo
}

// SetNillableGoalsForHome sets the "goalsForHome" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableGoalsForHome(i *int) *TSBiggestUpdateOne {
	if i != nil {
		tbuo.SetGoalsForHome(*i)
	}
	return tbuo
}

// AddGoalsForHome adds i to the "goalsForHome" field.
func (tbuo *TSBiggestUpdateOne) AddGoalsForHome(i int) *TSBiggestUpdateOne {
	tbuo.mutation.AddGoalsForHome(i)
	return tbuo
}

// ClearGoalsForHome clears the value of the "goalsForHome" field.
func (tbuo *TSBiggestUpdateOne) ClearGoalsForHome() *TSBiggestUpdateOne {
	tbuo.mutation.ClearGoalsForHome()
	return tbuo
}

// SetGoalsForAway sets the "goalsForAway" field.
func (tbuo *TSBiggestUpdateOne) SetGoalsForAway(i int) *TSBiggestUpdateOne {
	tbuo.mutation.ResetGoalsForAway()
	tbuo.mutation.SetGoalsForAway(i)
	return tbuo
}

// SetNillableGoalsForAway sets the "goalsForAway" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableGoalsForAway(i *int) *TSBiggestUpdateOne {
	if i != nil {
		tbuo.SetGoalsForAway(*i)
	}
	return tbuo
}

// AddGoalsForAway adds i to the "goalsForAway" field.
func (tbuo *TSBiggestUpdateOne) AddGoalsForAway(i int) *TSBiggestUpdateOne {
	tbuo.mutation.AddGoalsForAway(i)
	return tbuo
}

// ClearGoalsForAway clears the value of the "goalsForAway" field.
func (tbuo *TSBiggestUpdateOne) ClearGoalsForAway() *TSBiggestUpdateOne {
	tbuo.mutation.ClearGoalsForAway()
	return tbuo
}

// SetGoalsAgainstHome sets the "goalsAgainstHome" field.
func (tbuo *TSBiggestUpdateOne) SetGoalsAgainstHome(i int) *TSBiggestUpdateOne {
	tbuo.mutation.ResetGoalsAgainstHome()
	tbuo.mutation.SetGoalsAgainstHome(i)
	return tbuo
}

// SetNillableGoalsAgainstHome sets the "goalsAgainstHome" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableGoalsAgainstHome(i *int) *TSBiggestUpdateOne {
	if i != nil {
		tbuo.SetGoalsAgainstHome(*i)
	}
	return tbuo
}

// AddGoalsAgainstHome adds i to the "goalsAgainstHome" field.
func (tbuo *TSBiggestUpdateOne) AddGoalsAgainstHome(i int) *TSBiggestUpdateOne {
	tbuo.mutation.AddGoalsAgainstHome(i)
	return tbuo
}

// ClearGoalsAgainstHome clears the value of the "goalsAgainstHome" field.
func (tbuo *TSBiggestUpdateOne) ClearGoalsAgainstHome() *TSBiggestUpdateOne {
	tbuo.mutation.ClearGoalsAgainstHome()
	return tbuo
}

// SetGoalsAgainstAway sets the "goalsAgainstAway" field.
func (tbuo *TSBiggestUpdateOne) SetGoalsAgainstAway(i int) *TSBiggestUpdateOne {
	tbuo.mutation.ResetGoalsAgainstAway()
	tbuo.mutation.SetGoalsAgainstAway(i)
	return tbuo
}

// SetNillableGoalsAgainstAway sets the "goalsAgainstAway" field if the given value is not nil.
func (tbuo *TSBiggestUpdateOne) SetNillableGoalsAgainstAway(i *int) *TSBiggestUpdateOne {
	if i != nil {
		tbuo.SetGoalsAgainstAway(*i)
	}
	return tbuo
}

// AddGoalsAgainstAway adds i to the "goalsAgainstAway" field.
func (tbuo *TSBiggestUpdateOne) AddGoalsAgainstAway(i int) *TSBiggestUpdateOne {
	tbuo.mutation.AddGoalsAgainstAway(i)
	return tbuo
}

// ClearGoalsAgainstAway clears the value of the "goalsAgainstAway" field.
func (tbuo *TSBiggestUpdateOne) ClearGoalsAgainstAway() *TSBiggestUpdateOne {
	tbuo.mutation.ClearGoalsAgainstAway()
	return tbuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tbuo *TSBiggestUpdateOne) SetLastUpdated(t time.Time) *TSBiggestUpdateOne {
	tbuo.mutation.SetLastUpdated(t)
	return tbuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tbuo *TSBiggestUpdateOne) ClearLastUpdated() *TSBiggestUpdateOne {
	tbuo.mutation.ClearLastUpdated()
	return tbuo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tbuo *TSBiggestUpdateOne) SetTeamID(id int) *TSBiggestUpdateOne {
	tbuo.mutation.SetTeamID(id)
	return tbuo
}

// SetTeam sets the "team" edge to the Team entity.
func (tbuo *TSBiggestUpdateOne) SetTeam(t *Team) *TSBiggestUpdateOne {
	return tbuo.SetTeamID(t.ID)
}

// Mutation returns the TSBiggestMutation object of the builder.
func (tbuo *TSBiggestUpdateOne) Mutation() *TSBiggestMutation {
	return tbuo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tbuo *TSBiggestUpdateOne) ClearTeam() *TSBiggestUpdateOne {
	tbuo.mutation.ClearTeam()
	return tbuo
}

// Where appends a list predicates to the TSBiggestUpdate builder.
func (tbuo *TSBiggestUpdateOne) Where(ps ...predicate.TSBiggest) *TSBiggestUpdateOne {
	tbuo.mutation.Where(ps...)
	return tbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tbuo *TSBiggestUpdateOne) Select(field string, fields ...string) *TSBiggestUpdateOne {
	tbuo.fields = append([]string{field}, fields...)
	return tbuo
}

// Save executes the query and returns the updated TSBiggest entity.
func (tbuo *TSBiggestUpdateOne) Save(ctx context.Context) (*TSBiggest, error) {
	tbuo.defaults()
	return withHooks(ctx, tbuo.sqlSave, tbuo.mutation, tbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbuo *TSBiggestUpdateOne) SaveX(ctx context.Context) *TSBiggest {
	node, err := tbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tbuo *TSBiggestUpdateOne) Exec(ctx context.Context) error {
	_, err := tbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbuo *TSBiggestUpdateOne) ExecX(ctx context.Context) {
	if err := tbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tbuo *TSBiggestUpdateOne) defaults() {
	if _, ok := tbuo.mutation.LastUpdated(); !ok && !tbuo.mutation.LastUpdatedCleared() {
		v := tsbiggest.UpdateDefaultLastUpdated()
		tbuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tbuo *TSBiggestUpdateOne) check() error {
	if _, ok := tbuo.mutation.TeamID(); tbuo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSBiggest.team"`)
	}
	return nil
}

func (tbuo *TSBiggestUpdateOne) sqlSave(ctx context.Context) (_node *TSBiggest, err error) {
	if err := tbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsbiggest.Table, tsbiggest.Columns, sqlgraph.NewFieldSpec(tsbiggest.FieldID, field.TypeInt))
	id, ok := tbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSBiggest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tsbiggest.FieldID)
		for _, f := range fields {
			if !tsbiggest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tsbiggest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tbuo.mutation.StreakWins(); ok {
		_spec.SetField(tsbiggest.FieldStreakWins, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedStreakWins(); ok {
		_spec.AddField(tsbiggest.FieldStreakWins, field.TypeInt, value)
	}
	if tbuo.mutation.StreakWinsCleared() {
		_spec.ClearField(tsbiggest.FieldStreakWins, field.TypeInt)
	}
	if value, ok := tbuo.mutation.StreakLosses(); ok {
		_spec.SetField(tsbiggest.FieldStreakLosses, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedStreakLosses(); ok {
		_spec.AddField(tsbiggest.FieldStreakLosses, field.TypeInt, value)
	}
	if tbuo.mutation.StreakLossesCleared() {
		_spec.ClearField(tsbiggest.FieldStreakLosses, field.TypeInt)
	}
	if value, ok := tbuo.mutation.StreakDraws(); ok {
		_spec.SetField(tsbiggest.FieldStreakDraws, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedStreakDraws(); ok {
		_spec.AddField(tsbiggest.FieldStreakDraws, field.TypeInt, value)
	}
	if tbuo.mutation.StreakDrawsCleared() {
		_spec.ClearField(tsbiggest.FieldStreakDraws, field.TypeInt)
	}
	if value, ok := tbuo.mutation.WinsHome(); ok {
		_spec.SetField(tsbiggest.FieldWinsHome, field.TypeString, value)
	}
	if tbuo.mutation.WinsHomeCleared() {
		_spec.ClearField(tsbiggest.FieldWinsHome, field.TypeString)
	}
	if value, ok := tbuo.mutation.WinsAway(); ok {
		_spec.SetField(tsbiggest.FieldWinsAway, field.TypeString, value)
	}
	if tbuo.mutation.WinsAwayCleared() {
		_spec.ClearField(tsbiggest.FieldWinsAway, field.TypeString)
	}
	if value, ok := tbuo.mutation.LossesHome(); ok {
		_spec.SetField(tsbiggest.FieldLossesHome, field.TypeString, value)
	}
	if tbuo.mutation.LossesHomeCleared() {
		_spec.ClearField(tsbiggest.FieldLossesHome, field.TypeString)
	}
	if value, ok := tbuo.mutation.LossesAway(); ok {
		_spec.SetField(tsbiggest.FieldLossesAway, field.TypeString, value)
	}
	if tbuo.mutation.LossesAwayCleared() {
		_spec.ClearField(tsbiggest.FieldLossesAway, field.TypeString)
	}
	if value, ok := tbuo.mutation.GoalsForHome(); ok {
		_spec.SetField(tsbiggest.FieldGoalsForHome, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedGoalsForHome(); ok {
		_spec.AddField(tsbiggest.FieldGoalsForHome, field.TypeInt, value)
	}
	if tbuo.mutation.GoalsForHomeCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsForHome, field.TypeInt)
	}
	if value, ok := tbuo.mutation.GoalsForAway(); ok {
		_spec.SetField(tsbiggest.FieldGoalsForAway, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedGoalsForAway(); ok {
		_spec.AddField(tsbiggest.FieldGoalsForAway, field.TypeInt, value)
	}
	if tbuo.mutation.GoalsForAwayCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsForAway, field.TypeInt)
	}
	if value, ok := tbuo.mutation.GoalsAgainstHome(); ok {
		_spec.SetField(tsbiggest.FieldGoalsAgainstHome, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedGoalsAgainstHome(); ok {
		_spec.AddField(tsbiggest.FieldGoalsAgainstHome, field.TypeInt, value)
	}
	if tbuo.mutation.GoalsAgainstHomeCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsAgainstHome, field.TypeInt)
	}
	if value, ok := tbuo.mutation.GoalsAgainstAway(); ok {
		_spec.SetField(tsbiggest.FieldGoalsAgainstAway, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedGoalsAgainstAway(); ok {
		_spec.AddField(tsbiggest.FieldGoalsAgainstAway, field.TypeInt, value)
	}
	if tbuo.mutation.GoalsAgainstAwayCleared() {
		_spec.ClearField(tsbiggest.FieldGoalsAgainstAway, field.TypeInt)
	}
	if value, ok := tbuo.mutation.LastUpdated(); ok {
		_spec.SetField(tsbiggest.FieldLastUpdated, field.TypeTime, value)
	}
	if tbuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsbiggest.FieldLastUpdated, field.TypeTime)
	}
	if tbuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsbiggest.TeamTable,
			Columns: []string{tsbiggest.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tbuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsbiggest.TeamTable,
			Columns: []string{tsbiggest.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TSBiggest{config: tbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsbiggest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tbuo.mutation.done = true
	return _node, nil
}
