// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pssubstitutes"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSSubstitutes is the model entity for the PSSubstitutes schema.
type PSSubstitutes struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// In holds the value of the "In" field.
	In int `json:"In,omitempty"`
	// Out holds the value of the "Out" field.
	Out int `json:"Out,omitempty"`
	// Bench holds the value of the "Bench" field.
	Bench int `json:"Bench,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSSubstitutesQuery when eager-loading is set.
	Edges                       PSSubstitutesEdges `json:"edges"`
	player_stats_ps_substitutes *int
	selectValues                sql.SelectValues
}

// PSSubstitutesEdges holds the relations/edges for other nodes in the graph.
type PSSubstitutesEdges struct {
	// PlayerStats holds the value of the playerStats edge.
	PlayerStats *PlayerStats `json:"playerStats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerStatsOrErr returns the PlayerStats value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PSSubstitutesEdges) PlayerStatsOrErr() (*PlayerStats, error) {
	if e.loadedTypes[0] {
		if e.PlayerStats == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playerstats.Label}
		}
		return e.PlayerStats, nil
	}
	return nil, &NotLoadedError{edge: "playerStats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSSubstitutes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pssubstitutes.FieldID, pssubstitutes.FieldIn, pssubstitutes.FieldOut, pssubstitutes.FieldBench:
			values[i] = new(sql.NullInt64)
		case pssubstitutes.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case pssubstitutes.ForeignKeys[0]: // player_stats_ps_substitutes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSSubstitutes fields.
func (ps *PSSubstitutes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pssubstitutes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case pssubstitutes.FieldIn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field In", values[i])
			} else if value.Valid {
				ps.In = int(value.Int64)
			}
		case pssubstitutes.FieldOut:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Out", values[i])
			} else if value.Valid {
				ps.Out = int(value.Int64)
			}
		case pssubstitutes.FieldBench:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Bench", values[i])
			} else if value.Valid {
				ps.Bench = int(value.Int64)
			}
		case pssubstitutes.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				ps.LastUpdated = value.Time
			}
		case pssubstitutes.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_stats_ps_substitutes", value)
			} else if value.Valid {
				ps.player_stats_ps_substitutes = new(int)
				*ps.player_stats_ps_substitutes = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSSubstitutes.
// This includes values selected through modifiers, order, etc.
func (ps *PSSubstitutes) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryPlayerStats queries the "playerStats" edge of the PSSubstitutes entity.
func (ps *PSSubstitutes) QueryPlayerStats() *PlayerStatsQuery {
	return NewPSSubstitutesClient(ps.config).QueryPlayerStats(ps)
}

// Update returns a builder for updating this PSSubstitutes.
// Note that you need to call PSSubstitutes.Unwrap() before calling this method if this PSSubstitutes
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PSSubstitutes) Update() *PSSubstitutesUpdateOne {
	return NewPSSubstitutesClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PSSubstitutes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PSSubstitutes) Unwrap() *PSSubstitutes {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSSubstitutes is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PSSubstitutes) String() string {
	var builder strings.Builder
	builder.WriteString("PSSubstitutes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("In=")
	builder.WriteString(fmt.Sprintf("%v", ps.In))
	builder.WriteString(", ")
	builder.WriteString("Out=")
	builder.WriteString(fmt.Sprintf("%v", ps.Out))
	builder.WriteString(", ")
	builder.WriteString("Bench=")
	builder.WriteString(fmt.Sprintf("%v", ps.Bench))
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(ps.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PSSubstitutesSlice is a parsable slice of PSSubstitutes.
type PSSubstitutesSlice []*PSSubstitutes
