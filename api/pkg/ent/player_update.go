// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/birth"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/club"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/country"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/league"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/matchplayer"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psdefense"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgames"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgoals"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psoffense"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/season"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/squad"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlayerUpdate) SetName(s string) *PlayerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetFirstname sets the "firstname" field.
func (pu *PlayerUpdate) SetFirstname(s string) *PlayerUpdate {
	pu.mutation.SetFirstname(s)
	return pu
}

// SetLastname sets the "lastname" field.
func (pu *PlayerUpdate) SetLastname(s string) *PlayerUpdate {
	pu.mutation.SetLastname(s)
	return pu
}

// SetAge sets the "age" field.
func (pu *PlayerUpdate) SetAge(i int) *PlayerUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// AddAge adds i to the "age" field.
func (pu *PlayerUpdate) AddAge(i int) *PlayerUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetHeight sets the "height" field.
func (pu *PlayerUpdate) SetHeight(s string) *PlayerUpdate {
	pu.mutation.SetHeight(s)
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PlayerUpdate) SetWeight(s string) *PlayerUpdate {
	pu.mutation.SetWeight(s)
	return pu
}

// SetInjured sets the "injured" field.
func (pu *PlayerUpdate) SetInjured(b bool) *PlayerUpdate {
	pu.mutation.SetInjured(b)
	return pu
}

// SetPhoto sets the "photo" field.
func (pu *PlayerUpdate) SetPhoto(s string) *PlayerUpdate {
	pu.mutation.SetPhoto(s)
	return pu
}

// SetLastUpdated sets the "lastUpdated" field.
func (pu *PlayerUpdate) SetLastUpdated(t time.Time) *PlayerUpdate {
	pu.mutation.SetLastUpdated(t)
	return pu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (pu *PlayerUpdate) ClearLastUpdated() *PlayerUpdate {
	pu.mutation.ClearLastUpdated()
	return pu
}

// SetForm sets the "form" field.
func (pu *PlayerUpdate) SetForm(s string) *PlayerUpdate {
	pu.mutation.SetForm(s)
	return pu
}

// SetNillableForm sets the "form" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableForm(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetForm(*s)
	}
	return pu
}

// ClearForm clears the value of the "form" field.
func (pu *PlayerUpdate) ClearForm() *PlayerUpdate {
	pu.mutation.ClearForm()
	return pu
}

// SetBirthID sets the "birth" edge to the Birth entity by ID.
func (pu *PlayerUpdate) SetBirthID(id int) *PlayerUpdate {
	pu.mutation.SetBirthID(id)
	return pu
}

// SetNillableBirthID sets the "birth" edge to the Birth entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableBirthID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetBirthID(*id)
	}
	return pu
}

// SetBirth sets the "birth" edge to the Birth entity.
func (pu *PlayerUpdate) SetBirth(b *Birth) *PlayerUpdate {
	return pu.SetBirthID(b.ID)
}

// SetNationalityID sets the "nationality" edge to the Country entity by ID.
func (pu *PlayerUpdate) SetNationalityID(id int) *PlayerUpdate {
	pu.mutation.SetNationalityID(id)
	return pu
}

// SetNillableNationalityID sets the "nationality" edge to the Country entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableNationalityID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetNationalityID(*id)
	}
	return pu
}

// SetNationality sets the "nationality" edge to the Country entity.
func (pu *PlayerUpdate) SetNationality(c *Country) *PlayerUpdate {
	return pu.SetNationalityID(c.ID)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (pu *PlayerUpdate) AddSquadIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddSquadIDs(ids...)
	return pu
}

// AddSquad adds the "squad" edges to the Squad entity.
func (pu *PlayerUpdate) AddSquad(s ...*Squad) *PlayerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSquadIDs(ids...)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (pu *PlayerUpdate) AddPlayerEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPlayerEventIDs(ids...)
	return pu
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) AddPlayerEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (pu *PlayerUpdate) AddMatchPlayerIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddMatchPlayerIDs(ids...)
	return pu
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (pu *PlayerUpdate) AddMatchPlayer(m ...*MatchPlayer) *PlayerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (pu *PlayerUpdate) AddAssistEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddAssistEventIDs(ids...)
	return pu
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) AddAssistEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddAssistEventIDs(ids...)
}

// AddPsgameIDs adds the "psgames" edge to the PSGames entity by IDs.
func (pu *PlayerUpdate) AddPsgameIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPsgameIDs(ids...)
	return pu
}

// AddPsgames adds the "psgames" edges to the PSGames entity.
func (pu *PlayerUpdate) AddPsgames(p ...*PSGames) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPsgameIDs(ids...)
}

// AddPsgoalIDs adds the "psgoals" edge to the PSGoals entity by IDs.
func (pu *PlayerUpdate) AddPsgoalIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPsgoalIDs(ids...)
	return pu
}

// AddPsgoals adds the "psgoals" edges to the PSGoals entity.
func (pu *PlayerUpdate) AddPsgoals(p ...*PSGoals) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPsgoalIDs(ids...)
}

// AddPsdefenseIDs adds the "psdefense" edge to the PSDefense entity by IDs.
func (pu *PlayerUpdate) AddPsdefenseIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPsdefenseIDs(ids...)
	return pu
}

// AddPsdefense adds the "psdefense" edges to the PSDefense entity.
func (pu *PlayerUpdate) AddPsdefense(p ...*PSDefense) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPsdefenseIDs(ids...)
}

// AddPsoffenseIDs adds the "psoffense" edge to the PSOffense entity by IDs.
func (pu *PlayerUpdate) AddPsoffenseIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPsoffenseIDs(ids...)
	return pu
}

// AddPsoffense adds the "psoffense" edges to the PSOffense entity.
func (pu *PlayerUpdate) AddPsoffense(p ...*PSOffense) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPsoffenseIDs(ids...)
}

// AddPspenaltyIDs adds the "pspenalty" edge to the PSPenalty entity by IDs.
func (pu *PlayerUpdate) AddPspenaltyIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPspenaltyIDs(ids...)
	return pu
}

// AddPspenalty adds the "pspenalty" edges to the PSPenalty entity.
func (pu *PlayerUpdate) AddPspenalty(p ...*PSPenalty) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPspenaltyIDs(ids...)
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (pu *PlayerUpdate) SetSeasonID(id int) *PlayerUpdate {
	pu.mutation.SetSeasonID(id)
	return pu
}

// SetNillableSeasonID sets the "season" edge to the Season entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableSeasonID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetSeasonID(*id)
	}
	return pu
}

// SetSeason sets the "season" edge to the Season entity.
func (pu *PlayerUpdate) SetSeason(s *Season) *PlayerUpdate {
	return pu.SetSeasonID(s.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (pu *PlayerUpdate) SetTeamID(id int) *PlayerUpdate {
	pu.mutation.SetTeamID(id)
	return pu
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableTeamID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetTeamID(*id)
	}
	return pu
}

// SetTeam sets the "team" edge to the Team entity.
func (pu *PlayerUpdate) SetTeam(t *Team) *PlayerUpdate {
	return pu.SetTeamID(t.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (pu *PlayerUpdate) SetClubID(id int) *PlayerUpdate {
	pu.mutation.SetClubID(id)
	return pu
}

// SetNillableClubID sets the "club" edge to the Club entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableClubID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetClubID(*id)
	}
	return pu
}

// SetClub sets the "club" edge to the Club entity.
func (pu *PlayerUpdate) SetClub(c *Club) *PlayerUpdate {
	return pu.SetClubID(c.ID)
}

// SetLeagueID sets the "league" edge to the League entity by ID.
func (pu *PlayerUpdate) SetLeagueID(id int) *PlayerUpdate {
	pu.mutation.SetLeagueID(id)
	return pu
}

// SetNillableLeagueID sets the "league" edge to the League entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableLeagueID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetLeagueID(*id)
	}
	return pu
}

// SetLeague sets the "league" edge to the League entity.
func (pu *PlayerUpdate) SetLeague(l *League) *PlayerUpdate {
	return pu.SetLeagueID(l.ID)
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// ClearBirth clears the "birth" edge to the Birth entity.
func (pu *PlayerUpdate) ClearBirth() *PlayerUpdate {
	pu.mutation.ClearBirth()
	return pu
}

// ClearNationality clears the "nationality" edge to the Country entity.
func (pu *PlayerUpdate) ClearNationality() *PlayerUpdate {
	pu.mutation.ClearNationality()
	return pu
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (pu *PlayerUpdate) ClearSquad() *PlayerUpdate {
	pu.mutation.ClearSquad()
	return pu
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (pu *PlayerUpdate) RemoveSquadIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveSquadIDs(ids...)
	return pu
}

// RemoveSquad removes "squad" edges to Squad entities.
func (pu *PlayerUpdate) RemoveSquad(s ...*Squad) *PlayerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSquadIDs(ids...)
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) ClearPlayerEvents() *PlayerUpdate {
	pu.mutation.ClearPlayerEvents()
	return pu
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (pu *PlayerUpdate) RemovePlayerEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePlayerEventIDs(ids...)
	return pu
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (pu *PlayerUpdate) RemovePlayerEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (pu *PlayerUpdate) ClearMatchPlayer() *PlayerUpdate {
	pu.mutation.ClearMatchPlayer()
	return pu
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (pu *PlayerUpdate) RemoveMatchPlayerIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveMatchPlayerIDs(ids...)
	return pu
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (pu *PlayerUpdate) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) ClearAssistEvents() *PlayerUpdate {
	pu.mutation.ClearAssistEvents()
	return pu
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (pu *PlayerUpdate) RemoveAssistEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveAssistEventIDs(ids...)
	return pu
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (pu *PlayerUpdate) RemoveAssistEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveAssistEventIDs(ids...)
}

// ClearPsgames clears all "psgames" edges to the PSGames entity.
func (pu *PlayerUpdate) ClearPsgames() *PlayerUpdate {
	pu.mutation.ClearPsgames()
	return pu
}

// RemovePsgameIDs removes the "psgames" edge to PSGames entities by IDs.
func (pu *PlayerUpdate) RemovePsgameIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePsgameIDs(ids...)
	return pu
}

// RemovePsgames removes "psgames" edges to PSGames entities.
func (pu *PlayerUpdate) RemovePsgames(p ...*PSGames) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePsgameIDs(ids...)
}

// ClearPsgoals clears all "psgoals" edges to the PSGoals entity.
func (pu *PlayerUpdate) ClearPsgoals() *PlayerUpdate {
	pu.mutation.ClearPsgoals()
	return pu
}

// RemovePsgoalIDs removes the "psgoals" edge to PSGoals entities by IDs.
func (pu *PlayerUpdate) RemovePsgoalIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePsgoalIDs(ids...)
	return pu
}

// RemovePsgoals removes "psgoals" edges to PSGoals entities.
func (pu *PlayerUpdate) RemovePsgoals(p ...*PSGoals) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePsgoalIDs(ids...)
}

// ClearPsdefense clears all "psdefense" edges to the PSDefense entity.
func (pu *PlayerUpdate) ClearPsdefense() *PlayerUpdate {
	pu.mutation.ClearPsdefense()
	return pu
}

// RemovePsdefenseIDs removes the "psdefense" edge to PSDefense entities by IDs.
func (pu *PlayerUpdate) RemovePsdefenseIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePsdefenseIDs(ids...)
	return pu
}

// RemovePsdefense removes "psdefense" edges to PSDefense entities.
func (pu *PlayerUpdate) RemovePsdefense(p ...*PSDefense) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePsdefenseIDs(ids...)
}

// ClearPsoffense clears all "psoffense" edges to the PSOffense entity.
func (pu *PlayerUpdate) ClearPsoffense() *PlayerUpdate {
	pu.mutation.ClearPsoffense()
	return pu
}

// RemovePsoffenseIDs removes the "psoffense" edge to PSOffense entities by IDs.
func (pu *PlayerUpdate) RemovePsoffenseIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePsoffenseIDs(ids...)
	return pu
}

// RemovePsoffense removes "psoffense" edges to PSOffense entities.
func (pu *PlayerUpdate) RemovePsoffense(p ...*PSOffense) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePsoffenseIDs(ids...)
}

// ClearPspenalty clears all "pspenalty" edges to the PSPenalty entity.
func (pu *PlayerUpdate) ClearPspenalty() *PlayerUpdate {
	pu.mutation.ClearPspenalty()
	return pu
}

// RemovePspenaltyIDs removes the "pspenalty" edge to PSPenalty entities by IDs.
func (pu *PlayerUpdate) RemovePspenaltyIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePspenaltyIDs(ids...)
	return pu
}

// RemovePspenalty removes "pspenalty" edges to PSPenalty entities.
func (pu *PlayerUpdate) RemovePspenalty(p ...*PSPenalty) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePspenaltyIDs(ids...)
}

// ClearSeason clears the "season" edge to the Season entity.
func (pu *PlayerUpdate) ClearSeason() *PlayerUpdate {
	pu.mutation.ClearSeason()
	return pu
}

// ClearTeam clears the "team" edge to the Team entity.
func (pu *PlayerUpdate) ClearTeam() *PlayerUpdate {
	pu.mutation.ClearTeam()
	return pu
}

// ClearClub clears the "club" edge to the Club entity.
func (pu *PlayerUpdate) ClearClub() *PlayerUpdate {
	pu.mutation.ClearClub()
	return pu
}

// ClearLeague clears the "league" edge to the League entity.
func (pu *PlayerUpdate) ClearLeague() *PlayerUpdate {
	pu.mutation.ClearLeague()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlayerUpdate) defaults() {
	if _, ok := pu.mutation.LastUpdated(); !ok && !pu.mutation.LastUpdatedCleared() {
		v := player.UpdateDefaultLastUpdated()
		pu.mutation.SetLastUpdated(v)
	}
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Firstname(); ok {
		_spec.SetField(player.FieldFirstname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Lastname(); ok {
		_spec.SetField(player.FieldLastname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.SetField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.AddField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.SetField(player.FieldHeight, field.TypeString, value)
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.SetField(player.FieldWeight, field.TypeString, value)
	}
	if value, ok := pu.mutation.Injured(); ok {
		_spec.SetField(player.FieldInjured, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Photo(); ok {
		_spec.SetField(player.FieldPhoto, field.TypeString, value)
	}
	if value, ok := pu.mutation.LastUpdated(); ok {
		_spec.SetField(player.FieldLastUpdated, field.TypeTime, value)
	}
	if pu.mutation.LastUpdatedCleared() {
		_spec.ClearField(player.FieldLastUpdated, field.TypeTime)
	}
	if value, ok := pu.mutation.Form(); ok {
		_spec.SetField(player.FieldForm, field.TypeString, value)
	}
	if pu.mutation.FormCleared() {
		_spec.ClearField(player.FieldForm, field.TypeString)
	}
	if pu.mutation.BirthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BirthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NationalityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSquadIDs(); len(nodes) > 0 && !pu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !pu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !pu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !pu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgamesTable,
			Columns: []string{player.PsgamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPsgamesIDs(); len(nodes) > 0 && !pu.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgamesTable,
			Columns: []string{player.PsgamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PsgamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgamesTable,
			Columns: []string{player.PsgamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgoalsTable,
			Columns: []string{player.PsgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPsgoalsIDs(); len(nodes) > 0 && !pu.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgoalsTable,
			Columns: []string{player.PsgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PsgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgoalsTable,
			Columns: []string{player.PsgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsdefenseTable,
			Columns: []string{player.PsdefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPsdefenseIDs(); len(nodes) > 0 && !pu.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsdefenseTable,
			Columns: []string{player.PsdefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PsdefenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsdefenseTable,
			Columns: []string{player.PsdefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsoffenseTable,
			Columns: []string{player.PsoffenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPsoffenseIDs(); len(nodes) > 0 && !pu.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsoffenseTable,
			Columns: []string{player.PsoffenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PsoffenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsoffenseTable,
			Columns: []string{player.PsoffenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PspenaltyTable,
			Columns: []string{player.PspenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPspenaltyIDs(); len(nodes) > 0 && !pu.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PspenaltyTable,
			Columns: []string{player.PspenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PspenaltyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PspenaltyTable,
			Columns: []string{player.PspenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.SeasonTable,
			Columns: []string{player.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.SeasonTable,
			Columns: []string{player.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.ClubTable,
			Columns: []string{player.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.ClubTable,
			Columns: []string{player.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LeagueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.LeagueTable,
			Columns: []string{player.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LeagueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.LeagueTable,
			Columns: []string{player.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMutation
}

// SetName sets the "name" field.
func (puo *PlayerUpdateOne) SetName(s string) *PlayerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetFirstname sets the "firstname" field.
func (puo *PlayerUpdateOne) SetFirstname(s string) *PlayerUpdateOne {
	puo.mutation.SetFirstname(s)
	return puo
}

// SetLastname sets the "lastname" field.
func (puo *PlayerUpdateOne) SetLastname(s string) *PlayerUpdateOne {
	puo.mutation.SetLastname(s)
	return puo
}

// SetAge sets the "age" field.
func (puo *PlayerUpdateOne) SetAge(i int) *PlayerUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// AddAge adds i to the "age" field.
func (puo *PlayerUpdateOne) AddAge(i int) *PlayerUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetHeight sets the "height" field.
func (puo *PlayerUpdateOne) SetHeight(s string) *PlayerUpdateOne {
	puo.mutation.SetHeight(s)
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PlayerUpdateOne) SetWeight(s string) *PlayerUpdateOne {
	puo.mutation.SetWeight(s)
	return puo
}

// SetInjured sets the "injured" field.
func (puo *PlayerUpdateOne) SetInjured(b bool) *PlayerUpdateOne {
	puo.mutation.SetInjured(b)
	return puo
}

// SetPhoto sets the "photo" field.
func (puo *PlayerUpdateOne) SetPhoto(s string) *PlayerUpdateOne {
	puo.mutation.SetPhoto(s)
	return puo
}

// SetLastUpdated sets the "lastUpdated" field.
func (puo *PlayerUpdateOne) SetLastUpdated(t time.Time) *PlayerUpdateOne {
	puo.mutation.SetLastUpdated(t)
	return puo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (puo *PlayerUpdateOne) ClearLastUpdated() *PlayerUpdateOne {
	puo.mutation.ClearLastUpdated()
	return puo
}

// SetForm sets the "form" field.
func (puo *PlayerUpdateOne) SetForm(s string) *PlayerUpdateOne {
	puo.mutation.SetForm(s)
	return puo
}

// SetNillableForm sets the "form" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableForm(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetForm(*s)
	}
	return puo
}

// ClearForm clears the value of the "form" field.
func (puo *PlayerUpdateOne) ClearForm() *PlayerUpdateOne {
	puo.mutation.ClearForm()
	return puo
}

// SetBirthID sets the "birth" edge to the Birth entity by ID.
func (puo *PlayerUpdateOne) SetBirthID(id int) *PlayerUpdateOne {
	puo.mutation.SetBirthID(id)
	return puo
}

// SetNillableBirthID sets the "birth" edge to the Birth entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableBirthID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetBirthID(*id)
	}
	return puo
}

// SetBirth sets the "birth" edge to the Birth entity.
func (puo *PlayerUpdateOne) SetBirth(b *Birth) *PlayerUpdateOne {
	return puo.SetBirthID(b.ID)
}

// SetNationalityID sets the "nationality" edge to the Country entity by ID.
func (puo *PlayerUpdateOne) SetNationalityID(id int) *PlayerUpdateOne {
	puo.mutation.SetNationalityID(id)
	return puo
}

// SetNillableNationalityID sets the "nationality" edge to the Country entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableNationalityID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetNationalityID(*id)
	}
	return puo
}

// SetNationality sets the "nationality" edge to the Country entity.
func (puo *PlayerUpdateOne) SetNationality(c *Country) *PlayerUpdateOne {
	return puo.SetNationalityID(c.ID)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (puo *PlayerUpdateOne) AddSquadIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddSquadIDs(ids...)
	return puo
}

// AddSquad adds the "squad" edges to the Squad entity.
func (puo *PlayerUpdateOne) AddSquad(s ...*Squad) *PlayerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSquadIDs(ids...)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (puo *PlayerUpdateOne) AddPlayerEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPlayerEventIDs(ids...)
	return puo
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) AddPlayerEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (puo *PlayerUpdateOne) AddMatchPlayerIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddMatchPlayerIDs(ids...)
	return puo
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (puo *PlayerUpdateOne) AddMatchPlayer(m ...*MatchPlayer) *PlayerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (puo *PlayerUpdateOne) AddAssistEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddAssistEventIDs(ids...)
	return puo
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) AddAssistEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddAssistEventIDs(ids...)
}

// AddPsgameIDs adds the "psgames" edge to the PSGames entity by IDs.
func (puo *PlayerUpdateOne) AddPsgameIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPsgameIDs(ids...)
	return puo
}

// AddPsgames adds the "psgames" edges to the PSGames entity.
func (puo *PlayerUpdateOne) AddPsgames(p ...*PSGames) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPsgameIDs(ids...)
}

// AddPsgoalIDs adds the "psgoals" edge to the PSGoals entity by IDs.
func (puo *PlayerUpdateOne) AddPsgoalIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPsgoalIDs(ids...)
	return puo
}

// AddPsgoals adds the "psgoals" edges to the PSGoals entity.
func (puo *PlayerUpdateOne) AddPsgoals(p ...*PSGoals) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPsgoalIDs(ids...)
}

// AddPsdefenseIDs adds the "psdefense" edge to the PSDefense entity by IDs.
func (puo *PlayerUpdateOne) AddPsdefenseIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPsdefenseIDs(ids...)
	return puo
}

// AddPsdefense adds the "psdefense" edges to the PSDefense entity.
func (puo *PlayerUpdateOne) AddPsdefense(p ...*PSDefense) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPsdefenseIDs(ids...)
}

// AddPsoffenseIDs adds the "psoffense" edge to the PSOffense entity by IDs.
func (puo *PlayerUpdateOne) AddPsoffenseIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPsoffenseIDs(ids...)
	return puo
}

// AddPsoffense adds the "psoffense" edges to the PSOffense entity.
func (puo *PlayerUpdateOne) AddPsoffense(p ...*PSOffense) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPsoffenseIDs(ids...)
}

// AddPspenaltyIDs adds the "pspenalty" edge to the PSPenalty entity by IDs.
func (puo *PlayerUpdateOne) AddPspenaltyIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPspenaltyIDs(ids...)
	return puo
}

// AddPspenalty adds the "pspenalty" edges to the PSPenalty entity.
func (puo *PlayerUpdateOne) AddPspenalty(p ...*PSPenalty) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPspenaltyIDs(ids...)
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (puo *PlayerUpdateOne) SetSeasonID(id int) *PlayerUpdateOne {
	puo.mutation.SetSeasonID(id)
	return puo
}

// SetNillableSeasonID sets the "season" edge to the Season entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableSeasonID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetSeasonID(*id)
	}
	return puo
}

// SetSeason sets the "season" edge to the Season entity.
func (puo *PlayerUpdateOne) SetSeason(s *Season) *PlayerUpdateOne {
	return puo.SetSeasonID(s.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (puo *PlayerUpdateOne) SetTeamID(id int) *PlayerUpdateOne {
	puo.mutation.SetTeamID(id)
	return puo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableTeamID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetTeamID(*id)
	}
	return puo
}

// SetTeam sets the "team" edge to the Team entity.
func (puo *PlayerUpdateOne) SetTeam(t *Team) *PlayerUpdateOne {
	return puo.SetTeamID(t.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (puo *PlayerUpdateOne) SetClubID(id int) *PlayerUpdateOne {
	puo.mutation.SetClubID(id)
	return puo
}

// SetNillableClubID sets the "club" edge to the Club entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableClubID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetClubID(*id)
	}
	return puo
}

// SetClub sets the "club" edge to the Club entity.
func (puo *PlayerUpdateOne) SetClub(c *Club) *PlayerUpdateOne {
	return puo.SetClubID(c.ID)
}

// SetLeagueID sets the "league" edge to the League entity by ID.
func (puo *PlayerUpdateOne) SetLeagueID(id int) *PlayerUpdateOne {
	puo.mutation.SetLeagueID(id)
	return puo
}

// SetNillableLeagueID sets the "league" edge to the League entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableLeagueID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetLeagueID(*id)
	}
	return puo
}

// SetLeague sets the "league" edge to the League entity.
func (puo *PlayerUpdateOne) SetLeague(l *League) *PlayerUpdateOne {
	return puo.SetLeagueID(l.ID)
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// ClearBirth clears the "birth" edge to the Birth entity.
func (puo *PlayerUpdateOne) ClearBirth() *PlayerUpdateOne {
	puo.mutation.ClearBirth()
	return puo
}

// ClearNationality clears the "nationality" edge to the Country entity.
func (puo *PlayerUpdateOne) ClearNationality() *PlayerUpdateOne {
	puo.mutation.ClearNationality()
	return puo
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (puo *PlayerUpdateOne) ClearSquad() *PlayerUpdateOne {
	puo.mutation.ClearSquad()
	return puo
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (puo *PlayerUpdateOne) RemoveSquadIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveSquadIDs(ids...)
	return puo
}

// RemoveSquad removes "squad" edges to Squad entities.
func (puo *PlayerUpdateOne) RemoveSquad(s ...*Squad) *PlayerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSquadIDs(ids...)
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) ClearPlayerEvents() *PlayerUpdateOne {
	puo.mutation.ClearPlayerEvents()
	return puo
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (puo *PlayerUpdateOne) RemovePlayerEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePlayerEventIDs(ids...)
	return puo
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (puo *PlayerUpdateOne) RemovePlayerEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (puo *PlayerUpdateOne) ClearMatchPlayer() *PlayerUpdateOne {
	puo.mutation.ClearMatchPlayer()
	return puo
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (puo *PlayerUpdateOne) RemoveMatchPlayerIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveMatchPlayerIDs(ids...)
	return puo
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (puo *PlayerUpdateOne) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) ClearAssistEvents() *PlayerUpdateOne {
	puo.mutation.ClearAssistEvents()
	return puo
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (puo *PlayerUpdateOne) RemoveAssistEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveAssistEventIDs(ids...)
	return puo
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (puo *PlayerUpdateOne) RemoveAssistEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveAssistEventIDs(ids...)
}

// ClearPsgames clears all "psgames" edges to the PSGames entity.
func (puo *PlayerUpdateOne) ClearPsgames() *PlayerUpdateOne {
	puo.mutation.ClearPsgames()
	return puo
}

// RemovePsgameIDs removes the "psgames" edge to PSGames entities by IDs.
func (puo *PlayerUpdateOne) RemovePsgameIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePsgameIDs(ids...)
	return puo
}

// RemovePsgames removes "psgames" edges to PSGames entities.
func (puo *PlayerUpdateOne) RemovePsgames(p ...*PSGames) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePsgameIDs(ids...)
}

// ClearPsgoals clears all "psgoals" edges to the PSGoals entity.
func (puo *PlayerUpdateOne) ClearPsgoals() *PlayerUpdateOne {
	puo.mutation.ClearPsgoals()
	return puo
}

// RemovePsgoalIDs removes the "psgoals" edge to PSGoals entities by IDs.
func (puo *PlayerUpdateOne) RemovePsgoalIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePsgoalIDs(ids...)
	return puo
}

// RemovePsgoals removes "psgoals" edges to PSGoals entities.
func (puo *PlayerUpdateOne) RemovePsgoals(p ...*PSGoals) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePsgoalIDs(ids...)
}

// ClearPsdefense clears all "psdefense" edges to the PSDefense entity.
func (puo *PlayerUpdateOne) ClearPsdefense() *PlayerUpdateOne {
	puo.mutation.ClearPsdefense()
	return puo
}

// RemovePsdefenseIDs removes the "psdefense" edge to PSDefense entities by IDs.
func (puo *PlayerUpdateOne) RemovePsdefenseIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePsdefenseIDs(ids...)
	return puo
}

// RemovePsdefense removes "psdefense" edges to PSDefense entities.
func (puo *PlayerUpdateOne) RemovePsdefense(p ...*PSDefense) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePsdefenseIDs(ids...)
}

// ClearPsoffense clears all "psoffense" edges to the PSOffense entity.
func (puo *PlayerUpdateOne) ClearPsoffense() *PlayerUpdateOne {
	puo.mutation.ClearPsoffense()
	return puo
}

// RemovePsoffenseIDs removes the "psoffense" edge to PSOffense entities by IDs.
func (puo *PlayerUpdateOne) RemovePsoffenseIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePsoffenseIDs(ids...)
	return puo
}

// RemovePsoffense removes "psoffense" edges to PSOffense entities.
func (puo *PlayerUpdateOne) RemovePsoffense(p ...*PSOffense) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePsoffenseIDs(ids...)
}

// ClearPspenalty clears all "pspenalty" edges to the PSPenalty entity.
func (puo *PlayerUpdateOne) ClearPspenalty() *PlayerUpdateOne {
	puo.mutation.ClearPspenalty()
	return puo
}

// RemovePspenaltyIDs removes the "pspenalty" edge to PSPenalty entities by IDs.
func (puo *PlayerUpdateOne) RemovePspenaltyIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePspenaltyIDs(ids...)
	return puo
}

// RemovePspenalty removes "pspenalty" edges to PSPenalty entities.
func (puo *PlayerUpdateOne) RemovePspenalty(p ...*PSPenalty) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePspenaltyIDs(ids...)
}

// ClearSeason clears the "season" edge to the Season entity.
func (puo *PlayerUpdateOne) ClearSeason() *PlayerUpdateOne {
	puo.mutation.ClearSeason()
	return puo
}

// ClearTeam clears the "team" edge to the Team entity.
func (puo *PlayerUpdateOne) ClearTeam() *PlayerUpdateOne {
	puo.mutation.ClearTeam()
	return puo
}

// ClearClub clears the "club" edge to the Club entity.
func (puo *PlayerUpdateOne) ClearClub() *PlayerUpdateOne {
	puo.mutation.ClearClub()
	return puo
}

// ClearLeague clears the "league" edge to the League entity.
func (puo *PlayerUpdateOne) ClearLeague() *PlayerUpdateOne {
	puo.mutation.ClearLeague()
	return puo
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlayerUpdateOne) defaults() {
	if _, ok := puo.mutation.LastUpdated(); !ok && !puo.mutation.LastUpdatedCleared() {
		v := player.UpdateDefaultLastUpdated()
		puo.mutation.SetLastUpdated(v)
	}
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Firstname(); ok {
		_spec.SetField(player.FieldFirstname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Lastname(); ok {
		_spec.SetField(player.FieldLastname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.SetField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.AddField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.SetField(player.FieldHeight, field.TypeString, value)
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.SetField(player.FieldWeight, field.TypeString, value)
	}
	if value, ok := puo.mutation.Injured(); ok {
		_spec.SetField(player.FieldInjured, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Photo(); ok {
		_spec.SetField(player.FieldPhoto, field.TypeString, value)
	}
	if value, ok := puo.mutation.LastUpdated(); ok {
		_spec.SetField(player.FieldLastUpdated, field.TypeTime, value)
	}
	if puo.mutation.LastUpdatedCleared() {
		_spec.ClearField(player.FieldLastUpdated, field.TypeTime)
	}
	if value, ok := puo.mutation.Form(); ok {
		_spec.SetField(player.FieldForm, field.TypeString, value)
	}
	if puo.mutation.FormCleared() {
		_spec.ClearField(player.FieldForm, field.TypeString)
	}
	if puo.mutation.BirthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BirthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NationalityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSquadIDs(); len(nodes) > 0 && !puo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !puo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !puo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !puo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgamesTable,
			Columns: []string{player.PsgamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPsgamesIDs(); len(nodes) > 0 && !puo.mutation.PsgamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgamesTable,
			Columns: []string{player.PsgamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PsgamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgamesTable,
			Columns: []string{player.PsgamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgames.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgoalsTable,
			Columns: []string{player.PsgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPsgoalsIDs(); len(nodes) > 0 && !puo.mutation.PsgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgoalsTable,
			Columns: []string{player.PsgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PsgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsgoalsTable,
			Columns: []string{player.PsgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsdefenseTable,
			Columns: []string{player.PsdefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPsdefenseIDs(); len(nodes) > 0 && !puo.mutation.PsdefenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsdefenseTable,
			Columns: []string{player.PsdefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PsdefenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsdefenseTable,
			Columns: []string{player.PsdefenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psdefense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsoffenseTable,
			Columns: []string{player.PsoffenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPsoffenseIDs(); len(nodes) > 0 && !puo.mutation.PsoffenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsoffenseTable,
			Columns: []string{player.PsoffenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PsoffenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PsoffenseTable,
			Columns: []string{player.PsoffenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psoffense.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PspenaltyTable,
			Columns: []string{player.PspenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPspenaltyIDs(); len(nodes) > 0 && !puo.mutation.PspenaltyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PspenaltyTable,
			Columns: []string{player.PspenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PspenaltyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PspenaltyTable,
			Columns: []string{player.PspenaltyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.SeasonTable,
			Columns: []string{player.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.SeasonTable,
			Columns: []string{player.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.ClubTable,
			Columns: []string{player.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.ClubTable,
			Columns: []string{player.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LeagueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.LeagueTable,
			Columns: []string{player.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LeagueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.LeagueTable,
			Columns: []string{player.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
