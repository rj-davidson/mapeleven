// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/birth"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/country"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/matchplayer"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/squad"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlayerUpdate) SetName(s string) *PlayerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetFirstname sets the "firstname" field.
func (pu *PlayerUpdate) SetFirstname(s string) *PlayerUpdate {
	pu.mutation.SetFirstname(s)
	return pu
}

// SetLastname sets the "lastname" field.
func (pu *PlayerUpdate) SetLastname(s string) *PlayerUpdate {
	pu.mutation.SetLastname(s)
	return pu
}

// SetAge sets the "age" field.
func (pu *PlayerUpdate) SetAge(i int) *PlayerUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// AddAge adds i to the "age" field.
func (pu *PlayerUpdate) AddAge(i int) *PlayerUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetHeight sets the "height" field.
func (pu *PlayerUpdate) SetHeight(s string) *PlayerUpdate {
	pu.mutation.SetHeight(s)
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PlayerUpdate) SetWeight(s string) *PlayerUpdate {
	pu.mutation.SetWeight(s)
	return pu
}

// SetInjured sets the "injured" field.
func (pu *PlayerUpdate) SetInjured(b bool) *PlayerUpdate {
	pu.mutation.SetInjured(b)
	return pu
}

// SetPhoto sets the "photo" field.
func (pu *PlayerUpdate) SetPhoto(s string) *PlayerUpdate {
	pu.mutation.SetPhoto(s)
	return pu
}

// SetLastUpdated sets the "lastUpdated" field.
func (pu *PlayerUpdate) SetLastUpdated(t time.Time) *PlayerUpdate {
	pu.mutation.SetLastUpdated(t)
	return pu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (pu *PlayerUpdate) ClearLastUpdated() *PlayerUpdate {
	pu.mutation.ClearLastUpdated()
	return pu
}

// SetGameAppearances sets the "GameAppearances" field.
func (pu *PlayerUpdate) SetGameAppearances(i int) *PlayerUpdate {
	pu.mutation.ResetGameAppearances()
	pu.mutation.SetGameAppearances(i)
	return pu
}

// AddGameAppearances adds i to the "GameAppearances" field.
func (pu *PlayerUpdate) AddGameAppearances(i int) *PlayerUpdate {
	pu.mutation.AddGameAppearances(i)
	return pu
}

// SetGameLineups sets the "GameLineups" field.
func (pu *PlayerUpdate) SetGameLineups(i int) *PlayerUpdate {
	pu.mutation.ResetGameLineups()
	pu.mutation.SetGameLineups(i)
	return pu
}

// AddGameLineups adds i to the "GameLineups" field.
func (pu *PlayerUpdate) AddGameLineups(i int) *PlayerUpdate {
	pu.mutation.AddGameLineups(i)
	return pu
}

// SetGameMinutes sets the "GameMinutes" field.
func (pu *PlayerUpdate) SetGameMinutes(i int) *PlayerUpdate {
	pu.mutation.ResetGameMinutes()
	pu.mutation.SetGameMinutes(i)
	return pu
}

// AddGameMinutes adds i to the "GameMinutes" field.
func (pu *PlayerUpdate) AddGameMinutes(i int) *PlayerUpdate {
	pu.mutation.AddGameMinutes(i)
	return pu
}

// SetTotalShots sets the "TotalShots" field.
func (pu *PlayerUpdate) SetTotalShots(i int) *PlayerUpdate {
	pu.mutation.ResetTotalShots()
	pu.mutation.SetTotalShots(i)
	return pu
}

// AddTotalShots adds i to the "TotalShots" field.
func (pu *PlayerUpdate) AddTotalShots(i int) *PlayerUpdate {
	pu.mutation.AddTotalShots(i)
	return pu
}

// SetShotsOnTarget sets the "ShotsOnTarget" field.
func (pu *PlayerUpdate) SetShotsOnTarget(i int) *PlayerUpdate {
	pu.mutation.ResetShotsOnTarget()
	pu.mutation.SetShotsOnTarget(i)
	return pu
}

// AddShotsOnTarget adds i to the "ShotsOnTarget" field.
func (pu *PlayerUpdate) AddShotsOnTarget(i int) *PlayerUpdate {
	pu.mutation.AddShotsOnTarget(i)
	return pu
}

// SetTotalGoals sets the "TotalGoals" field.
func (pu *PlayerUpdate) SetTotalGoals(i int) *PlayerUpdate {
	pu.mutation.ResetTotalGoals()
	pu.mutation.SetTotalGoals(i)
	return pu
}

// AddTotalGoals adds i to the "TotalGoals" field.
func (pu *PlayerUpdate) AddTotalGoals(i int) *PlayerUpdate {
	pu.mutation.AddTotalGoals(i)
	return pu
}

// SetAssists sets the "Assists" field.
func (pu *PlayerUpdate) SetAssists(i int) *PlayerUpdate {
	pu.mutation.ResetAssists()
	pu.mutation.SetAssists(i)
	return pu
}

// AddAssists adds i to the "Assists" field.
func (pu *PlayerUpdate) AddAssists(i int) *PlayerUpdate {
	pu.mutation.AddAssists(i)
	return pu
}

// SetGoalsConceded sets the "GoalsConceded" field.
func (pu *PlayerUpdate) SetGoalsConceded(i int) *PlayerUpdate {
	pu.mutation.ResetGoalsConceded()
	pu.mutation.SetGoalsConceded(i)
	return pu
}

// AddGoalsConceded adds i to the "GoalsConceded" field.
func (pu *PlayerUpdate) AddGoalsConceded(i int) *PlayerUpdate {
	pu.mutation.AddGoalsConceded(i)
	return pu
}

// SetSaves sets the "Saves" field.
func (pu *PlayerUpdate) SetSaves(i int) *PlayerUpdate {
	pu.mutation.ResetSaves()
	pu.mutation.SetSaves(i)
	return pu
}

// AddSaves adds i to the "Saves" field.
func (pu *PlayerUpdate) AddSaves(i int) *PlayerUpdate {
	pu.mutation.AddSaves(i)
	return pu
}

// SetPosition sets the "position" field.
func (pu *PlayerUpdate) SetPosition(s string) *PlayerUpdate {
	pu.mutation.SetPosition(s)
	return pu
}

// SetRating sets the "rating" field.
func (pu *PlayerUpdate) SetRating(s string) *PlayerUpdate {
	pu.mutation.SetRating(s)
	return pu
}

// SetTeamName sets the "teamName" field.
func (pu *PlayerUpdate) SetTeamName(s string) *PlayerUpdate {
	pu.mutation.SetTeamName(s)
	return pu
}

// SetTeamID sets the "teamID" field.
func (pu *PlayerUpdate) SetTeamID(i int) *PlayerUpdate {
	pu.mutation.ResetTeamID()
	pu.mutation.SetTeamID(i)
	return pu
}

// AddTeamID adds i to the "teamID" field.
func (pu *PlayerUpdate) AddTeamID(i int) *PlayerUpdate {
	pu.mutation.AddTeamID(i)
	return pu
}

// SetLeagueID sets the "leagueID" field.
func (pu *PlayerUpdate) SetLeagueID(i int) *PlayerUpdate {
	pu.mutation.ResetLeagueID()
	pu.mutation.SetLeagueID(i)
	return pu
}

// AddLeagueID adds i to the "leagueID" field.
func (pu *PlayerUpdate) AddLeagueID(i int) *PlayerUpdate {
	pu.mutation.AddLeagueID(i)
	return pu
}

// SetLeagueName sets the "leagueName" field.
func (pu *PlayerUpdate) SetLeagueName(s string) *PlayerUpdate {
	pu.mutation.SetLeagueName(s)
	return pu
}

// SetPassTotal sets the "passTotal" field.
func (pu *PlayerUpdate) SetPassTotal(i int) *PlayerUpdate {
	pu.mutation.ResetPassTotal()
	pu.mutation.SetPassTotal(i)
	return pu
}

// AddPassTotal adds i to the "passTotal" field.
func (pu *PlayerUpdate) AddPassTotal(i int) *PlayerUpdate {
	pu.mutation.AddPassTotal(i)
	return pu
}

// SetPassKey sets the "passKey" field.
func (pu *PlayerUpdate) SetPassKey(i int) *PlayerUpdate {
	pu.mutation.ResetPassKey()
	pu.mutation.SetPassKey(i)
	return pu
}

// AddPassKey adds i to the "passKey" field.
func (pu *PlayerUpdate) AddPassKey(i int) *PlayerUpdate {
	pu.mutation.AddPassKey(i)
	return pu
}

// SetPassAccuracy sets the "passAccuracy" field.
func (pu *PlayerUpdate) SetPassAccuracy(i int) *PlayerUpdate {
	pu.mutation.ResetPassAccuracy()
	pu.mutation.SetPassAccuracy(i)
	return pu
}

// AddPassAccuracy adds i to the "passAccuracy" field.
func (pu *PlayerUpdate) AddPassAccuracy(i int) *PlayerUpdate {
	pu.mutation.AddPassAccuracy(i)
	return pu
}

// SetTotalTackle sets the "totalTackle" field.
func (pu *PlayerUpdate) SetTotalTackle(i int) *PlayerUpdate {
	pu.mutation.ResetTotalTackle()
	pu.mutation.SetTotalTackle(i)
	return pu
}

// AddTotalTackle adds i to the "totalTackle" field.
func (pu *PlayerUpdate) AddTotalTackle(i int) *PlayerUpdate {
	pu.mutation.AddTotalTackle(i)
	return pu
}

// SetBlocks sets the "blocks" field.
func (pu *PlayerUpdate) SetBlocks(i int) *PlayerUpdate {
	pu.mutation.ResetBlocks()
	pu.mutation.SetBlocks(i)
	return pu
}

// SetNillableBlocks sets the "blocks" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableBlocks(i *int) *PlayerUpdate {
	if i != nil {
		pu.SetBlocks(*i)
	}
	return pu
}

// AddBlocks adds i to the "blocks" field.
func (pu *PlayerUpdate) AddBlocks(i int) *PlayerUpdate {
	pu.mutation.AddBlocks(i)
	return pu
}

// SetInterceptions sets the "interceptions" field.
func (pu *PlayerUpdate) SetInterceptions(i int) *PlayerUpdate {
	pu.mutation.ResetInterceptions()
	pu.mutation.SetInterceptions(i)
	return pu
}

// SetNillableInterceptions sets the "interceptions" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableInterceptions(i *int) *PlayerUpdate {
	if i != nil {
		pu.SetInterceptions(*i)
	}
	return pu
}

// AddInterceptions adds i to the "interceptions" field.
func (pu *PlayerUpdate) AddInterceptions(i int) *PlayerUpdate {
	pu.mutation.AddInterceptions(i)
	return pu
}

// SetDuelsTotal sets the "duelsTotal" field.
func (pu *PlayerUpdate) SetDuelsTotal(i int) *PlayerUpdate {
	pu.mutation.ResetDuelsTotal()
	pu.mutation.SetDuelsTotal(i)
	return pu
}

// AddDuelsTotal adds i to the "duelsTotal" field.
func (pu *PlayerUpdate) AddDuelsTotal(i int) *PlayerUpdate {
	pu.mutation.AddDuelsTotal(i)
	return pu
}

// SetDuelsWon sets the "duelsWon" field.
func (pu *PlayerUpdate) SetDuelsWon(i int) *PlayerUpdate {
	pu.mutation.ResetDuelsWon()
	pu.mutation.SetDuelsWon(i)
	return pu
}

// AddDuelsWon adds i to the "duelsWon" field.
func (pu *PlayerUpdate) AddDuelsWon(i int) *PlayerUpdate {
	pu.mutation.AddDuelsWon(i)
	return pu
}

// SetBirthID sets the "birth" edge to the Birth entity by ID.
func (pu *PlayerUpdate) SetBirthID(id int) *PlayerUpdate {
	pu.mutation.SetBirthID(id)
	return pu
}

// SetNillableBirthID sets the "birth" edge to the Birth entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableBirthID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetBirthID(*id)
	}
	return pu
}

// SetBirth sets the "birth" edge to the Birth entity.
func (pu *PlayerUpdate) SetBirth(b *Birth) *PlayerUpdate {
	return pu.SetBirthID(b.ID)
}

// SetNationalityID sets the "nationality" edge to the Country entity by ID.
func (pu *PlayerUpdate) SetNationalityID(id int) *PlayerUpdate {
	pu.mutation.SetNationalityID(id)
	return pu
}

// SetNillableNationalityID sets the "nationality" edge to the Country entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableNationalityID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetNationalityID(*id)
	}
	return pu
}

// SetNationality sets the "nationality" edge to the Country entity.
func (pu *PlayerUpdate) SetNationality(c *Country) *PlayerUpdate {
	return pu.SetNationalityID(c.ID)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (pu *PlayerUpdate) AddSquadIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddSquadIDs(ids...)
	return pu
}

// AddSquad adds the "squad" edges to the Squad entity.
func (pu *PlayerUpdate) AddSquad(s ...*Squad) *PlayerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSquadIDs(ids...)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (pu *PlayerUpdate) AddPlayerEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPlayerEventIDs(ids...)
	return pu
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) AddPlayerEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (pu *PlayerUpdate) AddMatchPlayerIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddMatchPlayerIDs(ids...)
	return pu
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (pu *PlayerUpdate) AddMatchPlayer(m ...*MatchPlayer) *PlayerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (pu *PlayerUpdate) AddAssistEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddAssistEventIDs(ids...)
	return pu
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) AddAssistEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddAssistEventIDs(ids...)
}

// AddPlayerStatIDs adds the "playerStats" edge to the PlayerStats entity by IDs.
func (pu *PlayerUpdate) AddPlayerStatIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPlayerStatIDs(ids...)
	return pu
}

// AddPlayerStats adds the "playerStats" edges to the PlayerStats entity.
func (pu *PlayerUpdate) AddPlayerStats(p ...*PlayerStats) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlayerStatIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// ClearBirth clears the "birth" edge to the Birth entity.
func (pu *PlayerUpdate) ClearBirth() *PlayerUpdate {
	pu.mutation.ClearBirth()
	return pu
}

// ClearNationality clears the "nationality" edge to the Country entity.
func (pu *PlayerUpdate) ClearNationality() *PlayerUpdate {
	pu.mutation.ClearNationality()
	return pu
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (pu *PlayerUpdate) ClearSquad() *PlayerUpdate {
	pu.mutation.ClearSquad()
	return pu
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (pu *PlayerUpdate) RemoveSquadIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveSquadIDs(ids...)
	return pu
}

// RemoveSquad removes "squad" edges to Squad entities.
func (pu *PlayerUpdate) RemoveSquad(s ...*Squad) *PlayerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSquadIDs(ids...)
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) ClearPlayerEvents() *PlayerUpdate {
	pu.mutation.ClearPlayerEvents()
	return pu
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (pu *PlayerUpdate) RemovePlayerEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePlayerEventIDs(ids...)
	return pu
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (pu *PlayerUpdate) RemovePlayerEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (pu *PlayerUpdate) ClearMatchPlayer() *PlayerUpdate {
	pu.mutation.ClearMatchPlayer()
	return pu
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (pu *PlayerUpdate) RemoveMatchPlayerIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveMatchPlayerIDs(ids...)
	return pu
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (pu *PlayerUpdate) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (pu *PlayerUpdate) ClearAssistEvents() *PlayerUpdate {
	pu.mutation.ClearAssistEvents()
	return pu
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (pu *PlayerUpdate) RemoveAssistEventIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveAssistEventIDs(ids...)
	return pu
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (pu *PlayerUpdate) RemoveAssistEvents(f ...*FixtureEvents) *PlayerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveAssistEventIDs(ids...)
}

// ClearPlayerStats clears all "playerStats" edges to the PlayerStats entity.
func (pu *PlayerUpdate) ClearPlayerStats() *PlayerUpdate {
	pu.mutation.ClearPlayerStats()
	return pu
}

// RemovePlayerStatIDs removes the "playerStats" edge to PlayerStats entities by IDs.
func (pu *PlayerUpdate) RemovePlayerStatIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePlayerStatIDs(ids...)
	return pu
}

// RemovePlayerStats removes "playerStats" edges to PlayerStats entities.
func (pu *PlayerUpdate) RemovePlayerStats(p ...*PlayerStats) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlayerStatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlayerUpdate) defaults() {
	if _, ok := pu.mutation.LastUpdated(); !ok && !pu.mutation.LastUpdatedCleared() {
		v := player.UpdateDefaultLastUpdated()
		pu.mutation.SetLastUpdated(v)
	}
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Firstname(); ok {
		_spec.SetField(player.FieldFirstname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Lastname(); ok {
		_spec.SetField(player.FieldLastname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.SetField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.AddField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.SetField(player.FieldHeight, field.TypeString, value)
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.SetField(player.FieldWeight, field.TypeString, value)
	}
	if value, ok := pu.mutation.Injured(); ok {
		_spec.SetField(player.FieldInjured, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Photo(); ok {
		_spec.SetField(player.FieldPhoto, field.TypeString, value)
	}
	if value, ok := pu.mutation.LastUpdated(); ok {
		_spec.SetField(player.FieldLastUpdated, field.TypeTime, value)
	}
	if pu.mutation.LastUpdatedCleared() {
		_spec.ClearField(player.FieldLastUpdated, field.TypeTime)
	}
	if value, ok := pu.mutation.GameAppearances(); ok {
		_spec.SetField(player.FieldGameAppearances, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGameAppearances(); ok {
		_spec.AddField(player.FieldGameAppearances, field.TypeInt, value)
	}
	if value, ok := pu.mutation.GameLineups(); ok {
		_spec.SetField(player.FieldGameLineups, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGameLineups(); ok {
		_spec.AddField(player.FieldGameLineups, field.TypeInt, value)
	}
	if value, ok := pu.mutation.GameMinutes(); ok {
		_spec.SetField(player.FieldGameMinutes, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGameMinutes(); ok {
		_spec.AddField(player.FieldGameMinutes, field.TypeInt, value)
	}
	if value, ok := pu.mutation.TotalShots(); ok {
		_spec.SetField(player.FieldTotalShots, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTotalShots(); ok {
		_spec.AddField(player.FieldTotalShots, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ShotsOnTarget(); ok {
		_spec.SetField(player.FieldShotsOnTarget, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedShotsOnTarget(); ok {
		_spec.AddField(player.FieldShotsOnTarget, field.TypeInt, value)
	}
	if value, ok := pu.mutation.TotalGoals(); ok {
		_spec.SetField(player.FieldTotalGoals, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTotalGoals(); ok {
		_spec.AddField(player.FieldTotalGoals, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Assists(); ok {
		_spec.SetField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAssists(); ok {
		_spec.AddField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := pu.mutation.GoalsConceded(); ok {
		_spec.SetField(player.FieldGoalsConceded, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGoalsConceded(); ok {
		_spec.AddField(player.FieldGoalsConceded, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Saves(); ok {
		_spec.SetField(player.FieldSaves, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSaves(); ok {
		_spec.AddField(player.FieldSaves, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeString, value)
	}
	if value, ok := pu.mutation.Rating(); ok {
		_spec.SetField(player.FieldRating, field.TypeString, value)
	}
	if value, ok := pu.mutation.TeamName(); ok {
		_spec.SetField(player.FieldTeamName, field.TypeString, value)
	}
	if value, ok := pu.mutation.TeamID(); ok {
		_spec.SetField(player.FieldTeamID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTeamID(); ok {
		_spec.AddField(player.FieldTeamID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.LeagueID(); ok {
		_spec.SetField(player.FieldLeagueID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLeagueID(); ok {
		_spec.AddField(player.FieldLeagueID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.LeagueName(); ok {
		_spec.SetField(player.FieldLeagueName, field.TypeString, value)
	}
	if value, ok := pu.mutation.PassTotal(); ok {
		_spec.SetField(player.FieldPassTotal, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPassTotal(); ok {
		_spec.AddField(player.FieldPassTotal, field.TypeInt, value)
	}
	if value, ok := pu.mutation.PassKey(); ok {
		_spec.SetField(player.FieldPassKey, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPassKey(); ok {
		_spec.AddField(player.FieldPassKey, field.TypeInt, value)
	}
	if value, ok := pu.mutation.PassAccuracy(); ok {
		_spec.SetField(player.FieldPassAccuracy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPassAccuracy(); ok {
		_spec.AddField(player.FieldPassAccuracy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.TotalTackle(); ok {
		_spec.SetField(player.FieldTotalTackle, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTotalTackle(); ok {
		_spec.AddField(player.FieldTotalTackle, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Blocks(); ok {
		_spec.SetField(player.FieldBlocks, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedBlocks(); ok {
		_spec.AddField(player.FieldBlocks, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Interceptions(); ok {
		_spec.SetField(player.FieldInterceptions, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedInterceptions(); ok {
		_spec.AddField(player.FieldInterceptions, field.TypeInt, value)
	}
	if value, ok := pu.mutation.DuelsTotal(); ok {
		_spec.SetField(player.FieldDuelsTotal, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDuelsTotal(); ok {
		_spec.AddField(player.FieldDuelsTotal, field.TypeInt, value)
	}
	if value, ok := pu.mutation.DuelsWon(); ok {
		_spec.SetField(player.FieldDuelsWon, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDuelsWon(); ok {
		_spec.AddField(player.FieldDuelsWon, field.TypeInt, value)
	}
	if pu.mutation.BirthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BirthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NationalityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSquadIDs(); len(nodes) > 0 && !pu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !pu.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !pu.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !pu.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerStatsTable,
			Columns: []string{player.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlayerStatsIDs(); len(nodes) > 0 && !pu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerStatsTable,
			Columns: []string{player.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerStatsTable,
			Columns: []string{player.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMutation
}

// SetName sets the "name" field.
func (puo *PlayerUpdateOne) SetName(s string) *PlayerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetFirstname sets the "firstname" field.
func (puo *PlayerUpdateOne) SetFirstname(s string) *PlayerUpdateOne {
	puo.mutation.SetFirstname(s)
	return puo
}

// SetLastname sets the "lastname" field.
func (puo *PlayerUpdateOne) SetLastname(s string) *PlayerUpdateOne {
	puo.mutation.SetLastname(s)
	return puo
}

// SetAge sets the "age" field.
func (puo *PlayerUpdateOne) SetAge(i int) *PlayerUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// AddAge adds i to the "age" field.
func (puo *PlayerUpdateOne) AddAge(i int) *PlayerUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetHeight sets the "height" field.
func (puo *PlayerUpdateOne) SetHeight(s string) *PlayerUpdateOne {
	puo.mutation.SetHeight(s)
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PlayerUpdateOne) SetWeight(s string) *PlayerUpdateOne {
	puo.mutation.SetWeight(s)
	return puo
}

// SetInjured sets the "injured" field.
func (puo *PlayerUpdateOne) SetInjured(b bool) *PlayerUpdateOne {
	puo.mutation.SetInjured(b)
	return puo
}

// SetPhoto sets the "photo" field.
func (puo *PlayerUpdateOne) SetPhoto(s string) *PlayerUpdateOne {
	puo.mutation.SetPhoto(s)
	return puo
}

// SetLastUpdated sets the "lastUpdated" field.
func (puo *PlayerUpdateOne) SetLastUpdated(t time.Time) *PlayerUpdateOne {
	puo.mutation.SetLastUpdated(t)
	return puo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (puo *PlayerUpdateOne) ClearLastUpdated() *PlayerUpdateOne {
	puo.mutation.ClearLastUpdated()
	return puo
}

// SetGameAppearances sets the "GameAppearances" field.
func (puo *PlayerUpdateOne) SetGameAppearances(i int) *PlayerUpdateOne {
	puo.mutation.ResetGameAppearances()
	puo.mutation.SetGameAppearances(i)
	return puo
}

// AddGameAppearances adds i to the "GameAppearances" field.
func (puo *PlayerUpdateOne) AddGameAppearances(i int) *PlayerUpdateOne {
	puo.mutation.AddGameAppearances(i)
	return puo
}

// SetGameLineups sets the "GameLineups" field.
func (puo *PlayerUpdateOne) SetGameLineups(i int) *PlayerUpdateOne {
	puo.mutation.ResetGameLineups()
	puo.mutation.SetGameLineups(i)
	return puo
}

// AddGameLineups adds i to the "GameLineups" field.
func (puo *PlayerUpdateOne) AddGameLineups(i int) *PlayerUpdateOne {
	puo.mutation.AddGameLineups(i)
	return puo
}

// SetGameMinutes sets the "GameMinutes" field.
func (puo *PlayerUpdateOne) SetGameMinutes(i int) *PlayerUpdateOne {
	puo.mutation.ResetGameMinutes()
	puo.mutation.SetGameMinutes(i)
	return puo
}

// AddGameMinutes adds i to the "GameMinutes" field.
func (puo *PlayerUpdateOne) AddGameMinutes(i int) *PlayerUpdateOne {
	puo.mutation.AddGameMinutes(i)
	return puo
}

// SetTotalShots sets the "TotalShots" field.
func (puo *PlayerUpdateOne) SetTotalShots(i int) *PlayerUpdateOne {
	puo.mutation.ResetTotalShots()
	puo.mutation.SetTotalShots(i)
	return puo
}

// AddTotalShots adds i to the "TotalShots" field.
func (puo *PlayerUpdateOne) AddTotalShots(i int) *PlayerUpdateOne {
	puo.mutation.AddTotalShots(i)
	return puo
}

// SetShotsOnTarget sets the "ShotsOnTarget" field.
func (puo *PlayerUpdateOne) SetShotsOnTarget(i int) *PlayerUpdateOne {
	puo.mutation.ResetShotsOnTarget()
	puo.mutation.SetShotsOnTarget(i)
	return puo
}

// AddShotsOnTarget adds i to the "ShotsOnTarget" field.
func (puo *PlayerUpdateOne) AddShotsOnTarget(i int) *PlayerUpdateOne {
	puo.mutation.AddShotsOnTarget(i)
	return puo
}

// SetTotalGoals sets the "TotalGoals" field.
func (puo *PlayerUpdateOne) SetTotalGoals(i int) *PlayerUpdateOne {
	puo.mutation.ResetTotalGoals()
	puo.mutation.SetTotalGoals(i)
	return puo
}

// AddTotalGoals adds i to the "TotalGoals" field.
func (puo *PlayerUpdateOne) AddTotalGoals(i int) *PlayerUpdateOne {
	puo.mutation.AddTotalGoals(i)
	return puo
}

// SetAssists sets the "Assists" field.
func (puo *PlayerUpdateOne) SetAssists(i int) *PlayerUpdateOne {
	puo.mutation.ResetAssists()
	puo.mutation.SetAssists(i)
	return puo
}

// AddAssists adds i to the "Assists" field.
func (puo *PlayerUpdateOne) AddAssists(i int) *PlayerUpdateOne {
	puo.mutation.AddAssists(i)
	return puo
}

// SetGoalsConceded sets the "GoalsConceded" field.
func (puo *PlayerUpdateOne) SetGoalsConceded(i int) *PlayerUpdateOne {
	puo.mutation.ResetGoalsConceded()
	puo.mutation.SetGoalsConceded(i)
	return puo
}

// AddGoalsConceded adds i to the "GoalsConceded" field.
func (puo *PlayerUpdateOne) AddGoalsConceded(i int) *PlayerUpdateOne {
	puo.mutation.AddGoalsConceded(i)
	return puo
}

// SetSaves sets the "Saves" field.
func (puo *PlayerUpdateOne) SetSaves(i int) *PlayerUpdateOne {
	puo.mutation.ResetSaves()
	puo.mutation.SetSaves(i)
	return puo
}

// AddSaves adds i to the "Saves" field.
func (puo *PlayerUpdateOne) AddSaves(i int) *PlayerUpdateOne {
	puo.mutation.AddSaves(i)
	return puo
}

// SetPosition sets the "position" field.
func (puo *PlayerUpdateOne) SetPosition(s string) *PlayerUpdateOne {
	puo.mutation.SetPosition(s)
	return puo
}

// SetRating sets the "rating" field.
func (puo *PlayerUpdateOne) SetRating(s string) *PlayerUpdateOne {
	puo.mutation.SetRating(s)
	return puo
}

// SetTeamName sets the "teamName" field.
func (puo *PlayerUpdateOne) SetTeamName(s string) *PlayerUpdateOne {
	puo.mutation.SetTeamName(s)
	return puo
}

// SetTeamID sets the "teamID" field.
func (puo *PlayerUpdateOne) SetTeamID(i int) *PlayerUpdateOne {
	puo.mutation.ResetTeamID()
	puo.mutation.SetTeamID(i)
	return puo
}

// AddTeamID adds i to the "teamID" field.
func (puo *PlayerUpdateOne) AddTeamID(i int) *PlayerUpdateOne {
	puo.mutation.AddTeamID(i)
	return puo
}

// SetLeagueID sets the "leagueID" field.
func (puo *PlayerUpdateOne) SetLeagueID(i int) *PlayerUpdateOne {
	puo.mutation.ResetLeagueID()
	puo.mutation.SetLeagueID(i)
	return puo
}

// AddLeagueID adds i to the "leagueID" field.
func (puo *PlayerUpdateOne) AddLeagueID(i int) *PlayerUpdateOne {
	puo.mutation.AddLeagueID(i)
	return puo
}

// SetLeagueName sets the "leagueName" field.
func (puo *PlayerUpdateOne) SetLeagueName(s string) *PlayerUpdateOne {
	puo.mutation.SetLeagueName(s)
	return puo
}

// SetPassTotal sets the "passTotal" field.
func (puo *PlayerUpdateOne) SetPassTotal(i int) *PlayerUpdateOne {
	puo.mutation.ResetPassTotal()
	puo.mutation.SetPassTotal(i)
	return puo
}

// AddPassTotal adds i to the "passTotal" field.
func (puo *PlayerUpdateOne) AddPassTotal(i int) *PlayerUpdateOne {
	puo.mutation.AddPassTotal(i)
	return puo
}

// SetPassKey sets the "passKey" field.
func (puo *PlayerUpdateOne) SetPassKey(i int) *PlayerUpdateOne {
	puo.mutation.ResetPassKey()
	puo.mutation.SetPassKey(i)
	return puo
}

// AddPassKey adds i to the "passKey" field.
func (puo *PlayerUpdateOne) AddPassKey(i int) *PlayerUpdateOne {
	puo.mutation.AddPassKey(i)
	return puo
}

// SetPassAccuracy sets the "passAccuracy" field.
func (puo *PlayerUpdateOne) SetPassAccuracy(i int) *PlayerUpdateOne {
	puo.mutation.ResetPassAccuracy()
	puo.mutation.SetPassAccuracy(i)
	return puo
}

// AddPassAccuracy adds i to the "passAccuracy" field.
func (puo *PlayerUpdateOne) AddPassAccuracy(i int) *PlayerUpdateOne {
	puo.mutation.AddPassAccuracy(i)
	return puo
}

// SetTotalTackle sets the "totalTackle" field.
func (puo *PlayerUpdateOne) SetTotalTackle(i int) *PlayerUpdateOne {
	puo.mutation.ResetTotalTackle()
	puo.mutation.SetTotalTackle(i)
	return puo
}

// AddTotalTackle adds i to the "totalTackle" field.
func (puo *PlayerUpdateOne) AddTotalTackle(i int) *PlayerUpdateOne {
	puo.mutation.AddTotalTackle(i)
	return puo
}

// SetBlocks sets the "blocks" field.
func (puo *PlayerUpdateOne) SetBlocks(i int) *PlayerUpdateOne {
	puo.mutation.ResetBlocks()
	puo.mutation.SetBlocks(i)
	return puo
}

// SetNillableBlocks sets the "blocks" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableBlocks(i *int) *PlayerUpdateOne {
	if i != nil {
		puo.SetBlocks(*i)
	}
	return puo
}

// AddBlocks adds i to the "blocks" field.
func (puo *PlayerUpdateOne) AddBlocks(i int) *PlayerUpdateOne {
	puo.mutation.AddBlocks(i)
	return puo
}

// SetInterceptions sets the "interceptions" field.
func (puo *PlayerUpdateOne) SetInterceptions(i int) *PlayerUpdateOne {
	puo.mutation.ResetInterceptions()
	puo.mutation.SetInterceptions(i)
	return puo
}

// SetNillableInterceptions sets the "interceptions" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableInterceptions(i *int) *PlayerUpdateOne {
	if i != nil {
		puo.SetInterceptions(*i)
	}
	return puo
}

// AddInterceptions adds i to the "interceptions" field.
func (puo *PlayerUpdateOne) AddInterceptions(i int) *PlayerUpdateOne {
	puo.mutation.AddInterceptions(i)
	return puo
}

// SetDuelsTotal sets the "duelsTotal" field.
func (puo *PlayerUpdateOne) SetDuelsTotal(i int) *PlayerUpdateOne {
	puo.mutation.ResetDuelsTotal()
	puo.mutation.SetDuelsTotal(i)
	return puo
}

// AddDuelsTotal adds i to the "duelsTotal" field.
func (puo *PlayerUpdateOne) AddDuelsTotal(i int) *PlayerUpdateOne {
	puo.mutation.AddDuelsTotal(i)
	return puo
}

// SetDuelsWon sets the "duelsWon" field.
func (puo *PlayerUpdateOne) SetDuelsWon(i int) *PlayerUpdateOne {
	puo.mutation.ResetDuelsWon()
	puo.mutation.SetDuelsWon(i)
	return puo
}

// AddDuelsWon adds i to the "duelsWon" field.
func (puo *PlayerUpdateOne) AddDuelsWon(i int) *PlayerUpdateOne {
	puo.mutation.AddDuelsWon(i)
	return puo
}

// SetBirthID sets the "birth" edge to the Birth entity by ID.
func (puo *PlayerUpdateOne) SetBirthID(id int) *PlayerUpdateOne {
	puo.mutation.SetBirthID(id)
	return puo
}

// SetNillableBirthID sets the "birth" edge to the Birth entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableBirthID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetBirthID(*id)
	}
	return puo
}

// SetBirth sets the "birth" edge to the Birth entity.
func (puo *PlayerUpdateOne) SetBirth(b *Birth) *PlayerUpdateOne {
	return puo.SetBirthID(b.ID)
}

// SetNationalityID sets the "nationality" edge to the Country entity by ID.
func (puo *PlayerUpdateOne) SetNationalityID(id int) *PlayerUpdateOne {
	puo.mutation.SetNationalityID(id)
	return puo
}

// SetNillableNationalityID sets the "nationality" edge to the Country entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableNationalityID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetNationalityID(*id)
	}
	return puo
}

// SetNationality sets the "nationality" edge to the Country entity.
func (puo *PlayerUpdateOne) SetNationality(c *Country) *PlayerUpdateOne {
	return puo.SetNationalityID(c.ID)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (puo *PlayerUpdateOne) AddSquadIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddSquadIDs(ids...)
	return puo
}

// AddSquad adds the "squad" edges to the Squad entity.
func (puo *PlayerUpdateOne) AddSquad(s ...*Squad) *PlayerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSquadIDs(ids...)
}

// AddPlayerEventIDs adds the "playerEvents" edge to the FixtureEvents entity by IDs.
func (puo *PlayerUpdateOne) AddPlayerEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPlayerEventIDs(ids...)
	return puo
}

// AddPlayerEvents adds the "playerEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) AddPlayerEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddPlayerEventIDs(ids...)
}

// AddMatchPlayerIDs adds the "matchPlayer" edge to the MatchPlayer entity by IDs.
func (puo *PlayerUpdateOne) AddMatchPlayerIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddMatchPlayerIDs(ids...)
	return puo
}

// AddMatchPlayer adds the "matchPlayer" edges to the MatchPlayer entity.
func (puo *PlayerUpdateOne) AddMatchPlayer(m ...*MatchPlayer) *PlayerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMatchPlayerIDs(ids...)
}

// AddAssistEventIDs adds the "assistEvents" edge to the FixtureEvents entity by IDs.
func (puo *PlayerUpdateOne) AddAssistEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddAssistEventIDs(ids...)
	return puo
}

// AddAssistEvents adds the "assistEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) AddAssistEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddAssistEventIDs(ids...)
}

// AddPlayerStatIDs adds the "playerStats" edge to the PlayerStats entity by IDs.
func (puo *PlayerUpdateOne) AddPlayerStatIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPlayerStatIDs(ids...)
	return puo
}

// AddPlayerStats adds the "playerStats" edges to the PlayerStats entity.
func (puo *PlayerUpdateOne) AddPlayerStats(p ...*PlayerStats) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlayerStatIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// ClearBirth clears the "birth" edge to the Birth entity.
func (puo *PlayerUpdateOne) ClearBirth() *PlayerUpdateOne {
	puo.mutation.ClearBirth()
	return puo
}

// ClearNationality clears the "nationality" edge to the Country entity.
func (puo *PlayerUpdateOne) ClearNationality() *PlayerUpdateOne {
	puo.mutation.ClearNationality()
	return puo
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (puo *PlayerUpdateOne) ClearSquad() *PlayerUpdateOne {
	puo.mutation.ClearSquad()
	return puo
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (puo *PlayerUpdateOne) RemoveSquadIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveSquadIDs(ids...)
	return puo
}

// RemoveSquad removes "squad" edges to Squad entities.
func (puo *PlayerUpdateOne) RemoveSquad(s ...*Squad) *PlayerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSquadIDs(ids...)
}

// ClearPlayerEvents clears all "playerEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) ClearPlayerEvents() *PlayerUpdateOne {
	puo.mutation.ClearPlayerEvents()
	return puo
}

// RemovePlayerEventIDs removes the "playerEvents" edge to FixtureEvents entities by IDs.
func (puo *PlayerUpdateOne) RemovePlayerEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePlayerEventIDs(ids...)
	return puo
}

// RemovePlayerEvents removes "playerEvents" edges to FixtureEvents entities.
func (puo *PlayerUpdateOne) RemovePlayerEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemovePlayerEventIDs(ids...)
}

// ClearMatchPlayer clears all "matchPlayer" edges to the MatchPlayer entity.
func (puo *PlayerUpdateOne) ClearMatchPlayer() *PlayerUpdateOne {
	puo.mutation.ClearMatchPlayer()
	return puo
}

// RemoveMatchPlayerIDs removes the "matchPlayer" edge to MatchPlayer entities by IDs.
func (puo *PlayerUpdateOne) RemoveMatchPlayerIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveMatchPlayerIDs(ids...)
	return puo
}

// RemoveMatchPlayer removes "matchPlayer" edges to MatchPlayer entities.
func (puo *PlayerUpdateOne) RemoveMatchPlayer(m ...*MatchPlayer) *PlayerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMatchPlayerIDs(ids...)
}

// ClearAssistEvents clears all "assistEvents" edges to the FixtureEvents entity.
func (puo *PlayerUpdateOne) ClearAssistEvents() *PlayerUpdateOne {
	puo.mutation.ClearAssistEvents()
	return puo
}

// RemoveAssistEventIDs removes the "assistEvents" edge to FixtureEvents entities by IDs.
func (puo *PlayerUpdateOne) RemoveAssistEventIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveAssistEventIDs(ids...)
	return puo
}

// RemoveAssistEvents removes "assistEvents" edges to FixtureEvents entities.
func (puo *PlayerUpdateOne) RemoveAssistEvents(f ...*FixtureEvents) *PlayerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveAssistEventIDs(ids...)
}

// ClearPlayerStats clears all "playerStats" edges to the PlayerStats entity.
func (puo *PlayerUpdateOne) ClearPlayerStats() *PlayerUpdateOne {
	puo.mutation.ClearPlayerStats()
	return puo
}

// RemovePlayerStatIDs removes the "playerStats" edge to PlayerStats entities by IDs.
func (puo *PlayerUpdateOne) RemovePlayerStatIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePlayerStatIDs(ids...)
	return puo
}

// RemovePlayerStats removes "playerStats" edges to PlayerStats entities.
func (puo *PlayerUpdateOne) RemovePlayerStats(p ...*PlayerStats) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlayerStatIDs(ids...)
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlayerUpdateOne) defaults() {
	if _, ok := puo.mutation.LastUpdated(); !ok && !puo.mutation.LastUpdatedCleared() {
		v := player.UpdateDefaultLastUpdated()
		puo.mutation.SetLastUpdated(v)
	}
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Firstname(); ok {
		_spec.SetField(player.FieldFirstname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Lastname(); ok {
		_spec.SetField(player.FieldLastname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.SetField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.AddField(player.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.SetField(player.FieldHeight, field.TypeString, value)
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.SetField(player.FieldWeight, field.TypeString, value)
	}
	if value, ok := puo.mutation.Injured(); ok {
		_spec.SetField(player.FieldInjured, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Photo(); ok {
		_spec.SetField(player.FieldPhoto, field.TypeString, value)
	}
	if value, ok := puo.mutation.LastUpdated(); ok {
		_spec.SetField(player.FieldLastUpdated, field.TypeTime, value)
	}
	if puo.mutation.LastUpdatedCleared() {
		_spec.ClearField(player.FieldLastUpdated, field.TypeTime)
	}
	if value, ok := puo.mutation.GameAppearances(); ok {
		_spec.SetField(player.FieldGameAppearances, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGameAppearances(); ok {
		_spec.AddField(player.FieldGameAppearances, field.TypeInt, value)
	}
	if value, ok := puo.mutation.GameLineups(); ok {
		_spec.SetField(player.FieldGameLineups, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGameLineups(); ok {
		_spec.AddField(player.FieldGameLineups, field.TypeInt, value)
	}
	if value, ok := puo.mutation.GameMinutes(); ok {
		_spec.SetField(player.FieldGameMinutes, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGameMinutes(); ok {
		_spec.AddField(player.FieldGameMinutes, field.TypeInt, value)
	}
	if value, ok := puo.mutation.TotalShots(); ok {
		_spec.SetField(player.FieldTotalShots, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTotalShots(); ok {
		_spec.AddField(player.FieldTotalShots, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ShotsOnTarget(); ok {
		_spec.SetField(player.FieldShotsOnTarget, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedShotsOnTarget(); ok {
		_spec.AddField(player.FieldShotsOnTarget, field.TypeInt, value)
	}
	if value, ok := puo.mutation.TotalGoals(); ok {
		_spec.SetField(player.FieldTotalGoals, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTotalGoals(); ok {
		_spec.AddField(player.FieldTotalGoals, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Assists(); ok {
		_spec.SetField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAssists(); ok {
		_spec.AddField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := puo.mutation.GoalsConceded(); ok {
		_spec.SetField(player.FieldGoalsConceded, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGoalsConceded(); ok {
		_spec.AddField(player.FieldGoalsConceded, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Saves(); ok {
		_spec.SetField(player.FieldSaves, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSaves(); ok {
		_spec.AddField(player.FieldSaves, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeString, value)
	}
	if value, ok := puo.mutation.Rating(); ok {
		_spec.SetField(player.FieldRating, field.TypeString, value)
	}
	if value, ok := puo.mutation.TeamName(); ok {
		_spec.SetField(player.FieldTeamName, field.TypeString, value)
	}
	if value, ok := puo.mutation.TeamID(); ok {
		_spec.SetField(player.FieldTeamID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTeamID(); ok {
		_spec.AddField(player.FieldTeamID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.LeagueID(); ok {
		_spec.SetField(player.FieldLeagueID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLeagueID(); ok {
		_spec.AddField(player.FieldLeagueID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.LeagueName(); ok {
		_spec.SetField(player.FieldLeagueName, field.TypeString, value)
	}
	if value, ok := puo.mutation.PassTotal(); ok {
		_spec.SetField(player.FieldPassTotal, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPassTotal(); ok {
		_spec.AddField(player.FieldPassTotal, field.TypeInt, value)
	}
	if value, ok := puo.mutation.PassKey(); ok {
		_spec.SetField(player.FieldPassKey, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPassKey(); ok {
		_spec.AddField(player.FieldPassKey, field.TypeInt, value)
	}
	if value, ok := puo.mutation.PassAccuracy(); ok {
		_spec.SetField(player.FieldPassAccuracy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPassAccuracy(); ok {
		_spec.AddField(player.FieldPassAccuracy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.TotalTackle(); ok {
		_spec.SetField(player.FieldTotalTackle, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTotalTackle(); ok {
		_spec.AddField(player.FieldTotalTackle, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Blocks(); ok {
		_spec.SetField(player.FieldBlocks, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedBlocks(); ok {
		_spec.AddField(player.FieldBlocks, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Interceptions(); ok {
		_spec.SetField(player.FieldInterceptions, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedInterceptions(); ok {
		_spec.AddField(player.FieldInterceptions, field.TypeInt, value)
	}
	if value, ok := puo.mutation.DuelsTotal(); ok {
		_spec.SetField(player.FieldDuelsTotal, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDuelsTotal(); ok {
		_spec.AddField(player.FieldDuelsTotal, field.TypeInt, value)
	}
	if value, ok := puo.mutation.DuelsWon(); ok {
		_spec.SetField(player.FieldDuelsWon, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDuelsWon(); ok {
		_spec.AddField(player.FieldDuelsWon, field.TypeInt, value)
	}
	if puo.mutation.BirthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BirthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.BirthTable,
			Columns: []string{player.BirthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(birth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NationalityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NationalityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.NationalityTable,
			Columns: []string{player.NationalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSquadIDs(); len(nodes) > 0 && !puo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.SquadTable,
			Columns: []string{player.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlayerEventsIDs(); len(nodes) > 0 && !puo.mutation.PlayerEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlayerEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerEventsTable,
			Columns: []string{player.PlayerEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMatchPlayerIDs(); len(nodes) > 0 && !puo.mutation.MatchPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MatchPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayerTable,
			Columns: []string{player.MatchPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAssistEventsIDs(); len(nodes) > 0 && !puo.mutation.AssistEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AssistEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AssistEventsTable,
			Columns: []string{player.AssistEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerStatsTable,
			Columns: []string{player.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlayerStatsIDs(); len(nodes) > 0 && !puo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerStatsTable,
			Columns: []string{player.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.PlayerStatsTable,
			Columns: []string{player.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
