// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pssubstitutes"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSSubstitutesCreate is the builder for creating a PSSubstitutes entity.
type PSSubstitutesCreate struct {
	config
	mutation *PSSubstitutesMutation
	hooks    []Hook
}

// SetIn sets the "In" field.
func (psc *PSSubstitutesCreate) SetIn(i int) *PSSubstitutesCreate {
	psc.mutation.SetIn(i)
	return psc
}

// SetOut sets the "Out" field.
func (psc *PSSubstitutesCreate) SetOut(i int) *PSSubstitutesCreate {
	psc.mutation.SetOut(i)
	return psc
}

// SetBench sets the "Bench" field.
func (psc *PSSubstitutesCreate) SetBench(i int) *PSSubstitutesCreate {
	psc.mutation.SetBench(i)
	return psc
}

// SetLastUpdated sets the "lastUpdated" field.
func (psc *PSSubstitutesCreate) SetLastUpdated(t time.Time) *PSSubstitutesCreate {
	psc.mutation.SetLastUpdated(t)
	return psc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (psc *PSSubstitutesCreate) SetNillableLastUpdated(t *time.Time) *PSSubstitutesCreate {
	if t != nil {
		psc.SetLastUpdated(*t)
	}
	return psc
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (psc *PSSubstitutesCreate) SetPlayerStatsID(id int) *PSSubstitutesCreate {
	psc.mutation.SetPlayerStatsID(id)
	return psc
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (psc *PSSubstitutesCreate) SetNillablePlayerStatsID(id *int) *PSSubstitutesCreate {
	if id != nil {
		psc = psc.SetPlayerStatsID(*id)
	}
	return psc
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (psc *PSSubstitutesCreate) SetPlayerStats(p *PlayerStats) *PSSubstitutesCreate {
	return psc.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSSubstitutesMutation object of the builder.
func (psc *PSSubstitutesCreate) Mutation() *PSSubstitutesMutation {
	return psc.mutation
}

// Save creates the PSSubstitutes in the database.
func (psc *PSSubstitutesCreate) Save(ctx context.Context) (*PSSubstitutes, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PSSubstitutesCreate) SaveX(ctx context.Context) *PSSubstitutes {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PSSubstitutesCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PSSubstitutesCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PSSubstitutesCreate) defaults() {
	if _, ok := psc.mutation.LastUpdated(); !ok {
		v := pssubstitutes.DefaultLastUpdated()
		psc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PSSubstitutesCreate) check() error {
	if _, ok := psc.mutation.In(); !ok {
		return &ValidationError{Name: "In", err: errors.New(`ent: missing required field "PSSubstitutes.In"`)}
	}
	if _, ok := psc.mutation.Out(); !ok {
		return &ValidationError{Name: "Out", err: errors.New(`ent: missing required field "PSSubstitutes.Out"`)}
	}
	if _, ok := psc.mutation.Bench(); !ok {
		return &ValidationError{Name: "Bench", err: errors.New(`ent: missing required field "PSSubstitutes.Bench"`)}
	}
	return nil
}

func (psc *PSSubstitutesCreate) sqlSave(ctx context.Context) (*PSSubstitutes, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PSSubstitutesCreate) createSpec() (*PSSubstitutes, *sqlgraph.CreateSpec) {
	var (
		_node = &PSSubstitutes{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(pssubstitutes.Table, sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt))
	)
	if value, ok := psc.mutation.In(); ok {
		_spec.SetField(pssubstitutes.FieldIn, field.TypeInt, value)
		_node.In = value
	}
	if value, ok := psc.mutation.Out(); ok {
		_spec.SetField(pssubstitutes.FieldOut, field.TypeInt, value)
		_node.Out = value
	}
	if value, ok := psc.mutation.Bench(); ok {
		_spec.SetField(pssubstitutes.FieldBench, field.TypeInt, value)
		_node.Bench = value
	}
	if value, ok := psc.mutation.LastUpdated(); ok {
		_spec.SetField(pssubstitutes.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := psc.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pssubstitutes.PlayerStatsTable,
			Columns: []string{pssubstitutes.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_stats_ps_substitutes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PSSubstitutesCreateBulk is the builder for creating many PSSubstitutes entities in bulk.
type PSSubstitutesCreateBulk struct {
	config
	err      error
	builders []*PSSubstitutesCreate
}

// Save creates the PSSubstitutes entities in the database.
func (pscb *PSSubstitutesCreateBulk) Save(ctx context.Context) ([]*PSSubstitutes, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PSSubstitutes, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PSSubstitutesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PSSubstitutesCreateBulk) SaveX(ctx context.Context) []*PSSubstitutes {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PSSubstitutesCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PSSubstitutesCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
