// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgoals"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSGoalsDelete is the builder for deleting a PSGoals entity.
type PSGoalsDelete struct {
	config
	hooks    []Hook
	mutation *PSGoalsMutation
}

// Where appends a list predicates to the PSGoalsDelete builder.
func (pgd *PSGoalsDelete) Where(ps ...predicate.PSGoals) *PSGoalsDelete {
	pgd.mutation.Where(ps...)
	return pgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pgd *PSGoalsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pgd.sqlExec, pgd.mutation, pgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pgd *PSGoalsDelete) ExecX(ctx context.Context) int {
	n, err := pgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pgd *PSGoalsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(psgoals.Table, sqlgraph.NewFieldSpec(psgoals.FieldID, field.TypeInt))
	if ps := pgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pgd.mutation.done = true
	return affected, err
}

// PSGoalsDeleteOne is the builder for deleting a single PSGoals entity.
type PSGoalsDeleteOne struct {
	pgd *PSGoalsDelete
}

// Where appends a list predicates to the PSGoalsDelete builder.
func (pgdo *PSGoalsDeleteOne) Where(ps ...predicate.PSGoals) *PSGoalsDeleteOne {
	pgdo.pgd.mutation.Where(ps...)
	return pgdo
}

// Exec executes the deletion query.
func (pgdo *PSGoalsDeleteOne) Exec(ctx context.Context) error {
	n, err := pgdo.pgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{psgoals.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pgdo *PSGoalsDeleteOne) ExecX(ctx context.Context) {
	if err := pgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
