// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psgoals"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PSGoals is the model entity for the PSGoals schema.
type PSGoals struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TotalGoals holds the value of the "totalGoals" field.
	TotalGoals int `json:"totalGoals,omitempty"`
	// ConcededGoals holds the value of the "concededGoals" field.
	ConcededGoals int `json:"concededGoals,omitempty"`
	// AssistGoals holds the value of the "assistGoals" field.
	AssistGoals int `json:"assistGoals,omitempty"`
	// SaveGoals holds the value of the "saveGoals" field.
	SaveGoals int `json:"saveGoals,omitempty"`
	// ShotsTotal holds the value of the "shotsTotal" field.
	ShotsTotal int `json:"shotsTotal,omitempty"`
	// ShotsOn holds the value of the "shotsOn" field.
	ShotsOn int `json:"shotsOn,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PSGoalsQuery when eager-loading is set.
	Edges          PSGoalsEdges `json:"edges"`
	player_psgoals *int
	selectValues   sql.SelectValues
}

// PSGoalsEdges holds the relations/edges for other nodes in the graph.
type PSGoalsEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PSGoalsEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[0] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PSGoals) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case psgoals.FieldID, psgoals.FieldTotalGoals, psgoals.FieldConcededGoals, psgoals.FieldAssistGoals, psgoals.FieldSaveGoals, psgoals.FieldShotsTotal, psgoals.FieldShotsOn:
			values[i] = new(sql.NullInt64)
		case psgoals.ForeignKeys[0]: // player_psgoals
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PSGoals fields.
func (pg *PSGoals) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case psgoals.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pg.ID = int(value.Int64)
		case psgoals.FieldTotalGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field totalGoals", values[i])
			} else if value.Valid {
				pg.TotalGoals = int(value.Int64)
			}
		case psgoals.FieldConcededGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field concededGoals", values[i])
			} else if value.Valid {
				pg.ConcededGoals = int(value.Int64)
			}
		case psgoals.FieldAssistGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assistGoals", values[i])
			} else if value.Valid {
				pg.AssistGoals = int(value.Int64)
			}
		case psgoals.FieldSaveGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saveGoals", values[i])
			} else if value.Valid {
				pg.SaveGoals = int(value.Int64)
			}
		case psgoals.FieldShotsTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shotsTotal", values[i])
			} else if value.Valid {
				pg.ShotsTotal = int(value.Int64)
			}
		case psgoals.FieldShotsOn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shotsOn", values[i])
			} else if value.Valid {
				pg.ShotsOn = int(value.Int64)
			}
		case psgoals.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_psgoals", value)
			} else if value.Valid {
				pg.player_psgoals = new(int)
				*pg.player_psgoals = int(value.Int64)
			}
		default:
			pg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PSGoals.
// This includes values selected through modifiers, order, etc.
func (pg *PSGoals) Value(name string) (ent.Value, error) {
	return pg.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the PSGoals entity.
func (pg *PSGoals) QueryPlayer() *PlayerQuery {
	return NewPSGoalsClient(pg.config).QueryPlayer(pg)
}

// Update returns a builder for updating this PSGoals.
// Note that you need to call PSGoals.Unwrap() before calling this method if this PSGoals
// was returned from a transaction, and the transaction was committed or rolled back.
func (pg *PSGoals) Update() *PSGoalsUpdateOne {
	return NewPSGoalsClient(pg.config).UpdateOne(pg)
}

// Unwrap unwraps the PSGoals entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pg *PSGoals) Unwrap() *PSGoals {
	_tx, ok := pg.config.driver.(*txDriver)
	if !ok {
		panic("ent: PSGoals is not a transactional entity")
	}
	pg.config.driver = _tx.drv
	return pg
}

// String implements the fmt.Stringer.
func (pg *PSGoals) String() string {
	var builder strings.Builder
	builder.WriteString("PSGoals(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pg.ID))
	builder.WriteString("totalGoals=")
	builder.WriteString(fmt.Sprintf("%v", pg.TotalGoals))
	builder.WriteString(", ")
	builder.WriteString("concededGoals=")
	builder.WriteString(fmt.Sprintf("%v", pg.ConcededGoals))
	builder.WriteString(", ")
	builder.WriteString("assistGoals=")
	builder.WriteString(fmt.Sprintf("%v", pg.AssistGoals))
	builder.WriteString(", ")
	builder.WriteString("saveGoals=")
	builder.WriteString(fmt.Sprintf("%v", pg.SaveGoals))
	builder.WriteString(", ")
	builder.WriteString("shotsTotal=")
	builder.WriteString(fmt.Sprintf("%v", pg.ShotsTotal))
	builder.WriteString(", ")
	builder.WriteString("shotsOn=")
	builder.WriteString(fmt.Sprintf("%v", pg.ShotsOn))
	builder.WriteByte(')')
	return builder.String()
}

// PSGoalsSlice is a parsable slice of PSGoals.
type PSGoalsSlice []*PSGoals
