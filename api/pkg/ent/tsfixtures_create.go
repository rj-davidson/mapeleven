// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsfixtures"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSFixturesCreate is the builder for creating a TSFixtures entity.
type TSFixturesCreate struct {
	config
	mutation *TSFixturesMutation
	hooks    []Hook
}

// SetPlayedHome sets the "playedHome" field.
func (tfc *TSFixturesCreate) SetPlayedHome(i int) *TSFixturesCreate {
	tfc.mutation.SetPlayedHome(i)
	return tfc
}

// SetNillablePlayedHome sets the "playedHome" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillablePlayedHome(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetPlayedHome(*i)
	}
	return tfc
}

// SetPlayedAway sets the "playedAway" field.
func (tfc *TSFixturesCreate) SetPlayedAway(i int) *TSFixturesCreate {
	tfc.mutation.SetPlayedAway(i)
	return tfc
}

// SetNillablePlayedAway sets the "playedAway" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillablePlayedAway(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetPlayedAway(*i)
	}
	return tfc
}

// SetPlayedTotal sets the "playedTotal" field.
func (tfc *TSFixturesCreate) SetPlayedTotal(i int) *TSFixturesCreate {
	tfc.mutation.SetPlayedTotal(i)
	return tfc
}

// SetNillablePlayedTotal sets the "playedTotal" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillablePlayedTotal(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetPlayedTotal(*i)
	}
	return tfc
}

// SetWinsHome sets the "winsHome" field.
func (tfc *TSFixturesCreate) SetWinsHome(i int) *TSFixturesCreate {
	tfc.mutation.SetWinsHome(i)
	return tfc
}

// SetNillableWinsHome sets the "winsHome" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableWinsHome(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetWinsHome(*i)
	}
	return tfc
}

// SetWinsAway sets the "winsAway" field.
func (tfc *TSFixturesCreate) SetWinsAway(i int) *TSFixturesCreate {
	tfc.mutation.SetWinsAway(i)
	return tfc
}

// SetNillableWinsAway sets the "winsAway" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableWinsAway(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetWinsAway(*i)
	}
	return tfc
}

// SetWinsTotal sets the "winsTotal" field.
func (tfc *TSFixturesCreate) SetWinsTotal(i int) *TSFixturesCreate {
	tfc.mutation.SetWinsTotal(i)
	return tfc
}

// SetNillableWinsTotal sets the "winsTotal" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableWinsTotal(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetWinsTotal(*i)
	}
	return tfc
}

// SetDrawsHome sets the "drawsHome" field.
func (tfc *TSFixturesCreate) SetDrawsHome(i int) *TSFixturesCreate {
	tfc.mutation.SetDrawsHome(i)
	return tfc
}

// SetNillableDrawsHome sets the "drawsHome" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableDrawsHome(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetDrawsHome(*i)
	}
	return tfc
}

// SetDrawsAway sets the "drawsAway" field.
func (tfc *TSFixturesCreate) SetDrawsAway(i int) *TSFixturesCreate {
	tfc.mutation.SetDrawsAway(i)
	return tfc
}

// SetNillableDrawsAway sets the "drawsAway" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableDrawsAway(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetDrawsAway(*i)
	}
	return tfc
}

// SetDrawsTotal sets the "drawsTotal" field.
func (tfc *TSFixturesCreate) SetDrawsTotal(i int) *TSFixturesCreate {
	tfc.mutation.SetDrawsTotal(i)
	return tfc
}

// SetNillableDrawsTotal sets the "drawsTotal" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableDrawsTotal(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetDrawsTotal(*i)
	}
	return tfc
}

// SetLossesHome sets the "lossesHome" field.
func (tfc *TSFixturesCreate) SetLossesHome(i int) *TSFixturesCreate {
	tfc.mutation.SetLossesHome(i)
	return tfc
}

// SetNillableLossesHome sets the "lossesHome" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableLossesHome(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetLossesHome(*i)
	}
	return tfc
}

// SetLossesAway sets the "lossesAway" field.
func (tfc *TSFixturesCreate) SetLossesAway(i int) *TSFixturesCreate {
	tfc.mutation.SetLossesAway(i)
	return tfc
}

// SetNillableLossesAway sets the "lossesAway" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableLossesAway(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetLossesAway(*i)
	}
	return tfc
}

// SetLossesTotal sets the "lossesTotal" field.
func (tfc *TSFixturesCreate) SetLossesTotal(i int) *TSFixturesCreate {
	tfc.mutation.SetLossesTotal(i)
	return tfc
}

// SetNillableLossesTotal sets the "lossesTotal" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableLossesTotal(i *int) *TSFixturesCreate {
	if i != nil {
		tfc.SetLossesTotal(*i)
	}
	return tfc
}

// SetLastUpdated sets the "lastUpdated" field.
func (tfc *TSFixturesCreate) SetLastUpdated(t time.Time) *TSFixturesCreate {
	tfc.mutation.SetLastUpdated(t)
	return tfc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (tfc *TSFixturesCreate) SetNillableLastUpdated(t *time.Time) *TSFixturesCreate {
	if t != nil {
		tfc.SetLastUpdated(*t)
	}
	return tfc
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tfc *TSFixturesCreate) SetTeamID(id int) *TSFixturesCreate {
	tfc.mutation.SetTeamID(id)
	return tfc
}

// SetTeam sets the "team" edge to the Team entity.
func (tfc *TSFixturesCreate) SetTeam(t *Team) *TSFixturesCreate {
	return tfc.SetTeamID(t.ID)
}

// Mutation returns the TSFixturesMutation object of the builder.
func (tfc *TSFixturesCreate) Mutation() *TSFixturesMutation {
	return tfc.mutation
}

// Save creates the TSFixtures in the database.
func (tfc *TSFixturesCreate) Save(ctx context.Context) (*TSFixtures, error) {
	tfc.defaults()
	return withHooks(ctx, tfc.sqlSave, tfc.mutation, tfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tfc *TSFixturesCreate) SaveX(ctx context.Context) *TSFixtures {
	v, err := tfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfc *TSFixturesCreate) Exec(ctx context.Context) error {
	_, err := tfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfc *TSFixturesCreate) ExecX(ctx context.Context) {
	if err := tfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfc *TSFixturesCreate) defaults() {
	if _, ok := tfc.mutation.PlayedHome(); !ok {
		v := tsfixtures.DefaultPlayedHome
		tfc.mutation.SetPlayedHome(v)
	}
	if _, ok := tfc.mutation.PlayedAway(); !ok {
		v := tsfixtures.DefaultPlayedAway
		tfc.mutation.SetPlayedAway(v)
	}
	if _, ok := tfc.mutation.PlayedTotal(); !ok {
		v := tsfixtures.DefaultPlayedTotal
		tfc.mutation.SetPlayedTotal(v)
	}
	if _, ok := tfc.mutation.WinsHome(); !ok {
		v := tsfixtures.DefaultWinsHome
		tfc.mutation.SetWinsHome(v)
	}
	if _, ok := tfc.mutation.WinsAway(); !ok {
		v := tsfixtures.DefaultWinsAway
		tfc.mutation.SetWinsAway(v)
	}
	if _, ok := tfc.mutation.WinsTotal(); !ok {
		v := tsfixtures.DefaultWinsTotal
		tfc.mutation.SetWinsTotal(v)
	}
	if _, ok := tfc.mutation.DrawsHome(); !ok {
		v := tsfixtures.DefaultDrawsHome
		tfc.mutation.SetDrawsHome(v)
	}
	if _, ok := tfc.mutation.DrawsAway(); !ok {
		v := tsfixtures.DefaultDrawsAway
		tfc.mutation.SetDrawsAway(v)
	}
	if _, ok := tfc.mutation.DrawsTotal(); !ok {
		v := tsfixtures.DefaultDrawsTotal
		tfc.mutation.SetDrawsTotal(v)
	}
	if _, ok := tfc.mutation.LossesHome(); !ok {
		v := tsfixtures.DefaultLossesHome
		tfc.mutation.SetLossesHome(v)
	}
	if _, ok := tfc.mutation.LossesAway(); !ok {
		v := tsfixtures.DefaultLossesAway
		tfc.mutation.SetLossesAway(v)
	}
	if _, ok := tfc.mutation.LossesTotal(); !ok {
		v := tsfixtures.DefaultLossesTotal
		tfc.mutation.SetLossesTotal(v)
	}
	if _, ok := tfc.mutation.LastUpdated(); !ok {
		v := tsfixtures.DefaultLastUpdated()
		tfc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfc *TSFixturesCreate) check() error {
	if _, ok := tfc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "TSFixtures.team"`)}
	}
	return nil
}

func (tfc *TSFixturesCreate) sqlSave(ctx context.Context) (*TSFixtures, error) {
	if err := tfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tfc.mutation.id = &_node.ID
	tfc.mutation.done = true
	return _node, nil
}

func (tfc *TSFixturesCreate) createSpec() (*TSFixtures, *sqlgraph.CreateSpec) {
	var (
		_node = &TSFixtures{config: tfc.config}
		_spec = sqlgraph.NewCreateSpec(tsfixtures.Table, sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt))
	)
	if value, ok := tfc.mutation.PlayedHome(); ok {
		_spec.SetField(tsfixtures.FieldPlayedHome, field.TypeInt, value)
		_node.PlayedHome = value
	}
	if value, ok := tfc.mutation.PlayedAway(); ok {
		_spec.SetField(tsfixtures.FieldPlayedAway, field.TypeInt, value)
		_node.PlayedAway = value
	}
	if value, ok := tfc.mutation.PlayedTotal(); ok {
		_spec.SetField(tsfixtures.FieldPlayedTotal, field.TypeInt, value)
		_node.PlayedTotal = value
	}
	if value, ok := tfc.mutation.WinsHome(); ok {
		_spec.SetField(tsfixtures.FieldWinsHome, field.TypeInt, value)
		_node.WinsHome = value
	}
	if value, ok := tfc.mutation.WinsAway(); ok {
		_spec.SetField(tsfixtures.FieldWinsAway, field.TypeInt, value)
		_node.WinsAway = value
	}
	if value, ok := tfc.mutation.WinsTotal(); ok {
		_spec.SetField(tsfixtures.FieldWinsTotal, field.TypeInt, value)
		_node.WinsTotal = value
	}
	if value, ok := tfc.mutation.DrawsHome(); ok {
		_spec.SetField(tsfixtures.FieldDrawsHome, field.TypeInt, value)
		_node.DrawsHome = value
	}
	if value, ok := tfc.mutation.DrawsAway(); ok {
		_spec.SetField(tsfixtures.FieldDrawsAway, field.TypeInt, value)
		_node.DrawsAway = value
	}
	if value, ok := tfc.mutation.DrawsTotal(); ok {
		_spec.SetField(tsfixtures.FieldDrawsTotal, field.TypeInt, value)
		_node.DrawsTotal = value
	}
	if value, ok := tfc.mutation.LossesHome(); ok {
		_spec.SetField(tsfixtures.FieldLossesHome, field.TypeInt, value)
		_node.LossesHome = value
	}
	if value, ok := tfc.mutation.LossesAway(); ok {
		_spec.SetField(tsfixtures.FieldLossesAway, field.TypeInt, value)
		_node.LossesAway = value
	}
	if value, ok := tfc.mutation.LossesTotal(); ok {
		_spec.SetField(tsfixtures.FieldLossesTotal, field.TypeInt, value)
		_node.LossesTotal = value
	}
	if value, ok := tfc.mutation.LastUpdated(); ok {
		_spec.SetField(tsfixtures.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := tfc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfixtures.TeamTable,
			Columns: []string{tsfixtures.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_fixtures_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TSFixturesCreateBulk is the builder for creating many TSFixtures entities in bulk.
type TSFixturesCreateBulk struct {
	config
	err      error
	builders []*TSFixturesCreate
}

// Save creates the TSFixtures entities in the database.
func (tfcb *TSFixturesCreateBulk) Save(ctx context.Context) ([]*TSFixtures, error) {
	if tfcb.err != nil {
		return nil, tfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tfcb.builders))
	nodes := make([]*TSFixtures, len(tfcb.builders))
	mutators := make([]Mutator, len(tfcb.builders))
	for i := range tfcb.builders {
		func(i int, root context.Context) {
			builder := tfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TSFixturesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfcb *TSFixturesCreateBulk) SaveX(ctx context.Context) []*TSFixtures {
	v, err := tfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfcb *TSFixturesCreateBulk) Exec(ctx context.Context) error {
	_, err := tfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfcb *TSFixturesCreateBulk) ExecX(ctx context.Context) {
	if err := tfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
