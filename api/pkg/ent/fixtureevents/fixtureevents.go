// Code generated by ent, DO NOT EDIT.

package fixtureevents

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fixtureevents type in the database.
	Label = "fixture_events"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldElapsedTime holds the string denoting the elapsedtime field in the database.
	FieldElapsedTime = "elapsed_time"
	// FieldExtraTime holds the string denoting the extratime field in the database.
	FieldExtraTime = "extra_time"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// EdgeAssist holds the string denoting the assist edge name in mutations.
	EdgeAssist = "assist"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeFixture holds the string denoting the fixture edge name in mutations.
	EdgeFixture = "fixture"
	// Table holds the table name of the fixtureevents in the database.
	Table = "fixture_events"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "fixture_events"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_player_events"
	// AssistTable is the table that holds the assist relation/edge.
	AssistTable = "fixture_events"
	// AssistInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	AssistInverseTable = "players"
	// AssistColumn is the table column denoting the assist relation/edge.
	AssistColumn = "player_assist_events"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "fixture_events"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_team_fixture_events"
	// FixtureTable is the table that holds the fixture relation/edge.
	FixtureTable = "fixture_events"
	// FixtureInverseTable is the table name for the Fixture entity.
	// It exists in this package in order to avoid circular dependency with the "fixture" package.
	FixtureInverseTable = "fixtures"
	// FixtureColumn is the table column denoting the fixture relation/edge.
	FixtureColumn = "fixture_fixture_events"
)

// Columns holds all SQL columns for fixtureevents fields.
var Columns = []string{
	FieldID,
	FieldElapsedTime,
	FieldExtraTime,
	FieldType,
	FieldDetail,
	FieldComments,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "fixture_events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"fixture_fixture_events",
	"player_player_events",
	"player_assist_events",
	"team_team_fixture_events",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the FixtureEvents queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByElapsedTime orders the results by the elapsedTime field.
func ByElapsedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElapsedTime, opts...).ToFunc()
}

// ByExtraTime orders the results by the extraTime field.
func ByExtraTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraTime, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDetail orders the results by the detail field.
func ByDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetail, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssistField orders the results by assist field.
func ByAssistField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssistStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByFixtureField orders the results by fixture field.
func ByFixtureField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFixtureStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
	)
}
func newAssistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssistInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssistTable, AssistColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newFixtureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FixtureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FixtureTable, FixtureColumn),
	)
}
