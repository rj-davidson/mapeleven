// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/birth"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/country"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Player is the model entity for the Player schema.
type Player struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// ApiFootballId holds the value of the "ApiFootballId" field.
	ApiFootballId int `json:"ApiFootballId,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Firstname holds the value of the "firstname" field.
	Firstname string `json:"firstname,omitempty"`
	// Lastname holds the value of the "lastname" field.
	Lastname string `json:"lastname,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Height holds the value of the "height" field.
	Height string `json:"height,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight string `json:"weight,omitempty"`
	// Injured holds the value of the "injured" field.
	Injured bool `json:"injured,omitempty"`
	// Photo holds the value of the "photo" field.
	Photo string `json:"photo,omitempty"`
	// LastUpdated holds the value of the "lastUpdated" field.
	LastUpdated time.Time `json:"lastUpdated,omitempty"`
	// GameAppearances holds the value of the "GameAppearances" field.
	GameAppearances int `json:"GameAppearances,omitempty"`
	// GameLineups holds the value of the "GameLineups" field.
	GameLineups int `json:"GameLineups,omitempty"`
	// GameMinutes holds the value of the "GameMinutes" field.
	GameMinutes int `json:"GameMinutes,omitempty"`
	// TotalShots holds the value of the "TotalShots" field.
	TotalShots int `json:"TotalShots,omitempty"`
	// ShotsOnTarget holds the value of the "ShotsOnTarget" field.
	ShotsOnTarget int `json:"ShotsOnTarget,omitempty"`
	// TotalGoals holds the value of the "TotalGoals" field.
	TotalGoals int `json:"TotalGoals,omitempty"`
	// Assists holds the value of the "Assists" field.
	Assists int `json:"Assists,omitempty"`
	// GoalsConceded holds the value of the "GoalsConceded" field.
	GoalsConceded int `json:"GoalsConceded,omitempty"`
	// Saves holds the value of the "Saves" field.
	Saves int `json:"Saves,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating string `json:"rating,omitempty"`
	// TeamName holds the value of the "teamName" field.
	TeamName string `json:"teamName,omitempty"`
	// TeamID holds the value of the "teamID" field.
	TeamID int `json:"teamID,omitempty"`
	// LeagueID holds the value of the "leagueID" field.
	LeagueID int `json:"leagueID,omitempty"`
	// LeagueName holds the value of the "leagueName" field.
	LeagueName string `json:"leagueName,omitempty"`
	// PassTotal holds the value of the "passTotal" field.
	PassTotal int `json:"passTotal,omitempty"`
	// PassKey holds the value of the "passKey" field.
	PassKey int `json:"passKey,omitempty"`
	// PassAccuracy holds the value of the "passAccuracy" field.
	PassAccuracy int `json:"passAccuracy,omitempty"`
	// TotalTackle holds the value of the "totalTackle" field.
	TotalTackle int `json:"totalTackle,omitempty"`
	// Blocks holds the value of the "blocks" field.
	Blocks int `json:"blocks,omitempty"`
	// Interceptions holds the value of the "interceptions" field.
	Interceptions int `json:"interceptions,omitempty"`
	// DuelsTotal holds the value of the "duelsTotal" field.
	DuelsTotal int `json:"duelsTotal,omitempty"`
	// DuelsWon holds the value of the "duelsWon" field.
	DuelsWon int `json:"duelsWon,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerQuery when eager-loading is set.
	Edges           PlayerEdges `json:"edges"`
	birth_player    *int
	country_players *int
	selectValues    sql.SelectValues
}

// PlayerEdges holds the relations/edges for other nodes in the graph.
type PlayerEdges struct {
	// Birth holds the value of the birth edge.
	Birth *Birth `json:"birth,omitempty"`
	// Nationality holds the value of the nationality edge.
	Nationality *Country `json:"nationality,omitempty"`
	// Squad holds the value of the squad edge.
	Squad []*Squad `json:"squad,omitempty"`
	// PlayerEvents holds the value of the playerEvents edge.
	PlayerEvents []*FixtureEvents `json:"playerEvents,omitempty"`
	// MatchPlayer holds the value of the matchPlayer edge.
	MatchPlayer []*MatchPlayer `json:"matchPlayer,omitempty"`
	// AssistEvents holds the value of the assistEvents edge.
	AssistEvents []*FixtureEvents `json:"assistEvents,omitempty"`
	// PlayerStats holds the value of the playerStats edge.
	PlayerStats []*PlayerStats `json:"playerStats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// BirthOrErr returns the Birth value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerEdges) BirthOrErr() (*Birth, error) {
	if e.loadedTypes[0] {
		if e.Birth == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: birth.Label}
		}
		return e.Birth, nil
	}
	return nil, &NotLoadedError{edge: "birth"}
}

// NationalityOrErr returns the Nationality value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerEdges) NationalityOrErr() (*Country, error) {
	if e.loadedTypes[1] {
		if e.Nationality == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Nationality, nil
	}
	return nil, &NotLoadedError{edge: "nationality"}
}

// SquadOrErr returns the Squad value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerEdges) SquadOrErr() ([]*Squad, error) {
	if e.loadedTypes[2] {
		return e.Squad, nil
	}
	return nil, &NotLoadedError{edge: "squad"}
}

// PlayerEventsOrErr returns the PlayerEvents value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerEdges) PlayerEventsOrErr() ([]*FixtureEvents, error) {
	if e.loadedTypes[3] {
		return e.PlayerEvents, nil
	}
	return nil, &NotLoadedError{edge: "playerEvents"}
}

// MatchPlayerOrErr returns the MatchPlayer value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerEdges) MatchPlayerOrErr() ([]*MatchPlayer, error) {
	if e.loadedTypes[4] {
		return e.MatchPlayer, nil
	}
	return nil, &NotLoadedError{edge: "matchPlayer"}
}

// AssistEventsOrErr returns the AssistEvents value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerEdges) AssistEventsOrErr() ([]*FixtureEvents, error) {
	if e.loadedTypes[5] {
		return e.AssistEvents, nil
	}
	return nil, &NotLoadedError{edge: "assistEvents"}
}

// PlayerStatsOrErr returns the PlayerStats value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerEdges) PlayerStatsOrErr() ([]*PlayerStats, error) {
	if e.loadedTypes[6] {
		return e.PlayerStats, nil
	}
	return nil, &NotLoadedError{edge: "playerStats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Player) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case player.FieldInjured:
			values[i] = new(sql.NullBool)
		case player.FieldID, player.FieldApiFootballId, player.FieldAge, player.FieldGameAppearances, player.FieldGameLineups, player.FieldGameMinutes, player.FieldTotalShots, player.FieldShotsOnTarget, player.FieldTotalGoals, player.FieldAssists, player.FieldGoalsConceded, player.FieldSaves, player.FieldTeamID, player.FieldLeagueID, player.FieldPassTotal, player.FieldPassKey, player.FieldPassAccuracy, player.FieldTotalTackle, player.FieldBlocks, player.FieldInterceptions, player.FieldDuelsTotal, player.FieldDuelsWon:
			values[i] = new(sql.NullInt64)
		case player.FieldSlug, player.FieldName, player.FieldFirstname, player.FieldLastname, player.FieldHeight, player.FieldWeight, player.FieldPhoto, player.FieldPosition, player.FieldRating, player.FieldTeamName, player.FieldLeagueName:
			values[i] = new(sql.NullString)
		case player.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case player.ForeignKeys[0]: // birth_player
			values[i] = new(sql.NullInt64)
		case player.ForeignKeys[1]: // country_players
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Player fields.
func (pl *Player) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case player.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case player.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				pl.Slug = value.String
			}
		case player.FieldApiFootballId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ApiFootballId", values[i])
			} else if value.Valid {
				pl.ApiFootballId = int(value.Int64)
			}
		case player.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case player.FieldFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstname", values[i])
			} else if value.Valid {
				pl.Firstname = value.String
			}
		case player.FieldLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastname", values[i])
			} else if value.Valid {
				pl.Lastname = value.String
			}
		case player.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				pl.Age = int(value.Int64)
			}
		case player.FieldHeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				pl.Height = value.String
			}
		case player.FieldWeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				pl.Weight = value.String
			}
		case player.FieldInjured:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field injured", values[i])
			} else if value.Valid {
				pl.Injured = value.Bool
			}
		case player.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo", values[i])
			} else if value.Valid {
				pl.Photo = value.String
			}
		case player.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUpdated", values[i])
			} else if value.Valid {
				pl.LastUpdated = value.Time
			}
		case player.FieldGameAppearances:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field GameAppearances", values[i])
			} else if value.Valid {
				pl.GameAppearances = int(value.Int64)
			}
		case player.FieldGameLineups:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field GameLineups", values[i])
			} else if value.Valid {
				pl.GameLineups = int(value.Int64)
			}
		case player.FieldGameMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field GameMinutes", values[i])
			} else if value.Valid {
				pl.GameMinutes = int(value.Int64)
			}
		case player.FieldTotalShots:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TotalShots", values[i])
			} else if value.Valid {
				pl.TotalShots = int(value.Int64)
			}
		case player.FieldShotsOnTarget:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ShotsOnTarget", values[i])
			} else if value.Valid {
				pl.ShotsOnTarget = int(value.Int64)
			}
		case player.FieldTotalGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TotalGoals", values[i])
			} else if value.Valid {
				pl.TotalGoals = int(value.Int64)
			}
		case player.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Assists", values[i])
			} else if value.Valid {
				pl.Assists = int(value.Int64)
			}
		case player.FieldGoalsConceded:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field GoalsConceded", values[i])
			} else if value.Valid {
				pl.GoalsConceded = int(value.Int64)
			}
		case player.FieldSaves:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Saves", values[i])
			} else if value.Valid {
				pl.Saves = int(value.Int64)
			}
		case player.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				pl.Position = value.String
			}
		case player.FieldRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				pl.Rating = value.String
			}
		case player.FieldTeamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teamName", values[i])
			} else if value.Valid {
				pl.TeamName = value.String
			}
		case player.FieldTeamID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teamID", values[i])
			} else if value.Valid {
				pl.TeamID = int(value.Int64)
			}
		case player.FieldLeagueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field leagueID", values[i])
			} else if value.Valid {
				pl.LeagueID = int(value.Int64)
			}
		case player.FieldLeagueName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field leagueName", values[i])
			} else if value.Valid {
				pl.LeagueName = value.String
			}
		case player.FieldPassTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passTotal", values[i])
			} else if value.Valid {
				pl.PassTotal = int(value.Int64)
			}
		case player.FieldPassKey:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passKey", values[i])
			} else if value.Valid {
				pl.PassKey = int(value.Int64)
			}
		case player.FieldPassAccuracy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passAccuracy", values[i])
			} else if value.Valid {
				pl.PassAccuracy = int(value.Int64)
			}
		case player.FieldTotalTackle:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field totalTackle", values[i])
			} else if value.Valid {
				pl.TotalTackle = int(value.Int64)
			}
		case player.FieldBlocks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field blocks", values[i])
			} else if value.Valid {
				pl.Blocks = int(value.Int64)
			}
		case player.FieldInterceptions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interceptions", values[i])
			} else if value.Valid {
				pl.Interceptions = int(value.Int64)
			}
		case player.FieldDuelsTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duelsTotal", values[i])
			} else if value.Valid {
				pl.DuelsTotal = int(value.Int64)
			}
		case player.FieldDuelsWon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duelsWon", values[i])
			} else if value.Valid {
				pl.DuelsWon = int(value.Int64)
			}
		case player.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field birth_player", value)
			} else if value.Valid {
				pl.birth_player = new(int)
				*pl.birth_player = int(value.Int64)
			}
		case player.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field country_players", value)
			} else if value.Valid {
				pl.country_players = new(int)
				*pl.country_players = int(value.Int64)
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Player.
// This includes values selected through modifiers, order, etc.
func (pl *Player) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryBirth queries the "birth" edge of the Player entity.
func (pl *Player) QueryBirth() *BirthQuery {
	return NewPlayerClient(pl.config).QueryBirth(pl)
}

// QueryNationality queries the "nationality" edge of the Player entity.
func (pl *Player) QueryNationality() *CountryQuery {
	return NewPlayerClient(pl.config).QueryNationality(pl)
}

// QuerySquad queries the "squad" edge of the Player entity.
func (pl *Player) QuerySquad() *SquadQuery {
	return NewPlayerClient(pl.config).QuerySquad(pl)
}

// QueryPlayerEvents queries the "playerEvents" edge of the Player entity.
func (pl *Player) QueryPlayerEvents() *FixtureEventsQuery {
	return NewPlayerClient(pl.config).QueryPlayerEvents(pl)
}

// QueryMatchPlayer queries the "matchPlayer" edge of the Player entity.
func (pl *Player) QueryMatchPlayer() *MatchPlayerQuery {
	return NewPlayerClient(pl.config).QueryMatchPlayer(pl)
}

// QueryAssistEvents queries the "assistEvents" edge of the Player entity.
func (pl *Player) QueryAssistEvents() *FixtureEventsQuery {
	return NewPlayerClient(pl.config).QueryAssistEvents(pl)
}

// QueryPlayerStats queries the "playerStats" edge of the Player entity.
func (pl *Player) QueryPlayerStats() *PlayerStatsQuery {
	return NewPlayerClient(pl.config).QueryPlayerStats(pl)
}

// Update returns a builder for updating this Player.
// Note that you need to call Player.Unwrap() before calling this method if this Player
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Player) Update() *PlayerUpdateOne {
	return NewPlayerClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Player entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Player) Unwrap() *Player {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Player is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Player) String() string {
	var builder strings.Builder
	builder.WriteString("Player(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("slug=")
	builder.WriteString(pl.Slug)
	builder.WriteString(", ")
	builder.WriteString("ApiFootballId=")
	builder.WriteString(fmt.Sprintf("%v", pl.ApiFootballId))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("firstname=")
	builder.WriteString(pl.Firstname)
	builder.WriteString(", ")
	builder.WriteString("lastname=")
	builder.WriteString(pl.Lastname)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", pl.Age))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(pl.Height)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(pl.Weight)
	builder.WriteString(", ")
	builder.WriteString("injured=")
	builder.WriteString(fmt.Sprintf("%v", pl.Injured))
	builder.WriteString(", ")
	builder.WriteString("photo=")
	builder.WriteString(pl.Photo)
	builder.WriteString(", ")
	builder.WriteString("lastUpdated=")
	builder.WriteString(pl.LastUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("GameAppearances=")
	builder.WriteString(fmt.Sprintf("%v", pl.GameAppearances))
	builder.WriteString(", ")
	builder.WriteString("GameLineups=")
	builder.WriteString(fmt.Sprintf("%v", pl.GameLineups))
	builder.WriteString(", ")
	builder.WriteString("GameMinutes=")
	builder.WriteString(fmt.Sprintf("%v", pl.GameMinutes))
	builder.WriteString(", ")
	builder.WriteString("TotalShots=")
	builder.WriteString(fmt.Sprintf("%v", pl.TotalShots))
	builder.WriteString(", ")
	builder.WriteString("ShotsOnTarget=")
	builder.WriteString(fmt.Sprintf("%v", pl.ShotsOnTarget))
	builder.WriteString(", ")
	builder.WriteString("TotalGoals=")
	builder.WriteString(fmt.Sprintf("%v", pl.TotalGoals))
	builder.WriteString(", ")
	builder.WriteString("Assists=")
	builder.WriteString(fmt.Sprintf("%v", pl.Assists))
	builder.WriteString(", ")
	builder.WriteString("GoalsConceded=")
	builder.WriteString(fmt.Sprintf("%v", pl.GoalsConceded))
	builder.WriteString(", ")
	builder.WriteString("Saves=")
	builder.WriteString(fmt.Sprintf("%v", pl.Saves))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(pl.Position)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(pl.Rating)
	builder.WriteString(", ")
	builder.WriteString("teamName=")
	builder.WriteString(pl.TeamName)
	builder.WriteString(", ")
	builder.WriteString("teamID=")
	builder.WriteString(fmt.Sprintf("%v", pl.TeamID))
	builder.WriteString(", ")
	builder.WriteString("leagueID=")
	builder.WriteString(fmt.Sprintf("%v", pl.LeagueID))
	builder.WriteString(", ")
	builder.WriteString("leagueName=")
	builder.WriteString(pl.LeagueName)
	builder.WriteString(", ")
	builder.WriteString("passTotal=")
	builder.WriteString(fmt.Sprintf("%v", pl.PassTotal))
	builder.WriteString(", ")
	builder.WriteString("passKey=")
	builder.WriteString(fmt.Sprintf("%v", pl.PassKey))
	builder.WriteString(", ")
	builder.WriteString("passAccuracy=")
	builder.WriteString(fmt.Sprintf("%v", pl.PassAccuracy))
	builder.WriteString(", ")
	builder.WriteString("totalTackle=")
	builder.WriteString(fmt.Sprintf("%v", pl.TotalTackle))
	builder.WriteString(", ")
	builder.WriteString("blocks=")
	builder.WriteString(fmt.Sprintf("%v", pl.Blocks))
	builder.WriteString(", ")
	builder.WriteString("interceptions=")
	builder.WriteString(fmt.Sprintf("%v", pl.Interceptions))
	builder.WriteString(", ")
	builder.WriteString("duelsTotal=")
	builder.WriteString(fmt.Sprintf("%v", pl.DuelsTotal))
	builder.WriteString(", ")
	builder.WriteString("duelsWon=")
	builder.WriteString(fmt.Sprintf("%v", pl.DuelsWon))
	builder.WriteByte(')')
	return builder.String()
}

// Players is a parsable slice of Player.
type Players []*Player
