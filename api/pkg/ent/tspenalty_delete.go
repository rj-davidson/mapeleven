// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tspenalty"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSPenaltyDelete is the builder for deleting a TSPenalty entity.
type TSPenaltyDelete struct {
	config
	hooks    []Hook
	mutation *TSPenaltyMutation
}

// Where appends a list predicates to the TSPenaltyDelete builder.
func (tpd *TSPenaltyDelete) Where(ps ...predicate.TSPenalty) *TSPenaltyDelete {
	tpd.mutation.Where(ps...)
	return tpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tpd *TSPenaltyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tpd.sqlExec, tpd.mutation, tpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tpd *TSPenaltyDelete) ExecX(ctx context.Context) int {
	n, err := tpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tpd *TSPenaltyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tspenalty.Table, sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt))
	if ps := tpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tpd.mutation.done = true
	return affected, err
}

// TSPenaltyDeleteOne is the builder for deleting a single TSPenalty entity.
type TSPenaltyDeleteOne struct {
	tpd *TSPenaltyDelete
}

// Where appends a list predicates to the TSPenaltyDelete builder.
func (tpdo *TSPenaltyDeleteOne) Where(ps ...predicate.TSPenalty) *TSPenaltyDeleteOne {
	tpdo.tpd.mutation.Where(ps...)
	return tpdo
}

// Exec executes the deletion query.
func (tpdo *TSPenaltyDeleteOne) Exec(ctx context.Context) error {
	n, err := tpdo.tpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tspenalty.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tpdo *TSPenaltyDeleteOne) ExecX(ctx context.Context) {
	if err := tpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
