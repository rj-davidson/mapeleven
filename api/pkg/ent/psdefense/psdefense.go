// Code generated by ent, DO NOT EDIT.

package psdefense

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psdefense type in the database.
	Label = "ps_defense"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTacklesTotal holds the string denoting the tacklestotal field in the database.
	FieldTacklesTotal = "tackles_total"
	// FieldBlocks holds the string denoting the blocks field in the database.
	FieldBlocks = "blocks"
	// FieldInterceptions holds the string denoting the interceptions field in the database.
	FieldInterceptions = "interceptions"
	// FieldTotalDuels holds the string denoting the totalduels field in the database.
	FieldTotalDuels = "total_duels"
	// FieldWonDuels holds the string denoting the wonduels field in the database.
	FieldWonDuels = "won_duels"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the psdefense in the database.
	Table = "ps_defenses"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "ps_defenses"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_psdefense"
)

// Columns holds all SQL columns for psdefense fields.
var Columns = []string{
	FieldID,
	FieldTacklesTotal,
	FieldBlocks,
	FieldInterceptions,
	FieldTotalDuels,
	FieldWonDuels,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_defenses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_psdefense",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBlocks holds the default value on creation for the "blocks" field.
	DefaultBlocks int
)

// OrderOption defines the ordering options for the PSDefense queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTacklesTotal orders the results by the tacklesTotal field.
func ByTacklesTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTacklesTotal, opts...).ToFunc()
}

// ByBlocks orders the results by the blocks field.
func ByBlocks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlocks, opts...).ToFunc()
}

// ByInterceptions orders the results by the interceptions field.
func ByInterceptions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterceptions, opts...).ToFunc()
}

// ByTotalDuels orders the results by the totalDuels field.
func ByTotalDuels(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalDuels, opts...).ToFunc()
}

// ByWonDuels orders the results by the wonDuels field.
func ByWonDuels(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWonDuels, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
	)
}
