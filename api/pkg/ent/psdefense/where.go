// Code generated by ent, DO NOT EDIT.

package psdefense

import (
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLTE(FieldID, id))
}

// TacklesTotal applies equality check predicate on the "tacklesTotal" field. It's identical to TacklesTotalEQ.
func TacklesTotal(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldTacklesTotal, v))
}

// Blocks applies equality check predicate on the "blocks" field. It's identical to BlocksEQ.
func Blocks(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldBlocks, v))
}

// Interceptions applies equality check predicate on the "interceptions" field. It's identical to InterceptionsEQ.
func Interceptions(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldInterceptions, v))
}

// TotalDuels applies equality check predicate on the "totalDuels" field. It's identical to TotalDuelsEQ.
func TotalDuels(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldTotalDuels, v))
}

// WonDuels applies equality check predicate on the "wonDuels" field. It's identical to WonDuelsEQ.
func WonDuels(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldWonDuels, v))
}

// TacklesTotalEQ applies the EQ predicate on the "tacklesTotal" field.
func TacklesTotalEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldTacklesTotal, v))
}

// TacklesTotalNEQ applies the NEQ predicate on the "tacklesTotal" field.
func TacklesTotalNEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNEQ(FieldTacklesTotal, v))
}

// TacklesTotalIn applies the In predicate on the "tacklesTotal" field.
func TacklesTotalIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldIn(FieldTacklesTotal, vs...))
}

// TacklesTotalNotIn applies the NotIn predicate on the "tacklesTotal" field.
func TacklesTotalNotIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNotIn(FieldTacklesTotal, vs...))
}

// TacklesTotalGT applies the GT predicate on the "tacklesTotal" field.
func TacklesTotalGT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGT(FieldTacklesTotal, v))
}

// TacklesTotalGTE applies the GTE predicate on the "tacklesTotal" field.
func TacklesTotalGTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGTE(FieldTacklesTotal, v))
}

// TacklesTotalLT applies the LT predicate on the "tacklesTotal" field.
func TacklesTotalLT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLT(FieldTacklesTotal, v))
}

// TacklesTotalLTE applies the LTE predicate on the "tacklesTotal" field.
func TacklesTotalLTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLTE(FieldTacklesTotal, v))
}

// BlocksEQ applies the EQ predicate on the "blocks" field.
func BlocksEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldBlocks, v))
}

// BlocksNEQ applies the NEQ predicate on the "blocks" field.
func BlocksNEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNEQ(FieldBlocks, v))
}

// BlocksIn applies the In predicate on the "blocks" field.
func BlocksIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldIn(FieldBlocks, vs...))
}

// BlocksNotIn applies the NotIn predicate on the "blocks" field.
func BlocksNotIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNotIn(FieldBlocks, vs...))
}

// BlocksGT applies the GT predicate on the "blocks" field.
func BlocksGT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGT(FieldBlocks, v))
}

// BlocksGTE applies the GTE predicate on the "blocks" field.
func BlocksGTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGTE(FieldBlocks, v))
}

// BlocksLT applies the LT predicate on the "blocks" field.
func BlocksLT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLT(FieldBlocks, v))
}

// BlocksLTE applies the LTE predicate on the "blocks" field.
func BlocksLTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLTE(FieldBlocks, v))
}

// InterceptionsEQ applies the EQ predicate on the "interceptions" field.
func InterceptionsEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldInterceptions, v))
}

// InterceptionsNEQ applies the NEQ predicate on the "interceptions" field.
func InterceptionsNEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNEQ(FieldInterceptions, v))
}

// InterceptionsIn applies the In predicate on the "interceptions" field.
func InterceptionsIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldIn(FieldInterceptions, vs...))
}

// InterceptionsNotIn applies the NotIn predicate on the "interceptions" field.
func InterceptionsNotIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNotIn(FieldInterceptions, vs...))
}

// InterceptionsGT applies the GT predicate on the "interceptions" field.
func InterceptionsGT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGT(FieldInterceptions, v))
}

// InterceptionsGTE applies the GTE predicate on the "interceptions" field.
func InterceptionsGTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGTE(FieldInterceptions, v))
}

// InterceptionsLT applies the LT predicate on the "interceptions" field.
func InterceptionsLT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLT(FieldInterceptions, v))
}

// InterceptionsLTE applies the LTE predicate on the "interceptions" field.
func InterceptionsLTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLTE(FieldInterceptions, v))
}

// TotalDuelsEQ applies the EQ predicate on the "totalDuels" field.
func TotalDuelsEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldTotalDuels, v))
}

// TotalDuelsNEQ applies the NEQ predicate on the "totalDuels" field.
func TotalDuelsNEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNEQ(FieldTotalDuels, v))
}

// TotalDuelsIn applies the In predicate on the "totalDuels" field.
func TotalDuelsIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldIn(FieldTotalDuels, vs...))
}

// TotalDuelsNotIn applies the NotIn predicate on the "totalDuels" field.
func TotalDuelsNotIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNotIn(FieldTotalDuels, vs...))
}

// TotalDuelsGT applies the GT predicate on the "totalDuels" field.
func TotalDuelsGT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGT(FieldTotalDuels, v))
}

// TotalDuelsGTE applies the GTE predicate on the "totalDuels" field.
func TotalDuelsGTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGTE(FieldTotalDuels, v))
}

// TotalDuelsLT applies the LT predicate on the "totalDuels" field.
func TotalDuelsLT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLT(FieldTotalDuels, v))
}

// TotalDuelsLTE applies the LTE predicate on the "totalDuels" field.
func TotalDuelsLTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLTE(FieldTotalDuels, v))
}

// WonDuelsEQ applies the EQ predicate on the "wonDuels" field.
func WonDuelsEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldEQ(FieldWonDuels, v))
}

// WonDuelsNEQ applies the NEQ predicate on the "wonDuels" field.
func WonDuelsNEQ(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNEQ(FieldWonDuels, v))
}

// WonDuelsIn applies the In predicate on the "wonDuels" field.
func WonDuelsIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldIn(FieldWonDuels, vs...))
}

// WonDuelsNotIn applies the NotIn predicate on the "wonDuels" field.
func WonDuelsNotIn(vs ...int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldNotIn(FieldWonDuels, vs...))
}

// WonDuelsGT applies the GT predicate on the "wonDuels" field.
func WonDuelsGT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGT(FieldWonDuels, v))
}

// WonDuelsGTE applies the GTE predicate on the "wonDuels" field.
func WonDuelsGTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldGTE(FieldWonDuels, v))
}

// WonDuelsLT applies the LT predicate on the "wonDuels" field.
func WonDuelsLT(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLT(FieldWonDuels, v))
}

// WonDuelsLTE applies the LTE predicate on the "wonDuels" field.
func WonDuelsLTE(v int) predicate.PSDefense {
	return predicate.PSDefense(sql.FieldLTE(FieldWonDuels, v))
}

// HasPlayer applies the HasEdge predicate on the "player" edge.
func HasPlayer() predicate.PSDefense {
	return predicate.PSDefense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerWith applies the HasEdge predicate on the "player" edge with a given conditions (other predicates).
func HasPlayerWith(preds ...predicate.Player) predicate.PSDefense {
	return predicate.PSDefense(func(s *sql.Selector) {
		step := newPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PSDefense) predicate.PSDefense {
	return predicate.PSDefense(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PSDefense) predicate.PSDefense {
	return predicate.PSDefense(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PSDefense) predicate.PSDefense {
	return predicate.PSDefense(sql.NotPredicates(p))
}
