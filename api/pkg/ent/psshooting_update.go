// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/psshooting"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSShootingUpdate is the builder for updating PSShooting entities.
type PSShootingUpdate struct {
	config
	hooks    []Hook
	mutation *PSShootingMutation
}

// Where appends a list predicates to the PSShootingUpdate builder.
func (psu *PSShootingUpdate) Where(ps ...predicate.PSShooting) *PSShootingUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetGoals sets the "Goals" field.
func (psu *PSShootingUpdate) SetGoals(i int) *PSShootingUpdate {
	psu.mutation.ResetGoals()
	psu.mutation.SetGoals(i)
	return psu
}

// SetNillableGoals sets the "Goals" field if the given value is not nil.
func (psu *PSShootingUpdate) SetNillableGoals(i *int) *PSShootingUpdate {
	if i != nil {
		psu.SetGoals(*i)
	}
	return psu
}

// AddGoals adds i to the "Goals" field.
func (psu *PSShootingUpdate) AddGoals(i int) *PSShootingUpdate {
	psu.mutation.AddGoals(i)
	return psu
}

// SetConceded sets the "Conceded" field.
func (psu *PSShootingUpdate) SetConceded(i int) *PSShootingUpdate {
	psu.mutation.ResetConceded()
	psu.mutation.SetConceded(i)
	return psu
}

// SetNillableConceded sets the "Conceded" field if the given value is not nil.
func (psu *PSShootingUpdate) SetNillableConceded(i *int) *PSShootingUpdate {
	if i != nil {
		psu.SetConceded(*i)
	}
	return psu
}

// AddConceded adds i to the "Conceded" field.
func (psu *PSShootingUpdate) AddConceded(i int) *PSShootingUpdate {
	psu.mutation.AddConceded(i)
	return psu
}

// SetAssists sets the "Assists" field.
func (psu *PSShootingUpdate) SetAssists(i int) *PSShootingUpdate {
	psu.mutation.ResetAssists()
	psu.mutation.SetAssists(i)
	return psu
}

// SetNillableAssists sets the "Assists" field if the given value is not nil.
func (psu *PSShootingUpdate) SetNillableAssists(i *int) *PSShootingUpdate {
	if i != nil {
		psu.SetAssists(*i)
	}
	return psu
}

// AddAssists adds i to the "Assists" field.
func (psu *PSShootingUpdate) AddAssists(i int) *PSShootingUpdate {
	psu.mutation.AddAssists(i)
	return psu
}

// SetSaves sets the "Saves" field.
func (psu *PSShootingUpdate) SetSaves(i int) *PSShootingUpdate {
	psu.mutation.ResetSaves()
	psu.mutation.SetSaves(i)
	return psu
}

// SetNillableSaves sets the "Saves" field if the given value is not nil.
func (psu *PSShootingUpdate) SetNillableSaves(i *int) *PSShootingUpdate {
	if i != nil {
		psu.SetSaves(*i)
	}
	return psu
}

// AddSaves adds i to the "Saves" field.
func (psu *PSShootingUpdate) AddSaves(i int) *PSShootingUpdate {
	psu.mutation.AddSaves(i)
	return psu
}

// SetShots sets the "Shots" field.
func (psu *PSShootingUpdate) SetShots(i int) *PSShootingUpdate {
	psu.mutation.ResetShots()
	psu.mutation.SetShots(i)
	return psu
}

// SetNillableShots sets the "Shots" field if the given value is not nil.
func (psu *PSShootingUpdate) SetNillableShots(i *int) *PSShootingUpdate {
	if i != nil {
		psu.SetShots(*i)
	}
	return psu
}

// AddShots adds i to the "Shots" field.
func (psu *PSShootingUpdate) AddShots(i int) *PSShootingUpdate {
	psu.mutation.AddShots(i)
	return psu
}

// SetOnTarget sets the "OnTarget" field.
func (psu *PSShootingUpdate) SetOnTarget(i int) *PSShootingUpdate {
	psu.mutation.ResetOnTarget()
	psu.mutation.SetOnTarget(i)
	return psu
}

// SetNillableOnTarget sets the "OnTarget" field if the given value is not nil.
func (psu *PSShootingUpdate) SetNillableOnTarget(i *int) *PSShootingUpdate {
	if i != nil {
		psu.SetOnTarget(*i)
	}
	return psu
}

// AddOnTarget adds i to the "OnTarget" field.
func (psu *PSShootingUpdate) AddOnTarget(i int) *PSShootingUpdate {
	psu.mutation.AddOnTarget(i)
	return psu
}

// SetLastUpdated sets the "lastUpdated" field.
func (psu *PSShootingUpdate) SetLastUpdated(t time.Time) *PSShootingUpdate {
	psu.mutation.SetLastUpdated(t)
	return psu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psu *PSShootingUpdate) ClearLastUpdated() *PSShootingUpdate {
	psu.mutation.ClearLastUpdated()
	return psu
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (psu *PSShootingUpdate) SetPlayerStatsID(id int) *PSShootingUpdate {
	psu.mutation.SetPlayerStatsID(id)
	return psu
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (psu *PSShootingUpdate) SetNillablePlayerStatsID(id *int) *PSShootingUpdate {
	if id != nil {
		psu = psu.SetPlayerStatsID(*id)
	}
	return psu
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (psu *PSShootingUpdate) SetPlayerStats(p *PlayerStats) *PSShootingUpdate {
	return psu.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSShootingMutation object of the builder.
func (psu *PSShootingUpdate) Mutation() *PSShootingMutation {
	return psu.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (psu *PSShootingUpdate) ClearPlayerStats() *PSShootingUpdate {
	psu.mutation.ClearPlayerStats()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PSShootingUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PSShootingUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PSShootingUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PSShootingUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PSShootingUpdate) defaults() {
	if _, ok := psu.mutation.LastUpdated(); !ok && !psu.mutation.LastUpdatedCleared() {
		v := psshooting.UpdateDefaultLastUpdated()
		psu.mutation.SetLastUpdated(v)
	}
}

func (psu *PSShootingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(psshooting.Table, psshooting.Columns, sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Goals(); ok {
		_spec.SetField(psshooting.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedGoals(); ok {
		_spec.AddField(psshooting.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Conceded(); ok {
		_spec.SetField(psshooting.FieldConceded, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedConceded(); ok {
		_spec.AddField(psshooting.FieldConceded, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Assists(); ok {
		_spec.SetField(psshooting.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedAssists(); ok {
		_spec.AddField(psshooting.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Saves(); ok {
		_spec.SetField(psshooting.FieldSaves, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedSaves(); ok {
		_spec.AddField(psshooting.FieldSaves, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Shots(); ok {
		_spec.SetField(psshooting.FieldShots, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedShots(); ok {
		_spec.AddField(psshooting.FieldShots, field.TypeInt, value)
	}
	if value, ok := psu.mutation.OnTarget(); ok {
		_spec.SetField(psshooting.FieldOnTarget, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedOnTarget(); ok {
		_spec.AddField(psshooting.FieldOnTarget, field.TypeInt, value)
	}
	if value, ok := psu.mutation.LastUpdated(); ok {
		_spec.SetField(psshooting.FieldLastUpdated, field.TypeTime, value)
	}
	if psu.mutation.LastUpdatedCleared() {
		_spec.ClearField(psshooting.FieldLastUpdated, field.TypeTime)
	}
	if psu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   psshooting.PlayerStatsTable,
			Columns: []string{psshooting.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   psshooting.PlayerStatsTable,
			Columns: []string{psshooting.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psshooting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PSShootingUpdateOne is the builder for updating a single PSShooting entity.
type PSShootingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PSShootingMutation
}

// SetGoals sets the "Goals" field.
func (psuo *PSShootingUpdateOne) SetGoals(i int) *PSShootingUpdateOne {
	psuo.mutation.ResetGoals()
	psuo.mutation.SetGoals(i)
	return psuo
}

// SetNillableGoals sets the "Goals" field if the given value is not nil.
func (psuo *PSShootingUpdateOne) SetNillableGoals(i *int) *PSShootingUpdateOne {
	if i != nil {
		psuo.SetGoals(*i)
	}
	return psuo
}

// AddGoals adds i to the "Goals" field.
func (psuo *PSShootingUpdateOne) AddGoals(i int) *PSShootingUpdateOne {
	psuo.mutation.AddGoals(i)
	return psuo
}

// SetConceded sets the "Conceded" field.
func (psuo *PSShootingUpdateOne) SetConceded(i int) *PSShootingUpdateOne {
	psuo.mutation.ResetConceded()
	psuo.mutation.SetConceded(i)
	return psuo
}

// SetNillableConceded sets the "Conceded" field if the given value is not nil.
func (psuo *PSShootingUpdateOne) SetNillableConceded(i *int) *PSShootingUpdateOne {
	if i != nil {
		psuo.SetConceded(*i)
	}
	return psuo
}

// AddConceded adds i to the "Conceded" field.
func (psuo *PSShootingUpdateOne) AddConceded(i int) *PSShootingUpdateOne {
	psuo.mutation.AddConceded(i)
	return psuo
}

// SetAssists sets the "Assists" field.
func (psuo *PSShootingUpdateOne) SetAssists(i int) *PSShootingUpdateOne {
	psuo.mutation.ResetAssists()
	psuo.mutation.SetAssists(i)
	return psuo
}

// SetNillableAssists sets the "Assists" field if the given value is not nil.
func (psuo *PSShootingUpdateOne) SetNillableAssists(i *int) *PSShootingUpdateOne {
	if i != nil {
		psuo.SetAssists(*i)
	}
	return psuo
}

// AddAssists adds i to the "Assists" field.
func (psuo *PSShootingUpdateOne) AddAssists(i int) *PSShootingUpdateOne {
	psuo.mutation.AddAssists(i)
	return psuo
}

// SetSaves sets the "Saves" field.
func (psuo *PSShootingUpdateOne) SetSaves(i int) *PSShootingUpdateOne {
	psuo.mutation.ResetSaves()
	psuo.mutation.SetSaves(i)
	return psuo
}

// SetNillableSaves sets the "Saves" field if the given value is not nil.
func (psuo *PSShootingUpdateOne) SetNillableSaves(i *int) *PSShootingUpdateOne {
	if i != nil {
		psuo.SetSaves(*i)
	}
	return psuo
}

// AddSaves adds i to the "Saves" field.
func (psuo *PSShootingUpdateOne) AddSaves(i int) *PSShootingUpdateOne {
	psuo.mutation.AddSaves(i)
	return psuo
}

// SetShots sets the "Shots" field.
func (psuo *PSShootingUpdateOne) SetShots(i int) *PSShootingUpdateOne {
	psuo.mutation.ResetShots()
	psuo.mutation.SetShots(i)
	return psuo
}

// SetNillableShots sets the "Shots" field if the given value is not nil.
func (psuo *PSShootingUpdateOne) SetNillableShots(i *int) *PSShootingUpdateOne {
	if i != nil {
		psuo.SetShots(*i)
	}
	return psuo
}

// AddShots adds i to the "Shots" field.
func (psuo *PSShootingUpdateOne) AddShots(i int) *PSShootingUpdateOne {
	psuo.mutation.AddShots(i)
	return psuo
}

// SetOnTarget sets the "OnTarget" field.
func (psuo *PSShootingUpdateOne) SetOnTarget(i int) *PSShootingUpdateOne {
	psuo.mutation.ResetOnTarget()
	psuo.mutation.SetOnTarget(i)
	return psuo
}

// SetNillableOnTarget sets the "OnTarget" field if the given value is not nil.
func (psuo *PSShootingUpdateOne) SetNillableOnTarget(i *int) *PSShootingUpdateOne {
	if i != nil {
		psuo.SetOnTarget(*i)
	}
	return psuo
}

// AddOnTarget adds i to the "OnTarget" field.
func (psuo *PSShootingUpdateOne) AddOnTarget(i int) *PSShootingUpdateOne {
	psuo.mutation.AddOnTarget(i)
	return psuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (psuo *PSShootingUpdateOne) SetLastUpdated(t time.Time) *PSShootingUpdateOne {
	psuo.mutation.SetLastUpdated(t)
	return psuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psuo *PSShootingUpdateOne) ClearLastUpdated() *PSShootingUpdateOne {
	psuo.mutation.ClearLastUpdated()
	return psuo
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (psuo *PSShootingUpdateOne) SetPlayerStatsID(id int) *PSShootingUpdateOne {
	psuo.mutation.SetPlayerStatsID(id)
	return psuo
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (psuo *PSShootingUpdateOne) SetNillablePlayerStatsID(id *int) *PSShootingUpdateOne {
	if id != nil {
		psuo = psuo.SetPlayerStatsID(*id)
	}
	return psuo
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (psuo *PSShootingUpdateOne) SetPlayerStats(p *PlayerStats) *PSShootingUpdateOne {
	return psuo.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSShootingMutation object of the builder.
func (psuo *PSShootingUpdateOne) Mutation() *PSShootingMutation {
	return psuo.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (psuo *PSShootingUpdateOne) ClearPlayerStats() *PSShootingUpdateOne {
	psuo.mutation.ClearPlayerStats()
	return psuo
}

// Where appends a list predicates to the PSShootingUpdate builder.
func (psuo *PSShootingUpdateOne) Where(ps ...predicate.PSShooting) *PSShootingUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PSShootingUpdateOne) Select(field string, fields ...string) *PSShootingUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PSShooting entity.
func (psuo *PSShootingUpdateOne) Save(ctx context.Context) (*PSShooting, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PSShootingUpdateOne) SaveX(ctx context.Context) *PSShooting {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PSShootingUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PSShootingUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PSShootingUpdateOne) defaults() {
	if _, ok := psuo.mutation.LastUpdated(); !ok && !psuo.mutation.LastUpdatedCleared() {
		v := psshooting.UpdateDefaultLastUpdated()
		psuo.mutation.SetLastUpdated(v)
	}
}

func (psuo *PSShootingUpdateOne) sqlSave(ctx context.Context) (_node *PSShooting, err error) {
	_spec := sqlgraph.NewUpdateSpec(psshooting.Table, psshooting.Columns, sqlgraph.NewFieldSpec(psshooting.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PSShooting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, psshooting.FieldID)
		for _, f := range fields {
			if !psshooting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != psshooting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Goals(); ok {
		_spec.SetField(psshooting.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedGoals(); ok {
		_spec.AddField(psshooting.FieldGoals, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Conceded(); ok {
		_spec.SetField(psshooting.FieldConceded, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedConceded(); ok {
		_spec.AddField(psshooting.FieldConceded, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Assists(); ok {
		_spec.SetField(psshooting.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedAssists(); ok {
		_spec.AddField(psshooting.FieldAssists, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Saves(); ok {
		_spec.SetField(psshooting.FieldSaves, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedSaves(); ok {
		_spec.AddField(psshooting.FieldSaves, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Shots(); ok {
		_spec.SetField(psshooting.FieldShots, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedShots(); ok {
		_spec.AddField(psshooting.FieldShots, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.OnTarget(); ok {
		_spec.SetField(psshooting.FieldOnTarget, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedOnTarget(); ok {
		_spec.AddField(psshooting.FieldOnTarget, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.LastUpdated(); ok {
		_spec.SetField(psshooting.FieldLastUpdated, field.TypeTime, value)
	}
	if psuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(psshooting.FieldLastUpdated, field.TypeTime)
	}
	if psuo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   psshooting.PlayerStatsTable,
			Columns: []string{psshooting.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   psshooting.PlayerStatsTable,
			Columns: []string{psshooting.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PSShooting{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psshooting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
