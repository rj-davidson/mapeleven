// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pstechnical"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSTechnicalUpdate is the builder for updating PSTechnical entities.
type PSTechnicalUpdate struct {
	config
	hooks    []Hook
	mutation *PSTechnicalMutation
}

// Where appends a list predicates to the PSTechnicalUpdate builder.
func (ptu *PSTechnicalUpdate) Where(ps ...predicate.PSTechnical) *PSTechnicalUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetFoulsDrawn sets the "FoulsDrawn" field.
func (ptu *PSTechnicalUpdate) SetFoulsDrawn(i int) *PSTechnicalUpdate {
	ptu.mutation.ResetFoulsDrawn()
	ptu.mutation.SetFoulsDrawn(i)
	return ptu
}

// AddFoulsDrawn adds i to the "FoulsDrawn" field.
func (ptu *PSTechnicalUpdate) AddFoulsDrawn(i int) *PSTechnicalUpdate {
	ptu.mutation.AddFoulsDrawn(i)
	return ptu
}

// SetDribbleAttempts sets the "DribbleAttempts" field.
func (ptu *PSTechnicalUpdate) SetDribbleAttempts(i int) *PSTechnicalUpdate {
	ptu.mutation.ResetDribbleAttempts()
	ptu.mutation.SetDribbleAttempts(i)
	return ptu
}

// AddDribbleAttempts adds i to the "DribbleAttempts" field.
func (ptu *PSTechnicalUpdate) AddDribbleAttempts(i int) *PSTechnicalUpdate {
	ptu.mutation.AddDribbleAttempts(i)
	return ptu
}

// SetDribbleSuccess sets the "DribbleSuccess" field.
func (ptu *PSTechnicalUpdate) SetDribbleSuccess(i int) *PSTechnicalUpdate {
	ptu.mutation.ResetDribbleSuccess()
	ptu.mutation.SetDribbleSuccess(i)
	return ptu
}

// AddDribbleSuccess adds i to the "DribbleSuccess" field.
func (ptu *PSTechnicalUpdate) AddDribbleSuccess(i int) *PSTechnicalUpdate {
	ptu.mutation.AddDribbleSuccess(i)
	return ptu
}

// SetDribblePast sets the "DribblePast" field.
func (ptu *PSTechnicalUpdate) SetDribblePast(i int) *PSTechnicalUpdate {
	ptu.mutation.ResetDribblePast()
	ptu.mutation.SetDribblePast(i)
	return ptu
}

// SetNillableDribblePast sets the "DribblePast" field if the given value is not nil.
func (ptu *PSTechnicalUpdate) SetNillableDribblePast(i *int) *PSTechnicalUpdate {
	if i != nil {
		ptu.SetDribblePast(*i)
	}
	return ptu
}

// AddDribblePast adds i to the "DribblePast" field.
func (ptu *PSTechnicalUpdate) AddDribblePast(i int) *PSTechnicalUpdate {
	ptu.mutation.AddDribblePast(i)
	return ptu
}

// SetPassesTotal sets the "PassesTotal" field.
func (ptu *PSTechnicalUpdate) SetPassesTotal(i int) *PSTechnicalUpdate {
	ptu.mutation.ResetPassesTotal()
	ptu.mutation.SetPassesTotal(i)
	return ptu
}

// AddPassesTotal adds i to the "PassesTotal" field.
func (ptu *PSTechnicalUpdate) AddPassesTotal(i int) *PSTechnicalUpdate {
	ptu.mutation.AddPassesTotal(i)
	return ptu
}

// SetPassesKey sets the "PassesKey" field.
func (ptu *PSTechnicalUpdate) SetPassesKey(i int) *PSTechnicalUpdate {
	ptu.mutation.ResetPassesKey()
	ptu.mutation.SetPassesKey(i)
	return ptu
}

// AddPassesKey adds i to the "PassesKey" field.
func (ptu *PSTechnicalUpdate) AddPassesKey(i int) *PSTechnicalUpdate {
	ptu.mutation.AddPassesKey(i)
	return ptu
}

// SetPassesAccuracy sets the "PassesAccuracy" field.
func (ptu *PSTechnicalUpdate) SetPassesAccuracy(i int) *PSTechnicalUpdate {
	ptu.mutation.ResetPassesAccuracy()
	ptu.mutation.SetPassesAccuracy(i)
	return ptu
}

// AddPassesAccuracy adds i to the "PassesAccuracy" field.
func (ptu *PSTechnicalUpdate) AddPassesAccuracy(i int) *PSTechnicalUpdate {
	ptu.mutation.AddPassesAccuracy(i)
	return ptu
}

// SetLastUpdated sets the "lastUpdated" field.
func (ptu *PSTechnicalUpdate) SetLastUpdated(t time.Time) *PSTechnicalUpdate {
	ptu.mutation.SetLastUpdated(t)
	return ptu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (ptu *PSTechnicalUpdate) ClearLastUpdated() *PSTechnicalUpdate {
	ptu.mutation.ClearLastUpdated()
	return ptu
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ptu *PSTechnicalUpdate) SetPlayerStatsID(id int) *PSTechnicalUpdate {
	ptu.mutation.SetPlayerStatsID(id)
	return ptu
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ptu *PSTechnicalUpdate) SetNillablePlayerStatsID(id *int) *PSTechnicalUpdate {
	if id != nil {
		ptu = ptu.SetPlayerStatsID(*id)
	}
	return ptu
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ptu *PSTechnicalUpdate) SetPlayerStats(p *PlayerStats) *PSTechnicalUpdate {
	return ptu.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSTechnicalMutation object of the builder.
func (ptu *PSTechnicalUpdate) Mutation() *PSTechnicalMutation {
	return ptu.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (ptu *PSTechnicalUpdate) ClearPlayerStats() *PSTechnicalUpdate {
	ptu.mutation.ClearPlayerStats()
	return ptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PSTechnicalUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PSTechnicalUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PSTechnicalUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PSTechnicalUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PSTechnicalUpdate) defaults() {
	if _, ok := ptu.mutation.LastUpdated(); !ok && !ptu.mutation.LastUpdatedCleared() {
		v := pstechnical.UpdateDefaultLastUpdated()
		ptu.mutation.SetLastUpdated(v)
	}
}

func (ptu *PSTechnicalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pstechnical.Table, pstechnical.Columns, sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.FoulsDrawn(); ok {
		_spec.SetField(pstechnical.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedFoulsDrawn(); ok {
		_spec.AddField(pstechnical.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.DribbleAttempts(); ok {
		_spec.SetField(pstechnical.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedDribbleAttempts(); ok {
		_spec.AddField(pstechnical.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.DribbleSuccess(); ok {
		_spec.SetField(pstechnical.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedDribbleSuccess(); ok {
		_spec.AddField(pstechnical.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.DribblePast(); ok {
		_spec.SetField(pstechnical.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedDribblePast(); ok {
		_spec.AddField(pstechnical.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.PassesTotal(); ok {
		_spec.SetField(pstechnical.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedPassesTotal(); ok {
		_spec.AddField(pstechnical.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.PassesKey(); ok {
		_spec.SetField(pstechnical.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedPassesKey(); ok {
		_spec.AddField(pstechnical.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.PassesAccuracy(); ok {
		_spec.SetField(pstechnical.FieldPassesAccuracy, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedPassesAccuracy(); ok {
		_spec.AddField(pstechnical.FieldPassesAccuracy, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.LastUpdated(); ok {
		_spec.SetField(pstechnical.FieldLastUpdated, field.TypeTime, value)
	}
	if ptu.mutation.LastUpdatedCleared() {
		_spec.ClearField(pstechnical.FieldLastUpdated, field.TypeTime)
	}
	if ptu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pstechnical.PlayerStatsTable,
			Columns: []string{pstechnical.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pstechnical.PlayerStatsTable,
			Columns: []string{pstechnical.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pstechnical.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PSTechnicalUpdateOne is the builder for updating a single PSTechnical entity.
type PSTechnicalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PSTechnicalMutation
}

// SetFoulsDrawn sets the "FoulsDrawn" field.
func (ptuo *PSTechnicalUpdateOne) SetFoulsDrawn(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.ResetFoulsDrawn()
	ptuo.mutation.SetFoulsDrawn(i)
	return ptuo
}

// AddFoulsDrawn adds i to the "FoulsDrawn" field.
func (ptuo *PSTechnicalUpdateOne) AddFoulsDrawn(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.AddFoulsDrawn(i)
	return ptuo
}

// SetDribbleAttempts sets the "DribbleAttempts" field.
func (ptuo *PSTechnicalUpdateOne) SetDribbleAttempts(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.ResetDribbleAttempts()
	ptuo.mutation.SetDribbleAttempts(i)
	return ptuo
}

// AddDribbleAttempts adds i to the "DribbleAttempts" field.
func (ptuo *PSTechnicalUpdateOne) AddDribbleAttempts(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.AddDribbleAttempts(i)
	return ptuo
}

// SetDribbleSuccess sets the "DribbleSuccess" field.
func (ptuo *PSTechnicalUpdateOne) SetDribbleSuccess(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.ResetDribbleSuccess()
	ptuo.mutation.SetDribbleSuccess(i)
	return ptuo
}

// AddDribbleSuccess adds i to the "DribbleSuccess" field.
func (ptuo *PSTechnicalUpdateOne) AddDribbleSuccess(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.AddDribbleSuccess(i)
	return ptuo
}

// SetDribblePast sets the "DribblePast" field.
func (ptuo *PSTechnicalUpdateOne) SetDribblePast(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.ResetDribblePast()
	ptuo.mutation.SetDribblePast(i)
	return ptuo
}

// SetNillableDribblePast sets the "DribblePast" field if the given value is not nil.
func (ptuo *PSTechnicalUpdateOne) SetNillableDribblePast(i *int) *PSTechnicalUpdateOne {
	if i != nil {
		ptuo.SetDribblePast(*i)
	}
	return ptuo
}

// AddDribblePast adds i to the "DribblePast" field.
func (ptuo *PSTechnicalUpdateOne) AddDribblePast(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.AddDribblePast(i)
	return ptuo
}

// SetPassesTotal sets the "PassesTotal" field.
func (ptuo *PSTechnicalUpdateOne) SetPassesTotal(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.ResetPassesTotal()
	ptuo.mutation.SetPassesTotal(i)
	return ptuo
}

// AddPassesTotal adds i to the "PassesTotal" field.
func (ptuo *PSTechnicalUpdateOne) AddPassesTotal(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.AddPassesTotal(i)
	return ptuo
}

// SetPassesKey sets the "PassesKey" field.
func (ptuo *PSTechnicalUpdateOne) SetPassesKey(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.ResetPassesKey()
	ptuo.mutation.SetPassesKey(i)
	return ptuo
}

// AddPassesKey adds i to the "PassesKey" field.
func (ptuo *PSTechnicalUpdateOne) AddPassesKey(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.AddPassesKey(i)
	return ptuo
}

// SetPassesAccuracy sets the "PassesAccuracy" field.
func (ptuo *PSTechnicalUpdateOne) SetPassesAccuracy(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.ResetPassesAccuracy()
	ptuo.mutation.SetPassesAccuracy(i)
	return ptuo
}

// AddPassesAccuracy adds i to the "PassesAccuracy" field.
func (ptuo *PSTechnicalUpdateOne) AddPassesAccuracy(i int) *PSTechnicalUpdateOne {
	ptuo.mutation.AddPassesAccuracy(i)
	return ptuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (ptuo *PSTechnicalUpdateOne) SetLastUpdated(t time.Time) *PSTechnicalUpdateOne {
	ptuo.mutation.SetLastUpdated(t)
	return ptuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (ptuo *PSTechnicalUpdateOne) ClearLastUpdated() *PSTechnicalUpdateOne {
	ptuo.mutation.ClearLastUpdated()
	return ptuo
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ptuo *PSTechnicalUpdateOne) SetPlayerStatsID(id int) *PSTechnicalUpdateOne {
	ptuo.mutation.SetPlayerStatsID(id)
	return ptuo
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ptuo *PSTechnicalUpdateOne) SetNillablePlayerStatsID(id *int) *PSTechnicalUpdateOne {
	if id != nil {
		ptuo = ptuo.SetPlayerStatsID(*id)
	}
	return ptuo
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ptuo *PSTechnicalUpdateOne) SetPlayerStats(p *PlayerStats) *PSTechnicalUpdateOne {
	return ptuo.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSTechnicalMutation object of the builder.
func (ptuo *PSTechnicalUpdateOne) Mutation() *PSTechnicalMutation {
	return ptuo.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (ptuo *PSTechnicalUpdateOne) ClearPlayerStats() *PSTechnicalUpdateOne {
	ptuo.mutation.ClearPlayerStats()
	return ptuo
}

// Where appends a list predicates to the PSTechnicalUpdate builder.
func (ptuo *PSTechnicalUpdateOne) Where(ps ...predicate.PSTechnical) *PSTechnicalUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PSTechnicalUpdateOne) Select(field string, fields ...string) *PSTechnicalUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PSTechnical entity.
func (ptuo *PSTechnicalUpdateOne) Save(ctx context.Context) (*PSTechnical, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PSTechnicalUpdateOne) SaveX(ctx context.Context) *PSTechnical {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PSTechnicalUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PSTechnicalUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PSTechnicalUpdateOne) defaults() {
	if _, ok := ptuo.mutation.LastUpdated(); !ok && !ptuo.mutation.LastUpdatedCleared() {
		v := pstechnical.UpdateDefaultLastUpdated()
		ptuo.mutation.SetLastUpdated(v)
	}
}

func (ptuo *PSTechnicalUpdateOne) sqlSave(ctx context.Context) (_node *PSTechnical, err error) {
	_spec := sqlgraph.NewUpdateSpec(pstechnical.Table, pstechnical.Columns, sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PSTechnical.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pstechnical.FieldID)
		for _, f := range fields {
			if !pstechnical.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pstechnical.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.FoulsDrawn(); ok {
		_spec.SetField(pstechnical.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedFoulsDrawn(); ok {
		_spec.AddField(pstechnical.FieldFoulsDrawn, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.DribbleAttempts(); ok {
		_spec.SetField(pstechnical.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedDribbleAttempts(); ok {
		_spec.AddField(pstechnical.FieldDribbleAttempts, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.DribbleSuccess(); ok {
		_spec.SetField(pstechnical.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedDribbleSuccess(); ok {
		_spec.AddField(pstechnical.FieldDribbleSuccess, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.DribblePast(); ok {
		_spec.SetField(pstechnical.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedDribblePast(); ok {
		_spec.AddField(pstechnical.FieldDribblePast, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.PassesTotal(); ok {
		_spec.SetField(pstechnical.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedPassesTotal(); ok {
		_spec.AddField(pstechnical.FieldPassesTotal, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.PassesKey(); ok {
		_spec.SetField(pstechnical.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedPassesKey(); ok {
		_spec.AddField(pstechnical.FieldPassesKey, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.PassesAccuracy(); ok {
		_spec.SetField(pstechnical.FieldPassesAccuracy, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedPassesAccuracy(); ok {
		_spec.AddField(pstechnical.FieldPassesAccuracy, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.LastUpdated(); ok {
		_spec.SetField(pstechnical.FieldLastUpdated, field.TypeTime, value)
	}
	if ptuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(pstechnical.FieldLastUpdated, field.TypeTime)
	}
	if ptuo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pstechnical.PlayerStatsTable,
			Columns: []string{pstechnical.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pstechnical.PlayerStatsTable,
			Columns: []string{pstechnical.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PSTechnical{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pstechnical.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
