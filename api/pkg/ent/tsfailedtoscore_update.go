// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsfailedtoscore"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSFailedToScoreUpdate is the builder for updating TSFailedToScore entities.
type TSFailedToScoreUpdate struct {
	config
	hooks    []Hook
	mutation *TSFailedToScoreMutation
}

// Where appends a list predicates to the TSFailedToScoreUpdate builder.
func (tftsu *TSFailedToScoreUpdate) Where(ps ...predicate.TSFailedToScore) *TSFailedToScoreUpdate {
	tftsu.mutation.Where(ps...)
	return tftsu
}

// SetHome sets the "home" field.
func (tftsu *TSFailedToScoreUpdate) SetHome(i int) *TSFailedToScoreUpdate {
	tftsu.mutation.ResetHome()
	tftsu.mutation.SetHome(i)
	return tftsu
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (tftsu *TSFailedToScoreUpdate) SetNillableHome(i *int) *TSFailedToScoreUpdate {
	if i != nil {
		tftsu.SetHome(*i)
	}
	return tftsu
}

// AddHome adds i to the "home" field.
func (tftsu *TSFailedToScoreUpdate) AddHome(i int) *TSFailedToScoreUpdate {
	tftsu.mutation.AddHome(i)
	return tftsu
}

// ClearHome clears the value of the "home" field.
func (tftsu *TSFailedToScoreUpdate) ClearHome() *TSFailedToScoreUpdate {
	tftsu.mutation.ClearHome()
	return tftsu
}

// SetAway sets the "away" field.
func (tftsu *TSFailedToScoreUpdate) SetAway(i int) *TSFailedToScoreUpdate {
	tftsu.mutation.ResetAway()
	tftsu.mutation.SetAway(i)
	return tftsu
}

// SetNillableAway sets the "away" field if the given value is not nil.
func (tftsu *TSFailedToScoreUpdate) SetNillableAway(i *int) *TSFailedToScoreUpdate {
	if i != nil {
		tftsu.SetAway(*i)
	}
	return tftsu
}

// AddAway adds i to the "away" field.
func (tftsu *TSFailedToScoreUpdate) AddAway(i int) *TSFailedToScoreUpdate {
	tftsu.mutation.AddAway(i)
	return tftsu
}

// ClearAway clears the value of the "away" field.
func (tftsu *TSFailedToScoreUpdate) ClearAway() *TSFailedToScoreUpdate {
	tftsu.mutation.ClearAway()
	return tftsu
}

// SetTotal sets the "total" field.
func (tftsu *TSFailedToScoreUpdate) SetTotal(i int) *TSFailedToScoreUpdate {
	tftsu.mutation.ResetTotal()
	tftsu.mutation.SetTotal(i)
	return tftsu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tftsu *TSFailedToScoreUpdate) SetNillableTotal(i *int) *TSFailedToScoreUpdate {
	if i != nil {
		tftsu.SetTotal(*i)
	}
	return tftsu
}

// AddTotal adds i to the "total" field.
func (tftsu *TSFailedToScoreUpdate) AddTotal(i int) *TSFailedToScoreUpdate {
	tftsu.mutation.AddTotal(i)
	return tftsu
}

// ClearTotal clears the value of the "total" field.
func (tftsu *TSFailedToScoreUpdate) ClearTotal() *TSFailedToScoreUpdate {
	tftsu.mutation.ClearTotal()
	return tftsu
}

// SetLastUpdated sets the "lastUpdated" field.
func (tftsu *TSFailedToScoreUpdate) SetLastUpdated(t time.Time) *TSFailedToScoreUpdate {
	tftsu.mutation.SetLastUpdated(t)
	return tftsu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tftsu *TSFailedToScoreUpdate) ClearLastUpdated() *TSFailedToScoreUpdate {
	tftsu.mutation.ClearLastUpdated()
	return tftsu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tftsu *TSFailedToScoreUpdate) SetTeamID(id int) *TSFailedToScoreUpdate {
	tftsu.mutation.SetTeamID(id)
	return tftsu
}

// SetTeam sets the "team" edge to the Team entity.
func (tftsu *TSFailedToScoreUpdate) SetTeam(t *Team) *TSFailedToScoreUpdate {
	return tftsu.SetTeamID(t.ID)
}

// Mutation returns the TSFailedToScoreMutation object of the builder.
func (tftsu *TSFailedToScoreUpdate) Mutation() *TSFailedToScoreMutation {
	return tftsu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tftsu *TSFailedToScoreUpdate) ClearTeam() *TSFailedToScoreUpdate {
	tftsu.mutation.ClearTeam()
	return tftsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tftsu *TSFailedToScoreUpdate) Save(ctx context.Context) (int, error) {
	tftsu.defaults()
	return withHooks(ctx, tftsu.sqlSave, tftsu.mutation, tftsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tftsu *TSFailedToScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := tftsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tftsu *TSFailedToScoreUpdate) Exec(ctx context.Context) error {
	_, err := tftsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tftsu *TSFailedToScoreUpdate) ExecX(ctx context.Context) {
	if err := tftsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tftsu *TSFailedToScoreUpdate) defaults() {
	if _, ok := tftsu.mutation.LastUpdated(); !ok && !tftsu.mutation.LastUpdatedCleared() {
		v := tsfailedtoscore.UpdateDefaultLastUpdated()
		tftsu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tftsu *TSFailedToScoreUpdate) check() error {
	if _, ok := tftsu.mutation.TeamID(); tftsu.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSFailedToScore.team"`)
	}
	return nil
}

func (tftsu *TSFailedToScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tftsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsfailedtoscore.Table, tsfailedtoscore.Columns, sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt))
	if ps := tftsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tftsu.mutation.Home(); ok {
		_spec.SetField(tsfailedtoscore.FieldHome, field.TypeInt, value)
	}
	if value, ok := tftsu.mutation.AddedHome(); ok {
		_spec.AddField(tsfailedtoscore.FieldHome, field.TypeInt, value)
	}
	if tftsu.mutation.HomeCleared() {
		_spec.ClearField(tsfailedtoscore.FieldHome, field.TypeInt)
	}
	if value, ok := tftsu.mutation.Away(); ok {
		_spec.SetField(tsfailedtoscore.FieldAway, field.TypeInt, value)
	}
	if value, ok := tftsu.mutation.AddedAway(); ok {
		_spec.AddField(tsfailedtoscore.FieldAway, field.TypeInt, value)
	}
	if tftsu.mutation.AwayCleared() {
		_spec.ClearField(tsfailedtoscore.FieldAway, field.TypeInt)
	}
	if value, ok := tftsu.mutation.Total(); ok {
		_spec.SetField(tsfailedtoscore.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tftsu.mutation.AddedTotal(); ok {
		_spec.AddField(tsfailedtoscore.FieldTotal, field.TypeInt, value)
	}
	if tftsu.mutation.TotalCleared() {
		_spec.ClearField(tsfailedtoscore.FieldTotal, field.TypeInt)
	}
	if value, ok := tftsu.mutation.LastUpdated(); ok {
		_spec.SetField(tsfailedtoscore.FieldLastUpdated, field.TypeTime, value)
	}
	if tftsu.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsfailedtoscore.FieldLastUpdated, field.TypeTime)
	}
	if tftsu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfailedtoscore.TeamTable,
			Columns: []string{tsfailedtoscore.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tftsu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfailedtoscore.TeamTable,
			Columns: []string{tsfailedtoscore.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tftsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsfailedtoscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tftsu.mutation.done = true
	return n, nil
}

// TSFailedToScoreUpdateOne is the builder for updating a single TSFailedToScore entity.
type TSFailedToScoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSFailedToScoreMutation
}

// SetHome sets the "home" field.
func (tftsuo *TSFailedToScoreUpdateOne) SetHome(i int) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ResetHome()
	tftsuo.mutation.SetHome(i)
	return tftsuo
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (tftsuo *TSFailedToScoreUpdateOne) SetNillableHome(i *int) *TSFailedToScoreUpdateOne {
	if i != nil {
		tftsuo.SetHome(*i)
	}
	return tftsuo
}

// AddHome adds i to the "home" field.
func (tftsuo *TSFailedToScoreUpdateOne) AddHome(i int) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.AddHome(i)
	return tftsuo
}

// ClearHome clears the value of the "home" field.
func (tftsuo *TSFailedToScoreUpdateOne) ClearHome() *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ClearHome()
	return tftsuo
}

// SetAway sets the "away" field.
func (tftsuo *TSFailedToScoreUpdateOne) SetAway(i int) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ResetAway()
	tftsuo.mutation.SetAway(i)
	return tftsuo
}

// SetNillableAway sets the "away" field if the given value is not nil.
func (tftsuo *TSFailedToScoreUpdateOne) SetNillableAway(i *int) *TSFailedToScoreUpdateOne {
	if i != nil {
		tftsuo.SetAway(*i)
	}
	return tftsuo
}

// AddAway adds i to the "away" field.
func (tftsuo *TSFailedToScoreUpdateOne) AddAway(i int) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.AddAway(i)
	return tftsuo
}

// ClearAway clears the value of the "away" field.
func (tftsuo *TSFailedToScoreUpdateOne) ClearAway() *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ClearAway()
	return tftsuo
}

// SetTotal sets the "total" field.
func (tftsuo *TSFailedToScoreUpdateOne) SetTotal(i int) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ResetTotal()
	tftsuo.mutation.SetTotal(i)
	return tftsuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tftsuo *TSFailedToScoreUpdateOne) SetNillableTotal(i *int) *TSFailedToScoreUpdateOne {
	if i != nil {
		tftsuo.SetTotal(*i)
	}
	return tftsuo
}

// AddTotal adds i to the "total" field.
func (tftsuo *TSFailedToScoreUpdateOne) AddTotal(i int) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.AddTotal(i)
	return tftsuo
}

// ClearTotal clears the value of the "total" field.
func (tftsuo *TSFailedToScoreUpdateOne) ClearTotal() *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ClearTotal()
	return tftsuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (tftsuo *TSFailedToScoreUpdateOne) SetLastUpdated(t time.Time) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.SetLastUpdated(t)
	return tftsuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (tftsuo *TSFailedToScoreUpdateOne) ClearLastUpdated() *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ClearLastUpdated()
	return tftsuo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (tftsuo *TSFailedToScoreUpdateOne) SetTeamID(id int) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.SetTeamID(id)
	return tftsuo
}

// SetTeam sets the "team" edge to the Team entity.
func (tftsuo *TSFailedToScoreUpdateOne) SetTeam(t *Team) *TSFailedToScoreUpdateOne {
	return tftsuo.SetTeamID(t.ID)
}

// Mutation returns the TSFailedToScoreMutation object of the builder.
func (tftsuo *TSFailedToScoreUpdateOne) Mutation() *TSFailedToScoreMutation {
	return tftsuo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tftsuo *TSFailedToScoreUpdateOne) ClearTeam() *TSFailedToScoreUpdateOne {
	tftsuo.mutation.ClearTeam()
	return tftsuo
}

// Where appends a list predicates to the TSFailedToScoreUpdate builder.
func (tftsuo *TSFailedToScoreUpdateOne) Where(ps ...predicate.TSFailedToScore) *TSFailedToScoreUpdateOne {
	tftsuo.mutation.Where(ps...)
	return tftsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tftsuo *TSFailedToScoreUpdateOne) Select(field string, fields ...string) *TSFailedToScoreUpdateOne {
	tftsuo.fields = append([]string{field}, fields...)
	return tftsuo
}

// Save executes the query and returns the updated TSFailedToScore entity.
func (tftsuo *TSFailedToScoreUpdateOne) Save(ctx context.Context) (*TSFailedToScore, error) {
	tftsuo.defaults()
	return withHooks(ctx, tftsuo.sqlSave, tftsuo.mutation, tftsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tftsuo *TSFailedToScoreUpdateOne) SaveX(ctx context.Context) *TSFailedToScore {
	node, err := tftsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tftsuo *TSFailedToScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := tftsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tftsuo *TSFailedToScoreUpdateOne) ExecX(ctx context.Context) {
	if err := tftsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tftsuo *TSFailedToScoreUpdateOne) defaults() {
	if _, ok := tftsuo.mutation.LastUpdated(); !ok && !tftsuo.mutation.LastUpdatedCleared() {
		v := tsfailedtoscore.UpdateDefaultLastUpdated()
		tftsuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tftsuo *TSFailedToScoreUpdateOne) check() error {
	if _, ok := tftsuo.mutation.TeamID(); tftsuo.mutation.TeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TSFailedToScore.team"`)
	}
	return nil
}

func (tftsuo *TSFailedToScoreUpdateOne) sqlSave(ctx context.Context) (_node *TSFailedToScore, err error) {
	if err := tftsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tsfailedtoscore.Table, tsfailedtoscore.Columns, sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt))
	id, ok := tftsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSFailedToScore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tftsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tsfailedtoscore.FieldID)
		for _, f := range fields {
			if !tsfailedtoscore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tsfailedtoscore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tftsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tftsuo.mutation.Home(); ok {
		_spec.SetField(tsfailedtoscore.FieldHome, field.TypeInt, value)
	}
	if value, ok := tftsuo.mutation.AddedHome(); ok {
		_spec.AddField(tsfailedtoscore.FieldHome, field.TypeInt, value)
	}
	if tftsuo.mutation.HomeCleared() {
		_spec.ClearField(tsfailedtoscore.FieldHome, field.TypeInt)
	}
	if value, ok := tftsuo.mutation.Away(); ok {
		_spec.SetField(tsfailedtoscore.FieldAway, field.TypeInt, value)
	}
	if value, ok := tftsuo.mutation.AddedAway(); ok {
		_spec.AddField(tsfailedtoscore.FieldAway, field.TypeInt, value)
	}
	if tftsuo.mutation.AwayCleared() {
		_spec.ClearField(tsfailedtoscore.FieldAway, field.TypeInt)
	}
	if value, ok := tftsuo.mutation.Total(); ok {
		_spec.SetField(tsfailedtoscore.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tftsuo.mutation.AddedTotal(); ok {
		_spec.AddField(tsfailedtoscore.FieldTotal, field.TypeInt, value)
	}
	if tftsuo.mutation.TotalCleared() {
		_spec.ClearField(tsfailedtoscore.FieldTotal, field.TypeInt)
	}
	if value, ok := tftsuo.mutation.LastUpdated(); ok {
		_spec.SetField(tsfailedtoscore.FieldLastUpdated, field.TypeTime, value)
	}
	if tftsuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(tsfailedtoscore.FieldLastUpdated, field.TypeTime)
	}
	if tftsuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfailedtoscore.TeamTable,
			Columns: []string{tsfailedtoscore.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tftsuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tsfailedtoscore.TeamTable,
			Columns: []string{tsfailedtoscore.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TSFailedToScore{config: tftsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tftsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsfailedtoscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tftsuo.mutation.done = true
	return _node, nil
}
