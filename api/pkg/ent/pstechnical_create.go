// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pstechnical"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSTechnicalCreate is the builder for creating a PSTechnical entity.
type PSTechnicalCreate struct {
	config
	mutation *PSTechnicalMutation
	hooks    []Hook
}

// SetFoulsDrawn sets the "FoulsDrawn" field.
func (ptc *PSTechnicalCreate) SetFoulsDrawn(i int) *PSTechnicalCreate {
	ptc.mutation.SetFoulsDrawn(i)
	return ptc
}

// SetNillableFoulsDrawn sets the "FoulsDrawn" field if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillableFoulsDrawn(i *int) *PSTechnicalCreate {
	if i != nil {
		ptc.SetFoulsDrawn(*i)
	}
	return ptc
}

// SetDribbleAttempts sets the "DribbleAttempts" field.
func (ptc *PSTechnicalCreate) SetDribbleAttempts(i int) *PSTechnicalCreate {
	ptc.mutation.SetDribbleAttempts(i)
	return ptc
}

// SetNillableDribbleAttempts sets the "DribbleAttempts" field if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillableDribbleAttempts(i *int) *PSTechnicalCreate {
	if i != nil {
		ptc.SetDribbleAttempts(*i)
	}
	return ptc
}

// SetDribbleSuccess sets the "DribbleSuccess" field.
func (ptc *PSTechnicalCreate) SetDribbleSuccess(i int) *PSTechnicalCreate {
	ptc.mutation.SetDribbleSuccess(i)
	return ptc
}

// SetNillableDribbleSuccess sets the "DribbleSuccess" field if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillableDribbleSuccess(i *int) *PSTechnicalCreate {
	if i != nil {
		ptc.SetDribbleSuccess(*i)
	}
	return ptc
}

// SetPassesTotal sets the "PassesTotal" field.
func (ptc *PSTechnicalCreate) SetPassesTotal(i int) *PSTechnicalCreate {
	ptc.mutation.SetPassesTotal(i)
	return ptc
}

// SetNillablePassesTotal sets the "PassesTotal" field if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillablePassesTotal(i *int) *PSTechnicalCreate {
	if i != nil {
		ptc.SetPassesTotal(*i)
	}
	return ptc
}

// SetPassesKey sets the "PassesKey" field.
func (ptc *PSTechnicalCreate) SetPassesKey(i int) *PSTechnicalCreate {
	ptc.mutation.SetPassesKey(i)
	return ptc
}

// SetNillablePassesKey sets the "PassesKey" field if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillablePassesKey(i *int) *PSTechnicalCreate {
	if i != nil {
		ptc.SetPassesKey(*i)
	}
	return ptc
}

// SetPassesAccuracy sets the "PassesAccuracy" field.
func (ptc *PSTechnicalCreate) SetPassesAccuracy(i int) *PSTechnicalCreate {
	ptc.mutation.SetPassesAccuracy(i)
	return ptc
}

// SetNillablePassesAccuracy sets the "PassesAccuracy" field if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillablePassesAccuracy(i *int) *PSTechnicalCreate {
	if i != nil {
		ptc.SetPassesAccuracy(*i)
	}
	return ptc
}

// SetLastUpdated sets the "lastUpdated" field.
func (ptc *PSTechnicalCreate) SetLastUpdated(t time.Time) *PSTechnicalCreate {
	ptc.mutation.SetLastUpdated(t)
	return ptc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillableLastUpdated(t *time.Time) *PSTechnicalCreate {
	if t != nil {
		ptc.SetLastUpdated(*t)
	}
	return ptc
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ptc *PSTechnicalCreate) SetPlayerStatsID(id int) *PSTechnicalCreate {
	ptc.mutation.SetPlayerStatsID(id)
	return ptc
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ptc *PSTechnicalCreate) SetNillablePlayerStatsID(id *int) *PSTechnicalCreate {
	if id != nil {
		ptc = ptc.SetPlayerStatsID(*id)
	}
	return ptc
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ptc *PSTechnicalCreate) SetPlayerStats(p *PlayerStats) *PSTechnicalCreate {
	return ptc.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSTechnicalMutation object of the builder.
func (ptc *PSTechnicalCreate) Mutation() *PSTechnicalMutation {
	return ptc.mutation
}

// Save creates the PSTechnical in the database.
func (ptc *PSTechnicalCreate) Save(ctx context.Context) (*PSTechnical, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PSTechnicalCreate) SaveX(ctx context.Context) *PSTechnical {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PSTechnicalCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PSTechnicalCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PSTechnicalCreate) defaults() {
	if _, ok := ptc.mutation.FoulsDrawn(); !ok {
		v := pstechnical.DefaultFoulsDrawn
		ptc.mutation.SetFoulsDrawn(v)
	}
	if _, ok := ptc.mutation.DribbleAttempts(); !ok {
		v := pstechnical.DefaultDribbleAttempts
		ptc.mutation.SetDribbleAttempts(v)
	}
	if _, ok := ptc.mutation.DribbleSuccess(); !ok {
		v := pstechnical.DefaultDribbleSuccess
		ptc.mutation.SetDribbleSuccess(v)
	}
	if _, ok := ptc.mutation.PassesTotal(); !ok {
		v := pstechnical.DefaultPassesTotal
		ptc.mutation.SetPassesTotal(v)
	}
	if _, ok := ptc.mutation.PassesKey(); !ok {
		v := pstechnical.DefaultPassesKey
		ptc.mutation.SetPassesKey(v)
	}
	if _, ok := ptc.mutation.PassesAccuracy(); !ok {
		v := pstechnical.DefaultPassesAccuracy
		ptc.mutation.SetPassesAccuracy(v)
	}
	if _, ok := ptc.mutation.LastUpdated(); !ok {
		v := pstechnical.DefaultLastUpdated()
		ptc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PSTechnicalCreate) check() error {
	if _, ok := ptc.mutation.FoulsDrawn(); !ok {
		return &ValidationError{Name: "FoulsDrawn", err: errors.New(`ent: missing required field "PSTechnical.FoulsDrawn"`)}
	}
	if _, ok := ptc.mutation.DribbleAttempts(); !ok {
		return &ValidationError{Name: "DribbleAttempts", err: errors.New(`ent: missing required field "PSTechnical.DribbleAttempts"`)}
	}
	if _, ok := ptc.mutation.DribbleSuccess(); !ok {
		return &ValidationError{Name: "DribbleSuccess", err: errors.New(`ent: missing required field "PSTechnical.DribbleSuccess"`)}
	}
	if _, ok := ptc.mutation.PassesTotal(); !ok {
		return &ValidationError{Name: "PassesTotal", err: errors.New(`ent: missing required field "PSTechnical.PassesTotal"`)}
	}
	if _, ok := ptc.mutation.PassesKey(); !ok {
		return &ValidationError{Name: "PassesKey", err: errors.New(`ent: missing required field "PSTechnical.PassesKey"`)}
	}
	if _, ok := ptc.mutation.PassesAccuracy(); !ok {
		return &ValidationError{Name: "PassesAccuracy", err: errors.New(`ent: missing required field "PSTechnical.PassesAccuracy"`)}
	}
	return nil
}

func (ptc *PSTechnicalCreate) sqlSave(ctx context.Context) (*PSTechnical, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PSTechnicalCreate) createSpec() (*PSTechnical, *sqlgraph.CreateSpec) {
	var (
		_node = &PSTechnical{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(pstechnical.Table, sqlgraph.NewFieldSpec(pstechnical.FieldID, field.TypeInt))
	)
	if value, ok := ptc.mutation.FoulsDrawn(); ok {
		_spec.SetField(pstechnical.FieldFoulsDrawn, field.TypeInt, value)
		_node.FoulsDrawn = value
	}
	if value, ok := ptc.mutation.DribbleAttempts(); ok {
		_spec.SetField(pstechnical.FieldDribbleAttempts, field.TypeInt, value)
		_node.DribbleAttempts = value
	}
	if value, ok := ptc.mutation.DribbleSuccess(); ok {
		_spec.SetField(pstechnical.FieldDribbleSuccess, field.TypeInt, value)
		_node.DribbleSuccess = value
	}
	if value, ok := ptc.mutation.PassesTotal(); ok {
		_spec.SetField(pstechnical.FieldPassesTotal, field.TypeInt, value)
		_node.PassesTotal = value
	}
	if value, ok := ptc.mutation.PassesKey(); ok {
		_spec.SetField(pstechnical.FieldPassesKey, field.TypeInt, value)
		_node.PassesKey = value
	}
	if value, ok := ptc.mutation.PassesAccuracy(); ok {
		_spec.SetField(pstechnical.FieldPassesAccuracy, field.TypeInt, value)
		_node.PassesAccuracy = value
	}
	if value, ok := ptc.mutation.LastUpdated(); ok {
		_spec.SetField(pstechnical.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := ptc.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pstechnical.PlayerStatsTable,
			Columns: []string{pstechnical.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_stats_ps_technical = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PSTechnicalCreateBulk is the builder for creating many PSTechnical entities in bulk.
type PSTechnicalCreateBulk struct {
	config
	err      error
	builders []*PSTechnicalCreate
}

// Save creates the PSTechnical entities in the database.
func (ptcb *PSTechnicalCreateBulk) Save(ctx context.Context) ([]*PSTechnical, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PSTechnical, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PSTechnicalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PSTechnicalCreateBulk) SaveX(ctx context.Context) []*PSTechnical {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PSTechnicalCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PSTechnicalCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
