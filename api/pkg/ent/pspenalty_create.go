// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pspenalty"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSPenaltyCreate is the builder for creating a PSPenalty entity.
type PSPenaltyCreate struct {
	config
	mutation *PSPenaltyMutation
	hooks    []Hook
}

// SetFoulsDrawn sets the "FoulsDrawn" field.
func (ppc *PSPenaltyCreate) SetFoulsDrawn(i int) *PSPenaltyCreate {
	ppc.mutation.SetFoulsDrawn(i)
	return ppc
}

// SetFoulsCommitted sets the "FoulsCommitted" field.
func (ppc *PSPenaltyCreate) SetFoulsCommitted(i int) *PSPenaltyCreate {
	ppc.mutation.SetFoulsCommitted(i)
	return ppc
}

// SetCardsYellow sets the "CardsYellow" field.
func (ppc *PSPenaltyCreate) SetCardsYellow(i int) *PSPenaltyCreate {
	ppc.mutation.SetCardsYellow(i)
	return ppc
}

// SetCardYellowRed sets the "CardYellowRed" field.
func (ppc *PSPenaltyCreate) SetCardYellowRed(i int) *PSPenaltyCreate {
	ppc.mutation.SetCardYellowRed(i)
	return ppc
}

// SetCardsRed sets the "CardsRed" field.
func (ppc *PSPenaltyCreate) SetCardsRed(i int) *PSPenaltyCreate {
	ppc.mutation.SetCardsRed(i)
	return ppc
}

// SetPenaltyWon sets the "PenaltyWon" field.
func (ppc *PSPenaltyCreate) SetPenaltyWon(i int) *PSPenaltyCreate {
	ppc.mutation.SetPenaltyWon(i)
	return ppc
}

// SetNillablePenaltyWon sets the "PenaltyWon" field if the given value is not nil.
func (ppc *PSPenaltyCreate) SetNillablePenaltyWon(i *int) *PSPenaltyCreate {
	if i != nil {
		ppc.SetPenaltyWon(*i)
	}
	return ppc
}

// SetPenaltyCommitted sets the "PenaltyCommitted" field.
func (ppc *PSPenaltyCreate) SetPenaltyCommitted(i int) *PSPenaltyCreate {
	ppc.mutation.SetPenaltyCommitted(i)
	return ppc
}

// SetNillablePenaltyCommitted sets the "PenaltyCommitted" field if the given value is not nil.
func (ppc *PSPenaltyCreate) SetNillablePenaltyCommitted(i *int) *PSPenaltyCreate {
	if i != nil {
		ppc.SetPenaltyCommitted(*i)
	}
	return ppc
}

// SetPenaltyScored sets the "PenaltyScored" field.
func (ppc *PSPenaltyCreate) SetPenaltyScored(i int) *PSPenaltyCreate {
	ppc.mutation.SetPenaltyScored(i)
	return ppc
}

// SetNillablePenaltyScored sets the "PenaltyScored" field if the given value is not nil.
func (ppc *PSPenaltyCreate) SetNillablePenaltyScored(i *int) *PSPenaltyCreate {
	if i != nil {
		ppc.SetPenaltyScored(*i)
	}
	return ppc
}

// SetPenaltyMissed sets the "PenaltyMissed" field.
func (ppc *PSPenaltyCreate) SetPenaltyMissed(i int) *PSPenaltyCreate {
	ppc.mutation.SetPenaltyMissed(i)
	return ppc
}

// SetPenaltySaved sets the "PenaltySaved" field.
func (ppc *PSPenaltyCreate) SetPenaltySaved(i int) *PSPenaltyCreate {
	ppc.mutation.SetPenaltySaved(i)
	return ppc
}

// SetNillablePenaltySaved sets the "PenaltySaved" field if the given value is not nil.
func (ppc *PSPenaltyCreate) SetNillablePenaltySaved(i *int) *PSPenaltyCreate {
	if i != nil {
		ppc.SetPenaltySaved(*i)
	}
	return ppc
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (ppc *PSPenaltyCreate) SetPlayerStatsID(id int) *PSPenaltyCreate {
	ppc.mutation.SetPlayerStatsID(id)
	return ppc
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (ppc *PSPenaltyCreate) SetNillablePlayerStatsID(id *int) *PSPenaltyCreate {
	if id != nil {
		ppc = ppc.SetPlayerStatsID(*id)
	}
	return ppc
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (ppc *PSPenaltyCreate) SetPlayerStats(p *PlayerStats) *PSPenaltyCreate {
	return ppc.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSPenaltyMutation object of the builder.
func (ppc *PSPenaltyCreate) Mutation() *PSPenaltyMutation {
	return ppc.mutation
}

// Save creates the PSPenalty in the database.
func (ppc *PSPenaltyCreate) Save(ctx context.Context) (*PSPenalty, error) {
	ppc.defaults()
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PSPenaltyCreate) SaveX(ctx context.Context) *PSPenalty {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PSPenaltyCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PSPenaltyCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PSPenaltyCreate) defaults() {
	if _, ok := ppc.mutation.PenaltyWon(); !ok {
		v := pspenalty.DefaultPenaltyWon
		ppc.mutation.SetPenaltyWon(v)
	}
	if _, ok := ppc.mutation.PenaltyCommitted(); !ok {
		v := pspenalty.DefaultPenaltyCommitted
		ppc.mutation.SetPenaltyCommitted(v)
	}
	if _, ok := ppc.mutation.PenaltyScored(); !ok {
		v := pspenalty.DefaultPenaltyScored
		ppc.mutation.SetPenaltyScored(v)
	}
	if _, ok := ppc.mutation.PenaltySaved(); !ok {
		v := pspenalty.DefaultPenaltySaved
		ppc.mutation.SetPenaltySaved(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PSPenaltyCreate) check() error {
	if _, ok := ppc.mutation.FoulsDrawn(); !ok {
		return &ValidationError{Name: "FoulsDrawn", err: errors.New(`ent: missing required field "PSPenalty.FoulsDrawn"`)}
	}
	if _, ok := ppc.mutation.FoulsCommitted(); !ok {
		return &ValidationError{Name: "FoulsCommitted", err: errors.New(`ent: missing required field "PSPenalty.FoulsCommitted"`)}
	}
	if _, ok := ppc.mutation.CardsYellow(); !ok {
		return &ValidationError{Name: "CardsYellow", err: errors.New(`ent: missing required field "PSPenalty.CardsYellow"`)}
	}
	if _, ok := ppc.mutation.CardYellowRed(); !ok {
		return &ValidationError{Name: "CardYellowRed", err: errors.New(`ent: missing required field "PSPenalty.CardYellowRed"`)}
	}
	if _, ok := ppc.mutation.CardsRed(); !ok {
		return &ValidationError{Name: "CardsRed", err: errors.New(`ent: missing required field "PSPenalty.CardsRed"`)}
	}
	if _, ok := ppc.mutation.PenaltyWon(); !ok {
		return &ValidationError{Name: "PenaltyWon", err: errors.New(`ent: missing required field "PSPenalty.PenaltyWon"`)}
	}
	if _, ok := ppc.mutation.PenaltyCommitted(); !ok {
		return &ValidationError{Name: "PenaltyCommitted", err: errors.New(`ent: missing required field "PSPenalty.PenaltyCommitted"`)}
	}
	if _, ok := ppc.mutation.PenaltyScored(); !ok {
		return &ValidationError{Name: "PenaltyScored", err: errors.New(`ent: missing required field "PSPenalty.PenaltyScored"`)}
	}
	if _, ok := ppc.mutation.PenaltyMissed(); !ok {
		return &ValidationError{Name: "PenaltyMissed", err: errors.New(`ent: missing required field "PSPenalty.PenaltyMissed"`)}
	}
	if _, ok := ppc.mutation.PenaltySaved(); !ok {
		return &ValidationError{Name: "PenaltySaved", err: errors.New(`ent: missing required field "PSPenalty.PenaltySaved"`)}
	}
	return nil
}

func (ppc *PSPenaltyCreate) sqlSave(ctx context.Context) (*PSPenalty, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PSPenaltyCreate) createSpec() (*PSPenalty, *sqlgraph.CreateSpec) {
	var (
		_node = &PSPenalty{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(pspenalty.Table, sqlgraph.NewFieldSpec(pspenalty.FieldID, field.TypeInt))
	)
	if value, ok := ppc.mutation.FoulsDrawn(); ok {
		_spec.SetField(pspenalty.FieldFoulsDrawn, field.TypeInt, value)
		_node.FoulsDrawn = value
	}
	if value, ok := ppc.mutation.FoulsCommitted(); ok {
		_spec.SetField(pspenalty.FieldFoulsCommitted, field.TypeInt, value)
		_node.FoulsCommitted = value
	}
	if value, ok := ppc.mutation.CardsYellow(); ok {
		_spec.SetField(pspenalty.FieldCardsYellow, field.TypeInt, value)
		_node.CardsYellow = value
	}
	if value, ok := ppc.mutation.CardYellowRed(); ok {
		_spec.SetField(pspenalty.FieldCardYellowRed, field.TypeInt, value)
		_node.CardYellowRed = value
	}
	if value, ok := ppc.mutation.CardsRed(); ok {
		_spec.SetField(pspenalty.FieldCardsRed, field.TypeInt, value)
		_node.CardsRed = value
	}
	if value, ok := ppc.mutation.PenaltyWon(); ok {
		_spec.SetField(pspenalty.FieldPenaltyWon, field.TypeInt, value)
		_node.PenaltyWon = value
	}
	if value, ok := ppc.mutation.PenaltyCommitted(); ok {
		_spec.SetField(pspenalty.FieldPenaltyCommitted, field.TypeInt, value)
		_node.PenaltyCommitted = value
	}
	if value, ok := ppc.mutation.PenaltyScored(); ok {
		_spec.SetField(pspenalty.FieldPenaltyScored, field.TypeInt, value)
		_node.PenaltyScored = value
	}
	if value, ok := ppc.mutation.PenaltyMissed(); ok {
		_spec.SetField(pspenalty.FieldPenaltyMissed, field.TypeInt, value)
		_node.PenaltyMissed = value
	}
	if value, ok := ppc.mutation.PenaltySaved(); ok {
		_spec.SetField(pspenalty.FieldPenaltySaved, field.TypeInt, value)
		_node.PenaltySaved = value
	}
	if nodes := ppc.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pspenalty.PlayerStatsTable,
			Columns: []string{pspenalty.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_stats_pspenalty = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PSPenaltyCreateBulk is the builder for creating many PSPenalty entities in bulk.
type PSPenaltyCreateBulk struct {
	config
	err      error
	builders []*PSPenaltyCreate
}

// Save creates the PSPenalty entities in the database.
func (ppcb *PSPenaltyCreateBulk) Save(ctx context.Context) ([]*PSPenalty, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PSPenalty, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PSPenaltyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PSPenaltyCreateBulk) SaveX(ctx context.Context) []*PSPenalty {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PSPenaltyCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PSPenaltyCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
