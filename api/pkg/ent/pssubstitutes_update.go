// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/pssubstitutes"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PSSubstitutesUpdate is the builder for updating PSSubstitutes entities.
type PSSubstitutesUpdate struct {
	config
	hooks    []Hook
	mutation *PSSubstitutesMutation
}

// Where appends a list predicates to the PSSubstitutesUpdate builder.
func (psu *PSSubstitutesUpdate) Where(ps ...predicate.PSSubstitutes) *PSSubstitutesUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetIn sets the "In" field.
func (psu *PSSubstitutesUpdate) SetIn(i int) *PSSubstitutesUpdate {
	psu.mutation.ResetIn()
	psu.mutation.SetIn(i)
	return psu
}

// SetNillableIn sets the "In" field if the given value is not nil.
func (psu *PSSubstitutesUpdate) SetNillableIn(i *int) *PSSubstitutesUpdate {
	if i != nil {
		psu.SetIn(*i)
	}
	return psu
}

// AddIn adds i to the "In" field.
func (psu *PSSubstitutesUpdate) AddIn(i int) *PSSubstitutesUpdate {
	psu.mutation.AddIn(i)
	return psu
}

// SetOut sets the "Out" field.
func (psu *PSSubstitutesUpdate) SetOut(i int) *PSSubstitutesUpdate {
	psu.mutation.ResetOut()
	psu.mutation.SetOut(i)
	return psu
}

// SetNillableOut sets the "Out" field if the given value is not nil.
func (psu *PSSubstitutesUpdate) SetNillableOut(i *int) *PSSubstitutesUpdate {
	if i != nil {
		psu.SetOut(*i)
	}
	return psu
}

// AddOut adds i to the "Out" field.
func (psu *PSSubstitutesUpdate) AddOut(i int) *PSSubstitutesUpdate {
	psu.mutation.AddOut(i)
	return psu
}

// SetBench sets the "Bench" field.
func (psu *PSSubstitutesUpdate) SetBench(i int) *PSSubstitutesUpdate {
	psu.mutation.ResetBench()
	psu.mutation.SetBench(i)
	return psu
}

// SetNillableBench sets the "Bench" field if the given value is not nil.
func (psu *PSSubstitutesUpdate) SetNillableBench(i *int) *PSSubstitutesUpdate {
	if i != nil {
		psu.SetBench(*i)
	}
	return psu
}

// AddBench adds i to the "Bench" field.
func (psu *PSSubstitutesUpdate) AddBench(i int) *PSSubstitutesUpdate {
	psu.mutation.AddBench(i)
	return psu
}

// SetLastUpdated sets the "lastUpdated" field.
func (psu *PSSubstitutesUpdate) SetLastUpdated(t time.Time) *PSSubstitutesUpdate {
	psu.mutation.SetLastUpdated(t)
	return psu
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psu *PSSubstitutesUpdate) ClearLastUpdated() *PSSubstitutesUpdate {
	psu.mutation.ClearLastUpdated()
	return psu
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (psu *PSSubstitutesUpdate) SetPlayerStatsID(id int) *PSSubstitutesUpdate {
	psu.mutation.SetPlayerStatsID(id)
	return psu
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (psu *PSSubstitutesUpdate) SetNillablePlayerStatsID(id *int) *PSSubstitutesUpdate {
	if id != nil {
		psu = psu.SetPlayerStatsID(*id)
	}
	return psu
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (psu *PSSubstitutesUpdate) SetPlayerStats(p *PlayerStats) *PSSubstitutesUpdate {
	return psu.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSSubstitutesMutation object of the builder.
func (psu *PSSubstitutesUpdate) Mutation() *PSSubstitutesMutation {
	return psu.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (psu *PSSubstitutesUpdate) ClearPlayerStats() *PSSubstitutesUpdate {
	psu.mutation.ClearPlayerStats()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PSSubstitutesUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PSSubstitutesUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PSSubstitutesUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PSSubstitutesUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PSSubstitutesUpdate) defaults() {
	if _, ok := psu.mutation.LastUpdated(); !ok && !psu.mutation.LastUpdatedCleared() {
		v := pssubstitutes.UpdateDefaultLastUpdated()
		psu.mutation.SetLastUpdated(v)
	}
}

func (psu *PSSubstitutesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pssubstitutes.Table, pssubstitutes.Columns, sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.In(); ok {
		_spec.SetField(pssubstitutes.FieldIn, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedIn(); ok {
		_spec.AddField(pssubstitutes.FieldIn, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Out(); ok {
		_spec.SetField(pssubstitutes.FieldOut, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedOut(); ok {
		_spec.AddField(pssubstitutes.FieldOut, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Bench(); ok {
		_spec.SetField(pssubstitutes.FieldBench, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedBench(); ok {
		_spec.AddField(pssubstitutes.FieldBench, field.TypeInt, value)
	}
	if value, ok := psu.mutation.LastUpdated(); ok {
		_spec.SetField(pssubstitutes.FieldLastUpdated, field.TypeTime, value)
	}
	if psu.mutation.LastUpdatedCleared() {
		_spec.ClearField(pssubstitutes.FieldLastUpdated, field.TypeTime)
	}
	if psu.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pssubstitutes.PlayerStatsTable,
			Columns: []string{pssubstitutes.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pssubstitutes.PlayerStatsTable,
			Columns: []string{pssubstitutes.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pssubstitutes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PSSubstitutesUpdateOne is the builder for updating a single PSSubstitutes entity.
type PSSubstitutesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PSSubstitutesMutation
}

// SetIn sets the "In" field.
func (psuo *PSSubstitutesUpdateOne) SetIn(i int) *PSSubstitutesUpdateOne {
	psuo.mutation.ResetIn()
	psuo.mutation.SetIn(i)
	return psuo
}

// SetNillableIn sets the "In" field if the given value is not nil.
func (psuo *PSSubstitutesUpdateOne) SetNillableIn(i *int) *PSSubstitutesUpdateOne {
	if i != nil {
		psuo.SetIn(*i)
	}
	return psuo
}

// AddIn adds i to the "In" field.
func (psuo *PSSubstitutesUpdateOne) AddIn(i int) *PSSubstitutesUpdateOne {
	psuo.mutation.AddIn(i)
	return psuo
}

// SetOut sets the "Out" field.
func (psuo *PSSubstitutesUpdateOne) SetOut(i int) *PSSubstitutesUpdateOne {
	psuo.mutation.ResetOut()
	psuo.mutation.SetOut(i)
	return psuo
}

// SetNillableOut sets the "Out" field if the given value is not nil.
func (psuo *PSSubstitutesUpdateOne) SetNillableOut(i *int) *PSSubstitutesUpdateOne {
	if i != nil {
		psuo.SetOut(*i)
	}
	return psuo
}

// AddOut adds i to the "Out" field.
func (psuo *PSSubstitutesUpdateOne) AddOut(i int) *PSSubstitutesUpdateOne {
	psuo.mutation.AddOut(i)
	return psuo
}

// SetBench sets the "Bench" field.
func (psuo *PSSubstitutesUpdateOne) SetBench(i int) *PSSubstitutesUpdateOne {
	psuo.mutation.ResetBench()
	psuo.mutation.SetBench(i)
	return psuo
}

// SetNillableBench sets the "Bench" field if the given value is not nil.
func (psuo *PSSubstitutesUpdateOne) SetNillableBench(i *int) *PSSubstitutesUpdateOne {
	if i != nil {
		psuo.SetBench(*i)
	}
	return psuo
}

// AddBench adds i to the "Bench" field.
func (psuo *PSSubstitutesUpdateOne) AddBench(i int) *PSSubstitutesUpdateOne {
	psuo.mutation.AddBench(i)
	return psuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (psuo *PSSubstitutesUpdateOne) SetLastUpdated(t time.Time) *PSSubstitutesUpdateOne {
	psuo.mutation.SetLastUpdated(t)
	return psuo
}

// ClearLastUpdated clears the value of the "lastUpdated" field.
func (psuo *PSSubstitutesUpdateOne) ClearLastUpdated() *PSSubstitutesUpdateOne {
	psuo.mutation.ClearLastUpdated()
	return psuo
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (psuo *PSSubstitutesUpdateOne) SetPlayerStatsID(id int) *PSSubstitutesUpdateOne {
	psuo.mutation.SetPlayerStatsID(id)
	return psuo
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (psuo *PSSubstitutesUpdateOne) SetNillablePlayerStatsID(id *int) *PSSubstitutesUpdateOne {
	if id != nil {
		psuo = psuo.SetPlayerStatsID(*id)
	}
	return psuo
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (psuo *PSSubstitutesUpdateOne) SetPlayerStats(p *PlayerStats) *PSSubstitutesUpdateOne {
	return psuo.SetPlayerStatsID(p.ID)
}

// Mutation returns the PSSubstitutesMutation object of the builder.
func (psuo *PSSubstitutesUpdateOne) Mutation() *PSSubstitutesMutation {
	return psuo.mutation
}

// ClearPlayerStats clears the "playerStats" edge to the PlayerStats entity.
func (psuo *PSSubstitutesUpdateOne) ClearPlayerStats() *PSSubstitutesUpdateOne {
	psuo.mutation.ClearPlayerStats()
	return psuo
}

// Where appends a list predicates to the PSSubstitutesUpdate builder.
func (psuo *PSSubstitutesUpdateOne) Where(ps ...predicate.PSSubstitutes) *PSSubstitutesUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PSSubstitutesUpdateOne) Select(field string, fields ...string) *PSSubstitutesUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PSSubstitutes entity.
func (psuo *PSSubstitutesUpdateOne) Save(ctx context.Context) (*PSSubstitutes, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PSSubstitutesUpdateOne) SaveX(ctx context.Context) *PSSubstitutes {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PSSubstitutesUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PSSubstitutesUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PSSubstitutesUpdateOne) defaults() {
	if _, ok := psuo.mutation.LastUpdated(); !ok && !psuo.mutation.LastUpdatedCleared() {
		v := pssubstitutes.UpdateDefaultLastUpdated()
		psuo.mutation.SetLastUpdated(v)
	}
}

func (psuo *PSSubstitutesUpdateOne) sqlSave(ctx context.Context) (_node *PSSubstitutes, err error) {
	_spec := sqlgraph.NewUpdateSpec(pssubstitutes.Table, pssubstitutes.Columns, sqlgraph.NewFieldSpec(pssubstitutes.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PSSubstitutes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pssubstitutes.FieldID)
		for _, f := range fields {
			if !pssubstitutes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pssubstitutes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.In(); ok {
		_spec.SetField(pssubstitutes.FieldIn, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedIn(); ok {
		_spec.AddField(pssubstitutes.FieldIn, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Out(); ok {
		_spec.SetField(pssubstitutes.FieldOut, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedOut(); ok {
		_spec.AddField(pssubstitutes.FieldOut, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Bench(); ok {
		_spec.SetField(pssubstitutes.FieldBench, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedBench(); ok {
		_spec.AddField(pssubstitutes.FieldBench, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.LastUpdated(); ok {
		_spec.SetField(pssubstitutes.FieldLastUpdated, field.TypeTime, value)
	}
	if psuo.mutation.LastUpdatedCleared() {
		_spec.ClearField(pssubstitutes.FieldLastUpdated, field.TypeTime)
	}
	if psuo.mutation.PlayerStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pssubstitutes.PlayerStatsTable,
			Columns: []string{pssubstitutes.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pssubstitutes.PlayerStatsTable,
			Columns: []string{pssubstitutes.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PSSubstitutes{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pssubstitutes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
