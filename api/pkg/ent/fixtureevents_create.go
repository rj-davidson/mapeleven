// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixture"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/player"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureEventsCreate is the builder for creating a FixtureEvents entity.
type FixtureEventsCreate struct {
	config
	mutation *FixtureEventsMutation
	hooks    []Hook
}

// SetElapsedTime sets the "elapsedTime" field.
func (fec *FixtureEventsCreate) SetElapsedTime(i int) *FixtureEventsCreate {
	fec.mutation.SetElapsedTime(i)
	return fec
}

// SetExtraTime sets the "extraTime" field.
func (fec *FixtureEventsCreate) SetExtraTime(i int) *FixtureEventsCreate {
	fec.mutation.SetExtraTime(i)
	return fec
}

// SetNillableExtraTime sets the "extraTime" field if the given value is not nil.
func (fec *FixtureEventsCreate) SetNillableExtraTime(i *int) *FixtureEventsCreate {
	if i != nil {
		fec.SetExtraTime(*i)
	}
	return fec
}

// SetType sets the "type" field.
func (fec *FixtureEventsCreate) SetType(s string) *FixtureEventsCreate {
	fec.mutation.SetType(s)
	return fec
}

// SetDetail sets the "detail" field.
func (fec *FixtureEventsCreate) SetDetail(s string) *FixtureEventsCreate {
	fec.mutation.SetDetail(s)
	return fec
}

// SetComments sets the "comments" field.
func (fec *FixtureEventsCreate) SetComments(s string) *FixtureEventsCreate {
	fec.mutation.SetComments(s)
	return fec
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (fec *FixtureEventsCreate) SetNillableComments(s *string) *FixtureEventsCreate {
	if s != nil {
		fec.SetComments(*s)
	}
	return fec
}

// SetLastUpdated sets the "lastUpdated" field.
func (fec *FixtureEventsCreate) SetLastUpdated(t time.Time) *FixtureEventsCreate {
	fec.mutation.SetLastUpdated(t)
	return fec
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (fec *FixtureEventsCreate) SetNillableLastUpdated(t *time.Time) *FixtureEventsCreate {
	if t != nil {
		fec.SetLastUpdated(*t)
	}
	return fec
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (fec *FixtureEventsCreate) SetPlayerID(id int) *FixtureEventsCreate {
	fec.mutation.SetPlayerID(id)
	return fec
}

// SetPlayer sets the "player" edge to the Player entity.
func (fec *FixtureEventsCreate) SetPlayer(p *Player) *FixtureEventsCreate {
	return fec.SetPlayerID(p.ID)
}

// SetAssistID sets the "assist" edge to the Player entity by ID.
func (fec *FixtureEventsCreate) SetAssistID(id int) *FixtureEventsCreate {
	fec.mutation.SetAssistID(id)
	return fec
}

// SetNillableAssistID sets the "assist" edge to the Player entity by ID if the given value is not nil.
func (fec *FixtureEventsCreate) SetNillableAssistID(id *int) *FixtureEventsCreate {
	if id != nil {
		fec = fec.SetAssistID(*id)
	}
	return fec
}

// SetAssist sets the "assist" edge to the Player entity.
func (fec *FixtureEventsCreate) SetAssist(p *Player) *FixtureEventsCreate {
	return fec.SetAssistID(p.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (fec *FixtureEventsCreate) SetTeamID(id int) *FixtureEventsCreate {
	fec.mutation.SetTeamID(id)
	return fec
}

// SetTeam sets the "team" edge to the Team entity.
func (fec *FixtureEventsCreate) SetTeam(t *Team) *FixtureEventsCreate {
	return fec.SetTeamID(t.ID)
}

// SetFixtureID sets the "fixture" edge to the Fixture entity by ID.
func (fec *FixtureEventsCreate) SetFixtureID(id int) *FixtureEventsCreate {
	fec.mutation.SetFixtureID(id)
	return fec
}

// SetFixture sets the "fixture" edge to the Fixture entity.
func (fec *FixtureEventsCreate) SetFixture(f *Fixture) *FixtureEventsCreate {
	return fec.SetFixtureID(f.ID)
}

// SetPlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID.
func (fec *FixtureEventsCreate) SetPlayerStatsID(id int) *FixtureEventsCreate {
	fec.mutation.SetPlayerStatsID(id)
	return fec
}

// SetNillablePlayerStatsID sets the "playerStats" edge to the PlayerStats entity by ID if the given value is not nil.
func (fec *FixtureEventsCreate) SetNillablePlayerStatsID(id *int) *FixtureEventsCreate {
	if id != nil {
		fec = fec.SetPlayerStatsID(*id)
	}
	return fec
}

// SetPlayerStats sets the "playerStats" edge to the PlayerStats entity.
func (fec *FixtureEventsCreate) SetPlayerStats(p *PlayerStats) *FixtureEventsCreate {
	return fec.SetPlayerStatsID(p.ID)
}

// Mutation returns the FixtureEventsMutation object of the builder.
func (fec *FixtureEventsCreate) Mutation() *FixtureEventsMutation {
	return fec.mutation
}

// Save creates the FixtureEvents in the database.
func (fec *FixtureEventsCreate) Save(ctx context.Context) (*FixtureEvents, error) {
	fec.defaults()
	return withHooks(ctx, fec.sqlSave, fec.mutation, fec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fec *FixtureEventsCreate) SaveX(ctx context.Context) *FixtureEvents {
	v, err := fec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fec *FixtureEventsCreate) Exec(ctx context.Context) error {
	_, err := fec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fec *FixtureEventsCreate) ExecX(ctx context.Context) {
	if err := fec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fec *FixtureEventsCreate) defaults() {
	if _, ok := fec.mutation.LastUpdated(); !ok {
		v := fixtureevents.DefaultLastUpdated()
		fec.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fec *FixtureEventsCreate) check() error {
	if _, ok := fec.mutation.ElapsedTime(); !ok {
		return &ValidationError{Name: "elapsedTime", err: errors.New(`ent: missing required field "FixtureEvents.elapsedTime"`)}
	}
	if _, ok := fec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FixtureEvents.type"`)}
	}
	if _, ok := fec.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New(`ent: missing required field "FixtureEvents.detail"`)}
	}
	if _, ok := fec.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player", err: errors.New(`ent: missing required edge "FixtureEvents.player"`)}
	}
	if _, ok := fec.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "FixtureEvents.team"`)}
	}
	if _, ok := fec.mutation.FixtureID(); !ok {
		return &ValidationError{Name: "fixture", err: errors.New(`ent: missing required edge "FixtureEvents.fixture"`)}
	}
	return nil
}

func (fec *FixtureEventsCreate) sqlSave(ctx context.Context) (*FixtureEvents, error) {
	if err := fec.check(); err != nil {
		return nil, err
	}
	_node, _spec := fec.createSpec()
	if err := sqlgraph.CreateNode(ctx, fec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fec.mutation.id = &_node.ID
	fec.mutation.done = true
	return _node, nil
}

func (fec *FixtureEventsCreate) createSpec() (*FixtureEvents, *sqlgraph.CreateSpec) {
	var (
		_node = &FixtureEvents{config: fec.config}
		_spec = sqlgraph.NewCreateSpec(fixtureevents.Table, sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt))
	)
	if value, ok := fec.mutation.ElapsedTime(); ok {
		_spec.SetField(fixtureevents.FieldElapsedTime, field.TypeInt, value)
		_node.ElapsedTime = value
	}
	if value, ok := fec.mutation.ExtraTime(); ok {
		_spec.SetField(fixtureevents.FieldExtraTime, field.TypeInt, value)
		_node.ExtraTime = value
	}
	if value, ok := fec.mutation.GetType(); ok {
		_spec.SetField(fixtureevents.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fec.mutation.Detail(); ok {
		_spec.SetField(fixtureevents.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	if value, ok := fec.mutation.Comments(); ok {
		_spec.SetField(fixtureevents.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := fec.mutation.LastUpdated(); ok {
		_spec.SetField(fixtureevents.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := fec.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.PlayerTable,
			Columns: []string{fixtureevents.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_player_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fec.mutation.AssistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.AssistTable,
			Columns: []string{fixtureevents.AssistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_assist_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fec.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.TeamTable,
			Columns: []string{fixtureevents.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_team_fixture_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fec.mutation.FixtureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.FixtureTable,
			Columns: []string{fixtureevents.FixtureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fixture_fixture_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fec.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixtureevents.PlayerStatsTable,
			Columns: []string{fixtureevents.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_stats_player_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FixtureEventsCreateBulk is the builder for creating many FixtureEvents entities in bulk.
type FixtureEventsCreateBulk struct {
	config
	err      error
	builders []*FixtureEventsCreate
}

// Save creates the FixtureEvents entities in the database.
func (fecb *FixtureEventsCreateBulk) Save(ctx context.Context) ([]*FixtureEvents, error) {
	if fecb.err != nil {
		return nil, fecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fecb.builders))
	nodes := make([]*FixtureEvents, len(fecb.builders))
	mutators := make([]Mutator, len(fecb.builders))
	for i := range fecb.builders {
		func(i int, root context.Context) {
			builder := fecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FixtureEventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fecb *FixtureEventsCreateBulk) SaveX(ctx context.Context) []*FixtureEvents {
	v, err := fecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fecb *FixtureEventsCreateBulk) Exec(ctx context.Context) error {
	_, err := fecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fecb *FixtureEventsCreateBulk) ExecX(ctx context.Context) {
	if err := fecb.Exec(ctx); err != nil {
		panic(err)
	}
}
