// Code generated by ent, DO NOT EDIT.

package psgames

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psgames type in the database.
	Label = "ps_games"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAppearences holds the string denoting the appearences field in the database.
	FieldAppearences = "appearences"
	// FieldLineups holds the string denoting the lineups field in the database.
	FieldLineups = "lineups"
	// FieldMinutes holds the string denoting the minutes field in the database.
	FieldMinutes = "minutes"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldCaptain holds the string denoting the captain field in the database.
	FieldCaptain = "captain"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the psgames in the database.
	Table = "ps_games"
	// PlayerStatsTable is the table that holds the playerStats relation/edge. The primary key declared below.
	PlayerStatsTable = "player_stats_psgames"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
)

// Columns holds all SQL columns for psgames fields.
var Columns = []string{
	FieldID,
	FieldAppearences,
	FieldLineups,
	FieldMinutes,
	FieldNumber,
	FieldPosition,
	FieldRating,
	FieldCaptain,
}

var (
	// PlayerStatsPrimaryKey and PlayerStatsColumn2 are the table columns denoting the
	// primary key for the playerStats relation (M2M).
	PlayerStatsPrimaryKey = []string{"player_stats_id", "ps_games_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PSGames queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAppearences orders the results by the appearences field.
func ByAppearences(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppearences, opts...).ToFunc()
}

// ByLineups orders the results by the lineups field.
func ByLineups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineups, opts...).ToFunc()
}

// ByMinutes orders the results by the minutes field.
func ByMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinutes, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByCaptain orders the results by the captain field.
func ByCaptain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptain, opts...).ToFunc()
}

// ByPlayerStatsCount orders the results by playerStats count.
func ByPlayerStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerStatsStep(), opts...)
	}
}

// ByPlayerStats orders the results by playerStats terms.
func ByPlayerStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PlayerStatsTable, PlayerStatsPrimaryKey...),
	)
}
