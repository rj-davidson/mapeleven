// Code generated by ent, DO NOT EDIT.

package psgames

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psgames type in the database.
	Label = "ps_games"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAppearences holds the string denoting the appearences field in the database.
	FieldAppearences = "appearences"
	// FieldLineups holds the string denoting the lineups field in the database.
	FieldLineups = "lineups"
	// FieldMinutes holds the string denoting the minutes field in the database.
	FieldMinutes = "minutes"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldCaptain holds the string denoting the captain field in the database.
	FieldCaptain = "captain"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the psgames in the database.
	Table = "ps_games"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "ps_games"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_psgames"
)

// Columns holds all SQL columns for psgames fields.
var Columns = []string{
	FieldID,
	FieldAppearences,
	FieldLineups,
	FieldMinutes,
	FieldNumber,
	FieldPosition,
	FieldRating,
	FieldCaptain,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_psgames",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PSGames queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAppearences orders the results by the appearences field.
func ByAppearences(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppearences, opts...).ToFunc()
}

// ByLineups orders the results by the lineups field.
func ByLineups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineups, opts...).ToFunc()
}

// ByMinutes orders the results by the minutes field.
func ByMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinutes, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByCaptain orders the results by the captain field.
func ByCaptain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptain, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
	)
}
