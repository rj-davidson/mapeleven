// Code generated by ent, DO NOT EDIT.

package psgames

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psgames type in the database.
	Label = "ps_games"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAppearances holds the string denoting the appearances field in the database.
	FieldAppearances = "appearances"
	// FieldLineups holds the string denoting the lineups field in the database.
	FieldLineups = "lineups"
	// FieldMinutes holds the string denoting the minutes field in the database.
	FieldMinutes = "minutes"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldCaptain holds the string denoting the captain field in the database.
	FieldCaptain = "captain"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlayerStats holds the string denoting the playerstats edge name in mutations.
	EdgePlayerStats = "playerStats"
	// Table holds the table name of the psgames in the database.
	Table = "ps_games"
	// PlayerStatsTable is the table that holds the playerStats relation/edge.
	PlayerStatsTable = "ps_games"
	// PlayerStatsInverseTable is the table name for the PlayerStats entity.
	// It exists in this package in order to avoid circular dependency with the "playerstats" package.
	PlayerStatsInverseTable = "player_stats"
	// PlayerStatsColumn is the table column denoting the playerStats relation/edge.
	PlayerStatsColumn = "player_stats_ps_games"
)

// Columns holds all SQL columns for psgames fields.
var Columns = []string{
	FieldID,
	FieldAppearances,
	FieldLineups,
	FieldMinutes,
	FieldNumber,
	FieldPosition,
	FieldRating,
	FieldCaptain,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ps_games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_stats_ps_games",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAppearances holds the default value on creation for the "Appearances" field.
	DefaultAppearances int
	// DefaultLineups holds the default value on creation for the "Lineups" field.
	DefaultLineups int
	// DefaultMinutes holds the default value on creation for the "Minutes" field.
	DefaultMinutes int
	// DefaultNumber holds the default value on creation for the "Number" field.
	DefaultNumber int
	// DefaultPosition holds the default value on creation for the "Position" field.
	DefaultPosition string
	// DefaultRating holds the default value on creation for the "Rating" field.
	DefaultRating string
	// DefaultCaptain holds the default value on creation for the "Captain" field.
	DefaultCaptain bool
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the PSGames queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAppearances orders the results by the Appearances field.
func ByAppearances(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppearances, opts...).ToFunc()
}

// ByLineups orders the results by the Lineups field.
func ByLineups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLineups, opts...).ToFunc()
}

// ByMinutes orders the results by the Minutes field.
func ByMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinutes, opts...).ToFunc()
}

// ByNumber orders the results by the Number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByPosition orders the results by the Position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByRating orders the results by the Rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByCaptain orders the results by the Captain field.
func ByCaptain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptain, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlayerStatsField orders the results by playerStats field.
func ByPlayerStatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatsStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PlayerStatsTable, PlayerStatsColumn),
	)
}
