// Code generated by ent, DO NOT EDIT.

package player

import (
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldSlug, v))
}

// ApiFootballId applies equality check predicate on the "ApiFootballId" field. It's identical to ApiFootballIdEQ.
func ApiFootballId(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldApiFootballId, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldName, v))
}

// Firstname applies equality check predicate on the "firstname" field. It's identical to FirstnameEQ.
func Firstname(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldFirstname, v))
}

// Lastname applies equality check predicate on the "lastname" field. It's identical to LastnameEQ.
func Lastname(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLastname, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAge, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldHeight, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldWeight, v))
}

// Injured applies equality check predicate on the "injured" field. It's identical to InjuredEQ.
func Injured(v bool) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInjured, v))
}

// Photo applies equality check predicate on the "photo" field. It's identical to PhotoEQ.
func Photo(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPhoto, v))
}

// LastUpdated applies equality check predicate on the "lastUpdated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLastUpdated, v))
}

// GameAppearances applies equality check predicate on the "GameAppearances" field. It's identical to GameAppearancesEQ.
func GameAppearances(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGameAppearances, v))
}

// GameLineups applies equality check predicate on the "GameLineups" field. It's identical to GameLineupsEQ.
func GameLineups(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGameLineups, v))
}

// GameMinutes applies equality check predicate on the "GameMinutes" field. It's identical to GameMinutesEQ.
func GameMinutes(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGameMinutes, v))
}

// TotalShots applies equality check predicate on the "TotalShots" field. It's identical to TotalShotsEQ.
func TotalShots(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalShots, v))
}

// ShotsOnTarget applies equality check predicate on the "ShotsOnTarget" field. It's identical to ShotsOnTargetEQ.
func ShotsOnTarget(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldShotsOnTarget, v))
}

// TotalGoals applies equality check predicate on the "TotalGoals" field. It's identical to TotalGoalsEQ.
func TotalGoals(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalGoals, v))
}

// Assists applies equality check predicate on the "Assists" field. It's identical to AssistsEQ.
func Assists(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAssists, v))
}

// GoalsConceded applies equality check predicate on the "GoalsConceded" field. It's identical to GoalsConcededEQ.
func GoalsConceded(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGoalsConceded, v))
}

// Saves applies equality check predicate on the "Saves" field. It's identical to SavesEQ.
func Saves(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldSaves, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPosition, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldRating, v))
}

// TeamName applies equality check predicate on the "teamName" field. It's identical to TeamNameEQ.
func TeamName(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTeamName, v))
}

// TeamID applies equality check predicate on the "teamID" field. It's identical to TeamIDEQ.
func TeamID(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTeamID, v))
}

// LeagueID applies equality check predicate on the "leagueID" field. It's identical to LeagueIDEQ.
func LeagueID(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLeagueID, v))
}

// LeagueName applies equality check predicate on the "leagueName" field. It's identical to LeagueNameEQ.
func LeagueName(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLeagueName, v))
}

// PassTotal applies equality check predicate on the "passTotal" field. It's identical to PassTotalEQ.
func PassTotal(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassTotal, v))
}

// PassKey applies equality check predicate on the "passKey" field. It's identical to PassKeyEQ.
func PassKey(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassKey, v))
}

// PassAccuracy applies equality check predicate on the "passAccuracy" field. It's identical to PassAccuracyEQ.
func PassAccuracy(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassAccuracy, v))
}

// TotalTackle applies equality check predicate on the "totalTackle" field. It's identical to TotalTackleEQ.
func TotalTackle(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalTackle, v))
}

// Blocks applies equality check predicate on the "blocks" field. It's identical to BlocksEQ.
func Blocks(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldBlocks, v))
}

// Interceptions applies equality check predicate on the "interceptions" field. It's identical to InterceptionsEQ.
func Interceptions(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInterceptions, v))
}

// DuelsTotal applies equality check predicate on the "duelsTotal" field. It's identical to DuelsTotalEQ.
func DuelsTotal(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDuelsTotal, v))
}

// DuelsWon applies equality check predicate on the "duelsWon" field. It's identical to DuelsWonEQ.
func DuelsWon(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDuelsWon, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldSlug, v))
}

// ApiFootballIdEQ applies the EQ predicate on the "ApiFootballId" field.
func ApiFootballIdEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldApiFootballId, v))
}

// ApiFootballIdNEQ applies the NEQ predicate on the "ApiFootballId" field.
func ApiFootballIdNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldApiFootballId, v))
}

// ApiFootballIdIn applies the In predicate on the "ApiFootballId" field.
func ApiFootballIdIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldApiFootballId, vs...))
}

// ApiFootballIdNotIn applies the NotIn predicate on the "ApiFootballId" field.
func ApiFootballIdNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldApiFootballId, vs...))
}

// ApiFootballIdGT applies the GT predicate on the "ApiFootballId" field.
func ApiFootballIdGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldApiFootballId, v))
}

// ApiFootballIdGTE applies the GTE predicate on the "ApiFootballId" field.
func ApiFootballIdGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldApiFootballId, v))
}

// ApiFootballIdLT applies the LT predicate on the "ApiFootballId" field.
func ApiFootballIdLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldApiFootballId, v))
}

// ApiFootballIdLTE applies the LTE predicate on the "ApiFootballId" field.
func ApiFootballIdLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldApiFootballId, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldName, v))
}

// FirstnameEQ applies the EQ predicate on the "firstname" field.
func FirstnameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldFirstname, v))
}

// FirstnameNEQ applies the NEQ predicate on the "firstname" field.
func FirstnameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldFirstname, v))
}

// FirstnameIn applies the In predicate on the "firstname" field.
func FirstnameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldFirstname, vs...))
}

// FirstnameNotIn applies the NotIn predicate on the "firstname" field.
func FirstnameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldFirstname, vs...))
}

// FirstnameGT applies the GT predicate on the "firstname" field.
func FirstnameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldFirstname, v))
}

// FirstnameGTE applies the GTE predicate on the "firstname" field.
func FirstnameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldFirstname, v))
}

// FirstnameLT applies the LT predicate on the "firstname" field.
func FirstnameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldFirstname, v))
}

// FirstnameLTE applies the LTE predicate on the "firstname" field.
func FirstnameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldFirstname, v))
}

// FirstnameContains applies the Contains predicate on the "firstname" field.
func FirstnameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldFirstname, v))
}

// FirstnameHasPrefix applies the HasPrefix predicate on the "firstname" field.
func FirstnameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldFirstname, v))
}

// FirstnameHasSuffix applies the HasSuffix predicate on the "firstname" field.
func FirstnameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldFirstname, v))
}

// FirstnameEqualFold applies the EqualFold predicate on the "firstname" field.
func FirstnameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldFirstname, v))
}

// FirstnameContainsFold applies the ContainsFold predicate on the "firstname" field.
func FirstnameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldFirstname, v))
}

// LastnameEQ applies the EQ predicate on the "lastname" field.
func LastnameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLastname, v))
}

// LastnameNEQ applies the NEQ predicate on the "lastname" field.
func LastnameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldLastname, v))
}

// LastnameIn applies the In predicate on the "lastname" field.
func LastnameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldLastname, vs...))
}

// LastnameNotIn applies the NotIn predicate on the "lastname" field.
func LastnameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldLastname, vs...))
}

// LastnameGT applies the GT predicate on the "lastname" field.
func LastnameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldLastname, v))
}

// LastnameGTE applies the GTE predicate on the "lastname" field.
func LastnameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldLastname, v))
}

// LastnameLT applies the LT predicate on the "lastname" field.
func LastnameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldLastname, v))
}

// LastnameLTE applies the LTE predicate on the "lastname" field.
func LastnameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldLastname, v))
}

// LastnameContains applies the Contains predicate on the "lastname" field.
func LastnameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldLastname, v))
}

// LastnameHasPrefix applies the HasPrefix predicate on the "lastname" field.
func LastnameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldLastname, v))
}

// LastnameHasSuffix applies the HasSuffix predicate on the "lastname" field.
func LastnameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldLastname, v))
}

// LastnameEqualFold applies the EqualFold predicate on the "lastname" field.
func LastnameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldLastname, v))
}

// LastnameContainsFold applies the ContainsFold predicate on the "lastname" field.
func LastnameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldLastname, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldAge, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldHeight, v))
}

// HeightContains applies the Contains predicate on the "height" field.
func HeightContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldHeight, v))
}

// HeightHasPrefix applies the HasPrefix predicate on the "height" field.
func HeightHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldHeight, v))
}

// HeightHasSuffix applies the HasSuffix predicate on the "height" field.
func HeightHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldHeight, v))
}

// HeightEqualFold applies the EqualFold predicate on the "height" field.
func HeightEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldHeight, v))
}

// HeightContainsFold applies the ContainsFold predicate on the "height" field.
func HeightContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldHeight, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldWeight, v))
}

// WeightContains applies the Contains predicate on the "weight" field.
func WeightContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldWeight, v))
}

// WeightHasPrefix applies the HasPrefix predicate on the "weight" field.
func WeightHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldWeight, v))
}

// WeightHasSuffix applies the HasSuffix predicate on the "weight" field.
func WeightHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldWeight, v))
}

// WeightEqualFold applies the EqualFold predicate on the "weight" field.
func WeightEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldWeight, v))
}

// WeightContainsFold applies the ContainsFold predicate on the "weight" field.
func WeightContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldWeight, v))
}

// InjuredEQ applies the EQ predicate on the "injured" field.
func InjuredEQ(v bool) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInjured, v))
}

// InjuredNEQ applies the NEQ predicate on the "injured" field.
func InjuredNEQ(v bool) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldInjured, v))
}

// PhotoEQ applies the EQ predicate on the "photo" field.
func PhotoEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPhoto, v))
}

// PhotoNEQ applies the NEQ predicate on the "photo" field.
func PhotoNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPhoto, v))
}

// PhotoIn applies the In predicate on the "photo" field.
func PhotoIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPhoto, vs...))
}

// PhotoNotIn applies the NotIn predicate on the "photo" field.
func PhotoNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPhoto, vs...))
}

// PhotoGT applies the GT predicate on the "photo" field.
func PhotoGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPhoto, v))
}

// PhotoGTE applies the GTE predicate on the "photo" field.
func PhotoGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPhoto, v))
}

// PhotoLT applies the LT predicate on the "photo" field.
func PhotoLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPhoto, v))
}

// PhotoLTE applies the LTE predicate on the "photo" field.
func PhotoLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPhoto, v))
}

// PhotoContains applies the Contains predicate on the "photo" field.
func PhotoContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldPhoto, v))
}

// PhotoHasPrefix applies the HasPrefix predicate on the "photo" field.
func PhotoHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldPhoto, v))
}

// PhotoHasSuffix applies the HasSuffix predicate on the "photo" field.
func PhotoHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldPhoto, v))
}

// PhotoEqualFold applies the EqualFold predicate on the "photo" field.
func PhotoEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldPhoto, v))
}

// PhotoContainsFold applies the ContainsFold predicate on the "photo" field.
func PhotoContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldPhoto, v))
}

// LastUpdatedEQ applies the EQ predicate on the "lastUpdated" field.
func LastUpdatedEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "lastUpdated" field.
func LastUpdatedNEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "lastUpdated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "lastUpdated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "lastUpdated" field.
func LastUpdatedGT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "lastUpdated" field.
func LastUpdatedGTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "lastUpdated" field.
func LastUpdatedLT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "lastUpdated" field.
func LastUpdatedLTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldLastUpdated, v))
}

// LastUpdatedIsNil applies the IsNil predicate on the "lastUpdated" field.
func LastUpdatedIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldLastUpdated))
}

// LastUpdatedNotNil applies the NotNil predicate on the "lastUpdated" field.
func LastUpdatedNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldLastUpdated))
}

// GameAppearancesEQ applies the EQ predicate on the "GameAppearances" field.
func GameAppearancesEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGameAppearances, v))
}

// GameAppearancesNEQ applies the NEQ predicate on the "GameAppearances" field.
func GameAppearancesNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldGameAppearances, v))
}

// GameAppearancesIn applies the In predicate on the "GameAppearances" field.
func GameAppearancesIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldGameAppearances, vs...))
}

// GameAppearancesNotIn applies the NotIn predicate on the "GameAppearances" field.
func GameAppearancesNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldGameAppearances, vs...))
}

// GameAppearancesGT applies the GT predicate on the "GameAppearances" field.
func GameAppearancesGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldGameAppearances, v))
}

// GameAppearancesGTE applies the GTE predicate on the "GameAppearances" field.
func GameAppearancesGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldGameAppearances, v))
}

// GameAppearancesLT applies the LT predicate on the "GameAppearances" field.
func GameAppearancesLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldGameAppearances, v))
}

// GameAppearancesLTE applies the LTE predicate on the "GameAppearances" field.
func GameAppearancesLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldGameAppearances, v))
}

// GameLineupsEQ applies the EQ predicate on the "GameLineups" field.
func GameLineupsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGameLineups, v))
}

// GameLineupsNEQ applies the NEQ predicate on the "GameLineups" field.
func GameLineupsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldGameLineups, v))
}

// GameLineupsIn applies the In predicate on the "GameLineups" field.
func GameLineupsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldGameLineups, vs...))
}

// GameLineupsNotIn applies the NotIn predicate on the "GameLineups" field.
func GameLineupsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldGameLineups, vs...))
}

// GameLineupsGT applies the GT predicate on the "GameLineups" field.
func GameLineupsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldGameLineups, v))
}

// GameLineupsGTE applies the GTE predicate on the "GameLineups" field.
func GameLineupsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldGameLineups, v))
}

// GameLineupsLT applies the LT predicate on the "GameLineups" field.
func GameLineupsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldGameLineups, v))
}

// GameLineupsLTE applies the LTE predicate on the "GameLineups" field.
func GameLineupsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldGameLineups, v))
}

// GameMinutesEQ applies the EQ predicate on the "GameMinutes" field.
func GameMinutesEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGameMinutes, v))
}

// GameMinutesNEQ applies the NEQ predicate on the "GameMinutes" field.
func GameMinutesNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldGameMinutes, v))
}

// GameMinutesIn applies the In predicate on the "GameMinutes" field.
func GameMinutesIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldGameMinutes, vs...))
}

// GameMinutesNotIn applies the NotIn predicate on the "GameMinutes" field.
func GameMinutesNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldGameMinutes, vs...))
}

// GameMinutesGT applies the GT predicate on the "GameMinutes" field.
func GameMinutesGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldGameMinutes, v))
}

// GameMinutesGTE applies the GTE predicate on the "GameMinutes" field.
func GameMinutesGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldGameMinutes, v))
}

// GameMinutesLT applies the LT predicate on the "GameMinutes" field.
func GameMinutesLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldGameMinutes, v))
}

// GameMinutesLTE applies the LTE predicate on the "GameMinutes" field.
func GameMinutesLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldGameMinutes, v))
}

// TotalShotsEQ applies the EQ predicate on the "TotalShots" field.
func TotalShotsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalShots, v))
}

// TotalShotsNEQ applies the NEQ predicate on the "TotalShots" field.
func TotalShotsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldTotalShots, v))
}

// TotalShotsIn applies the In predicate on the "TotalShots" field.
func TotalShotsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldTotalShots, vs...))
}

// TotalShotsNotIn applies the NotIn predicate on the "TotalShots" field.
func TotalShotsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldTotalShots, vs...))
}

// TotalShotsGT applies the GT predicate on the "TotalShots" field.
func TotalShotsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldTotalShots, v))
}

// TotalShotsGTE applies the GTE predicate on the "TotalShots" field.
func TotalShotsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldTotalShots, v))
}

// TotalShotsLT applies the LT predicate on the "TotalShots" field.
func TotalShotsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldTotalShots, v))
}

// TotalShotsLTE applies the LTE predicate on the "TotalShots" field.
func TotalShotsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldTotalShots, v))
}

// ShotsOnTargetEQ applies the EQ predicate on the "ShotsOnTarget" field.
func ShotsOnTargetEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldShotsOnTarget, v))
}

// ShotsOnTargetNEQ applies the NEQ predicate on the "ShotsOnTarget" field.
func ShotsOnTargetNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldShotsOnTarget, v))
}

// ShotsOnTargetIn applies the In predicate on the "ShotsOnTarget" field.
func ShotsOnTargetIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldShotsOnTarget, vs...))
}

// ShotsOnTargetNotIn applies the NotIn predicate on the "ShotsOnTarget" field.
func ShotsOnTargetNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldShotsOnTarget, vs...))
}

// ShotsOnTargetGT applies the GT predicate on the "ShotsOnTarget" field.
func ShotsOnTargetGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldShotsOnTarget, v))
}

// ShotsOnTargetGTE applies the GTE predicate on the "ShotsOnTarget" field.
func ShotsOnTargetGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldShotsOnTarget, v))
}

// ShotsOnTargetLT applies the LT predicate on the "ShotsOnTarget" field.
func ShotsOnTargetLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldShotsOnTarget, v))
}

// ShotsOnTargetLTE applies the LTE predicate on the "ShotsOnTarget" field.
func ShotsOnTargetLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldShotsOnTarget, v))
}

// TotalGoalsEQ applies the EQ predicate on the "TotalGoals" field.
func TotalGoalsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalGoals, v))
}

// TotalGoalsNEQ applies the NEQ predicate on the "TotalGoals" field.
func TotalGoalsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldTotalGoals, v))
}

// TotalGoalsIn applies the In predicate on the "TotalGoals" field.
func TotalGoalsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldTotalGoals, vs...))
}

// TotalGoalsNotIn applies the NotIn predicate on the "TotalGoals" field.
func TotalGoalsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldTotalGoals, vs...))
}

// TotalGoalsGT applies the GT predicate on the "TotalGoals" field.
func TotalGoalsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldTotalGoals, v))
}

// TotalGoalsGTE applies the GTE predicate on the "TotalGoals" field.
func TotalGoalsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldTotalGoals, v))
}

// TotalGoalsLT applies the LT predicate on the "TotalGoals" field.
func TotalGoalsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldTotalGoals, v))
}

// TotalGoalsLTE applies the LTE predicate on the "TotalGoals" field.
func TotalGoalsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldTotalGoals, v))
}

// AssistsEQ applies the EQ predicate on the "Assists" field.
func AssistsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAssists, v))
}

// AssistsNEQ applies the NEQ predicate on the "Assists" field.
func AssistsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldAssists, v))
}

// AssistsIn applies the In predicate on the "Assists" field.
func AssistsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldAssists, vs...))
}

// AssistsNotIn applies the NotIn predicate on the "Assists" field.
func AssistsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldAssists, vs...))
}

// AssistsGT applies the GT predicate on the "Assists" field.
func AssistsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldAssists, v))
}

// AssistsGTE applies the GTE predicate on the "Assists" field.
func AssistsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldAssists, v))
}

// AssistsLT applies the LT predicate on the "Assists" field.
func AssistsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldAssists, v))
}

// AssistsLTE applies the LTE predicate on the "Assists" field.
func AssistsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldAssists, v))
}

// GoalsConcededEQ applies the EQ predicate on the "GoalsConceded" field.
func GoalsConcededEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGoalsConceded, v))
}

// GoalsConcededNEQ applies the NEQ predicate on the "GoalsConceded" field.
func GoalsConcededNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldGoalsConceded, v))
}

// GoalsConcededIn applies the In predicate on the "GoalsConceded" field.
func GoalsConcededIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldGoalsConceded, vs...))
}

// GoalsConcededNotIn applies the NotIn predicate on the "GoalsConceded" field.
func GoalsConcededNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldGoalsConceded, vs...))
}

// GoalsConcededGT applies the GT predicate on the "GoalsConceded" field.
func GoalsConcededGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldGoalsConceded, v))
}

// GoalsConcededGTE applies the GTE predicate on the "GoalsConceded" field.
func GoalsConcededGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldGoalsConceded, v))
}

// GoalsConcededLT applies the LT predicate on the "GoalsConceded" field.
func GoalsConcededLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldGoalsConceded, v))
}

// GoalsConcededLTE applies the LTE predicate on the "GoalsConceded" field.
func GoalsConcededLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldGoalsConceded, v))
}

// SavesEQ applies the EQ predicate on the "Saves" field.
func SavesEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldSaves, v))
}

// SavesNEQ applies the NEQ predicate on the "Saves" field.
func SavesNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldSaves, v))
}

// SavesIn applies the In predicate on the "Saves" field.
func SavesIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldSaves, vs...))
}

// SavesNotIn applies the NotIn predicate on the "Saves" field.
func SavesNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldSaves, vs...))
}

// SavesGT applies the GT predicate on the "Saves" field.
func SavesGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldSaves, v))
}

// SavesGTE applies the GTE predicate on the "Saves" field.
func SavesGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldSaves, v))
}

// SavesLT applies the LT predicate on the "Saves" field.
func SavesLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldSaves, v))
}

// SavesLTE applies the LTE predicate on the "Saves" field.
func SavesLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldSaves, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldPosition, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldRating, v))
}

// RatingContains applies the Contains predicate on the "rating" field.
func RatingContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldRating, v))
}

// RatingHasPrefix applies the HasPrefix predicate on the "rating" field.
func RatingHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldRating, v))
}

// RatingHasSuffix applies the HasSuffix predicate on the "rating" field.
func RatingHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldRating, v))
}

// RatingEqualFold applies the EqualFold predicate on the "rating" field.
func RatingEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldRating, v))
}

// RatingContainsFold applies the ContainsFold predicate on the "rating" field.
func RatingContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldRating, v))
}

// TeamNameEQ applies the EQ predicate on the "teamName" field.
func TeamNameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTeamName, v))
}

// TeamNameNEQ applies the NEQ predicate on the "teamName" field.
func TeamNameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldTeamName, v))
}

// TeamNameIn applies the In predicate on the "teamName" field.
func TeamNameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldTeamName, vs...))
}

// TeamNameNotIn applies the NotIn predicate on the "teamName" field.
func TeamNameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldTeamName, vs...))
}

// TeamNameGT applies the GT predicate on the "teamName" field.
func TeamNameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldTeamName, v))
}

// TeamNameGTE applies the GTE predicate on the "teamName" field.
func TeamNameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldTeamName, v))
}

// TeamNameLT applies the LT predicate on the "teamName" field.
func TeamNameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldTeamName, v))
}

// TeamNameLTE applies the LTE predicate on the "teamName" field.
func TeamNameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldTeamName, v))
}

// TeamNameContains applies the Contains predicate on the "teamName" field.
func TeamNameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldTeamName, v))
}

// TeamNameHasPrefix applies the HasPrefix predicate on the "teamName" field.
func TeamNameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldTeamName, v))
}

// TeamNameHasSuffix applies the HasSuffix predicate on the "teamName" field.
func TeamNameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldTeamName, v))
}

// TeamNameEqualFold applies the EqualFold predicate on the "teamName" field.
func TeamNameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldTeamName, v))
}

// TeamNameContainsFold applies the ContainsFold predicate on the "teamName" field.
func TeamNameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldTeamName, v))
}

// TeamIDEQ applies the EQ predicate on the "teamID" field.
func TeamIDEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "teamID" field.
func TeamIDNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "teamID" field.
func TeamIDIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "teamID" field.
func TeamIDNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDGT applies the GT predicate on the "teamID" field.
func TeamIDGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldTeamID, v))
}

// TeamIDGTE applies the GTE predicate on the "teamID" field.
func TeamIDGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldTeamID, v))
}

// TeamIDLT applies the LT predicate on the "teamID" field.
func TeamIDLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldTeamID, v))
}

// TeamIDLTE applies the LTE predicate on the "teamID" field.
func TeamIDLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldTeamID, v))
}

// LeagueIDEQ applies the EQ predicate on the "leagueID" field.
func LeagueIDEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLeagueID, v))
}

// LeagueIDNEQ applies the NEQ predicate on the "leagueID" field.
func LeagueIDNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldLeagueID, v))
}

// LeagueIDIn applies the In predicate on the "leagueID" field.
func LeagueIDIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldLeagueID, vs...))
}

// LeagueIDNotIn applies the NotIn predicate on the "leagueID" field.
func LeagueIDNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldLeagueID, vs...))
}

// LeagueIDGT applies the GT predicate on the "leagueID" field.
func LeagueIDGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldLeagueID, v))
}

// LeagueIDGTE applies the GTE predicate on the "leagueID" field.
func LeagueIDGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldLeagueID, v))
}

// LeagueIDLT applies the LT predicate on the "leagueID" field.
func LeagueIDLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldLeagueID, v))
}

// LeagueIDLTE applies the LTE predicate on the "leagueID" field.
func LeagueIDLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldLeagueID, v))
}

// LeagueNameEQ applies the EQ predicate on the "leagueName" field.
func LeagueNameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLeagueName, v))
}

// LeagueNameNEQ applies the NEQ predicate on the "leagueName" field.
func LeagueNameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldLeagueName, v))
}

// LeagueNameIn applies the In predicate on the "leagueName" field.
func LeagueNameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldLeagueName, vs...))
}

// LeagueNameNotIn applies the NotIn predicate on the "leagueName" field.
func LeagueNameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldLeagueName, vs...))
}

// LeagueNameGT applies the GT predicate on the "leagueName" field.
func LeagueNameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldLeagueName, v))
}

// LeagueNameGTE applies the GTE predicate on the "leagueName" field.
func LeagueNameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldLeagueName, v))
}

// LeagueNameLT applies the LT predicate on the "leagueName" field.
func LeagueNameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldLeagueName, v))
}

// LeagueNameLTE applies the LTE predicate on the "leagueName" field.
func LeagueNameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldLeagueName, v))
}

// LeagueNameContains applies the Contains predicate on the "leagueName" field.
func LeagueNameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldLeagueName, v))
}

// LeagueNameHasPrefix applies the HasPrefix predicate on the "leagueName" field.
func LeagueNameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldLeagueName, v))
}

// LeagueNameHasSuffix applies the HasSuffix predicate on the "leagueName" field.
func LeagueNameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldLeagueName, v))
}

// LeagueNameEqualFold applies the EqualFold predicate on the "leagueName" field.
func LeagueNameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldLeagueName, v))
}

// LeagueNameContainsFold applies the ContainsFold predicate on the "leagueName" field.
func LeagueNameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldLeagueName, v))
}

// PassTotalEQ applies the EQ predicate on the "passTotal" field.
func PassTotalEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassTotal, v))
}

// PassTotalNEQ applies the NEQ predicate on the "passTotal" field.
func PassTotalNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPassTotal, v))
}

// PassTotalIn applies the In predicate on the "passTotal" field.
func PassTotalIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPassTotal, vs...))
}

// PassTotalNotIn applies the NotIn predicate on the "passTotal" field.
func PassTotalNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPassTotal, vs...))
}

// PassTotalGT applies the GT predicate on the "passTotal" field.
func PassTotalGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPassTotal, v))
}

// PassTotalGTE applies the GTE predicate on the "passTotal" field.
func PassTotalGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPassTotal, v))
}

// PassTotalLT applies the LT predicate on the "passTotal" field.
func PassTotalLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPassTotal, v))
}

// PassTotalLTE applies the LTE predicate on the "passTotal" field.
func PassTotalLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPassTotal, v))
}

// PassKeyEQ applies the EQ predicate on the "passKey" field.
func PassKeyEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassKey, v))
}

// PassKeyNEQ applies the NEQ predicate on the "passKey" field.
func PassKeyNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPassKey, v))
}

// PassKeyIn applies the In predicate on the "passKey" field.
func PassKeyIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPassKey, vs...))
}

// PassKeyNotIn applies the NotIn predicate on the "passKey" field.
func PassKeyNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPassKey, vs...))
}

// PassKeyGT applies the GT predicate on the "passKey" field.
func PassKeyGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPassKey, v))
}

// PassKeyGTE applies the GTE predicate on the "passKey" field.
func PassKeyGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPassKey, v))
}

// PassKeyLT applies the LT predicate on the "passKey" field.
func PassKeyLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPassKey, v))
}

// PassKeyLTE applies the LTE predicate on the "passKey" field.
func PassKeyLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPassKey, v))
}

// PassAccuracyEQ applies the EQ predicate on the "passAccuracy" field.
func PassAccuracyEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassAccuracy, v))
}

// PassAccuracyNEQ applies the NEQ predicate on the "passAccuracy" field.
func PassAccuracyNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPassAccuracy, v))
}

// PassAccuracyIn applies the In predicate on the "passAccuracy" field.
func PassAccuracyIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPassAccuracy, vs...))
}

// PassAccuracyNotIn applies the NotIn predicate on the "passAccuracy" field.
func PassAccuracyNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPassAccuracy, vs...))
}

// PassAccuracyGT applies the GT predicate on the "passAccuracy" field.
func PassAccuracyGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPassAccuracy, v))
}

// PassAccuracyGTE applies the GTE predicate on the "passAccuracy" field.
func PassAccuracyGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPassAccuracy, v))
}

// PassAccuracyLT applies the LT predicate on the "passAccuracy" field.
func PassAccuracyLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPassAccuracy, v))
}

// PassAccuracyLTE applies the LTE predicate on the "passAccuracy" field.
func PassAccuracyLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPassAccuracy, v))
}

// TotalTackleEQ applies the EQ predicate on the "totalTackle" field.
func TotalTackleEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalTackle, v))
}

// TotalTackleNEQ applies the NEQ predicate on the "totalTackle" field.
func TotalTackleNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldTotalTackle, v))
}

// TotalTackleIn applies the In predicate on the "totalTackle" field.
func TotalTackleIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldTotalTackle, vs...))
}

// TotalTackleNotIn applies the NotIn predicate on the "totalTackle" field.
func TotalTackleNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldTotalTackle, vs...))
}

// TotalTackleGT applies the GT predicate on the "totalTackle" field.
func TotalTackleGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldTotalTackle, v))
}

// TotalTackleGTE applies the GTE predicate on the "totalTackle" field.
func TotalTackleGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldTotalTackle, v))
}

// TotalTackleLT applies the LT predicate on the "totalTackle" field.
func TotalTackleLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldTotalTackle, v))
}

// TotalTackleLTE applies the LTE predicate on the "totalTackle" field.
func TotalTackleLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldTotalTackle, v))
}

// BlocksEQ applies the EQ predicate on the "blocks" field.
func BlocksEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldBlocks, v))
}

// BlocksNEQ applies the NEQ predicate on the "blocks" field.
func BlocksNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldBlocks, v))
}

// BlocksIn applies the In predicate on the "blocks" field.
func BlocksIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldBlocks, vs...))
}

// BlocksNotIn applies the NotIn predicate on the "blocks" field.
func BlocksNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldBlocks, vs...))
}

// BlocksGT applies the GT predicate on the "blocks" field.
func BlocksGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldBlocks, v))
}

// BlocksGTE applies the GTE predicate on the "blocks" field.
func BlocksGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldBlocks, v))
}

// BlocksLT applies the LT predicate on the "blocks" field.
func BlocksLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldBlocks, v))
}

// BlocksLTE applies the LTE predicate on the "blocks" field.
func BlocksLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldBlocks, v))
}

// InterceptionsEQ applies the EQ predicate on the "interceptions" field.
func InterceptionsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInterceptions, v))
}

// InterceptionsNEQ applies the NEQ predicate on the "interceptions" field.
func InterceptionsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldInterceptions, v))
}

// InterceptionsIn applies the In predicate on the "interceptions" field.
func InterceptionsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldInterceptions, vs...))
}

// InterceptionsNotIn applies the NotIn predicate on the "interceptions" field.
func InterceptionsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldInterceptions, vs...))
}

// InterceptionsGT applies the GT predicate on the "interceptions" field.
func InterceptionsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldInterceptions, v))
}

// InterceptionsGTE applies the GTE predicate on the "interceptions" field.
func InterceptionsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldInterceptions, v))
}

// InterceptionsLT applies the LT predicate on the "interceptions" field.
func InterceptionsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldInterceptions, v))
}

// InterceptionsLTE applies the LTE predicate on the "interceptions" field.
func InterceptionsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldInterceptions, v))
}

// DuelsTotalEQ applies the EQ predicate on the "duelsTotal" field.
func DuelsTotalEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDuelsTotal, v))
}

// DuelsTotalNEQ applies the NEQ predicate on the "duelsTotal" field.
func DuelsTotalNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldDuelsTotal, v))
}

// DuelsTotalIn applies the In predicate on the "duelsTotal" field.
func DuelsTotalIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldDuelsTotal, vs...))
}

// DuelsTotalNotIn applies the NotIn predicate on the "duelsTotal" field.
func DuelsTotalNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldDuelsTotal, vs...))
}

// DuelsTotalGT applies the GT predicate on the "duelsTotal" field.
func DuelsTotalGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldDuelsTotal, v))
}

// DuelsTotalGTE applies the GTE predicate on the "duelsTotal" field.
func DuelsTotalGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldDuelsTotal, v))
}

// DuelsTotalLT applies the LT predicate on the "duelsTotal" field.
func DuelsTotalLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldDuelsTotal, v))
}

// DuelsTotalLTE applies the LTE predicate on the "duelsTotal" field.
func DuelsTotalLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldDuelsTotal, v))
}

// DuelsWonEQ applies the EQ predicate on the "duelsWon" field.
func DuelsWonEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDuelsWon, v))
}

// DuelsWonNEQ applies the NEQ predicate on the "duelsWon" field.
func DuelsWonNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldDuelsWon, v))
}

// DuelsWonIn applies the In predicate on the "duelsWon" field.
func DuelsWonIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldDuelsWon, vs...))
}

// DuelsWonNotIn applies the NotIn predicate on the "duelsWon" field.
func DuelsWonNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldDuelsWon, vs...))
}

// DuelsWonGT applies the GT predicate on the "duelsWon" field.
func DuelsWonGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldDuelsWon, v))
}

// DuelsWonGTE applies the GTE predicate on the "duelsWon" field.
func DuelsWonGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldDuelsWon, v))
}

// DuelsWonLT applies the LT predicate on the "duelsWon" field.
func DuelsWonLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldDuelsWon, v))
}

// DuelsWonLTE applies the LTE predicate on the "duelsWon" field.
func DuelsWonLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldDuelsWon, v))
}

// HasBirth applies the HasEdge predicate on the "birth" edge.
func HasBirth() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BirthTable, BirthColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBirthWith applies the HasEdge predicate on the "birth" edge with a given conditions (other predicates).
func HasBirthWith(preds ...predicate.Birth) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newBirthStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNationality applies the HasEdge predicate on the "nationality" edge.
func HasNationality() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NationalityTable, NationalityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNationalityWith applies the HasEdge predicate on the "nationality" edge with a given conditions (other predicates).
func HasNationalityWith(preds ...predicate.Country) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newNationalityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSquad applies the HasEdge predicate on the "squad" edge.
func HasSquad() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SquadTable, SquadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSquadWith applies the HasEdge predicate on the "squad" edge with a given conditions (other predicates).
func HasSquadWith(preds ...predicate.Squad) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newSquadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerEvents applies the HasEdge predicate on the "playerEvents" edge.
func HasPlayerEvents() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayerEventsTable, PlayerEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerEventsWith applies the HasEdge predicate on the "playerEvents" edge with a given conditions (other predicates).
func HasPlayerEventsWith(preds ...predicate.FixtureEvents) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newPlayerEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMatchPlayer applies the HasEdge predicate on the "matchPlayer" edge.
func HasMatchPlayer() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayerTable, MatchPlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchPlayerWith applies the HasEdge predicate on the "matchPlayer" edge with a given conditions (other predicates).
func HasMatchPlayerWith(preds ...predicate.MatchPlayer) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newMatchPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssistEvents applies the HasEdge predicate on the "assistEvents" edge.
func HasAssistEvents() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssistEventsTable, AssistEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssistEventsWith applies the HasEdge predicate on the "assistEvents" edge with a given conditions (other predicates).
func HasAssistEventsWith(preds ...predicate.FixtureEvents) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newAssistEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerStats applies the HasEdge predicate on the "playerStats" edge.
func HasPlayerStats() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayerStatsTable, PlayerStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatsWith applies the HasEdge predicate on the "playerStats" edge with a given conditions (other predicates).
func HasPlayerStatsWith(preds ...predicate.PlayerStats) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newPlayerStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Player) predicate.Player {
	return predicate.Player(sql.NotPredicates(p))
}
