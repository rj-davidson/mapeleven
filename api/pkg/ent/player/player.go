// Code generated by ent, DO NOT EDIT.

package player

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldApiFootballId holds the string denoting the apifootballid field in the database.
	FieldApiFootballId = "api_football_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldInjured holds the string denoting the injured field in the database.
	FieldInjured = "injured"
	// FieldPhoto holds the string denoting the photo field in the database.
	FieldPhoto = "photo"
	// FieldLastUpdated holds the string denoting the lastupdated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgeBirth holds the string denoting the birth edge name in mutations.
	EdgeBirth = "birth"
	// EdgeNationality holds the string denoting the nationality edge name in mutations.
	EdgeNationality = "nationality"
	// EdgeSquad holds the string denoting the squad edge name in mutations.
	EdgeSquad = "squad"
	// EdgePlayerEvents holds the string denoting the playerevents edge name in mutations.
	EdgePlayerEvents = "playerEvents"
	// EdgeMatchPlayer holds the string denoting the matchplayer edge name in mutations.
	EdgeMatchPlayer = "matchPlayer"
	// EdgeAssistEvents holds the string denoting the assistevents edge name in mutations.
	EdgeAssistEvents = "assistEvents"
	// Table holds the table name of the player in the database.
	Table = "players"
	// BirthTable is the table that holds the birth relation/edge.
	BirthTable = "players"
	// BirthInverseTable is the table name for the Birth entity.
	// It exists in this package in order to avoid circular dependency with the "birth" package.
	BirthInverseTable = "births"
	// BirthColumn is the table column denoting the birth relation/edge.
	BirthColumn = "birth_player"
	// NationalityTable is the table that holds the nationality relation/edge.
	NationalityTable = "players"
	// NationalityInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	NationalityInverseTable = "countries"
	// NationalityColumn is the table column denoting the nationality relation/edge.
	NationalityColumn = "country_players"
	// SquadTable is the table that holds the squad relation/edge.
	SquadTable = "squads"
	// SquadInverseTable is the table name for the Squad entity.
	// It exists in this package in order to avoid circular dependency with the "squad" package.
	SquadInverseTable = "squads"
	// SquadColumn is the table column denoting the squad relation/edge.
	SquadColumn = "player_squad"
	// PlayerEventsTable is the table that holds the playerEvents relation/edge.
	PlayerEventsTable = "fixture_events"
	// PlayerEventsInverseTable is the table name for the FixtureEvents entity.
	// It exists in this package in order to avoid circular dependency with the "fixtureevents" package.
	PlayerEventsInverseTable = "fixture_events"
	// PlayerEventsColumn is the table column denoting the playerEvents relation/edge.
	PlayerEventsColumn = "player_player_events"
	// MatchPlayerTable is the table that holds the matchPlayer relation/edge.
	MatchPlayerTable = "match_players"
	// MatchPlayerInverseTable is the table name for the MatchPlayer entity.
	// It exists in this package in order to avoid circular dependency with the "matchplayer" package.
	MatchPlayerInverseTable = "match_players"
	// MatchPlayerColumn is the table column denoting the matchPlayer relation/edge.
	MatchPlayerColumn = "player_match_player"
	// AssistEventsTable is the table that holds the assistEvents relation/edge.
	AssistEventsTable = "fixture_events"
	// AssistEventsInverseTable is the table name for the FixtureEvents entity.
	// It exists in this package in order to avoid circular dependency with the "fixtureevents" package.
	AssistEventsInverseTable = "fixture_events"
	// AssistEventsColumn is the table column denoting the assistEvents relation/edge.
	AssistEventsColumn = "player_assist_events"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldApiFootballId,
	FieldName,
	FieldFirstname,
	FieldLastname,
	FieldAge,
	FieldHeight,
	FieldWeight,
	FieldInjured,
	FieldPhoto,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"birth_player",
	"country_players",
	"team_players",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastUpdated holds the default value on creation for the "lastUpdated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "lastUpdated" field.
	UpdateDefaultLastUpdated func() time.Time
)

// OrderOption defines the ordering options for the Player queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByApiFootballId orders the results by the ApiFootballId field.
func ByApiFootballId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApiFootballId, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFirstname orders the results by the firstname field.
func ByFirstname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstname, opts...).ToFunc()
}

// ByLastname orders the results by the lastname field.
func ByLastname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastname, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByInjured orders the results by the injured field.
func ByInjured(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInjured, opts...).ToFunc()
}

// ByPhoto orders the results by the photo field.
func ByPhoto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoto, opts...).ToFunc()
}

// ByLastUpdated orders the results by the lastUpdated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByBirthField orders the results by birth field.
func ByBirthField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBirthStep(), sql.OrderByField(field, opts...))
	}
}

// ByNationalityField orders the results by nationality field.
func ByNationalityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNationalityStep(), sql.OrderByField(field, opts...))
	}
}

// BySquadCount orders the results by squad count.
func BySquadCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSquadStep(), opts...)
	}
}

// BySquad orders the results by squad terms.
func BySquad(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSquadStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlayerEventsCount orders the results by playerEvents count.
func ByPlayerEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerEventsStep(), opts...)
	}
}

// ByPlayerEvents orders the results by playerEvents terms.
func ByPlayerEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMatchPlayerCount orders the results by matchPlayer count.
func ByMatchPlayerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchPlayerStep(), opts...)
	}
}

// ByMatchPlayer orders the results by matchPlayer terms.
func ByMatchPlayer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchPlayerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssistEventsCount orders the results by assistEvents count.
func ByAssistEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssistEventsStep(), opts...)
	}
}

// ByAssistEvents orders the results by assistEvents terms.
func ByAssistEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssistEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBirthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BirthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BirthTable, BirthColumn),
	)
}
func newNationalityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NationalityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NationalityTable, NationalityColumn),
	)
}
func newSquadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SquadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SquadTable, SquadColumn),
	)
}
func newPlayerEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlayerEventsTable, PlayerEventsColumn),
	)
}
func newMatchPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchPlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayerTable, MatchPlayerColumn),
	)
}
func newAssistEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssistEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssistEventsTable, AssistEventsColumn),
	)
}
