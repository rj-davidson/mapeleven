// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/club"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixture"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixtureevents"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixturelineups"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/playerstats"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/season"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/squad"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/standings"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsbiggest"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tscards"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tscleansheet"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsfailedtoscore"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsfixtures"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsgoals"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tslineups"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tspenalty"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamCreate is the builder for creating a Team entity.
type TeamCreate struct {
	config
	mutation *TeamMutation
	hooks    []Hook
}

// SetForm sets the "form" field.
func (tc *TeamCreate) SetForm(s string) *TeamCreate {
	tc.mutation.SetForm(s)
	return tc
}

// SetNillableForm sets the "form" field if the given value is not nil.
func (tc *TeamCreate) SetNillableForm(s *string) *TeamCreate {
	if s != nil {
		tc.SetForm(*s)
	}
	return tc
}

// SetLastUpdated sets the "lastUpdated" field.
func (tc *TeamCreate) SetLastUpdated(t time.Time) *TeamCreate {
	tc.mutation.SetLastUpdated(t)
	return tc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (tc *TeamCreate) SetNillableLastUpdated(t *time.Time) *TeamCreate {
	if t != nil {
		tc.SetLastUpdated(*t)
	}
	return tc
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (tc *TeamCreate) SetSeasonID(id int) *TeamCreate {
	tc.mutation.SetSeasonID(id)
	return tc
}

// SetNillableSeasonID sets the "season" edge to the Season entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableSeasonID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetSeasonID(*id)
	}
	return tc
}

// SetSeason sets the "season" edge to the Season entity.
func (tc *TeamCreate) SetSeason(s *Season) *TeamCreate {
	return tc.SetSeasonID(s.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (tc *TeamCreate) SetClubID(id int) *TeamCreate {
	tc.mutation.SetClubID(id)
	return tc
}

// SetClub sets the "club" edge to the Club entity.
func (tc *TeamCreate) SetClub(c *Club) *TeamCreate {
	return tc.SetClubID(c.ID)
}

// AddPlayerStatIDs adds the "playerStats" edge to the PlayerStats entity by IDs.
func (tc *TeamCreate) AddPlayerStatIDs(ids ...int) *TeamCreate {
	tc.mutation.AddPlayerStatIDs(ids...)
	return tc
}

// AddPlayerStats adds the "playerStats" edges to the PlayerStats entity.
func (tc *TeamCreate) AddPlayerStats(p ...*PlayerStats) *TeamCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddPlayerStatIDs(ids...)
}

// AddStandingIDs adds the "standings" edge to the Standings entity by IDs.
func (tc *TeamCreate) AddStandingIDs(ids ...int) *TeamCreate {
	tc.mutation.AddStandingIDs(ids...)
	return tc
}

// AddStandings adds the "standings" edges to the Standings entity.
func (tc *TeamCreate) AddStandings(s ...*Standings) *TeamCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddStandingIDs(ids...)
}

// AddHomeFixtureIDs adds the "homeFixtures" edge to the Fixture entity by IDs.
func (tc *TeamCreate) AddHomeFixtureIDs(ids ...int) *TeamCreate {
	tc.mutation.AddHomeFixtureIDs(ids...)
	return tc
}

// AddHomeFixtures adds the "homeFixtures" edges to the Fixture entity.
func (tc *TeamCreate) AddHomeFixtures(f ...*Fixture) *TeamCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tc.AddHomeFixtureIDs(ids...)
}

// AddAwayFixtureIDs adds the "awayFixtures" edge to the Fixture entity by IDs.
func (tc *TeamCreate) AddAwayFixtureIDs(ids ...int) *TeamCreate {
	tc.mutation.AddAwayFixtureIDs(ids...)
	return tc
}

// AddAwayFixtures adds the "awayFixtures" edges to the Fixture entity.
func (tc *TeamCreate) AddAwayFixtures(f ...*Fixture) *TeamCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tc.AddAwayFixtureIDs(ids...)
}

// AddTeamFixtureEventIDs adds the "teamFixtureEvents" edge to the FixtureEvents entity by IDs.
func (tc *TeamCreate) AddTeamFixtureEventIDs(ids ...int) *TeamCreate {
	tc.mutation.AddTeamFixtureEventIDs(ids...)
	return tc
}

// AddTeamFixtureEvents adds the "teamFixtureEvents" edges to the FixtureEvents entity.
func (tc *TeamCreate) AddTeamFixtureEvents(f ...*FixtureEvents) *TeamCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tc.AddTeamFixtureEventIDs(ids...)
}

// AddFixtureLineupIDs adds the "fixtureLineups" edge to the FixtureLineups entity by IDs.
func (tc *TeamCreate) AddFixtureLineupIDs(ids ...int) *TeamCreate {
	tc.mutation.AddFixtureLineupIDs(ids...)
	return tc
}

// AddFixtureLineups adds the "fixtureLineups" edges to the FixtureLineups entity.
func (tc *TeamCreate) AddFixtureLineups(f ...*FixtureLineups) *TeamCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tc.AddFixtureLineupIDs(ids...)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (tc *TeamCreate) AddSquadIDs(ids ...int) *TeamCreate {
	tc.mutation.AddSquadIDs(ids...)
	return tc
}

// AddSquad adds the "squad" edges to the Squad entity.
func (tc *TeamCreate) AddSquad(s ...*Squad) *TeamCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddSquadIDs(ids...)
}

// SetBiggestStatsID sets the "biggest_stats" edge to the TSBiggest entity by ID.
func (tc *TeamCreate) SetBiggestStatsID(id int) *TeamCreate {
	tc.mutation.SetBiggestStatsID(id)
	return tc
}

// SetNillableBiggestStatsID sets the "biggest_stats" edge to the TSBiggest entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableBiggestStatsID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetBiggestStatsID(*id)
	}
	return tc
}

// SetBiggestStats sets the "biggest_stats" edge to the TSBiggest entity.
func (tc *TeamCreate) SetBiggestStats(t *TSBiggest) *TeamCreate {
	return tc.SetBiggestStatsID(t.ID)
}

// SetCardsStatsID sets the "cards_stats" edge to the TSCards entity by ID.
func (tc *TeamCreate) SetCardsStatsID(id int) *TeamCreate {
	tc.mutation.SetCardsStatsID(id)
	return tc
}

// SetNillableCardsStatsID sets the "cards_stats" edge to the TSCards entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableCardsStatsID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetCardsStatsID(*id)
	}
	return tc
}

// SetCardsStats sets the "cards_stats" edge to the TSCards entity.
func (tc *TeamCreate) SetCardsStats(t *TSCards) *TeamCreate {
	return tc.SetCardsStatsID(t.ID)
}

// SetCleanSheetStatsID sets the "clean_sheet_stats" edge to the TSCleanSheet entity by ID.
func (tc *TeamCreate) SetCleanSheetStatsID(id int) *TeamCreate {
	tc.mutation.SetCleanSheetStatsID(id)
	return tc
}

// SetNillableCleanSheetStatsID sets the "clean_sheet_stats" edge to the TSCleanSheet entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableCleanSheetStatsID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetCleanSheetStatsID(*id)
	}
	return tc
}

// SetCleanSheetStats sets the "clean_sheet_stats" edge to the TSCleanSheet entity.
func (tc *TeamCreate) SetCleanSheetStats(t *TSCleanSheet) *TeamCreate {
	return tc.SetCleanSheetStatsID(t.ID)
}

// SetFailedToScoreStatsID sets the "failed_to_score_stats" edge to the TSFailedToScore entity by ID.
func (tc *TeamCreate) SetFailedToScoreStatsID(id int) *TeamCreate {
	tc.mutation.SetFailedToScoreStatsID(id)
	return tc
}

// SetNillableFailedToScoreStatsID sets the "failed_to_score_stats" edge to the TSFailedToScore entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableFailedToScoreStatsID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetFailedToScoreStatsID(*id)
	}
	return tc
}

// SetFailedToScoreStats sets the "failed_to_score_stats" edge to the TSFailedToScore entity.
func (tc *TeamCreate) SetFailedToScoreStats(t *TSFailedToScore) *TeamCreate {
	return tc.SetFailedToScoreStatsID(t.ID)
}

// SetFixturesStatsID sets the "fixtures_stats" edge to the TSFixtures entity by ID.
func (tc *TeamCreate) SetFixturesStatsID(id int) *TeamCreate {
	tc.mutation.SetFixturesStatsID(id)
	return tc
}

// SetNillableFixturesStatsID sets the "fixtures_stats" edge to the TSFixtures entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableFixturesStatsID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetFixturesStatsID(*id)
	}
	return tc
}

// SetFixturesStats sets the "fixtures_stats" edge to the TSFixtures entity.
func (tc *TeamCreate) SetFixturesStats(t *TSFixtures) *TeamCreate {
	return tc.SetFixturesStatsID(t.ID)
}

// SetGoalsStatsID sets the "goals_stats" edge to the TSGoals entity by ID.
func (tc *TeamCreate) SetGoalsStatsID(id int) *TeamCreate {
	tc.mutation.SetGoalsStatsID(id)
	return tc
}

// SetNillableGoalsStatsID sets the "goals_stats" edge to the TSGoals entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableGoalsStatsID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetGoalsStatsID(*id)
	}
	return tc
}

// SetGoalsStats sets the "goals_stats" edge to the TSGoals entity.
func (tc *TeamCreate) SetGoalsStats(t *TSGoals) *TeamCreate {
	return tc.SetGoalsStatsID(t.ID)
}

// AddLineupIDs adds the "lineups" edge to the TSLineups entity by IDs.
func (tc *TeamCreate) AddLineupIDs(ids ...int) *TeamCreate {
	tc.mutation.AddLineupIDs(ids...)
	return tc
}

// AddLineups adds the "lineups" edges to the TSLineups entity.
func (tc *TeamCreate) AddLineups(t ...*TSLineups) *TeamCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddLineupIDs(ids...)
}

// SetPenaltyStatsID sets the "penalty_stats" edge to the TSPenalty entity by ID.
func (tc *TeamCreate) SetPenaltyStatsID(id int) *TeamCreate {
	tc.mutation.SetPenaltyStatsID(id)
	return tc
}

// SetNillablePenaltyStatsID sets the "penalty_stats" edge to the TSPenalty entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillablePenaltyStatsID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetPenaltyStatsID(*id)
	}
	return tc
}

// SetPenaltyStats sets the "penalty_stats" edge to the TSPenalty entity.
func (tc *TeamCreate) SetPenaltyStats(t *TSPenalty) *TeamCreate {
	return tc.SetPenaltyStatsID(t.ID)
}

// Mutation returns the TeamMutation object of the builder.
func (tc *TeamCreate) Mutation() *TeamMutation {
	return tc.mutation
}

// Save creates the Team in the database.
func (tc *TeamCreate) Save(ctx context.Context) (*Team, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TeamCreate) SaveX(ctx context.Context) *Team {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TeamCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TeamCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TeamCreate) defaults() {
	if _, ok := tc.mutation.LastUpdated(); !ok {
		v := team.DefaultLastUpdated()
		tc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TeamCreate) check() error {
	if _, ok := tc.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club", err: errors.New(`ent: missing required edge "Team.club"`)}
	}
	return nil
}

func (tc *TeamCreate) sqlSave(ctx context.Context) (*Team, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TeamCreate) createSpec() (*Team, *sqlgraph.CreateSpec) {
	var (
		_node = &Team{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(team.Table, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.Form(); ok {
		_spec.SetField(team.FieldForm, field.TypeString, value)
		_node.Form = value
	}
	if value, ok := tc.mutation.LastUpdated(); ok {
		_spec.SetField(team.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := tc.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.SeasonTable,
			Columns: []string{team.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.season_teams = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.ClubTable,
			Columns: []string{team.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.club_team = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PlayerStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PlayerStatsTable,
			Columns: []string{team.PlayerStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.StandingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.StandingsTable,
			Columns: []string{team.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.HomeFixturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HomeFixturesTable,
			Columns: []string{team.HomeFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AwayFixturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.AwayFixturesTable,
			Columns: []string{team.AwayFixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeamFixtureEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.TeamFixtureEventsTable,
			Columns: []string{team.TeamFixtureEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixtureevents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FixtureLineupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.FixtureLineupsTable,
			Columns: []string{team.FixtureLineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.SquadTable,
			Columns: []string{team.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.BiggestStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.BiggestStatsTable,
			Columns: []string{team.BiggestStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsbiggest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CardsStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CardsStatsTable,
			Columns: []string{team.CardsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CleanSheetStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.CleanSheetStatsTable,
			Columns: []string{team.CleanSheetStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tscleansheet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FailedToScoreStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FailedToScoreStatsTable,
			Columns: []string{team.FailedToScoreStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfailedtoscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FixturesStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.FixturesStatsTable,
			Columns: []string{team.FixturesStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsfixtures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.GoalsStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.GoalsStatsTable,
			Columns: []string{team.GoalsStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.LineupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.LineupsTable,
			Columns: []string{team.LineupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tslineups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PenaltyStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   team.PenaltyStatsTable,
			Columns: []string{team.PenaltyStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tspenalty.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeamCreateBulk is the builder for creating many Team entities in bulk.
type TeamCreateBulk struct {
	config
	err      error
	builders []*TeamCreate
}

// Save creates the Team entities in the database.
func (tcb *TeamCreateBulk) Save(ctx context.Context) ([]*Team, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Team, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TeamCreateBulk) SaveX(ctx context.Context) []*Team {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TeamCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TeamCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
