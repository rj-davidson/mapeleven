// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixture"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/league"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/season"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/standings"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeasonCreate is the builder for creating a Season entity.
type SeasonCreate struct {
	config
	mutation *SeasonMutation
	hooks    []Hook
}

// SetSlug sets the "slug" field.
func (sc *SeasonCreate) SetSlug(s string) *SeasonCreate {
	sc.mutation.SetSlug(s)
	return sc
}

// SetYear sets the "year" field.
func (sc *SeasonCreate) SetYear(i int) *SeasonCreate {
	sc.mutation.SetYear(i)
	return sc
}

// SetStartDate sets the "start_date" field.
func (sc *SeasonCreate) SetStartDate(t time.Time) *SeasonCreate {
	sc.mutation.SetStartDate(t)
	return sc
}

// SetEndDate sets the "end_date" field.
func (sc *SeasonCreate) SetEndDate(t time.Time) *SeasonCreate {
	sc.mutation.SetEndDate(t)
	return sc
}

// SetCurrent sets the "current" field.
func (sc *SeasonCreate) SetCurrent(b bool) *SeasonCreate {
	sc.mutation.SetCurrent(b)
	return sc
}

// SetLastUpdated sets the "lastUpdated" field.
func (sc *SeasonCreate) SetLastUpdated(t time.Time) *SeasonCreate {
	sc.mutation.SetLastUpdated(t)
	return sc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableLastUpdated(t *time.Time) *SeasonCreate {
	if t != nil {
		sc.SetLastUpdated(*t)
	}
	return sc
}

// SetLeagueID sets the "league" edge to the League entity by ID.
func (sc *SeasonCreate) SetLeagueID(id int) *SeasonCreate {
	sc.mutation.SetLeagueID(id)
	return sc
}

// SetNillableLeagueID sets the "league" edge to the League entity by ID if the given value is not nil.
func (sc *SeasonCreate) SetNillableLeagueID(id *int) *SeasonCreate {
	if id != nil {
		sc = sc.SetLeagueID(*id)
	}
	return sc
}

// SetLeague sets the "league" edge to the League entity.
func (sc *SeasonCreate) SetLeague(l *League) *SeasonCreate {
	return sc.SetLeagueID(l.ID)
}

// AddFixtureIDs adds the "fixtures" edge to the Fixture entity by IDs.
func (sc *SeasonCreate) AddFixtureIDs(ids ...int) *SeasonCreate {
	sc.mutation.AddFixtureIDs(ids...)
	return sc
}

// AddFixtures adds the "fixtures" edges to the Fixture entity.
func (sc *SeasonCreate) AddFixtures(f ...*Fixture) *SeasonCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return sc.AddFixtureIDs(ids...)
}

// AddStandingIDs adds the "standings" edge to the Standings entity by IDs.
func (sc *SeasonCreate) AddStandingIDs(ids ...int) *SeasonCreate {
	sc.mutation.AddStandingIDs(ids...)
	return sc
}

// AddStandings adds the "standings" edges to the Standings entity.
func (sc *SeasonCreate) AddStandings(s ...*Standings) *SeasonCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddStandingIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (sc *SeasonCreate) AddTeamIDs(ids ...int) *SeasonCreate {
	sc.mutation.AddTeamIDs(ids...)
	return sc
}

// AddTeams adds the "teams" edges to the Team entity.
func (sc *SeasonCreate) AddTeams(t ...*Team) *SeasonCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTeamIDs(ids...)
}

// Mutation returns the SeasonMutation object of the builder.
func (sc *SeasonCreate) Mutation() *SeasonMutation {
	return sc.mutation
}

// Save creates the Season in the database.
func (sc *SeasonCreate) Save(ctx context.Context) (*Season, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SeasonCreate) SaveX(ctx context.Context) *Season {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SeasonCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SeasonCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SeasonCreate) defaults() {
	if _, ok := sc.mutation.LastUpdated(); !ok {
		v := season.DefaultLastUpdated()
		sc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SeasonCreate) check() error {
	if _, ok := sc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Season.slug"`)}
	}
	if _, ok := sc.mutation.Year(); !ok {
		return &ValidationError{Name: "year", err: errors.New(`ent: missing required field "Season.year"`)}
	}
	if _, ok := sc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Season.start_date"`)}
	}
	if _, ok := sc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Season.end_date"`)}
	}
	if _, ok := sc.mutation.Current(); !ok {
		return &ValidationError{Name: "current", err: errors.New(`ent: missing required field "Season.current"`)}
	}
	return nil
}

func (sc *SeasonCreate) sqlSave(ctx context.Context) (*Season, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SeasonCreate) createSpec() (*Season, *sqlgraph.CreateSpec) {
	var (
		_node = &Season{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(season.Table, sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Slug(); ok {
		_spec.SetField(season.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := sc.mutation.Year(); ok {
		_spec.SetField(season.FieldYear, field.TypeInt, value)
		_node.Year = value
	}
	if value, ok := sc.mutation.StartDate(); ok {
		_spec.SetField(season.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := sc.mutation.EndDate(); ok {
		_spec.SetField(season.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := sc.mutation.Current(); ok {
		_spec.SetField(season.FieldCurrent, field.TypeBool, value)
		_node.Current = value
	}
	if value, ok := sc.mutation.LastUpdated(); ok {
		_spec.SetField(season.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := sc.mutation.LeagueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.LeagueTable,
			Columns: []string{season.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.league_season = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FixturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.FixturesTable,
			Columns: []string{season.FixturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.StandingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.StandingsTable,
			Columns: []string{season.StandingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.TeamsTable,
			Columns: []string{season.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeasonCreateBulk is the builder for creating many Season entities in bulk.
type SeasonCreateBulk struct {
	config
	err      error
	builders []*SeasonCreate
}

// Save creates the Season entities in the database.
func (scb *SeasonCreateBulk) Save(ctx context.Context) ([]*Season, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Season, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeasonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SeasonCreateBulk) SaveX(ctx context.Context) []*Season {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SeasonCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SeasonCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
