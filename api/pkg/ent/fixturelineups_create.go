// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixture"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/fixturelineups"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/matchplayer"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/team"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FixtureLineupsCreate is the builder for creating a FixtureLineups entity.
type FixtureLineupsCreate struct {
	config
	mutation *FixtureLineupsMutation
	hooks    []Hook
}

// SetFormation sets the "formation" field.
func (flc *FixtureLineupsCreate) SetFormation(s string) *FixtureLineupsCreate {
	flc.mutation.SetFormation(s)
	return flc
}

// SetLastUpdated sets the "lastUpdated" field.
func (flc *FixtureLineupsCreate) SetLastUpdated(t time.Time) *FixtureLineupsCreate {
	flc.mutation.SetLastUpdated(t)
	return flc
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (flc *FixtureLineupsCreate) SetNillableLastUpdated(t *time.Time) *FixtureLineupsCreate {
	if t != nil {
		flc.SetLastUpdated(*t)
	}
	return flc
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (flc *FixtureLineupsCreate) SetTeamID(id int) *FixtureLineupsCreate {
	flc.mutation.SetTeamID(id)
	return flc
}

// SetTeam sets the "team" edge to the Team entity.
func (flc *FixtureLineupsCreate) SetTeam(t *Team) *FixtureLineupsCreate {
	return flc.SetTeamID(t.ID)
}

// SetFixtureID sets the "fixture" edge to the Fixture entity by ID.
func (flc *FixtureLineupsCreate) SetFixtureID(id int) *FixtureLineupsCreate {
	flc.mutation.SetFixtureID(id)
	return flc
}

// SetFixture sets the "fixture" edge to the Fixture entity.
func (flc *FixtureLineupsCreate) SetFixture(f *Fixture) *FixtureLineupsCreate {
	return flc.SetFixtureID(f.ID)
}

// AddLineupPlayerIDs adds the "lineupPlayer" edge to the MatchPlayer entity by IDs.
func (flc *FixtureLineupsCreate) AddLineupPlayerIDs(ids ...int) *FixtureLineupsCreate {
	flc.mutation.AddLineupPlayerIDs(ids...)
	return flc
}

// AddLineupPlayer adds the "lineupPlayer" edges to the MatchPlayer entity.
func (flc *FixtureLineupsCreate) AddLineupPlayer(m ...*MatchPlayer) *FixtureLineupsCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return flc.AddLineupPlayerIDs(ids...)
}

// Mutation returns the FixtureLineupsMutation object of the builder.
func (flc *FixtureLineupsCreate) Mutation() *FixtureLineupsMutation {
	return flc.mutation
}

// Save creates the FixtureLineups in the database.
func (flc *FixtureLineupsCreate) Save(ctx context.Context) (*FixtureLineups, error) {
	flc.defaults()
	return withHooks(ctx, flc.sqlSave, flc.mutation, flc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (flc *FixtureLineupsCreate) SaveX(ctx context.Context) *FixtureLineups {
	v, err := flc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (flc *FixtureLineupsCreate) Exec(ctx context.Context) error {
	_, err := flc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flc *FixtureLineupsCreate) ExecX(ctx context.Context) {
	if err := flc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (flc *FixtureLineupsCreate) defaults() {
	if _, ok := flc.mutation.LastUpdated(); !ok {
		v := fixturelineups.DefaultLastUpdated()
		flc.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (flc *FixtureLineupsCreate) check() error {
	if _, ok := flc.mutation.Formation(); !ok {
		return &ValidationError{Name: "formation", err: errors.New(`ent: missing required field "FixtureLineups.formation"`)}
	}
	if _, ok := flc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "FixtureLineups.team"`)}
	}
	if _, ok := flc.mutation.FixtureID(); !ok {
		return &ValidationError{Name: "fixture", err: errors.New(`ent: missing required edge "FixtureLineups.fixture"`)}
	}
	return nil
}

func (flc *FixtureLineupsCreate) sqlSave(ctx context.Context) (*FixtureLineups, error) {
	if err := flc.check(); err != nil {
		return nil, err
	}
	_node, _spec := flc.createSpec()
	if err := sqlgraph.CreateNode(ctx, flc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	flc.mutation.id = &_node.ID
	flc.mutation.done = true
	return _node, nil
}

func (flc *FixtureLineupsCreate) createSpec() (*FixtureLineups, *sqlgraph.CreateSpec) {
	var (
		_node = &FixtureLineups{config: flc.config}
		_spec = sqlgraph.NewCreateSpec(fixturelineups.Table, sqlgraph.NewFieldSpec(fixturelineups.FieldID, field.TypeInt))
	)
	if value, ok := flc.mutation.Formation(); ok {
		_spec.SetField(fixturelineups.FieldFormation, field.TypeString, value)
		_node.Formation = value
	}
	if value, ok := flc.mutation.LastUpdated(); ok {
		_spec.SetField(fixturelineups.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := flc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.TeamTable,
			Columns: []string{fixturelineups.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_fixture_lineups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := flc.mutation.FixtureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixturelineups.FixtureTable,
			Columns: []string{fixturelineups.FixtureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fixture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fixture_lineups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := flc.mutation.LineupPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixturelineups.LineupPlayerTable,
			Columns: []string{fixturelineups.LineupPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FixtureLineupsCreateBulk is the builder for creating many FixtureLineups entities in bulk.
type FixtureLineupsCreateBulk struct {
	config
	err      error
	builders []*FixtureLineupsCreate
}

// Save creates the FixtureLineups entities in the database.
func (flcb *FixtureLineupsCreateBulk) Save(ctx context.Context) ([]*FixtureLineups, error) {
	if flcb.err != nil {
		return nil, flcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(flcb.builders))
	nodes := make([]*FixtureLineups, len(flcb.builders))
	mutators := make([]Mutator, len(flcb.builders))
	for i := range flcb.builders {
		func(i int, root context.Context) {
			builder := flcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FixtureLineupsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, flcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, flcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, flcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (flcb *FixtureLineupsCreateBulk) SaveX(ctx context.Context) []*FixtureLineups {
	v, err := flcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (flcb *FixtureLineupsCreateBulk) Exec(ctx context.Context) error {
	_, err := flcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flcb *FixtureLineupsCreateBulk) ExecX(ctx context.Context) {
	if err := flcb.Exec(ctx); err != nil {
		panic(err)
	}
}
