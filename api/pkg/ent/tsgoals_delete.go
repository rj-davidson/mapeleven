// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/predicate"
	"capstone-cs.eng.utah.edu/mapeleven/mapeleven/pkg/ent/tsgoals"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TSGoalsDelete is the builder for deleting a TSGoals entity.
type TSGoalsDelete struct {
	config
	hooks    []Hook
	mutation *TSGoalsMutation
}

// Where appends a list predicates to the TSGoalsDelete builder.
func (tgd *TSGoalsDelete) Where(ps ...predicate.TSGoals) *TSGoalsDelete {
	tgd.mutation.Where(ps...)
	return tgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tgd *TSGoalsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tgd.sqlExec, tgd.mutation, tgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tgd *TSGoalsDelete) ExecX(ctx context.Context) int {
	n, err := tgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tgd *TSGoalsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tsgoals.Table, sqlgraph.NewFieldSpec(tsgoals.FieldID, field.TypeInt))
	if ps := tgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tgd.mutation.done = true
	return affected, err
}

// TSGoalsDeleteOne is the builder for deleting a single TSGoals entity.
type TSGoalsDeleteOne struct {
	tgd *TSGoalsDelete
}

// Where appends a list predicates to the TSGoalsDelete builder.
func (tgdo *TSGoalsDeleteOne) Where(ps ...predicate.TSGoals) *TSGoalsDeleteOne {
	tgdo.tgd.mutation.Where(ps...)
	return tgdo
}

// Exec executes the deletion query.
func (tgdo *TSGoalsDeleteOne) Exec(ctx context.Context) error {
	n, err := tgdo.tgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tsgoals.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tgdo *TSGoalsDeleteOne) ExecX(ctx context.Context) {
	if err := tgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
